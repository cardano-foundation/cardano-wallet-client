-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema ScriptTemplateValue
module Wallet.Types.ScriptTemplateValue where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Wallet.Common
import Wallet.TypeAlias

-- | Defines the object schema located at @components.schemas.ScriptTemplateValue.oneOf@ in the specification.
-- 
-- 
data ScriptTemplateValueOneOf2 = ScriptTemplateValueOneOf2 {
  -- | all: Script primitive for which all signing keys corresponding to all list cosigners\' verification keys are expected to make the script valid.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  scriptTemplateValueOneOf2All :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ScriptTemplateValueOneOf2
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["all" Data.Aeson.Types.ToJSON..= scriptTemplateValueOneOf2All obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["all" Data.Aeson.Types.ToJSON..= scriptTemplateValueOneOf2All obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ScriptTemplateValueOneOf2
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ScriptTemplateValueOneOf2" (\obj -> GHC.Base.pure ScriptTemplateValueOneOf2 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "all"))
-- | Create a new 'ScriptTemplateValueOneOf2' with all required fields.
mkScriptTemplateValueOneOf2 :: [ScriptTemplateValue] -- ^ 'scriptTemplateValueOneOf2All'
  -> ScriptTemplateValueOneOf2
mkScriptTemplateValueOneOf2 scriptTemplateValueOneOf2All = ScriptTemplateValueOneOf2{scriptTemplateValueOneOf2All = scriptTemplateValueOneOf2All}
-- | Defines the object schema located at @components.schemas.ScriptTemplateValue.oneOf@ in the specification.
-- 
-- 
data ScriptTemplateValueOneOf3 = ScriptTemplateValueOneOf3 {
  -- | any: Script primitive for which a signing key corresponding to any of the list cosigners\' verification keys is expected to make the script valid. It is equivalent to \`some\` with \`\"at_least\"=1\`.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  scriptTemplateValueOneOf3Any :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ScriptTemplateValueOneOf3
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["any" Data.Aeson.Types.ToJSON..= scriptTemplateValueOneOf3Any obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["any" Data.Aeson.Types.ToJSON..= scriptTemplateValueOneOf3Any obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ScriptTemplateValueOneOf3
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ScriptTemplateValueOneOf3" (\obj -> GHC.Base.pure ScriptTemplateValueOneOf3 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "any"))
-- | Create a new 'ScriptTemplateValueOneOf3' with all required fields.
mkScriptTemplateValueOneOf3 :: [ScriptTemplateValue] -- ^ 'scriptTemplateValueOneOf3Any'
  -> ScriptTemplateValueOneOf3
mkScriptTemplateValueOneOf3 scriptTemplateValueOneOf3Any = ScriptTemplateValueOneOf3{scriptTemplateValueOneOf3Any = scriptTemplateValueOneOf3Any}
-- | Defines the object schema located at @components.schemas.ScriptTemplateValue.oneOf@ in the specification.
-- 
-- 
data ScriptTemplateValueOneOf4 = ScriptTemplateValueOneOf4 {
  -- | some: Script primitive for which at least a given number of signing keys corresponding to the list cosigners\' verification keys are expected to make the script valid.
  scriptTemplateValueOneOf4Some :: ScriptTemplateValueOneOf4Some
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ScriptTemplateValueOneOf4
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["some" Data.Aeson.Types.ToJSON..= scriptTemplateValueOneOf4Some obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["some" Data.Aeson.Types.ToJSON..= scriptTemplateValueOneOf4Some obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ScriptTemplateValueOneOf4
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ScriptTemplateValueOneOf4" (\obj -> GHC.Base.pure ScriptTemplateValueOneOf4 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "some"))
-- | Create a new 'ScriptTemplateValueOneOf4' with all required fields.
mkScriptTemplateValueOneOf4 :: ScriptTemplateValueOneOf4Some -- ^ 'scriptTemplateValueOneOf4Some'
  -> ScriptTemplateValueOneOf4
mkScriptTemplateValueOneOf4 scriptTemplateValueOneOf4Some = ScriptTemplateValueOneOf4{scriptTemplateValueOneOf4Some = scriptTemplateValueOneOf4Some}
-- | Defines the object schema located at @components.schemas.ScriptTemplateValue.oneOf.properties.some@ in the specification.
-- 
-- Script primitive for which at least a given number of signing keys corresponding to the list cosigners\' verification keys are expected to make the script valid.
data ScriptTemplateValueOneOf4Some = ScriptTemplateValueOneOf4Some {
  -- | at_least
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 255.0
  -- * Minimum  of 1.0
  scriptTemplateValueOneOf4SomeAt_least :: GHC.Types.Int
  -- | from
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  , scriptTemplateValueOneOf4SomeFrom :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ScriptTemplateValueOneOf4Some
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["at_least" Data.Aeson.Types.ToJSON..= scriptTemplateValueOneOf4SomeAt_least obj] : ["from" Data.Aeson.Types.ToJSON..= scriptTemplateValueOneOf4SomeFrom obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["at_least" Data.Aeson.Types.ToJSON..= scriptTemplateValueOneOf4SomeAt_least obj] : ["from" Data.Aeson.Types.ToJSON..= scriptTemplateValueOneOf4SomeFrom obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ScriptTemplateValueOneOf4Some
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ScriptTemplateValueOneOf4Some" (\obj -> (GHC.Base.pure ScriptTemplateValueOneOf4Some GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "at_least")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "from"))
-- | Create a new 'ScriptTemplateValueOneOf4Some' with all required fields.
mkScriptTemplateValueOneOf4Some :: GHC.Types.Int -- ^ 'scriptTemplateValueOneOf4SomeAt_least'
  -> [ScriptTemplateValue] -- ^ 'scriptTemplateValueOneOf4SomeFrom'
  -> ScriptTemplateValueOneOf4Some
mkScriptTemplateValueOneOf4Some scriptTemplateValueOneOf4SomeAt_least scriptTemplateValueOneOf4SomeFrom = ScriptTemplateValueOneOf4Some{scriptTemplateValueOneOf4SomeAt_least = scriptTemplateValueOneOf4SomeAt_least,
                                                                                                                                        scriptTemplateValueOneOf4SomeFrom = scriptTemplateValueOneOf4SomeFrom}
-- | Defines the object schema located at @components.schemas.ScriptTemplateValue.oneOf@ in the specification.
-- 
-- 
data ScriptTemplateValueOneOf5 = ScriptTemplateValueOneOf5 {
  -- | active_from: Transaction is only valid starting at the specified slot number (\`â‰¥ active_from\`).
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  scriptTemplateValueOneOf5Active_from :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ScriptTemplateValueOneOf5
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["active_from" Data.Aeson.Types.ToJSON..= scriptTemplateValueOneOf5Active_from obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["active_from" Data.Aeson.Types.ToJSON..= scriptTemplateValueOneOf5Active_from obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ScriptTemplateValueOneOf5
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ScriptTemplateValueOneOf5" (\obj -> GHC.Base.pure ScriptTemplateValueOneOf5 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active_from"))
-- | Create a new 'ScriptTemplateValueOneOf5' with all required fields.
mkScriptTemplateValueOneOf5 :: GHC.Types.Int -- ^ 'scriptTemplateValueOneOf5Active_from'
  -> ScriptTemplateValueOneOf5
mkScriptTemplateValueOneOf5 scriptTemplateValueOneOf5Active_from = ScriptTemplateValueOneOf5{scriptTemplateValueOneOf5Active_from = scriptTemplateValueOneOf5Active_from}
-- | Defines the object schema located at @components.schemas.ScriptTemplateValue.oneOf@ in the specification.
-- 
-- 
data ScriptTemplateValueOneOf6 = ScriptTemplateValueOneOf6 {
  -- | active_until: Transaction is only valid before the specified slot number (\`\< active_until\`).
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  scriptTemplateValueOneOf6Active_until :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ScriptTemplateValueOneOf6
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["active_until" Data.Aeson.Types.ToJSON..= scriptTemplateValueOneOf6Active_until obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["active_until" Data.Aeson.Types.ToJSON..= scriptTemplateValueOneOf6Active_until obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ScriptTemplateValueOneOf6
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ScriptTemplateValueOneOf6" (\obj -> GHC.Base.pure ScriptTemplateValueOneOf6 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active_until"))
-- | Create a new 'ScriptTemplateValueOneOf6' with all required fields.
mkScriptTemplateValueOneOf6 :: GHC.Types.Int -- ^ 'scriptTemplateValueOneOf6Active_until'
  -> ScriptTemplateValueOneOf6
mkScriptTemplateValueOneOf6 scriptTemplateValueOneOf6Active_until = ScriptTemplateValueOneOf6{scriptTemplateValueOneOf6Active_until = scriptTemplateValueOneOf6Active_until}
-- | Defines the oneOf schema located at @components.schemas.ScriptTemplateValue.oneOf@ in the specification.
-- 
-- 
data ScriptTemplateValueVariants =
   ScriptTemplateValueVariant1 Data.Text.Internal.Text
  | ScriptTemplateValueVariant2 ScriptTemplateValueOneOf2
  | ScriptTemplateValueVariant3 ScriptTemplateValueOneOf3
  | ScriptTemplateValueVariant4 ScriptTemplateValueOneOf4
  | ScriptTemplateValueVariant5 ScriptTemplateValueOneOf5
  | ScriptTemplateValueVariant6 ScriptTemplateValueOneOf6
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ScriptTemplateValueVariants
    where toJSON (ScriptTemplateValueVariant1 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (ScriptTemplateValueVariant2 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (ScriptTemplateValueVariant3 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (ScriptTemplateValueVariant4 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (ScriptTemplateValueVariant5 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (ScriptTemplateValueVariant6 a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON ScriptTemplateValueVariants
    where parseJSON val = case (ScriptTemplateValueVariant1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ScriptTemplateValueVariant2 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ScriptTemplateValueVariant3 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ScriptTemplateValueVariant4 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ScriptTemplateValueVariant5 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ScriptTemplateValueVariant6 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched"))))) of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines an alias for the schema located at @components.schemas.ScriptTemplateValue.oneOf@ in the specification.
-- 
-- 
type ScriptTemplateValue = ScriptTemplateValueVariants
