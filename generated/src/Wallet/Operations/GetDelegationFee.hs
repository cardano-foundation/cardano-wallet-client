-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getDelegationFee
module Wallet.Operations.GetDelegationFee where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Wallet.Common
import Wallet.Types

-- | > GET /wallets/{walletId}/delegation-fees
-- 
-- \<p align=\"right\">status: \<strong>stable\<\/strong>\<\/p>
-- 
-- Estimate fee for joining or leaving a stake pool. Note that it is an
-- estimation because a delegation induces a transaction for which coins
-- have to be selected randomly within the wallet. Because of this randomness,
-- fees can only be estimated.
getDelegationFee :: forall m . Wallet.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ walletId | Constraints: Maximum length of 40, Minimum length of 40
  -> Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response GetDelegationFeeResponse) -- ^ Monadic computation which returns the result of the operation
getDelegationFee walletId = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetDelegationFeeResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetDelegationFeeResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                       GetDelegationFeeResponseBody200)
                                                                                                                                                                       | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetDelegationFeeResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                       GetDelegationFeeResponseBody403)
                                                                                                                                                                       | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetDelegationFeeResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                       GetDelegationFeeResponseBody404)
                                                                                                                                                                       | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 406) (Network.HTTP.Client.Types.responseStatus response) -> GetDelegationFeeResponse406 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                       GetDelegationFeeResponseBody406)
                                                                                                                                                                       | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Wallet.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") ("/wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel walletId)) GHC.Base.<> "/delegation-fees")) GHC.Base.mempty)
-- | Represents a response of the operation 'getDelegationFee'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetDelegationFeeResponseError' is used.
data GetDelegationFeeResponse =
   GetDelegationFeeResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetDelegationFeeResponse200 GetDelegationFeeResponseBody200 -- ^ Ok
  | GetDelegationFeeResponse403 GetDelegationFeeResponseBody403 -- ^ Forbidden
  | GetDelegationFeeResponse404 GetDelegationFeeResponseBody404 -- ^ Not Found
  | GetDelegationFeeResponse406 GetDelegationFeeResponseBody406 -- ^ Not Acceptable
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/delegation-fees.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data GetDelegationFeeResponseBody200 = GetDelegationFeeResponseBody200 {
  -- | deposit: Coins, in Lovelace. Only relates to \'Ada\'. Refer to \`assets\` for multi-assets wallets instead.
  getDelegationFeeResponseBody200Deposit :: GetDelegationFeeResponseBody200Deposit
  -- | estimated_max: Coins, in Lovelace. Only relates to \'Ada\'. Refer to \`assets\` for multi-assets wallets instead.
  , getDelegationFeeResponseBody200Estimated_max :: GetDelegationFeeResponseBody200Estimated_max
  -- | estimated_min: Coins, in Lovelace. Only relates to \'Ada\'. Refer to \`assets\` for multi-assets wallets instead.
  , getDelegationFeeResponseBody200Estimated_min :: GetDelegationFeeResponseBody200Estimated_min
  -- | minimum_coins: A list of minimum coin values that each output in a payment must satisfy. The values themselves depends on two things:
  -- 
  --   - (a) Some updatable protocol parameters fixed by the network.
  --   - (b) The nature of the outputs (i.e. the kind of assets it includes).
  -- 
  -- The list is a direct 1:1 mapping of the requested outputs. Said differently, it has the **same number of items** and **items
  -- are ordered in the same way** as **requested outputs** are ordered. In the case where there\'s no explicitly requested outputs (e.g.
  -- when calculating fee for delegation), this list is empty.
  -- 
  -- For example, an output containing only \`Ada\` may require to be of at least \`1 Ada\`. An output containing only an hypothetical \`AppleCoin\`
  -- may require to also carry a minimum of \`1.2 Ada\`. Note that no matter what, a minimum coin value is always given in Lovelace \/ Ada.
  -- 
  -- > ℹ️ This mechanism is used by the protocol to protect against flooding of the network with worthless assets. By requiring a minimum coin value to every
  -- UTxO, they are given an intrinsic value indexed itself on the value of Ada.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 0 items
  , getDelegationFeeResponseBody200Minimum_coins :: ([GetDelegationFeeResponseBody200Minimum_coins])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetDelegationFeeResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["deposit" Data.Aeson.Types.ToJSON..= getDelegationFeeResponseBody200Deposit obj] : ["estimated_max" Data.Aeson.Types.ToJSON..= getDelegationFeeResponseBody200Estimated_max obj] : ["estimated_min" Data.Aeson.Types.ToJSON..= getDelegationFeeResponseBody200Estimated_min obj] : ["minimum_coins" Data.Aeson.Types.ToJSON..= getDelegationFeeResponseBody200Minimum_coins obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["deposit" Data.Aeson.Types.ToJSON..= getDelegationFeeResponseBody200Deposit obj] : ["estimated_max" Data.Aeson.Types.ToJSON..= getDelegationFeeResponseBody200Estimated_max obj] : ["estimated_min" Data.Aeson.Types.ToJSON..= getDelegationFeeResponseBody200Estimated_min obj] : ["minimum_coins" Data.Aeson.Types.ToJSON..= getDelegationFeeResponseBody200Minimum_coins obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetDelegationFeeResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetDelegationFeeResponseBody200" (\obj -> (((GHC.Base.pure GetDelegationFeeResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "deposit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "estimated_max")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "estimated_min")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "minimum_coins"))
-- | Create a new 'GetDelegationFeeResponseBody200' with all required fields.
mkGetDelegationFeeResponseBody200 :: GetDelegationFeeResponseBody200Deposit -- ^ 'getDelegationFeeResponseBody200Deposit'
  -> GetDelegationFeeResponseBody200Estimated_max -- ^ 'getDelegationFeeResponseBody200Estimated_max'
  -> GetDelegationFeeResponseBody200Estimated_min -- ^ 'getDelegationFeeResponseBody200Estimated_min'
  -> [GetDelegationFeeResponseBody200Minimum_coins] -- ^ 'getDelegationFeeResponseBody200Minimum_coins'
  -> GetDelegationFeeResponseBody200
mkGetDelegationFeeResponseBody200 getDelegationFeeResponseBody200Deposit getDelegationFeeResponseBody200Estimated_max getDelegationFeeResponseBody200Estimated_min getDelegationFeeResponseBody200Minimum_coins = GetDelegationFeeResponseBody200{getDelegationFeeResponseBody200Deposit = getDelegationFeeResponseBody200Deposit,
                                                                                                                                                                                                                                                  getDelegationFeeResponseBody200Estimated_max = getDelegationFeeResponseBody200Estimated_max,
                                                                                                                                                                                                                                                  getDelegationFeeResponseBody200Estimated_min = getDelegationFeeResponseBody200Estimated_min,
                                                                                                                                                                                                                                                  getDelegationFeeResponseBody200Minimum_coins = getDelegationFeeResponseBody200Minimum_coins}
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/delegation-fees.GET.responses.200.content.application\/json.schema.properties.deposit@ in the specification.
-- 
-- Coins, in Lovelace. Only relates to \'Ada\'. Refer to \`assets\` for multi-assets wallets instead.
data GetDelegationFeeResponseBody200Deposit = GetDelegationFeeResponseBody200Deposit {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  getDelegationFeeResponseBody200DepositQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetDelegationFeeResponseBody200Deposit
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= getDelegationFeeResponseBody200DepositQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= getDelegationFeeResponseBody200DepositQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetDelegationFeeResponseBody200Deposit
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetDelegationFeeResponseBody200Deposit" (\obj -> GHC.Base.pure GetDelegationFeeResponseBody200Deposit GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'GetDelegationFeeResponseBody200Deposit' with all required fields.
mkGetDelegationFeeResponseBody200Deposit :: GHC.Types.Int -- ^ 'getDelegationFeeResponseBody200DepositQuantity'
  -> GetDelegationFeeResponseBody200Deposit
mkGetDelegationFeeResponseBody200Deposit getDelegationFeeResponseBody200DepositQuantity = GetDelegationFeeResponseBody200Deposit{getDelegationFeeResponseBody200DepositQuantity = getDelegationFeeResponseBody200DepositQuantity}
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/delegation-fees.GET.responses.200.content.application\/json.schema.properties.estimated_max@ in the specification.
-- 
-- Coins, in Lovelace. Only relates to \'Ada\'. Refer to \`assets\` for multi-assets wallets instead.
data GetDelegationFeeResponseBody200Estimated_max = GetDelegationFeeResponseBody200Estimated_max {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  getDelegationFeeResponseBody200Estimated_maxQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetDelegationFeeResponseBody200Estimated_max
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= getDelegationFeeResponseBody200Estimated_maxQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= getDelegationFeeResponseBody200Estimated_maxQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetDelegationFeeResponseBody200Estimated_max
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetDelegationFeeResponseBody200Estimated_max" (\obj -> GHC.Base.pure GetDelegationFeeResponseBody200Estimated_max GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'GetDelegationFeeResponseBody200Estimated_max' with all required fields.
mkGetDelegationFeeResponseBody200Estimated_max :: GHC.Types.Int -- ^ 'getDelegationFeeResponseBody200Estimated_maxQuantity'
  -> GetDelegationFeeResponseBody200Estimated_max
mkGetDelegationFeeResponseBody200Estimated_max getDelegationFeeResponseBody200Estimated_maxQuantity = GetDelegationFeeResponseBody200Estimated_max{getDelegationFeeResponseBody200Estimated_maxQuantity = getDelegationFeeResponseBody200Estimated_maxQuantity}
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/delegation-fees.GET.responses.200.content.application\/json.schema.properties.estimated_min@ in the specification.
-- 
-- Coins, in Lovelace. Only relates to \'Ada\'. Refer to \`assets\` for multi-assets wallets instead.
data GetDelegationFeeResponseBody200Estimated_min = GetDelegationFeeResponseBody200Estimated_min {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  getDelegationFeeResponseBody200Estimated_minQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetDelegationFeeResponseBody200Estimated_min
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= getDelegationFeeResponseBody200Estimated_minQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= getDelegationFeeResponseBody200Estimated_minQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetDelegationFeeResponseBody200Estimated_min
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetDelegationFeeResponseBody200Estimated_min" (\obj -> GHC.Base.pure GetDelegationFeeResponseBody200Estimated_min GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'GetDelegationFeeResponseBody200Estimated_min' with all required fields.
mkGetDelegationFeeResponseBody200Estimated_min :: GHC.Types.Int -- ^ 'getDelegationFeeResponseBody200Estimated_minQuantity'
  -> GetDelegationFeeResponseBody200Estimated_min
mkGetDelegationFeeResponseBody200Estimated_min getDelegationFeeResponseBody200Estimated_minQuantity = GetDelegationFeeResponseBody200Estimated_min{getDelegationFeeResponseBody200Estimated_minQuantity = getDelegationFeeResponseBody200Estimated_minQuantity}
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/delegation-fees.GET.responses.200.content.application\/json.schema.properties.minimum_coins.items@ in the specification.
-- 
-- Coins, in Lovelace. Only relates to \'Ada\'. Refer to \`assets\` for multi-assets wallets instead.
data GetDelegationFeeResponseBody200Minimum_coins = GetDelegationFeeResponseBody200Minimum_coins {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  getDelegationFeeResponseBody200Minimum_coinsQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetDelegationFeeResponseBody200Minimum_coins
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= getDelegationFeeResponseBody200Minimum_coinsQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= getDelegationFeeResponseBody200Minimum_coinsQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetDelegationFeeResponseBody200Minimum_coins
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetDelegationFeeResponseBody200Minimum_coins" (\obj -> GHC.Base.pure GetDelegationFeeResponseBody200Minimum_coins GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'GetDelegationFeeResponseBody200Minimum_coins' with all required fields.
mkGetDelegationFeeResponseBody200Minimum_coins :: GHC.Types.Int -- ^ 'getDelegationFeeResponseBody200Minimum_coinsQuantity'
  -> GetDelegationFeeResponseBody200Minimum_coins
mkGetDelegationFeeResponseBody200Minimum_coins getDelegationFeeResponseBody200Minimum_coinsQuantity = GetDelegationFeeResponseBody200Minimum_coins{getDelegationFeeResponseBody200Minimum_coinsQuantity = getDelegationFeeResponseBody200Minimum_coinsQuantity}
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/delegation-fees.GET.responses.403.content.application\/json.schema@ in the specification.
-- 
-- 
data GetDelegationFeeResponseBody403 = GetDelegationFeeResponseBody403 {
  -- | message: May occur when a transaction can\'t be balanced for fees.
  getDelegationFeeResponseBody403Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetDelegationFeeResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= getDelegationFeeResponseBody403Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "cannot_cover_fee"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= getDelegationFeeResponseBody403Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "cannot_cover_fee"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetDelegationFeeResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetDelegationFeeResponseBody403" (\obj -> GHC.Base.pure GetDelegationFeeResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'GetDelegationFeeResponseBody403' with all required fields.
mkGetDelegationFeeResponseBody403 :: Data.Text.Internal.Text -- ^ 'getDelegationFeeResponseBody403Message'
  -> GetDelegationFeeResponseBody403
mkGetDelegationFeeResponseBody403 getDelegationFeeResponseBody403Message = GetDelegationFeeResponseBody403{getDelegationFeeResponseBody403Message = getDelegationFeeResponseBody403Message}
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/delegation-fees.GET.responses.404.content.application\/json.schema@ in the specification.
-- 
-- 
data GetDelegationFeeResponseBody404 = GetDelegationFeeResponseBody404 {
  -- | message: May occur when a given walletId does not match with any known
  -- wallets (because it has been deleted, or has never existed).
  getDelegationFeeResponseBody404Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetDelegationFeeResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= getDelegationFeeResponseBody404Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "no_such_wallet"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= getDelegationFeeResponseBody404Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "no_such_wallet"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetDelegationFeeResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetDelegationFeeResponseBody404" (\obj -> GHC.Base.pure GetDelegationFeeResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'GetDelegationFeeResponseBody404' with all required fields.
mkGetDelegationFeeResponseBody404 :: Data.Text.Internal.Text -- ^ 'getDelegationFeeResponseBody404Message'
  -> GetDelegationFeeResponseBody404
mkGetDelegationFeeResponseBody404 getDelegationFeeResponseBody404Message = GetDelegationFeeResponseBody404{getDelegationFeeResponseBody404Message = getDelegationFeeResponseBody404Message}
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/delegation-fees.GET.responses.406.content.application\/json.schema@ in the specification.
-- 
-- 
data GetDelegationFeeResponseBody406 = GetDelegationFeeResponseBody406 {
  -- | message: May occur when providing an invalid \'Accept\' header.
  getDelegationFeeResponseBody406Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetDelegationFeeResponseBody406
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= getDelegationFeeResponseBody406Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "not_acceptable"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= getDelegationFeeResponseBody406Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "not_acceptable"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetDelegationFeeResponseBody406
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetDelegationFeeResponseBody406" (\obj -> GHC.Base.pure GetDelegationFeeResponseBody406 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'GetDelegationFeeResponseBody406' with all required fields.
mkGetDelegationFeeResponseBody406 :: Data.Text.Internal.Text -- ^ 'getDelegationFeeResponseBody406Message'
  -> GetDelegationFeeResponseBody406
mkGetDelegationFeeResponseBody406 getDelegationFeeResponseBody406Message = GetDelegationFeeResponseBody406{getDelegationFeeResponseBody406Message = getDelegationFeeResponseBody406Message}
-- | > GET /wallets/{walletId}/delegation-fees
-- 
-- The same as 'getDelegationFee' but accepts an explicit configuration.
getDelegationFeeWithConfiguration :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ walletId | Constraints: Maximum length of 40, Minimum length of 40
  -> m (Network.HTTP.Client.Types.Response GetDelegationFeeResponse) -- ^ Monadic computation which returns the result of the operation
getDelegationFeeWithConfiguration config
                                  walletId = GHC.Base.fmap (\response_5 -> GHC.Base.fmap (Data.Either.either GetDelegationFeeResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetDelegationFeeResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                        GetDelegationFeeResponseBody200)
                                                                                                                                                                                        | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> GetDelegationFeeResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                        GetDelegationFeeResponseBody403)
                                                                                                                                                                                        | (\status_8 -> Network.HTTP.Types.Status.statusCode status_8 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetDelegationFeeResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                        GetDelegationFeeResponseBody404)
                                                                                                                                                                                        | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 406) (Network.HTTP.Client.Types.responseStatus response) -> GetDelegationFeeResponse406 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                        GetDelegationFeeResponseBody406)
                                                                                                                                                                                        | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_5) response_5) (Wallet.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") ("/wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel walletId)) GHC.Base.<> "/delegation-fees")) GHC.Base.mempty)
-- | > GET /wallets/{walletId}/delegation-fees
-- 
-- The same as 'getDelegationFee' but returns the raw 'Data.ByteString.ByteString'.
getDelegationFeeRaw :: forall m . Wallet.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ walletId | Constraints: Maximum length of 40, Minimum length of 40
  -> Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
getDelegationFeeRaw walletId = GHC.Base.id (Wallet.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") ("/wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel walletId)) GHC.Base.<> "/delegation-fees")) GHC.Base.mempty)
-- | > GET /wallets/{walletId}/delegation-fees
-- 
-- The same as 'getDelegationFee' but accepts an explicit configuration and returns the raw 'Data.ByteString.ByteString'.
getDelegationFeeWithConfigurationRaw :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ walletId | Constraints: Maximum length of 40, Minimum length of 40
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
getDelegationFeeWithConfigurationRaw config
                                     walletId = GHC.Base.id (Wallet.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") ("/wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel walletId)) GHC.Base.<> "/delegation-fees")) GHC.Base.mempty)
