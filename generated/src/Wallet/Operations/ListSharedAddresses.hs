-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation listSharedAddresses
module Wallet.Operations.ListSharedAddresses where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Wallet.Common
import Wallet.Types

-- | > GET /shared-wallets/{walletId}/addresses
-- 
-- \<p align=\"right\">status: \<strong>stable\<\/strong>\<\/p>
-- 
-- Return a list of known addresses, ordered from newest to oldest
listSharedAddresses :: forall m . Wallet.Common.MonadHTTP m => ListSharedAddressesParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response ListSharedAddressesResponse) -- ^ Monadic computation which returns the result of the operation
listSharedAddresses parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either ListSharedAddressesResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> ListSharedAddressesResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                  ([ListSharedAddressesResponseBody200]))
                                                                                                                                                                               | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> ListSharedAddressesResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                  ListSharedAddressesResponseBody400)
                                                                                                                                                                               | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> ListSharedAddressesResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                  ListSharedAddressesResponseBody404)
                                                                                                                                                                               | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 406) (Network.HTTP.Client.Types.responseStatus response) -> ListSharedAddressesResponse406 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                  ListSharedAddressesResponseBody406)
                                                                                                                                                                               | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Wallet.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") ("/shared-wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (listSharedAddressesParametersPathWalletId parameters))) GHC.Base.<> "/addresses")) [Wallet.Common.QueryParameter (Data.Text.pack "state") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> listSharedAddressesParametersQueryState parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/addresses.GET.parameters@ in the specification.
-- 
-- 
data ListSharedAddressesParameters = ListSharedAddressesParameters {
  -- | pathWalletId: Represents the parameter named \'walletId\'
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 40
  -- * Minimum length of 40
  listSharedAddressesParametersPathWalletId :: Data.Text.Internal.Text
  -- | queryState: Represents the parameter named \'state\'
  -- 
  -- An optional filter on the address state.
  , listSharedAddressesParametersQueryState :: (GHC.Maybe.Maybe ListSharedAddressesParametersQueryState)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedAddressesParameters
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["pathWalletId" Data.Aeson.Types.ToJSON..= listSharedAddressesParametersPathWalletId obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryState" Data.Aeson.Types.ToJSON..=)) (listSharedAddressesParametersQueryState obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["pathWalletId" Data.Aeson.Types.ToJSON..= listSharedAddressesParametersPathWalletId obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryState" Data.Aeson.Types.ToJSON..=)) (listSharedAddressesParametersQueryState obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedAddressesParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListSharedAddressesParameters" (\obj -> (GHC.Base.pure ListSharedAddressesParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathWalletId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryState"))
-- | Create a new 'ListSharedAddressesParameters' with all required fields.
mkListSharedAddressesParameters :: Data.Text.Internal.Text -- ^ 'listSharedAddressesParametersPathWalletId'
  -> ListSharedAddressesParameters
mkListSharedAddressesParameters listSharedAddressesParametersPathWalletId = ListSharedAddressesParameters{listSharedAddressesParametersPathWalletId = listSharedAddressesParametersPathWalletId,
                                                                                                          listSharedAddressesParametersQueryState = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/shared-wallets\/{walletId}\/addresses.GET.parameters.properties.queryState@ in the specification.
-- 
-- Represents the parameter named \'state\'
-- 
-- An optional filter on the address state.
data ListSharedAddressesParametersQueryState =
   ListSharedAddressesParametersQueryStateOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | ListSharedAddressesParametersQueryStateTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | ListSharedAddressesParametersQueryStateEnumUsed -- ^ Represents the JSON value @"used"@
  | ListSharedAddressesParametersQueryStateEnumUnused -- ^ Represents the JSON value @"unused"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedAddressesParametersQueryState
    where toJSON (ListSharedAddressesParametersQueryStateOther val) = val
          toJSON (ListSharedAddressesParametersQueryStateTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (ListSharedAddressesParametersQueryStateEnumUsed) = "used"
          toJSON (ListSharedAddressesParametersQueryStateEnumUnused) = "unused"
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedAddressesParametersQueryState
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "used" -> ListSharedAddressesParametersQueryStateEnumUsed
                                            | val GHC.Classes.== "unused" -> ListSharedAddressesParametersQueryStateEnumUnused
                                            | GHC.Base.otherwise -> ListSharedAddressesParametersQueryStateOther val)
-- | Represents a response of the operation 'listSharedAddresses'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'ListSharedAddressesResponseError' is used.
data ListSharedAddressesResponse =
   ListSharedAddressesResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | ListSharedAddressesResponse200 ([ListSharedAddressesResponseBody200]) -- ^ Ok
  | ListSharedAddressesResponse400 ListSharedAddressesResponseBody400 -- ^ Bad Request
  | ListSharedAddressesResponse404 ListSharedAddressesResponseBody404 -- ^ Not Found
  | ListSharedAddressesResponse406 ListSharedAddressesResponseBody406 -- ^ Not Acceptable
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/addresses.GET.responses.200.content.application\/json.schema.items@ in the specification.
-- 
-- 
data ListSharedAddressesResponseBody200 = ListSharedAddressesResponseBody200 {
  -- | derivation_path: A path for deriving a child key from a parent key.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  listSharedAddressesResponseBody200Derivation_path :: ([Data.Text.Internal.Text])
  -- | id: A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
  -- which represents an address on the Cardano blockchain.
  -- Sequences in Base58 encoding are expected to be legacy Byron addresses,
  -- whereas sequences in Bech32 encoding correspond to current Shelley addresses.
  -- 
  -- For more details, see
  -- [CIP-0019 — Cardano addresses](https:\/\/github.com\/cardano-foundation\/CIPs\/tree\/master\/CIP-0019)
  -- .
  , listSharedAddressesResponseBody200Id :: Data.Text.Internal.Text
  -- | state
  , listSharedAddressesResponseBody200State :: ListSharedAddressesResponseBody200State
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedAddressesResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["derivation_path" Data.Aeson.Types.ToJSON..= listSharedAddressesResponseBody200Derivation_path obj] : ["id" Data.Aeson.Types.ToJSON..= listSharedAddressesResponseBody200Id obj] : ["state" Data.Aeson.Types.ToJSON..= listSharedAddressesResponseBody200State obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["derivation_path" Data.Aeson.Types.ToJSON..= listSharedAddressesResponseBody200Derivation_path obj] : ["id" Data.Aeson.Types.ToJSON..= listSharedAddressesResponseBody200Id obj] : ["state" Data.Aeson.Types.ToJSON..= listSharedAddressesResponseBody200State obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedAddressesResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListSharedAddressesResponseBody200" (\obj -> ((GHC.Base.pure ListSharedAddressesResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "derivation_path")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "state"))
-- | Create a new 'ListSharedAddressesResponseBody200' with all required fields.
mkListSharedAddressesResponseBody200 :: [Data.Text.Internal.Text] -- ^ 'listSharedAddressesResponseBody200Derivation_path'
  -> Data.Text.Internal.Text -- ^ 'listSharedAddressesResponseBody200Id'
  -> ListSharedAddressesResponseBody200State -- ^ 'listSharedAddressesResponseBody200State'
  -> ListSharedAddressesResponseBody200
mkListSharedAddressesResponseBody200 listSharedAddressesResponseBody200Derivation_path listSharedAddressesResponseBody200Id listSharedAddressesResponseBody200State = ListSharedAddressesResponseBody200{listSharedAddressesResponseBody200Derivation_path = listSharedAddressesResponseBody200Derivation_path,
                                                                                                                                                                                                         listSharedAddressesResponseBody200Id = listSharedAddressesResponseBody200Id,
                                                                                                                                                                                                         listSharedAddressesResponseBody200State = listSharedAddressesResponseBody200State}
-- | Defines the enum schema located at @paths.\/shared-wallets\/{walletId}\/addresses.GET.responses.200.content.application\/json.schema.items.properties.state@ in the specification.
-- 
-- 
data ListSharedAddressesResponseBody200State =
   ListSharedAddressesResponseBody200StateOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | ListSharedAddressesResponseBody200StateTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | ListSharedAddressesResponseBody200StateEnumUsed -- ^ Represents the JSON value @"used"@
  | ListSharedAddressesResponseBody200StateEnumUnused -- ^ Represents the JSON value @"unused"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedAddressesResponseBody200State
    where toJSON (ListSharedAddressesResponseBody200StateOther val) = val
          toJSON (ListSharedAddressesResponseBody200StateTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (ListSharedAddressesResponseBody200StateEnumUsed) = "used"
          toJSON (ListSharedAddressesResponseBody200StateEnumUnused) = "unused"
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedAddressesResponseBody200State
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "used" -> ListSharedAddressesResponseBody200StateEnumUsed
                                            | val GHC.Classes.== "unused" -> ListSharedAddressesResponseBody200StateEnumUnused
                                            | GHC.Base.otherwise -> ListSharedAddressesResponseBody200StateOther val)
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/addresses.GET.responses.400.content.application\/json.schema@ in the specification.
-- 
-- 
data ListSharedAddressesResponseBody400 = ListSharedAddressesResponseBody400 {
  -- | message: May occur when a request is not well-formed; that is, it fails to parse
  -- successfully. This could be the case when some required parameters
  -- are missing or, when malformed values are provided.
  listSharedAddressesResponseBody400Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedAddressesResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= listSharedAddressesResponseBody400Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "bad_request"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= listSharedAddressesResponseBody400Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "bad_request"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedAddressesResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListSharedAddressesResponseBody400" (\obj -> GHC.Base.pure ListSharedAddressesResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'ListSharedAddressesResponseBody400' with all required fields.
mkListSharedAddressesResponseBody400 :: Data.Text.Internal.Text -- ^ 'listSharedAddressesResponseBody400Message'
  -> ListSharedAddressesResponseBody400
mkListSharedAddressesResponseBody400 listSharedAddressesResponseBody400Message = ListSharedAddressesResponseBody400{listSharedAddressesResponseBody400Message = listSharedAddressesResponseBody400Message}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/addresses.GET.responses.404.content.application\/json.schema@ in the specification.
-- 
-- 
data ListSharedAddressesResponseBody404 = ListSharedAddressesResponseBody404 {
  -- | message: May occur when a given walletId does not match with any known
  -- wallets (because it has been deleted, or has never existed).
  listSharedAddressesResponseBody404Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedAddressesResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= listSharedAddressesResponseBody404Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "no_such_wallet"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= listSharedAddressesResponseBody404Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "no_such_wallet"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedAddressesResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListSharedAddressesResponseBody404" (\obj -> GHC.Base.pure ListSharedAddressesResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'ListSharedAddressesResponseBody404' with all required fields.
mkListSharedAddressesResponseBody404 :: Data.Text.Internal.Text -- ^ 'listSharedAddressesResponseBody404Message'
  -> ListSharedAddressesResponseBody404
mkListSharedAddressesResponseBody404 listSharedAddressesResponseBody404Message = ListSharedAddressesResponseBody404{listSharedAddressesResponseBody404Message = listSharedAddressesResponseBody404Message}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/addresses.GET.responses.406.content.application\/json.schema@ in the specification.
-- 
-- 
data ListSharedAddressesResponseBody406 = ListSharedAddressesResponseBody406 {
  -- | message: May occur when providing an invalid \'Accept\' header.
  listSharedAddressesResponseBody406Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedAddressesResponseBody406
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= listSharedAddressesResponseBody406Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "not_acceptable"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= listSharedAddressesResponseBody406Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "not_acceptable"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedAddressesResponseBody406
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListSharedAddressesResponseBody406" (\obj -> GHC.Base.pure ListSharedAddressesResponseBody406 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'ListSharedAddressesResponseBody406' with all required fields.
mkListSharedAddressesResponseBody406 :: Data.Text.Internal.Text -- ^ 'listSharedAddressesResponseBody406Message'
  -> ListSharedAddressesResponseBody406
mkListSharedAddressesResponseBody406 listSharedAddressesResponseBody406Message = ListSharedAddressesResponseBody406{listSharedAddressesResponseBody406Message = listSharedAddressesResponseBody406Message}
-- | > GET /shared-wallets/{walletId}/addresses
-- 
-- The same as 'listSharedAddresses' but accepts an explicit configuration.
listSharedAddressesWithConfiguration :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> ListSharedAddressesParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response ListSharedAddressesResponse) -- ^ Monadic computation which returns the result of the operation
listSharedAddressesWithConfiguration config
                                     parameters = GHC.Base.fmap (\response_5 -> GHC.Base.fmap (Data.Either.either ListSharedAddressesResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> ListSharedAddressesResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                   ([ListSharedAddressesResponseBody200]))
                                                                                                                                                                                                | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> ListSharedAddressesResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                   ListSharedAddressesResponseBody400)
                                                                                                                                                                                                | (\status_8 -> Network.HTTP.Types.Status.statusCode status_8 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> ListSharedAddressesResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                   ListSharedAddressesResponseBody404)
                                                                                                                                                                                                | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 406) (Network.HTTP.Client.Types.responseStatus response) -> ListSharedAddressesResponse406 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                   ListSharedAddressesResponseBody406)
                                                                                                                                                                                                | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_5) response_5) (Wallet.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") ("/shared-wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (listSharedAddressesParametersPathWalletId parameters))) GHC.Base.<> "/addresses")) [Wallet.Common.QueryParameter (Data.Text.pack "state") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> listSharedAddressesParametersQueryState parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /shared-wallets/{walletId}/addresses
-- 
-- The same as 'listSharedAddresses' but returns the raw 'Data.ByteString.ByteString'.
listSharedAddressesRaw :: forall m . Wallet.Common.MonadHTTP m => ListSharedAddressesParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
listSharedAddressesRaw parameters = GHC.Base.id (Wallet.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") ("/shared-wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (listSharedAddressesParametersPathWalletId parameters))) GHC.Base.<> "/addresses")) [Wallet.Common.QueryParameter (Data.Text.pack "state") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> listSharedAddressesParametersQueryState parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /shared-wallets/{walletId}/addresses
-- 
-- The same as 'listSharedAddresses' but accepts an explicit configuration and returns the raw 'Data.ByteString.ByteString'.
listSharedAddressesWithConfigurationRaw :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> ListSharedAddressesParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
listSharedAddressesWithConfigurationRaw config
                                        parameters = GHC.Base.id (Wallet.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") ("/shared-wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (listSharedAddressesParametersPathWalletId parameters))) GHC.Base.<> "/addresses")) [Wallet.Common.QueryParameter (Data.Text.pack "state") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> listSharedAddressesParametersQueryState parameters) (Data.Text.pack "form") GHC.Types.False])
