-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation createAddress
module Wallet.Operations.CreateAddress where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Wallet.Common
import Wallet.Types

-- | > POST /byron-wallets/{walletId}/addresses
-- 
-- \<p align=\"right\">status: \<strong>stable\<\/strong>\<\/p>
-- 
-- ⚠️  This endpoint is available for \`random\` wallets only. Any
-- attempt to call this endpoint on another type of wallet will result in
-- a \`403 Forbidden\` error from the server.
createAddress :: forall m . Wallet.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ walletId | Constraints: Maximum length of 40, Minimum length of 40
  -> CreateAddressRequestBody -- ^ The request body to send
  -> Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response CreateAddressResponse) -- ^ Monadic computation which returns the result of the operation
createAddress walletId
              body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either CreateAddressResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 201) (Network.HTTP.Client.Types.responseStatus response) -> CreateAddressResponse201 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                          CreateAddressResponseBody201)
                                                                                                                                                             | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> CreateAddressResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                          CreateAddressResponseBody400)
                                                                                                                                                             | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> CreateAddressResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                          CreateAddressResponseBody403)
                                                                                                                                                             | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 406) (Network.HTTP.Client.Types.responseStatus response) -> CreateAddressResponse406 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                          CreateAddressResponseBody406)
                                                                                                                                                             | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 415) (Network.HTTP.Client.Types.responseStatus response) -> CreateAddressResponse415 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                          CreateAddressResponseBody415)
                                                                                                                                                             | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Wallet.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") ("/byron-wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel walletId)) GHC.Base.<> "/addresses")) GHC.Base.mempty (GHC.Maybe.Just body) Wallet.Common.RequestBodyEncodingJSON)
-- | Defines the object schema located at @paths.\/byron-wallets\/{walletId}\/addresses.POST.requestBody.content.application\/json.schema@ in the specification.
-- 
-- 
data CreateAddressRequestBody = CreateAddressRequestBody {
  -- | address_index: An address derivation index.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 4.2949673e9
  -- * Minimum  of 0.0
  createAddressRequestBodyAddress_index :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | passphrase: A master passphrase to lock and protect the wallet for sensitive operation (e.g. sending funds)
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 255
  -- * Minimum length of 0
  , createAddressRequestBodyPassphrase :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateAddressRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_index" Data.Aeson.Types.ToJSON..=)) (createAddressRequestBodyAddress_index obj) : ["passphrase" Data.Aeson.Types.ToJSON..= createAddressRequestBodyPassphrase obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_index" Data.Aeson.Types.ToJSON..=)) (createAddressRequestBodyAddress_index obj) : ["passphrase" Data.Aeson.Types.ToJSON..= createAddressRequestBodyPassphrase obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON CreateAddressRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateAddressRequestBody" (\obj -> (GHC.Base.pure CreateAddressRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address_index")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "passphrase"))
-- | Create a new 'CreateAddressRequestBody' with all required fields.
mkCreateAddressRequestBody :: Data.Text.Internal.Text -- ^ 'createAddressRequestBodyPassphrase'
  -> CreateAddressRequestBody
mkCreateAddressRequestBody createAddressRequestBodyPassphrase = CreateAddressRequestBody{createAddressRequestBodyAddress_index = GHC.Maybe.Nothing,
                                                                                         createAddressRequestBodyPassphrase = createAddressRequestBodyPassphrase}
-- | Represents a response of the operation 'createAddress'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'CreateAddressResponseError' is used.
data CreateAddressResponse =
   CreateAddressResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | CreateAddressResponse201 CreateAddressResponseBody201 -- ^ Created
  | CreateAddressResponse400 CreateAddressResponseBody400 -- ^ Bad Request
  | CreateAddressResponse403 CreateAddressResponseBody403 -- ^ Forbidden
  | CreateAddressResponse406 CreateAddressResponseBody406 -- ^ Not Acceptable
  | CreateAddressResponse415 CreateAddressResponseBody415 -- ^ Unsupported Media Type
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/byron-wallets\/{walletId}\/addresses.POST.responses.201.content.application\/json.schema@ in the specification.
-- 
-- 
data CreateAddressResponseBody201 = CreateAddressResponseBody201 {
  -- | derivation_path: A path for deriving a child key from a parent key.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  createAddressResponseBody201Derivation_path :: ([Data.Text.Internal.Text])
  -- | id: A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
  -- which represents an address on the Cardano blockchain.
  -- Sequences in Base58 encoding are expected to be legacy Byron addresses,
  -- whereas sequences in Bech32 encoding correspond to current Shelley addresses.
  -- 
  -- For more details, see
  -- [CIP-0019 — Cardano addresses](https:\/\/github.com\/cardano-foundation\/CIPs\/tree\/master\/CIP-0019)
  -- .
  , createAddressResponseBody201Id :: Data.Text.Internal.Text
  -- | state
  , createAddressResponseBody201State :: CreateAddressResponseBody201State
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateAddressResponseBody201
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["derivation_path" Data.Aeson.Types.ToJSON..= createAddressResponseBody201Derivation_path obj] : ["id" Data.Aeson.Types.ToJSON..= createAddressResponseBody201Id obj] : ["state" Data.Aeson.Types.ToJSON..= createAddressResponseBody201State obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["derivation_path" Data.Aeson.Types.ToJSON..= createAddressResponseBody201Derivation_path obj] : ["id" Data.Aeson.Types.ToJSON..= createAddressResponseBody201Id obj] : ["state" Data.Aeson.Types.ToJSON..= createAddressResponseBody201State obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON CreateAddressResponseBody201
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateAddressResponseBody201" (\obj -> ((GHC.Base.pure CreateAddressResponseBody201 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "derivation_path")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "state"))
-- | Create a new 'CreateAddressResponseBody201' with all required fields.
mkCreateAddressResponseBody201 :: [Data.Text.Internal.Text] -- ^ 'createAddressResponseBody201Derivation_path'
  -> Data.Text.Internal.Text -- ^ 'createAddressResponseBody201Id'
  -> CreateAddressResponseBody201State -- ^ 'createAddressResponseBody201State'
  -> CreateAddressResponseBody201
mkCreateAddressResponseBody201 createAddressResponseBody201Derivation_path createAddressResponseBody201Id createAddressResponseBody201State = CreateAddressResponseBody201{createAddressResponseBody201Derivation_path = createAddressResponseBody201Derivation_path,
                                                                                                                                                                           createAddressResponseBody201Id = createAddressResponseBody201Id,
                                                                                                                                                                           createAddressResponseBody201State = createAddressResponseBody201State}
-- | Defines the enum schema located at @paths.\/byron-wallets\/{walletId}\/addresses.POST.responses.201.content.application\/json.schema.properties.state@ in the specification.
-- 
-- 
data CreateAddressResponseBody201State =
   CreateAddressResponseBody201StateOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | CreateAddressResponseBody201StateTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | CreateAddressResponseBody201StateEnumUsed -- ^ Represents the JSON value @"used"@
  | CreateAddressResponseBody201StateEnumUnused -- ^ Represents the JSON value @"unused"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateAddressResponseBody201State
    where toJSON (CreateAddressResponseBody201StateOther val) = val
          toJSON (CreateAddressResponseBody201StateTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (CreateAddressResponseBody201StateEnumUsed) = "used"
          toJSON (CreateAddressResponseBody201StateEnumUnused) = "unused"
instance Data.Aeson.Types.FromJSON.FromJSON CreateAddressResponseBody201State
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "used" -> CreateAddressResponseBody201StateEnumUsed
                                            | val GHC.Classes.== "unused" -> CreateAddressResponseBody201StateEnumUnused
                                            | GHC.Base.otherwise -> CreateAddressResponseBody201StateOther val)
-- | Defines the object schema located at @paths.\/byron-wallets\/{walletId}\/addresses.POST.responses.400.content.application\/json.schema@ in the specification.
-- 
-- 
data CreateAddressResponseBody400 = CreateAddressResponseBody400 {
  -- | message: May occur when a request is not well-formed; that is, it fails to parse
  -- successfully. This could be the case when some required parameters
  -- are missing or, when malformed values are provided.
  createAddressResponseBody400Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateAddressResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= createAddressResponseBody400Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "bad_request"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= createAddressResponseBody400Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "bad_request"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON CreateAddressResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateAddressResponseBody400" (\obj -> GHC.Base.pure CreateAddressResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'CreateAddressResponseBody400' with all required fields.
mkCreateAddressResponseBody400 :: Data.Text.Internal.Text -- ^ 'createAddressResponseBody400Message'
  -> CreateAddressResponseBody400
mkCreateAddressResponseBody400 createAddressResponseBody400Message = CreateAddressResponseBody400{createAddressResponseBody400Message = createAddressResponseBody400Message}
-- | Defines the object schema located at @paths.\/byron-wallets\/{walletId}\/addresses.POST.responses.403.content.application\/json.schema@ in the specification.
-- 
-- 
data CreateAddressResponseBody403 = CreateAddressResponseBody403 {
  -- | code: A specific error code for this error, more precise than HTTP ones.
  createAddressResponseBody403Code :: Data.Text.Internal.Text
  -- | message: A descriptive error message.
  , createAddressResponseBody403Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateAddressResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["code" Data.Aeson.Types.ToJSON..= createAddressResponseBody403Code obj] : ["message" Data.Aeson.Types.ToJSON..= createAddressResponseBody403Message obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["code" Data.Aeson.Types.ToJSON..= createAddressResponseBody403Code obj] : ["message" Data.Aeson.Types.ToJSON..= createAddressResponseBody403Message obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON CreateAddressResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateAddressResponseBody403" (\obj -> (GHC.Base.pure CreateAddressResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'CreateAddressResponseBody403' with all required fields.
mkCreateAddressResponseBody403 :: Data.Text.Internal.Text -- ^ 'createAddressResponseBody403Code'
  -> Data.Text.Internal.Text -- ^ 'createAddressResponseBody403Message'
  -> CreateAddressResponseBody403
mkCreateAddressResponseBody403 createAddressResponseBody403Code createAddressResponseBody403Message = CreateAddressResponseBody403{createAddressResponseBody403Code = createAddressResponseBody403Code,
                                                                                                                                   createAddressResponseBody403Message = createAddressResponseBody403Message}
-- | Defines the object schema located at @paths.\/byron-wallets\/{walletId}\/addresses.POST.responses.406.content.application\/json.schema@ in the specification.
-- 
-- 
data CreateAddressResponseBody406 = CreateAddressResponseBody406 {
  -- | message: May occur when providing an invalid \'Accept\' header.
  createAddressResponseBody406Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateAddressResponseBody406
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= createAddressResponseBody406Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "not_acceptable"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= createAddressResponseBody406Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "not_acceptable"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON CreateAddressResponseBody406
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateAddressResponseBody406" (\obj -> GHC.Base.pure CreateAddressResponseBody406 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'CreateAddressResponseBody406' with all required fields.
mkCreateAddressResponseBody406 :: Data.Text.Internal.Text -- ^ 'createAddressResponseBody406Message'
  -> CreateAddressResponseBody406
mkCreateAddressResponseBody406 createAddressResponseBody406Message = CreateAddressResponseBody406{createAddressResponseBody406Message = createAddressResponseBody406Message}
-- | Defines the object schema located at @paths.\/byron-wallets\/{walletId}\/addresses.POST.responses.415.content.application\/json.schema@ in the specification.
-- 
-- 
data CreateAddressResponseBody415 = CreateAddressResponseBody415 {
  -- | code: A specific error code for this error, more precise than HTTP ones.
  createAddressResponseBody415Code :: Data.Text.Internal.Text
  -- | message: A descriptive error message.
  , createAddressResponseBody415Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateAddressResponseBody415
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["code" Data.Aeson.Types.ToJSON..= createAddressResponseBody415Code obj] : ["message" Data.Aeson.Types.ToJSON..= createAddressResponseBody415Message obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["code" Data.Aeson.Types.ToJSON..= createAddressResponseBody415Code obj] : ["message" Data.Aeson.Types.ToJSON..= createAddressResponseBody415Message obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON CreateAddressResponseBody415
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateAddressResponseBody415" (\obj -> (GHC.Base.pure CreateAddressResponseBody415 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'CreateAddressResponseBody415' with all required fields.
mkCreateAddressResponseBody415 :: Data.Text.Internal.Text -- ^ 'createAddressResponseBody415Code'
  -> Data.Text.Internal.Text -- ^ 'createAddressResponseBody415Message'
  -> CreateAddressResponseBody415
mkCreateAddressResponseBody415 createAddressResponseBody415Code createAddressResponseBody415Message = CreateAddressResponseBody415{createAddressResponseBody415Code = createAddressResponseBody415Code,
                                                                                                                                   createAddressResponseBody415Message = createAddressResponseBody415Message}
-- | > POST /byron-wallets/{walletId}/addresses
-- 
-- The same as 'createAddress' but accepts an explicit configuration.
createAddressWithConfiguration :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ walletId | Constraints: Maximum length of 40, Minimum length of 40
  -> CreateAddressRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response CreateAddressResponse) -- ^ Monadic computation which returns the result of the operation
createAddressWithConfiguration config
                               walletId
                               body = GHC.Base.fmap (\response_6 -> GHC.Base.fmap (Data.Either.either CreateAddressResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 201) (Network.HTTP.Client.Types.responseStatus response) -> CreateAddressResponse201 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                           CreateAddressResponseBody201)
                                                                                                                                                                              | (\status_8 -> Network.HTTP.Types.Status.statusCode status_8 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> CreateAddressResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                           CreateAddressResponseBody400)
                                                                                                                                                                              | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> CreateAddressResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                           CreateAddressResponseBody403)
                                                                                                                                                                              | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 406) (Network.HTTP.Client.Types.responseStatus response) -> CreateAddressResponse406 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                             CreateAddressResponseBody406)
                                                                                                                                                                              | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 415) (Network.HTTP.Client.Types.responseStatus response) -> CreateAddressResponse415 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                             CreateAddressResponseBody415)
                                                                                                                                                                              | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_6) response_6) (Wallet.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") ("/byron-wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel walletId)) GHC.Base.<> "/addresses")) GHC.Base.mempty (GHC.Maybe.Just body) Wallet.Common.RequestBodyEncodingJSON)
-- | > POST /byron-wallets/{walletId}/addresses
-- 
-- The same as 'createAddress' but returns the raw 'Data.ByteString.ByteString'.
createAddressRaw :: forall m . Wallet.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ walletId | Constraints: Maximum length of 40, Minimum length of 40
  -> CreateAddressRequestBody -- ^ The request body to send
  -> Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
createAddressRaw walletId
                 body = GHC.Base.id (Wallet.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") ("/byron-wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel walletId)) GHC.Base.<> "/addresses")) GHC.Base.mempty (GHC.Maybe.Just body) Wallet.Common.RequestBodyEncodingJSON)
-- | > POST /byron-wallets/{walletId}/addresses
-- 
-- The same as 'createAddress' but accepts an explicit configuration and returns the raw 'Data.ByteString.ByteString'.
createAddressWithConfigurationRaw :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ walletId | Constraints: Maximum length of 40, Minimum length of 40
  -> CreateAddressRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
createAddressWithConfigurationRaw config
                                  walletId
                                  body = GHC.Base.id (Wallet.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") ("/byron-wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel walletId)) GHC.Base.<> "/addresses")) GHC.Base.mempty (GHC.Maybe.Just body) Wallet.Common.RequestBodyEncodingJSON)
