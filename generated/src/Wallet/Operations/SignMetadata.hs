-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation signMetadata
module Wallet.Operations.SignMetadata where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Wallet.Common
import Wallet.Types

-- | > POST /wallets/{walletId}/signatures/{role}/{index}
-- 
-- \<p align=\"right\">status: \<strong>experimental\<\/strong>\<\/p>
-- 
-- **⚠️ WARNING ⚠️**
-- 
-- This endpoint is experimental and for internal use in the Catalyst project. This
-- functionality will be refined in the forthcoming future and the interface is likely
-- to change in **NON-BACKWARD COMPATIBLE WAYS**.
-- 
-- \<b>Note:\<\/b> Only \`Soft\` indexes are supported by this endpoint.
signMetadata :: forall m . Wallet.Common.MonadHTTP m => SignMetadataParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> SignMetadataRequestBody -- ^ The request body to send
  -> Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response SignMetadataResponse) -- ^ Monadic computation which returns the result of the operation
signMetadata parameters
             body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either SignMetadataResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right SignMetadataResponse200
                                                                                                                                                           | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> SignMetadataResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                       SignMetadataResponseBody400)
                                                                                                                                                           | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 406) (Network.HTTP.Client.Types.responseStatus response) -> SignMetadataResponse406 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                       SignMetadataResponseBody406)
                                                                                                                                                           | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 415) (Network.HTTP.Client.Types.responseStatus response) -> SignMetadataResponse415 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                       SignMetadataResponseBody415)
                                                                                                                                                           | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Wallet.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") ("/wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (signMetadataParametersPathWalletId parameters))) GHC.Base.<> ("/signatures/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (signMetadataParametersPathRole parameters))) GHC.Base.<> ("/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (signMetadataParametersPathIndex parameters))) GHC.Base.<> "")))))) GHC.Base.mempty (GHC.Maybe.Just body) Wallet.Common.RequestBodyEncodingJSON)
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/signatures\/{role}\/{index}.POST.parameters@ in the specification.
-- 
-- 
data SignMetadataParameters = SignMetadataParameters {
  -- | pathIndex: Represents the parameter named \'index\'
  -- 
  -- An individual segment within a derivation path.
  -- 
  -- The \`H\` suffix indicates a _Hardened_ child private key, which
  -- means that children of this key cannot be derived from the public
  -- key. Indices without a \`H\` suffix are called _Soft_.
  signMetadataParametersPathIndex :: Data.Text.Internal.Text
  -- | pathRole: Represents the parameter named \'role\'
  , signMetadataParametersPathRole :: SignMetadataParametersPathRole
  -- | pathWalletId: Represents the parameter named \'walletId\'
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 40
  -- * Minimum length of 40
  , signMetadataParametersPathWalletId :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON SignMetadataParameters
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["pathIndex" Data.Aeson.Types.ToJSON..= signMetadataParametersPathIndex obj] : ["pathRole" Data.Aeson.Types.ToJSON..= signMetadataParametersPathRole obj] : ["pathWalletId" Data.Aeson.Types.ToJSON..= signMetadataParametersPathWalletId obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["pathIndex" Data.Aeson.Types.ToJSON..= signMetadataParametersPathIndex obj] : ["pathRole" Data.Aeson.Types.ToJSON..= signMetadataParametersPathRole obj] : ["pathWalletId" Data.Aeson.Types.ToJSON..= signMetadataParametersPathWalletId obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON SignMetadataParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SignMetadataParameters" (\obj -> ((GHC.Base.pure SignMetadataParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathIndex")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathRole")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathWalletId"))
-- | Create a new 'SignMetadataParameters' with all required fields.
mkSignMetadataParameters :: Data.Text.Internal.Text -- ^ 'signMetadataParametersPathIndex'
  -> SignMetadataParametersPathRole -- ^ 'signMetadataParametersPathRole'
  -> Data.Text.Internal.Text -- ^ 'signMetadataParametersPathWalletId'
  -> SignMetadataParameters
mkSignMetadataParameters signMetadataParametersPathIndex signMetadataParametersPathRole signMetadataParametersPathWalletId = SignMetadataParameters{signMetadataParametersPathIndex = signMetadataParametersPathIndex,
                                                                                                                                                    signMetadataParametersPathRole = signMetadataParametersPathRole,
                                                                                                                                                    signMetadataParametersPathWalletId = signMetadataParametersPathWalletId}
-- | Defines the enum schema located at @paths.\/wallets\/{walletId}\/signatures\/{role}\/{index}.POST.parameters.properties.pathRole@ in the specification.
-- 
-- Represents the parameter named \'role\'
data SignMetadataParametersPathRole =
   SignMetadataParametersPathRoleOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | SignMetadataParametersPathRoleTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | SignMetadataParametersPathRoleEnumUtxo_external -- ^ Represents the JSON value @"utxo_external"@
  | SignMetadataParametersPathRoleEnumUtxo_internal -- ^ Represents the JSON value @"utxo_internal"@
  | SignMetadataParametersPathRoleEnumMutable_account -- ^ Represents the JSON value @"mutable_account"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON SignMetadataParametersPathRole
    where toJSON (SignMetadataParametersPathRoleOther val) = val
          toJSON (SignMetadataParametersPathRoleTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (SignMetadataParametersPathRoleEnumUtxo_external) = "utxo_external"
          toJSON (SignMetadataParametersPathRoleEnumUtxo_internal) = "utxo_internal"
          toJSON (SignMetadataParametersPathRoleEnumMutable_account) = "mutable_account"
instance Data.Aeson.Types.FromJSON.FromJSON SignMetadataParametersPathRole
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "utxo_external" -> SignMetadataParametersPathRoleEnumUtxo_external
                                            | val GHC.Classes.== "utxo_internal" -> SignMetadataParametersPathRoleEnumUtxo_internal
                                            | val GHC.Classes.== "mutable_account" -> SignMetadataParametersPathRoleEnumMutable_account
                                            | GHC.Base.otherwise -> SignMetadataParametersPathRoleOther val)
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/signatures\/{role}\/{index}.POST.requestBody.content.application\/json.schema@ in the specification.
-- 
-- 
data SignMetadataRequestBody = SignMetadataRequestBody {
  -- | metadata: **⚠️ WARNING ⚠️**
  -- 
  -- _Please note that metadata provided in a transaction will be
  -- stored on the blockchain forever. Make sure not to include any sensitive data,
  -- in particular personally identifiable information (PII)._
  -- 
  -- Extra application data attached to the transaction.
  -- 
  -- Cardano allows users and developers to embed their own
  -- authenticated metadata when submitting transactions. Metadata can
  -- be expressed as a JSON object with some restrictions:
  -- 
  -- 1. All top-level keys must be integers between \`0\` and \`2^64 - 1\`.
  -- 
  -- 2. Each metadata value is tagged with its type.
  -- 
  -- 3. Strings must be at most 64 bytes when UTF-8 encoded.
  -- 
  -- 4. Bytestrings are hex-encoded, with a maximum length of 64 bytes.
  -- 
  -- Metadata aren\'t stored as JSON on the Cardano blockchain but are
  -- instead stored using a compact binary encoding (CBOR).
  -- 
  -- The binary encoding of metadata values supports three simple types:
  -- 
  -- * Integers in the range \`-(2^64 - 1)\` to \`2^64 - 1\`
  -- * Strings (UTF-8 encoded)
  -- * Bytestrings
  -- 
  -- And two compound types:
  -- 
  -- * Lists of metadata values
  -- * Mappings from metadata values to metadata values
  -- 
  -- It is possible to transform any JSON object into this schema.
  -- 
  -- However, if your application uses floating point values, they will
  -- need to be converted somehow, according to your
  -- requirements. Likewise for \`null\` or \`bool\` values. When reading
  -- metadata from chain, be aware that integers may exceed the
  -- javascript numeric range, and may need special \"bigint\" parsing.
  signMetadataRequestBodyMetadata :: Data.Aeson.Types.Internal.Object
  -- | passphrase: A master passphrase to lock and protect the wallet for sensitive operation (e.g. sending funds)
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 255
  -- * Minimum length of 0
  , signMetadataRequestBodyPassphrase :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON SignMetadataRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["metadata" Data.Aeson.Types.ToJSON..= signMetadataRequestBodyMetadata obj] : ["passphrase" Data.Aeson.Types.ToJSON..= signMetadataRequestBodyPassphrase obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["metadata" Data.Aeson.Types.ToJSON..= signMetadataRequestBodyMetadata obj] : ["passphrase" Data.Aeson.Types.ToJSON..= signMetadataRequestBodyPassphrase obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON SignMetadataRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SignMetadataRequestBody" (\obj -> (GHC.Base.pure SignMetadataRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "passphrase"))
-- | Create a new 'SignMetadataRequestBody' with all required fields.
mkSignMetadataRequestBody :: Data.Aeson.Types.Internal.Object -- ^ 'signMetadataRequestBodyMetadata'
  -> Data.Text.Internal.Text -- ^ 'signMetadataRequestBodyPassphrase'
  -> SignMetadataRequestBody
mkSignMetadataRequestBody signMetadataRequestBodyMetadata signMetadataRequestBodyPassphrase = SignMetadataRequestBody{signMetadataRequestBodyMetadata = signMetadataRequestBodyMetadata,
                                                                                                                      signMetadataRequestBodyPassphrase = signMetadataRequestBodyPassphrase}
-- | Represents a response of the operation 'signMetadata'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'SignMetadataResponseError' is used.
data SignMetadataResponse =
   SignMetadataResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | SignMetadataResponse200 -- ^ OK
  | SignMetadataResponse400 SignMetadataResponseBody400 -- ^ Bad Request
  | SignMetadataResponse406 SignMetadataResponseBody406 -- ^ Not Acceptable
  | SignMetadataResponse415 SignMetadataResponseBody415 -- ^ Unsupported Media Type
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/signatures\/{role}\/{index}.POST.responses.400.content.application\/json.schema@ in the specification.
-- 
-- 
data SignMetadataResponseBody400 = SignMetadataResponseBody400 {
  -- | message: May occur when a request is not well-formed; that is, it fails to parse
  -- successfully. This could be the case when some required parameters
  -- are missing or, when malformed values are provided.
  signMetadataResponseBody400Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON SignMetadataResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= signMetadataResponseBody400Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "bad_request"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= signMetadataResponseBody400Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "bad_request"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON SignMetadataResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SignMetadataResponseBody400" (\obj -> GHC.Base.pure SignMetadataResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'SignMetadataResponseBody400' with all required fields.
mkSignMetadataResponseBody400 :: Data.Text.Internal.Text -- ^ 'signMetadataResponseBody400Message'
  -> SignMetadataResponseBody400
mkSignMetadataResponseBody400 signMetadataResponseBody400Message = SignMetadataResponseBody400{signMetadataResponseBody400Message = signMetadataResponseBody400Message}
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/signatures\/{role}\/{index}.POST.responses.406.content.application\/json.schema@ in the specification.
-- 
-- 
data SignMetadataResponseBody406 = SignMetadataResponseBody406 {
  -- | message: May occur when providing an invalid \'Accept\' header.
  signMetadataResponseBody406Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON SignMetadataResponseBody406
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= signMetadataResponseBody406Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "not_acceptable"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= signMetadataResponseBody406Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "not_acceptable"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON SignMetadataResponseBody406
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SignMetadataResponseBody406" (\obj -> GHC.Base.pure SignMetadataResponseBody406 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'SignMetadataResponseBody406' with all required fields.
mkSignMetadataResponseBody406 :: Data.Text.Internal.Text -- ^ 'signMetadataResponseBody406Message'
  -> SignMetadataResponseBody406
mkSignMetadataResponseBody406 signMetadataResponseBody406Message = SignMetadataResponseBody406{signMetadataResponseBody406Message = signMetadataResponseBody406Message}
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/signatures\/{role}\/{index}.POST.responses.415.content.application\/json.schema@ in the specification.
-- 
-- 
data SignMetadataResponseBody415 = SignMetadataResponseBody415 {
  -- | code: A specific error code for this error, more precise than HTTP ones.
  signMetadataResponseBody415Code :: Data.Text.Internal.Text
  -- | message: A descriptive error message.
  , signMetadataResponseBody415Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON SignMetadataResponseBody415
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["code" Data.Aeson.Types.ToJSON..= signMetadataResponseBody415Code obj] : ["message" Data.Aeson.Types.ToJSON..= signMetadataResponseBody415Message obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["code" Data.Aeson.Types.ToJSON..= signMetadataResponseBody415Code obj] : ["message" Data.Aeson.Types.ToJSON..= signMetadataResponseBody415Message obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON SignMetadataResponseBody415
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SignMetadataResponseBody415" (\obj -> (GHC.Base.pure SignMetadataResponseBody415 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'SignMetadataResponseBody415' with all required fields.
mkSignMetadataResponseBody415 :: Data.Text.Internal.Text -- ^ 'signMetadataResponseBody415Code'
  -> Data.Text.Internal.Text -- ^ 'signMetadataResponseBody415Message'
  -> SignMetadataResponseBody415
mkSignMetadataResponseBody415 signMetadataResponseBody415Code signMetadataResponseBody415Message = SignMetadataResponseBody415{signMetadataResponseBody415Code = signMetadataResponseBody415Code,
                                                                                                                               signMetadataResponseBody415Message = signMetadataResponseBody415Message}
-- | > POST /wallets/{walletId}/signatures/{role}/{index}
-- 
-- The same as 'signMetadata' but accepts an explicit configuration.
signMetadataWithConfiguration :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> SignMetadataParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> SignMetadataRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response SignMetadataResponse) -- ^ Monadic computation which returns the result of the operation
signMetadataWithConfiguration config
                              parameters
                              body = GHC.Base.fmap (\response_5 -> GHC.Base.fmap (Data.Either.either SignMetadataResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right SignMetadataResponse200
                                                                                                                                                                            | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> SignMetadataResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                        SignMetadataResponseBody400)
                                                                                                                                                                            | (\status_8 -> Network.HTTP.Types.Status.statusCode status_8 GHC.Classes.== 406) (Network.HTTP.Client.Types.responseStatus response) -> SignMetadataResponse406 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                        SignMetadataResponseBody406)
                                                                                                                                                                            | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 415) (Network.HTTP.Client.Types.responseStatus response) -> SignMetadataResponse415 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                        SignMetadataResponseBody415)
                                                                                                                                                                            | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_5) response_5) (Wallet.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") ("/wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (signMetadataParametersPathWalletId parameters))) GHC.Base.<> ("/signatures/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (signMetadataParametersPathRole parameters))) GHC.Base.<> ("/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (signMetadataParametersPathIndex parameters))) GHC.Base.<> "")))))) GHC.Base.mempty (GHC.Maybe.Just body) Wallet.Common.RequestBodyEncodingJSON)
-- | > POST /wallets/{walletId}/signatures/{role}/{index}
-- 
-- The same as 'signMetadata' but returns the raw 'Data.ByteString.ByteString'.
signMetadataRaw :: forall m . Wallet.Common.MonadHTTP m => SignMetadataParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> SignMetadataRequestBody -- ^ The request body to send
  -> Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
signMetadataRaw parameters
                body = GHC.Base.id (Wallet.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") ("/wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (signMetadataParametersPathWalletId parameters))) GHC.Base.<> ("/signatures/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (signMetadataParametersPathRole parameters))) GHC.Base.<> ("/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (signMetadataParametersPathIndex parameters))) GHC.Base.<> "")))))) GHC.Base.mempty (GHC.Maybe.Just body) Wallet.Common.RequestBodyEncodingJSON)
-- | > POST /wallets/{walletId}/signatures/{role}/{index}
-- 
-- The same as 'signMetadata' but accepts an explicit configuration and returns the raw 'Data.ByteString.ByteString'.
signMetadataWithConfigurationRaw :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> SignMetadataParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> SignMetadataRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
signMetadataWithConfigurationRaw config
                                 parameters
                                 body = GHC.Base.id (Wallet.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") ("/wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (signMetadataParametersPathWalletId parameters))) GHC.Base.<> ("/signatures/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (signMetadataParametersPathRole parameters))) GHC.Base.<> ("/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (signMetadataParametersPathIndex parameters))) GHC.Base.<> "")))))) GHC.Base.mempty (GHC.Maybe.Just body) Wallet.Common.RequestBodyEncodingJSON)
