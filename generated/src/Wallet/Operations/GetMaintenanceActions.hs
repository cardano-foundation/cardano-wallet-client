-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getMaintenanceActions
module Wallet.Operations.GetMaintenanceActions where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Wallet.Common
import Wallet.Types

-- | > GET /stake-pools/maintenance-actions
-- 
-- Returns the current status of the stake pools maintenance actions.
getMaintenanceActions :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response GetMaintenanceActionsResponse) -- ^ Monadic computation which returns the result of the operation
getMaintenanceActions = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetMaintenanceActionsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetMaintenanceActionsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                             GetMaintenanceActionsResponseBody200)
                                                                                                                                                                        | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Wallet.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") "/stake-pools/maintenance-actions" GHC.Base.mempty)
-- | Represents a response of the operation 'getMaintenanceActions'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetMaintenanceActionsResponseError' is used.
data GetMaintenanceActionsResponse =
   GetMaintenanceActionsResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetMaintenanceActionsResponse200 GetMaintenanceActionsResponseBody200 -- ^ Ok
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/stake-pools\/maintenance-actions.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data GetMaintenanceActionsResponseBody200 = GetMaintenanceActionsResponseBody200 {
  -- | gc_stake_pools: Gives an indication if metadata GC checking for delisted pools
  -- has run and if so, when.
  -- 
  -- Possible values are:
  --   - not_applicable -> we\'re currently not querying a SMASH server for metadata
  --   - not_started -> the GC hasn\'t started yet, try again in a short while
  --   - restarting -> the GC thread is currently restarting, try again in short while
  --   - has_run -> the GC has run successfully
  -- 
  -- When \'status\' is \'restarting\' or \'has_run\' then the field \'last_run\'
  -- is set to the last GC time in UTC.
  getMaintenanceActionsResponseBody200Gc_stake_pools :: GetMaintenanceActionsResponseBody200Gc_stake_pools
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetMaintenanceActionsResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["gc_stake_pools" Data.Aeson.Types.ToJSON..= getMaintenanceActionsResponseBody200Gc_stake_pools obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["gc_stake_pools" Data.Aeson.Types.ToJSON..= getMaintenanceActionsResponseBody200Gc_stake_pools obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetMaintenanceActionsResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetMaintenanceActionsResponseBody200" (\obj -> GHC.Base.pure GetMaintenanceActionsResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "gc_stake_pools"))
-- | Create a new 'GetMaintenanceActionsResponseBody200' with all required fields.
mkGetMaintenanceActionsResponseBody200 :: GetMaintenanceActionsResponseBody200Gc_stake_pools -- ^ 'getMaintenanceActionsResponseBody200Gc_stake_pools'
  -> GetMaintenanceActionsResponseBody200
mkGetMaintenanceActionsResponseBody200 getMaintenanceActionsResponseBody200Gc_stake_pools = GetMaintenanceActionsResponseBody200{getMaintenanceActionsResponseBody200Gc_stake_pools = getMaintenanceActionsResponseBody200Gc_stake_pools}
-- | Defines the object schema located at @paths.\/stake-pools\/maintenance-actions.GET.responses.200.content.application\/json.schema.properties.gc_stake_pools@ in the specification.
-- 
-- Gives an indication if metadata GC checking for delisted pools
-- has run and if so, when.
-- 
-- Possible values are:
--   - not_applicable -> we\'re currently not querying a SMASH server for metadata
--   - not_started -> the GC hasn\'t started yet, try again in a short while
--   - restarting -> the GC thread is currently restarting, try again in short while
--   - has_run -> the GC has run successfully
-- 
-- When \'status\' is \'restarting\' or \'has_run\' then the field \'last_run\'
-- is set to the last GC time in UTC.
data GetMaintenanceActionsResponseBody200Gc_stake_pools = GetMaintenanceActionsResponseBody200Gc_stake_pools {
  -- | last_run
  getMaintenanceActionsResponseBody200Gc_stake_poolsLast_run :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | status
  , getMaintenanceActionsResponseBody200Gc_stake_poolsStatus :: GetMaintenanceActionsResponseBody200Gc_stake_poolsStatus
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetMaintenanceActionsResponseBody200Gc_stake_pools
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last_run" Data.Aeson.Types.ToJSON..=)) (getMaintenanceActionsResponseBody200Gc_stake_poolsLast_run obj) : ["status" Data.Aeson.Types.ToJSON..= getMaintenanceActionsResponseBody200Gc_stake_poolsStatus obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last_run" Data.Aeson.Types.ToJSON..=)) (getMaintenanceActionsResponseBody200Gc_stake_poolsLast_run obj) : ["status" Data.Aeson.Types.ToJSON..= getMaintenanceActionsResponseBody200Gc_stake_poolsStatus obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetMaintenanceActionsResponseBody200Gc_stake_pools
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetMaintenanceActionsResponseBody200Gc_stake_pools" (\obj -> (GHC.Base.pure GetMaintenanceActionsResponseBody200Gc_stake_pools GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "last_run")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))
-- | Create a new 'GetMaintenanceActionsResponseBody200Gc_stake_pools' with all required fields.
mkGetMaintenanceActionsResponseBody200Gc_stake_pools :: GetMaintenanceActionsResponseBody200Gc_stake_poolsStatus -- ^ 'getMaintenanceActionsResponseBody200Gc_stake_poolsStatus'
  -> GetMaintenanceActionsResponseBody200Gc_stake_pools
mkGetMaintenanceActionsResponseBody200Gc_stake_pools getMaintenanceActionsResponseBody200Gc_stake_poolsStatus = GetMaintenanceActionsResponseBody200Gc_stake_pools{getMaintenanceActionsResponseBody200Gc_stake_poolsLast_run = GHC.Maybe.Nothing,
                                                                                                                                                                   getMaintenanceActionsResponseBody200Gc_stake_poolsStatus = getMaintenanceActionsResponseBody200Gc_stake_poolsStatus}
-- | Defines the enum schema located at @paths.\/stake-pools\/maintenance-actions.GET.responses.200.content.application\/json.schema.properties.gc_stake_pools.properties.status@ in the specification.
-- 
-- 
data GetMaintenanceActionsResponseBody200Gc_stake_poolsStatus =
   GetMaintenanceActionsResponseBody200Gc_stake_poolsStatusOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetMaintenanceActionsResponseBody200Gc_stake_poolsStatusTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetMaintenanceActionsResponseBody200Gc_stake_poolsStatusEnumNot_applicable -- ^ Represents the JSON value @"not_applicable"@
  | GetMaintenanceActionsResponseBody200Gc_stake_poolsStatusEnumNot_started -- ^ Represents the JSON value @"not_started"@
  | GetMaintenanceActionsResponseBody200Gc_stake_poolsStatusEnumRestarting -- ^ Represents the JSON value @"restarting"@
  | GetMaintenanceActionsResponseBody200Gc_stake_poolsStatusEnumHas_run -- ^ Represents the JSON value @"has_run"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetMaintenanceActionsResponseBody200Gc_stake_poolsStatus
    where toJSON (GetMaintenanceActionsResponseBody200Gc_stake_poolsStatusOther val) = val
          toJSON (GetMaintenanceActionsResponseBody200Gc_stake_poolsStatusTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetMaintenanceActionsResponseBody200Gc_stake_poolsStatusEnumNot_applicable) = "not_applicable"
          toJSON (GetMaintenanceActionsResponseBody200Gc_stake_poolsStatusEnumNot_started) = "not_started"
          toJSON (GetMaintenanceActionsResponseBody200Gc_stake_poolsStatusEnumRestarting) = "restarting"
          toJSON (GetMaintenanceActionsResponseBody200Gc_stake_poolsStatusEnumHas_run) = "has_run"
instance Data.Aeson.Types.FromJSON.FromJSON GetMaintenanceActionsResponseBody200Gc_stake_poolsStatus
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "not_applicable" -> GetMaintenanceActionsResponseBody200Gc_stake_poolsStatusEnumNot_applicable
                                            | val GHC.Classes.== "not_started" -> GetMaintenanceActionsResponseBody200Gc_stake_poolsStatusEnumNot_started
                                            | val GHC.Classes.== "restarting" -> GetMaintenanceActionsResponseBody200Gc_stake_poolsStatusEnumRestarting
                                            | val GHC.Classes.== "has_run" -> GetMaintenanceActionsResponseBody200Gc_stake_poolsStatusEnumHas_run
                                            | GHC.Base.otherwise -> GetMaintenanceActionsResponseBody200Gc_stake_poolsStatusOther val)
-- | > GET /stake-pools/maintenance-actions
-- 
-- The same as 'getMaintenanceActions' but accepts an explicit configuration.
getMaintenanceActionsWithConfiguration :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> m (Network.HTTP.Client.Types.Response GetMaintenanceActionsResponse) -- ^ Monadic computation which returns the result of the operation
getMaintenanceActionsWithConfiguration config = GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either GetMaintenanceActionsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetMaintenanceActionsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                     GetMaintenanceActionsResponseBody200)
                                                                                                                                                                                                | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2) (Wallet.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") "/stake-pools/maintenance-actions" GHC.Base.mempty)
-- | > GET /stake-pools/maintenance-actions
-- 
-- The same as 'getMaintenanceActions' but returns the raw 'Data.ByteString.ByteString'.
getMaintenanceActionsRaw :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
getMaintenanceActionsRaw = GHC.Base.id (Wallet.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") "/stake-pools/maintenance-actions" GHC.Base.mempty)
-- | > GET /stake-pools/maintenance-actions
-- 
-- The same as 'getMaintenanceActions' but accepts an explicit configuration and returns the raw 'Data.ByteString.ByteString'.
getMaintenanceActionsWithConfigurationRaw :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
getMaintenanceActionsWithConfigurationRaw config = GHC.Base.id (Wallet.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") "/stake-pools/maintenance-actions" GHC.Base.mempty)
