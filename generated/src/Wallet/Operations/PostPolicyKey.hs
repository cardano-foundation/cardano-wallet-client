-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation postPolicyKey
module Wallet.Operations.PostPolicyKey where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Wallet.Common
import Wallet.Types

-- | > POST /wallets/{walletId}/policy-key
-- 
-- \<p align=\"right\">status: \<strong>stable\<\/strong>\<\/p>
-- 
-- Create policy key for the wallet.
-- 
-- In order to be able to mint\/burn assets with \`POST Construct\` endpoint there needs to be
-- a policy key set for the wallet. Invoking this endpoint would be required for all wallets instantiated
-- before introducing mint\/burn feature prior to making a mint\/burn transaction from them.
-- 
-- To get a hash of the policy key instead of the policy key,
-- use query parameter \`hash=true\`.
postPolicyKey :: forall m . Wallet.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ walletId | Constraints: Maximum length of 40, Minimum length of 40
  -> PostPolicyKeyRequestBody -- ^ The request body to send
  -> Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response PostPolicyKeyResponse) -- ^ Monadic computation which returns the result of the operation
postPolicyKey walletId
              body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostPolicyKeyResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 202) (Network.HTTP.Client.Types.responseStatus response) -> PostPolicyKeyResponse202 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                          Data.Text.Internal.Text)
                                                                                                                                                             | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> PostPolicyKeyResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                          PostPolicyKeyResponseBody400)
                                                                                                                                                             | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 406) (Network.HTTP.Client.Types.responseStatus response) -> PostPolicyKeyResponse406 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                          PostPolicyKeyResponseBody406)
                                                                                                                                                             | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 415) (Network.HTTP.Client.Types.responseStatus response) -> PostPolicyKeyResponse415 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                          PostPolicyKeyResponseBody415)
                                                                                                                                                             | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Wallet.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") ("/wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel walletId)) GHC.Base.<> "/policy-key")) GHC.Base.mempty (GHC.Maybe.Just body) Wallet.Common.RequestBodyEncodingJSON)
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/policy-key.POST.requestBody.content.application\/json.schema@ in the specification.
-- 
-- 
data PostPolicyKeyRequestBody = PostPolicyKeyRequestBody {
  -- | passphrase: A master passphrase to lock and protect the wallet for sensitive operation (e.g. sending funds)
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 255
  -- * Minimum length of 10
  postPolicyKeyRequestBodyPassphrase :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostPolicyKeyRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["passphrase" Data.Aeson.Types.ToJSON..= postPolicyKeyRequestBodyPassphrase obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["passphrase" Data.Aeson.Types.ToJSON..= postPolicyKeyRequestBodyPassphrase obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostPolicyKeyRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostPolicyKeyRequestBody" (\obj -> GHC.Base.pure PostPolicyKeyRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "passphrase"))
-- | Create a new 'PostPolicyKeyRequestBody' with all required fields.
mkPostPolicyKeyRequestBody :: Data.Text.Internal.Text -- ^ 'postPolicyKeyRequestBodyPassphrase'
  -> PostPolicyKeyRequestBody
mkPostPolicyKeyRequestBody postPolicyKeyRequestBodyPassphrase = PostPolicyKeyRequestBody{postPolicyKeyRequestBodyPassphrase = postPolicyKeyRequestBodyPassphrase}
-- | Represents a response of the operation 'postPolicyKey'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostPolicyKeyResponseError' is used.
data PostPolicyKeyResponse =
   PostPolicyKeyResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | PostPolicyKeyResponse202 Data.Text.Internal.Text -- ^ Accepted
  | PostPolicyKeyResponse400 PostPolicyKeyResponseBody400 -- ^ Bad Request
  | PostPolicyKeyResponse406 PostPolicyKeyResponseBody406 -- ^ Not Acceptable
  | PostPolicyKeyResponse415 PostPolicyKeyResponseBody415 -- ^ Unsupported Media Type
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/policy-key.POST.responses.400.content.application\/json.schema@ in the specification.
-- 
-- 
data PostPolicyKeyResponseBody400 = PostPolicyKeyResponseBody400 {
  -- | message: May occur when a request is not well-formed; that is, it fails to parse
  -- successfully. This could be the case when some required parameters
  -- are missing or, when malformed values are provided.
  postPolicyKeyResponseBody400Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostPolicyKeyResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= postPolicyKeyResponseBody400Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "bad_request"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= postPolicyKeyResponseBody400Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "bad_request"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostPolicyKeyResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostPolicyKeyResponseBody400" (\obj -> GHC.Base.pure PostPolicyKeyResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'PostPolicyKeyResponseBody400' with all required fields.
mkPostPolicyKeyResponseBody400 :: Data.Text.Internal.Text -- ^ 'postPolicyKeyResponseBody400Message'
  -> PostPolicyKeyResponseBody400
mkPostPolicyKeyResponseBody400 postPolicyKeyResponseBody400Message = PostPolicyKeyResponseBody400{postPolicyKeyResponseBody400Message = postPolicyKeyResponseBody400Message}
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/policy-key.POST.responses.406.content.application\/json.schema@ in the specification.
-- 
-- 
data PostPolicyKeyResponseBody406 = PostPolicyKeyResponseBody406 {
  -- | message: May occur when providing an invalid \'Accept\' header.
  postPolicyKeyResponseBody406Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostPolicyKeyResponseBody406
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= postPolicyKeyResponseBody406Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "not_acceptable"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= postPolicyKeyResponseBody406Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "not_acceptable"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostPolicyKeyResponseBody406
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostPolicyKeyResponseBody406" (\obj -> GHC.Base.pure PostPolicyKeyResponseBody406 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'PostPolicyKeyResponseBody406' with all required fields.
mkPostPolicyKeyResponseBody406 :: Data.Text.Internal.Text -- ^ 'postPolicyKeyResponseBody406Message'
  -> PostPolicyKeyResponseBody406
mkPostPolicyKeyResponseBody406 postPolicyKeyResponseBody406Message = PostPolicyKeyResponseBody406{postPolicyKeyResponseBody406Message = postPolicyKeyResponseBody406Message}
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/policy-key.POST.responses.415.content.application\/json.schema@ in the specification.
-- 
-- 
data PostPolicyKeyResponseBody415 = PostPolicyKeyResponseBody415 {
  -- | code: A specific error code for this error, more precise than HTTP ones.
  postPolicyKeyResponseBody415Code :: Data.Text.Internal.Text
  -- | message: A descriptive error message.
  , postPolicyKeyResponseBody415Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostPolicyKeyResponseBody415
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["code" Data.Aeson.Types.ToJSON..= postPolicyKeyResponseBody415Code obj] : ["message" Data.Aeson.Types.ToJSON..= postPolicyKeyResponseBody415Message obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["code" Data.Aeson.Types.ToJSON..= postPolicyKeyResponseBody415Code obj] : ["message" Data.Aeson.Types.ToJSON..= postPolicyKeyResponseBody415Message obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostPolicyKeyResponseBody415
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostPolicyKeyResponseBody415" (\obj -> (GHC.Base.pure PostPolicyKeyResponseBody415 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'PostPolicyKeyResponseBody415' with all required fields.
mkPostPolicyKeyResponseBody415 :: Data.Text.Internal.Text -- ^ 'postPolicyKeyResponseBody415Code'
  -> Data.Text.Internal.Text -- ^ 'postPolicyKeyResponseBody415Message'
  -> PostPolicyKeyResponseBody415
mkPostPolicyKeyResponseBody415 postPolicyKeyResponseBody415Code postPolicyKeyResponseBody415Message = PostPolicyKeyResponseBody415{postPolicyKeyResponseBody415Code = postPolicyKeyResponseBody415Code,
                                                                                                                                   postPolicyKeyResponseBody415Message = postPolicyKeyResponseBody415Message}
-- | > POST /wallets/{walletId}/policy-key
-- 
-- The same as 'postPolicyKey' but accepts an explicit configuration.
postPolicyKeyWithConfiguration :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ walletId | Constraints: Maximum length of 40, Minimum length of 40
  -> PostPolicyKeyRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response PostPolicyKeyResponse) -- ^ Monadic computation which returns the result of the operation
postPolicyKeyWithConfiguration config
                               walletId
                               body = GHC.Base.fmap (\response_5 -> GHC.Base.fmap (Data.Either.either PostPolicyKeyResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 202) (Network.HTTP.Client.Types.responseStatus response) -> PostPolicyKeyResponse202 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                           Data.Text.Internal.Text)
                                                                                                                                                                              | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> PostPolicyKeyResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                           PostPolicyKeyResponseBody400)
                                                                                                                                                                              | (\status_8 -> Network.HTTP.Types.Status.statusCode status_8 GHC.Classes.== 406) (Network.HTTP.Client.Types.responseStatus response) -> PostPolicyKeyResponse406 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                           PostPolicyKeyResponseBody406)
                                                                                                                                                                              | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 415) (Network.HTTP.Client.Types.responseStatus response) -> PostPolicyKeyResponse415 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                           PostPolicyKeyResponseBody415)
                                                                                                                                                                              | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_5) response_5) (Wallet.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") ("/wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel walletId)) GHC.Base.<> "/policy-key")) GHC.Base.mempty (GHC.Maybe.Just body) Wallet.Common.RequestBodyEncodingJSON)
-- | > POST /wallets/{walletId}/policy-key
-- 
-- The same as 'postPolicyKey' but returns the raw 'Data.ByteString.ByteString'.
postPolicyKeyRaw :: forall m . Wallet.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ walletId | Constraints: Maximum length of 40, Minimum length of 40
  -> PostPolicyKeyRequestBody -- ^ The request body to send
  -> Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
postPolicyKeyRaw walletId
                 body = GHC.Base.id (Wallet.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") ("/wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel walletId)) GHC.Base.<> "/policy-key")) GHC.Base.mempty (GHC.Maybe.Just body) Wallet.Common.RequestBodyEncodingJSON)
-- | > POST /wallets/{walletId}/policy-key
-- 
-- The same as 'postPolicyKey' but accepts an explicit configuration and returns the raw 'Data.ByteString.ByteString'.
postPolicyKeyWithConfigurationRaw :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ walletId | Constraints: Maximum length of 40, Minimum length of 40
  -> PostPolicyKeyRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
postPolicyKeyWithConfigurationRaw config
                                  walletId
                                  body = GHC.Base.id (Wallet.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") ("/wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel walletId)) GHC.Base.<> "/policy-key")) GHC.Base.mempty (GHC.Maybe.Just body) Wallet.Common.RequestBodyEncodingJSON)
