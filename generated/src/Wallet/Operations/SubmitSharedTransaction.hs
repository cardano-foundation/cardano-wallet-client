-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation submitSharedTransaction
module Wallet.Operations.SubmitSharedTransaction where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Wallet.Common
import Wallet.Types

-- | > POST /shared-wallets/{walletId}/transactions-submit
-- 
-- \<p align=\"right\">status: \<strong>under development\<\/strong>\<\/p>
-- Submit a transaction that was already created and fully signed.
-- Fails for foreign transactions that is transactions which lack
-- the wallet\'s inputs and withdrawals.
submitSharedTransaction :: forall m . Wallet.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ walletId | Constraints: Maximum length of 40, Minimum length of 40
  -> SubmitSharedTransactionRequestBody -- ^ The request body to send
  -> Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response SubmitSharedTransactionResponse) -- ^ Monadic computation which returns the result of the operation
submitSharedTransaction walletId
                        body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either SubmitSharedTransactionResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 202) (Network.HTTP.Client.Types.responseStatus response) -> SubmitSharedTransactionResponse202 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                        SubmitSharedTransactionResponseBody202)
                                                                                                                                                                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> SubmitSharedTransactionResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                        SubmitSharedTransactionResponseBody400)
                                                                                                                                                                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 406) (Network.HTTP.Client.Types.responseStatus response) -> SubmitSharedTransactionResponse406 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                        SubmitSharedTransactionResponseBody406)
                                                                                                                                                                                 | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 415) (Network.HTTP.Client.Types.responseStatus response) -> SubmitSharedTransactionResponse415 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                        SubmitSharedTransactionResponseBody415)
                                                                                                                                                                                 | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 425) (Network.HTTP.Client.Types.responseStatus response) -> SubmitSharedTransactionResponse425 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                        SubmitSharedTransactionResponseBody425)
                                                                                                                                                                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Wallet.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") ("/shared-wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel walletId)) GHC.Base.<> "/transactions-submit")) GHC.Base.mempty (GHC.Maybe.Just body) Wallet.Common.RequestBodyEncodingJSON)
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-submit.POST.requestBody.content.application\/json.schema@ in the specification.
-- 
-- The result of signing a transaction (serialized and encoded).
data SubmitSharedTransactionRequestBody = SubmitSharedTransactionRequestBody {
  -- | transaction: The CBOR-encoded transaction, represented in either hex or base64 encoding.
  -- This always includes the transaction body and the witness set, even if the
  -- latter is empty.
  submitSharedTransactionRequestBodyTransaction :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON SubmitSharedTransactionRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["transaction" Data.Aeson.Types.ToJSON..= submitSharedTransactionRequestBodyTransaction obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["transaction" Data.Aeson.Types.ToJSON..= submitSharedTransactionRequestBodyTransaction obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON SubmitSharedTransactionRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SubmitSharedTransactionRequestBody" (\obj -> GHC.Base.pure SubmitSharedTransactionRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "transaction"))
-- | Create a new 'SubmitSharedTransactionRequestBody' with all required fields.
mkSubmitSharedTransactionRequestBody :: Data.Text.Internal.Text -- ^ 'submitSharedTransactionRequestBodyTransaction'
  -> SubmitSharedTransactionRequestBody
mkSubmitSharedTransactionRequestBody submitSharedTransactionRequestBodyTransaction = SubmitSharedTransactionRequestBody{submitSharedTransactionRequestBodyTransaction = submitSharedTransactionRequestBodyTransaction}
-- | Represents a response of the operation 'submitSharedTransaction'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'SubmitSharedTransactionResponseError' is used.
data SubmitSharedTransactionResponse =
   SubmitSharedTransactionResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | SubmitSharedTransactionResponse202 SubmitSharedTransactionResponseBody202 -- ^ Accepted
  | SubmitSharedTransactionResponse400 SubmitSharedTransactionResponseBody400 -- ^ Bad Request
  | SubmitSharedTransactionResponse406 SubmitSharedTransactionResponseBody406 -- ^ Not Acceptable
  | SubmitSharedTransactionResponse415 SubmitSharedTransactionResponseBody415 -- ^ Unsupported Media Type
  | SubmitSharedTransactionResponse425 SubmitSharedTransactionResponseBody425 -- ^ Mempool is Full
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-submit.POST.responses.202.content.application\/json.schema@ in the specification.
-- 
-- 
data SubmitSharedTransactionResponseBody202 = SubmitSharedTransactionResponseBody202 {
  -- | id: A unique identifier for this transaction
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  -- * Minimum length of 64
  submitSharedTransactionResponseBody202Id :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON SubmitSharedTransactionResponseBody202
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["id" Data.Aeson.Types.ToJSON..= submitSharedTransactionResponseBody202Id obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["id" Data.Aeson.Types.ToJSON..= submitSharedTransactionResponseBody202Id obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON SubmitSharedTransactionResponseBody202
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SubmitSharedTransactionResponseBody202" (\obj -> GHC.Base.pure SubmitSharedTransactionResponseBody202 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id"))
-- | Create a new 'SubmitSharedTransactionResponseBody202' with all required fields.
mkSubmitSharedTransactionResponseBody202 :: Data.Text.Internal.Text -- ^ 'submitSharedTransactionResponseBody202Id'
  -> SubmitSharedTransactionResponseBody202
mkSubmitSharedTransactionResponseBody202 submitSharedTransactionResponseBody202Id = SubmitSharedTransactionResponseBody202{submitSharedTransactionResponseBody202Id = submitSharedTransactionResponseBody202Id}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-submit.POST.responses.400.content.application\/json.schema@ in the specification.
-- 
-- 
data SubmitSharedTransactionResponseBody400 = SubmitSharedTransactionResponseBody400 {
  -- | message: May occur when a request is not well-formed; that is, it fails to parse
  -- successfully. This could be the case when some required parameters
  -- are missing or, when malformed values are provided.
  submitSharedTransactionResponseBody400Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON SubmitSharedTransactionResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= submitSharedTransactionResponseBody400Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "bad_request"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= submitSharedTransactionResponseBody400Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "bad_request"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON SubmitSharedTransactionResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SubmitSharedTransactionResponseBody400" (\obj -> GHC.Base.pure SubmitSharedTransactionResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'SubmitSharedTransactionResponseBody400' with all required fields.
mkSubmitSharedTransactionResponseBody400 :: Data.Text.Internal.Text -- ^ 'submitSharedTransactionResponseBody400Message'
  -> SubmitSharedTransactionResponseBody400
mkSubmitSharedTransactionResponseBody400 submitSharedTransactionResponseBody400Message = SubmitSharedTransactionResponseBody400{submitSharedTransactionResponseBody400Message = submitSharedTransactionResponseBody400Message}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-submit.POST.responses.406.content.application\/json.schema@ in the specification.
-- 
-- 
data SubmitSharedTransactionResponseBody406 = SubmitSharedTransactionResponseBody406 {
  -- | message: May occur when providing an invalid \'Accept\' header.
  submitSharedTransactionResponseBody406Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON SubmitSharedTransactionResponseBody406
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= submitSharedTransactionResponseBody406Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "not_acceptable"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= submitSharedTransactionResponseBody406Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "not_acceptable"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON SubmitSharedTransactionResponseBody406
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SubmitSharedTransactionResponseBody406" (\obj -> GHC.Base.pure SubmitSharedTransactionResponseBody406 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'SubmitSharedTransactionResponseBody406' with all required fields.
mkSubmitSharedTransactionResponseBody406 :: Data.Text.Internal.Text -- ^ 'submitSharedTransactionResponseBody406Message'
  -> SubmitSharedTransactionResponseBody406
mkSubmitSharedTransactionResponseBody406 submitSharedTransactionResponseBody406Message = SubmitSharedTransactionResponseBody406{submitSharedTransactionResponseBody406Message = submitSharedTransactionResponseBody406Message}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-submit.POST.responses.415.content.application\/json.schema@ in the specification.
-- 
-- 
data SubmitSharedTransactionResponseBody415 = SubmitSharedTransactionResponseBody415 {
  -- | message: May occur when providing an invalid \'Content-Type\' header.
  submitSharedTransactionResponseBody415Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON SubmitSharedTransactionResponseBody415
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= submitSharedTransactionResponseBody415Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "unsupported_media_type"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= submitSharedTransactionResponseBody415Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "unsupported_media_type"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON SubmitSharedTransactionResponseBody415
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SubmitSharedTransactionResponseBody415" (\obj -> GHC.Base.pure SubmitSharedTransactionResponseBody415 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'SubmitSharedTransactionResponseBody415' with all required fields.
mkSubmitSharedTransactionResponseBody415 :: Data.Text.Internal.Text -- ^ 'submitSharedTransactionResponseBody415Message'
  -> SubmitSharedTransactionResponseBody415
mkSubmitSharedTransactionResponseBody415 submitSharedTransactionResponseBody415Message = SubmitSharedTransactionResponseBody415{submitSharedTransactionResponseBody415Message = submitSharedTransactionResponseBody415Message}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-submit.POST.responses.425.content.application\/json.schema@ in the specification.
-- 
-- 
data SubmitSharedTransactionResponseBody425 = SubmitSharedTransactionResponseBody425 {
  -- | message: May occur when submitting a serialized transaction to a node with full mempool.
  submitSharedTransactionResponseBody425Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON SubmitSharedTransactionResponseBody425
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= submitSharedTransactionResponseBody425Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "mempool_is_full"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= submitSharedTransactionResponseBody425Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "mempool_is_full"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON SubmitSharedTransactionResponseBody425
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SubmitSharedTransactionResponseBody425" (\obj -> GHC.Base.pure SubmitSharedTransactionResponseBody425 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'SubmitSharedTransactionResponseBody425' with all required fields.
mkSubmitSharedTransactionResponseBody425 :: Data.Text.Internal.Text -- ^ 'submitSharedTransactionResponseBody425Message'
  -> SubmitSharedTransactionResponseBody425
mkSubmitSharedTransactionResponseBody425 submitSharedTransactionResponseBody425Message = SubmitSharedTransactionResponseBody425{submitSharedTransactionResponseBody425Message = submitSharedTransactionResponseBody425Message}
-- | > POST /shared-wallets/{walletId}/transactions-submit
-- 
-- The same as 'submitSharedTransaction' but accepts an explicit configuration.
submitSharedTransactionWithConfiguration :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ walletId | Constraints: Maximum length of 40, Minimum length of 40
  -> SubmitSharedTransactionRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response SubmitSharedTransactionResponse) -- ^ Monadic computation which returns the result of the operation
submitSharedTransactionWithConfiguration config
                                         walletId
                                         body = GHC.Base.fmap (\response_6 -> GHC.Base.fmap (Data.Either.either SubmitSharedTransactionResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 202) (Network.HTTP.Client.Types.responseStatus response) -> SubmitSharedTransactionResponse202 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                         SubmitSharedTransactionResponseBody202)
                                                                                                                                                                                                  | (\status_8 -> Network.HTTP.Types.Status.statusCode status_8 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> SubmitSharedTransactionResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                         SubmitSharedTransactionResponseBody400)
                                                                                                                                                                                                  | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 406) (Network.HTTP.Client.Types.responseStatus response) -> SubmitSharedTransactionResponse406 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                         SubmitSharedTransactionResponseBody406)
                                                                                                                                                                                                  | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 415) (Network.HTTP.Client.Types.responseStatus response) -> SubmitSharedTransactionResponse415 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                           SubmitSharedTransactionResponseBody415)
                                                                                                                                                                                                  | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 425) (Network.HTTP.Client.Types.responseStatus response) -> SubmitSharedTransactionResponse425 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                           SubmitSharedTransactionResponseBody425)
                                                                                                                                                                                                  | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_6) response_6) (Wallet.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") ("/shared-wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel walletId)) GHC.Base.<> "/transactions-submit")) GHC.Base.mempty (GHC.Maybe.Just body) Wallet.Common.RequestBodyEncodingJSON)
-- | > POST /shared-wallets/{walletId}/transactions-submit
-- 
-- The same as 'submitSharedTransaction' but returns the raw 'Data.ByteString.ByteString'.
submitSharedTransactionRaw :: forall m . Wallet.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ walletId | Constraints: Maximum length of 40, Minimum length of 40
  -> SubmitSharedTransactionRequestBody -- ^ The request body to send
  -> Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
submitSharedTransactionRaw walletId
                           body = GHC.Base.id (Wallet.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") ("/shared-wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel walletId)) GHC.Base.<> "/transactions-submit")) GHC.Base.mempty (GHC.Maybe.Just body) Wallet.Common.RequestBodyEncodingJSON)
-- | > POST /shared-wallets/{walletId}/transactions-submit
-- 
-- The same as 'submitSharedTransaction' but accepts an explicit configuration and returns the raw 'Data.ByteString.ByteString'.
submitSharedTransactionWithConfigurationRaw :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ walletId | Constraints: Maximum length of 40, Minimum length of 40
  -> SubmitSharedTransactionRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
submitSharedTransactionWithConfigurationRaw config
                                            walletId
                                            body = GHC.Base.id (Wallet.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") ("/shared-wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel walletId)) GHC.Base.<> "/transactions-submit")) GHC.Base.mempty (GHC.Maybe.Just body) Wallet.Common.RequestBodyEncodingJSON)
