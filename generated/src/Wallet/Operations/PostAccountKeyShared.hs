-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation postAccountKeyShared
module Wallet.Operations.PostAccountKeyShared where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Wallet.Common
import Wallet.Types

-- | > POST /shared-wallets/{walletId}/keys/{index}
-- 
-- \<p align=\"right\">status: \<strong>stable\<\/strong>\<\/p>
-- Derive an account public key for any account index. For this key derivation to be possible,
-- the wallet must have been created from mnemonic.
-- 
-- \<b>Note:\<\/b> Only _Hardened_ indexes are supported by this endpoint.
postAccountKeyShared :: forall m . Wallet.Common.MonadHTTP m => PostAccountKeySharedParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> PostAccountKeySharedRequestBody -- ^ The request body to send
  -> Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response PostAccountKeySharedResponse) -- ^ Monadic computation which returns the result of the operation
postAccountKeyShared parameters
                     body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostAccountKeySharedResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 202) (Network.HTTP.Client.Types.responseStatus response) -> PostAccountKeySharedResponse202 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                               Data.Text.Internal.Text)
                                                                                                                                                                           | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> PostAccountKeySharedResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                               PostAccountKeySharedResponseBody400)
                                                                                                                                                                           | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 406) (Network.HTTP.Client.Types.responseStatus response) -> PostAccountKeySharedResponse406 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                               PostAccountKeySharedResponseBody406)
                                                                                                                                                                           | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 415) (Network.HTTP.Client.Types.responseStatus response) -> PostAccountKeySharedResponse415 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                               PostAccountKeySharedResponseBody415)
                                                                                                                                                                           | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Wallet.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") ("/shared-wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (postAccountKeySharedParametersPathWalletId parameters))) GHC.Base.<> ("/keys/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (postAccountKeySharedParametersPathIndex parameters))) GHC.Base.<> "")))) GHC.Base.mempty (GHC.Maybe.Just body) Wallet.Common.RequestBodyEncodingJSON)
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/keys\/{index}.POST.parameters@ in the specification.
-- 
-- 
data PostAccountKeySharedParameters = PostAccountKeySharedParameters {
  -- | pathIndex: Represents the parameter named \'index\'
  -- 
  -- An individual segment within a derivation path.
  -- 
  -- The \`H\` suffix indicates a _Hardened_ child private key, which
  -- means that children of this key cannot be derived from the public
  -- key. Indices without a \`H\` suffix are called _Soft_.
  postAccountKeySharedParametersPathIndex :: Data.Text.Internal.Text
  -- | pathWalletId: Represents the parameter named \'walletId\'
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 40
  -- * Minimum length of 40
  , postAccountKeySharedParametersPathWalletId :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostAccountKeySharedParameters
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["pathIndex" Data.Aeson.Types.ToJSON..= postAccountKeySharedParametersPathIndex obj] : ["pathWalletId" Data.Aeson.Types.ToJSON..= postAccountKeySharedParametersPathWalletId obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["pathIndex" Data.Aeson.Types.ToJSON..= postAccountKeySharedParametersPathIndex obj] : ["pathWalletId" Data.Aeson.Types.ToJSON..= postAccountKeySharedParametersPathWalletId obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostAccountKeySharedParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostAccountKeySharedParameters" (\obj -> (GHC.Base.pure PostAccountKeySharedParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathIndex")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathWalletId"))
-- | Create a new 'PostAccountKeySharedParameters' with all required fields.
mkPostAccountKeySharedParameters :: Data.Text.Internal.Text -- ^ 'postAccountKeySharedParametersPathIndex'
  -> Data.Text.Internal.Text -- ^ 'postAccountKeySharedParametersPathWalletId'
  -> PostAccountKeySharedParameters
mkPostAccountKeySharedParameters postAccountKeySharedParametersPathIndex postAccountKeySharedParametersPathWalletId = PostAccountKeySharedParameters{postAccountKeySharedParametersPathIndex = postAccountKeySharedParametersPathIndex,
                                                                                                                                                     postAccountKeySharedParametersPathWalletId = postAccountKeySharedParametersPathWalletId}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/keys\/{index}.POST.requestBody.content.application\/json.schema@ in the specification.
-- 
-- 
data PostAccountKeySharedRequestBody = PostAccountKeySharedRequestBody {
  -- | format: Determines whether extended (with chain code) or normal (without chain code) key is requested
  postAccountKeySharedRequestBodyFormat :: PostAccountKeySharedRequestBodyFormat
  -- | passphrase: A master passphrase to lock and protect the wallet for sensitive operation (e.g. sending funds)
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 255
  -- * Minimum length of 10
  , postAccountKeySharedRequestBodyPassphrase :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostAccountKeySharedRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["format" Data.Aeson.Types.ToJSON..= postAccountKeySharedRequestBodyFormat obj] : ["passphrase" Data.Aeson.Types.ToJSON..= postAccountKeySharedRequestBodyPassphrase obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["format" Data.Aeson.Types.ToJSON..= postAccountKeySharedRequestBodyFormat obj] : ["passphrase" Data.Aeson.Types.ToJSON..= postAccountKeySharedRequestBodyPassphrase obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostAccountKeySharedRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostAccountKeySharedRequestBody" (\obj -> (GHC.Base.pure PostAccountKeySharedRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "format")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "passphrase"))
-- | Create a new 'PostAccountKeySharedRequestBody' with all required fields.
mkPostAccountKeySharedRequestBody :: PostAccountKeySharedRequestBodyFormat -- ^ 'postAccountKeySharedRequestBodyFormat'
  -> Data.Text.Internal.Text -- ^ 'postAccountKeySharedRequestBodyPassphrase'
  -> PostAccountKeySharedRequestBody
mkPostAccountKeySharedRequestBody postAccountKeySharedRequestBodyFormat postAccountKeySharedRequestBodyPassphrase = PostAccountKeySharedRequestBody{postAccountKeySharedRequestBodyFormat = postAccountKeySharedRequestBodyFormat,
                                                                                                                                                    postAccountKeySharedRequestBodyPassphrase = postAccountKeySharedRequestBodyPassphrase}
-- | Defines the enum schema located at @paths.\/shared-wallets\/{walletId}\/keys\/{index}.POST.requestBody.content.application\/json.schema.properties.format@ in the specification.
-- 
-- Determines whether extended (with chain code) or normal (without chain code) key is requested
data PostAccountKeySharedRequestBodyFormat =
   PostAccountKeySharedRequestBodyFormatOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostAccountKeySharedRequestBodyFormatTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostAccountKeySharedRequestBodyFormatEnumExtended -- ^ Represents the JSON value @"extended"@
  | PostAccountKeySharedRequestBodyFormatEnumNon_extended -- ^ Represents the JSON value @"non_extended"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostAccountKeySharedRequestBodyFormat
    where toJSON (PostAccountKeySharedRequestBodyFormatOther val) = val
          toJSON (PostAccountKeySharedRequestBodyFormatTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (PostAccountKeySharedRequestBodyFormatEnumExtended) = "extended"
          toJSON (PostAccountKeySharedRequestBodyFormatEnumNon_extended) = "non_extended"
instance Data.Aeson.Types.FromJSON.FromJSON PostAccountKeySharedRequestBodyFormat
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "extended" -> PostAccountKeySharedRequestBodyFormatEnumExtended
                                            | val GHC.Classes.== "non_extended" -> PostAccountKeySharedRequestBodyFormatEnumNon_extended
                                            | GHC.Base.otherwise -> PostAccountKeySharedRequestBodyFormatOther val)
-- | Represents a response of the operation 'postAccountKeyShared'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostAccountKeySharedResponseError' is used.
data PostAccountKeySharedResponse =
   PostAccountKeySharedResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | PostAccountKeySharedResponse202 Data.Text.Internal.Text -- ^ Accepted
  | PostAccountKeySharedResponse400 PostAccountKeySharedResponseBody400 -- ^ Bad Request
  | PostAccountKeySharedResponse406 PostAccountKeySharedResponseBody406 -- ^ Not Acceptable
  | PostAccountKeySharedResponse415 PostAccountKeySharedResponseBody415 -- ^ Unsupported Media Type
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/keys\/{index}.POST.responses.400.content.application\/json.schema@ in the specification.
-- 
-- 
data PostAccountKeySharedResponseBody400 = PostAccountKeySharedResponseBody400 {
  -- | message: May occur when a request is not well-formed; that is, it fails to parse
  -- successfully. This could be the case when some required parameters
  -- are missing or, when malformed values are provided.
  postAccountKeySharedResponseBody400Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostAccountKeySharedResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= postAccountKeySharedResponseBody400Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "bad_request"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= postAccountKeySharedResponseBody400Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "bad_request"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostAccountKeySharedResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostAccountKeySharedResponseBody400" (\obj -> GHC.Base.pure PostAccountKeySharedResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'PostAccountKeySharedResponseBody400' with all required fields.
mkPostAccountKeySharedResponseBody400 :: Data.Text.Internal.Text -- ^ 'postAccountKeySharedResponseBody400Message'
  -> PostAccountKeySharedResponseBody400
mkPostAccountKeySharedResponseBody400 postAccountKeySharedResponseBody400Message = PostAccountKeySharedResponseBody400{postAccountKeySharedResponseBody400Message = postAccountKeySharedResponseBody400Message}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/keys\/{index}.POST.responses.406.content.application\/json.schema@ in the specification.
-- 
-- 
data PostAccountKeySharedResponseBody406 = PostAccountKeySharedResponseBody406 {
  -- | message: May occur when providing an invalid \'Accept\' header.
  postAccountKeySharedResponseBody406Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostAccountKeySharedResponseBody406
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= postAccountKeySharedResponseBody406Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "not_acceptable"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= postAccountKeySharedResponseBody406Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "not_acceptable"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostAccountKeySharedResponseBody406
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostAccountKeySharedResponseBody406" (\obj -> GHC.Base.pure PostAccountKeySharedResponseBody406 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'PostAccountKeySharedResponseBody406' with all required fields.
mkPostAccountKeySharedResponseBody406 :: Data.Text.Internal.Text -- ^ 'postAccountKeySharedResponseBody406Message'
  -> PostAccountKeySharedResponseBody406
mkPostAccountKeySharedResponseBody406 postAccountKeySharedResponseBody406Message = PostAccountKeySharedResponseBody406{postAccountKeySharedResponseBody406Message = postAccountKeySharedResponseBody406Message}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/keys\/{index}.POST.responses.415.content.application\/json.schema@ in the specification.
-- 
-- 
data PostAccountKeySharedResponseBody415 = PostAccountKeySharedResponseBody415 {
  -- | code: A specific error code for this error, more precise than HTTP ones.
  postAccountKeySharedResponseBody415Code :: Data.Text.Internal.Text
  -- | message: A descriptive error message.
  , postAccountKeySharedResponseBody415Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostAccountKeySharedResponseBody415
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["code" Data.Aeson.Types.ToJSON..= postAccountKeySharedResponseBody415Code obj] : ["message" Data.Aeson.Types.ToJSON..= postAccountKeySharedResponseBody415Message obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["code" Data.Aeson.Types.ToJSON..= postAccountKeySharedResponseBody415Code obj] : ["message" Data.Aeson.Types.ToJSON..= postAccountKeySharedResponseBody415Message obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostAccountKeySharedResponseBody415
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostAccountKeySharedResponseBody415" (\obj -> (GHC.Base.pure PostAccountKeySharedResponseBody415 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'PostAccountKeySharedResponseBody415' with all required fields.
mkPostAccountKeySharedResponseBody415 :: Data.Text.Internal.Text -- ^ 'postAccountKeySharedResponseBody415Code'
  -> Data.Text.Internal.Text -- ^ 'postAccountKeySharedResponseBody415Message'
  -> PostAccountKeySharedResponseBody415
mkPostAccountKeySharedResponseBody415 postAccountKeySharedResponseBody415Code postAccountKeySharedResponseBody415Message = PostAccountKeySharedResponseBody415{postAccountKeySharedResponseBody415Code = postAccountKeySharedResponseBody415Code,
                                                                                                                                                               postAccountKeySharedResponseBody415Message = postAccountKeySharedResponseBody415Message}
-- | > POST /shared-wallets/{walletId}/keys/{index}
-- 
-- The same as 'postAccountKeyShared' but accepts an explicit configuration.
postAccountKeySharedWithConfiguration :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> PostAccountKeySharedParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> PostAccountKeySharedRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response PostAccountKeySharedResponse) -- ^ Monadic computation which returns the result of the operation
postAccountKeySharedWithConfiguration config
                                      parameters
                                      body = GHC.Base.fmap (\response_5 -> GHC.Base.fmap (Data.Either.either PostAccountKeySharedResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 202) (Network.HTTP.Client.Types.responseStatus response) -> PostAccountKeySharedResponse202 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                Data.Text.Internal.Text)
                                                                                                                                                                                            | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> PostAccountKeySharedResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                PostAccountKeySharedResponseBody400)
                                                                                                                                                                                            | (\status_8 -> Network.HTTP.Types.Status.statusCode status_8 GHC.Classes.== 406) (Network.HTTP.Client.Types.responseStatus response) -> PostAccountKeySharedResponse406 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                PostAccountKeySharedResponseBody406)
                                                                                                                                                                                            | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 415) (Network.HTTP.Client.Types.responseStatus response) -> PostAccountKeySharedResponse415 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                PostAccountKeySharedResponseBody415)
                                                                                                                                                                                            | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_5) response_5) (Wallet.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") ("/shared-wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (postAccountKeySharedParametersPathWalletId parameters))) GHC.Base.<> ("/keys/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (postAccountKeySharedParametersPathIndex parameters))) GHC.Base.<> "")))) GHC.Base.mempty (GHC.Maybe.Just body) Wallet.Common.RequestBodyEncodingJSON)
-- | > POST /shared-wallets/{walletId}/keys/{index}
-- 
-- The same as 'postAccountKeyShared' but returns the raw 'Data.ByteString.ByteString'.
postAccountKeySharedRaw :: forall m . Wallet.Common.MonadHTTP m => PostAccountKeySharedParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> PostAccountKeySharedRequestBody -- ^ The request body to send
  -> Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
postAccountKeySharedRaw parameters
                        body = GHC.Base.id (Wallet.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") ("/shared-wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (postAccountKeySharedParametersPathWalletId parameters))) GHC.Base.<> ("/keys/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (postAccountKeySharedParametersPathIndex parameters))) GHC.Base.<> "")))) GHC.Base.mempty (GHC.Maybe.Just body) Wallet.Common.RequestBodyEncodingJSON)
-- | > POST /shared-wallets/{walletId}/keys/{index}
-- 
-- The same as 'postAccountKeyShared' but accepts an explicit configuration and returns the raw 'Data.ByteString.ByteString'.
postAccountKeySharedWithConfigurationRaw :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> PostAccountKeySharedParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> PostAccountKeySharedRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
postAccountKeySharedWithConfigurationRaw config
                                         parameters
                                         body = GHC.Base.id (Wallet.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") ("/shared-wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (postAccountKeySharedParametersPathWalletId parameters))) GHC.Base.<> ("/keys/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (postAccountKeySharedParametersPathIndex parameters))) GHC.Base.<> "")))) GHC.Base.mempty (GHC.Maybe.Just body) Wallet.Common.RequestBodyEncodingJSON)
