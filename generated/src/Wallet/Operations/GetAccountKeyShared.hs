-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getAccountKeyShared
module Wallet.Operations.GetAccountKeyShared where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Wallet.Common
import Wallet.Types

-- | > GET /shared-wallets/{walletId}/keys
-- 
-- \<p align=\"right\">status: \<strong>stable\<\/strong>\<\/p>
-- Retrieve the account public key of this shared wallet.
-- 
-- To get an extended public key, instead of the public key,
-- use query parameter \`format=extended\`. For non-extended public key
-- use \`format=non_extended\` or omit query parameter.
getAccountKeyShared :: forall m . Wallet.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ walletId | Constraints: Maximum length of 40, Minimum length of 40
  -> Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response GetAccountKeySharedResponse) -- ^ Monadic computation which returns the result of the operation
getAccountKeyShared walletId = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetAccountKeySharedResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountKeySharedResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                Data.Text.Internal.Text)
                                                                                                                                                                             | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountKeySharedResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                GetAccountKeySharedResponseBody400)
                                                                                                                                                                             | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountKeySharedResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                GetAccountKeySharedResponseBody404)
                                                                                                                                                                             | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 406) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountKeySharedResponse406 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                GetAccountKeySharedResponseBody406)
                                                                                                                                                                             | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Wallet.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") ("/shared-wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel walletId)) GHC.Base.<> "/keys")) GHC.Base.mempty)
-- | Represents a response of the operation 'getAccountKeyShared'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetAccountKeySharedResponseError' is used.
data GetAccountKeySharedResponse =
   GetAccountKeySharedResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetAccountKeySharedResponse200 Data.Text.Internal.Text -- ^ Ok
  | GetAccountKeySharedResponse400 GetAccountKeySharedResponseBody400 -- ^ Bad Request
  | GetAccountKeySharedResponse404 GetAccountKeySharedResponseBody404 -- ^ Not Found
  | GetAccountKeySharedResponse406 GetAccountKeySharedResponseBody406 -- ^ Not Acceptable
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/keys.GET.responses.400.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAccountKeySharedResponseBody400 = GetAccountKeySharedResponseBody400 {
  -- | message: May occur when a request is not well-formed; that is, it fails to parse
  -- successfully. This could be the case when some required parameters
  -- are missing or, when malformed values are provided.
  getAccountKeySharedResponseBody400Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountKeySharedResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= getAccountKeySharedResponseBody400Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "bad_request"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= getAccountKeySharedResponseBody400Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "bad_request"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountKeySharedResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountKeySharedResponseBody400" (\obj -> GHC.Base.pure GetAccountKeySharedResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'GetAccountKeySharedResponseBody400' with all required fields.
mkGetAccountKeySharedResponseBody400 :: Data.Text.Internal.Text -- ^ 'getAccountKeySharedResponseBody400Message'
  -> GetAccountKeySharedResponseBody400
mkGetAccountKeySharedResponseBody400 getAccountKeySharedResponseBody400Message = GetAccountKeySharedResponseBody400{getAccountKeySharedResponseBody400Message = getAccountKeySharedResponseBody400Message}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/keys.GET.responses.404.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAccountKeySharedResponseBody404 = GetAccountKeySharedResponseBody404 {
  -- | code: A specific error code for this error, more precise than HTTP ones.
  getAccountKeySharedResponseBody404Code :: Data.Text.Internal.Text
  -- | message: A descriptive error message.
  , getAccountKeySharedResponseBody404Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountKeySharedResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["code" Data.Aeson.Types.ToJSON..= getAccountKeySharedResponseBody404Code obj] : ["message" Data.Aeson.Types.ToJSON..= getAccountKeySharedResponseBody404Message obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["code" Data.Aeson.Types.ToJSON..= getAccountKeySharedResponseBody404Code obj] : ["message" Data.Aeson.Types.ToJSON..= getAccountKeySharedResponseBody404Message obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountKeySharedResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountKeySharedResponseBody404" (\obj -> (GHC.Base.pure GetAccountKeySharedResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'GetAccountKeySharedResponseBody404' with all required fields.
mkGetAccountKeySharedResponseBody404 :: Data.Text.Internal.Text -- ^ 'getAccountKeySharedResponseBody404Code'
  -> Data.Text.Internal.Text -- ^ 'getAccountKeySharedResponseBody404Message'
  -> GetAccountKeySharedResponseBody404
mkGetAccountKeySharedResponseBody404 getAccountKeySharedResponseBody404Code getAccountKeySharedResponseBody404Message = GetAccountKeySharedResponseBody404{getAccountKeySharedResponseBody404Code = getAccountKeySharedResponseBody404Code,
                                                                                                                                                           getAccountKeySharedResponseBody404Message = getAccountKeySharedResponseBody404Message}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/keys.GET.responses.406.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAccountKeySharedResponseBody406 = GetAccountKeySharedResponseBody406 {
  -- | message: May occur when providing an invalid \'Accept\' header.
  getAccountKeySharedResponseBody406Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountKeySharedResponseBody406
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= getAccountKeySharedResponseBody406Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "not_acceptable"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= getAccountKeySharedResponseBody406Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "not_acceptable"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountKeySharedResponseBody406
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountKeySharedResponseBody406" (\obj -> GHC.Base.pure GetAccountKeySharedResponseBody406 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'GetAccountKeySharedResponseBody406' with all required fields.
mkGetAccountKeySharedResponseBody406 :: Data.Text.Internal.Text -- ^ 'getAccountKeySharedResponseBody406Message'
  -> GetAccountKeySharedResponseBody406
mkGetAccountKeySharedResponseBody406 getAccountKeySharedResponseBody406Message = GetAccountKeySharedResponseBody406{getAccountKeySharedResponseBody406Message = getAccountKeySharedResponseBody406Message}
-- | > GET /shared-wallets/{walletId}/keys
-- 
-- The same as 'getAccountKeyShared' but accepts an explicit configuration.
getAccountKeySharedWithConfiguration :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ walletId | Constraints: Maximum length of 40, Minimum length of 40
  -> m (Network.HTTP.Client.Types.Response GetAccountKeySharedResponse) -- ^ Monadic computation which returns the result of the operation
getAccountKeySharedWithConfiguration config
                                     walletId = GHC.Base.fmap (\response_5 -> GHC.Base.fmap (Data.Either.either GetAccountKeySharedResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountKeySharedResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                 Data.Text.Internal.Text)
                                                                                                                                                                                              | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountKeySharedResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                 GetAccountKeySharedResponseBody400)
                                                                                                                                                                                              | (\status_8 -> Network.HTTP.Types.Status.statusCode status_8 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountKeySharedResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                 GetAccountKeySharedResponseBody404)
                                                                                                                                                                                              | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 406) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountKeySharedResponse406 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                 GetAccountKeySharedResponseBody406)
                                                                                                                                                                                              | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_5) response_5) (Wallet.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") ("/shared-wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel walletId)) GHC.Base.<> "/keys")) GHC.Base.mempty)
-- | > GET /shared-wallets/{walletId}/keys
-- 
-- The same as 'getAccountKeyShared' but returns the raw 'Data.ByteString.ByteString'.
getAccountKeySharedRaw :: forall m . Wallet.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ walletId | Constraints: Maximum length of 40, Minimum length of 40
  -> Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
getAccountKeySharedRaw walletId = GHC.Base.id (Wallet.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") ("/shared-wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel walletId)) GHC.Base.<> "/keys")) GHC.Base.mempty)
-- | > GET /shared-wallets/{walletId}/keys
-- 
-- The same as 'getAccountKeyShared' but accepts an explicit configuration and returns the raw 'Data.ByteString.ByteString'.
getAccountKeySharedWithConfigurationRaw :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ walletId | Constraints: Maximum length of 40, Minimum length of 40
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
getAccountKeySharedWithConfigurationRaw config
                                        walletId = GHC.Base.id (Wallet.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") ("/shared-wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel walletId)) GHC.Base.<> "/keys")) GHC.Base.mempty)
