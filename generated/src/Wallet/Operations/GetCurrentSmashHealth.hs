-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getCurrentSmashHealth
module Wallet.Operations.GetCurrentSmashHealth where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Wallet.Common
import Wallet.Types

-- | > GET /smash/health
-- 
-- Get health status of the currently active SMASH server.
getCurrentSmashHealth :: forall m . Wallet.Common.MonadHTTP m => GHC.Maybe.Maybe Data.Text.Internal.Text -- ^ url: check this url for health instead of the currently configured one | Constraints: Must match pattern \'^https?:\\\/\\\/[a-zA-Z0-9-_~.]+(:[0-9]+)?\/?\$\'
  -> Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response GetCurrentSmashHealthResponse) -- ^ Monadic computation which returns the result of the operation
getCurrentSmashHealth url = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetCurrentSmashHealthResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetCurrentSmashHealthResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                 GetCurrentSmashHealthResponseBody200)
                                                                                                                                                                            | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetCurrentSmashHealthResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                 GetCurrentSmashHealthResponseBody400)
                                                                                                                                                                            | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 406) (Network.HTTP.Client.Types.responseStatus response) -> GetCurrentSmashHealthResponse406 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                 GetCurrentSmashHealthResponseBody406)
                                                                                                                                                                            | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Wallet.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") "/smash/health" [Wallet.Common.QueryParameter (Data.Text.pack "url") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> url) (Data.Text.pack "form") GHC.Types.False])
-- | Represents a response of the operation 'getCurrentSmashHealth'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetCurrentSmashHealthResponseError' is used.
data GetCurrentSmashHealthResponse =
   GetCurrentSmashHealthResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetCurrentSmashHealthResponse200 GetCurrentSmashHealthResponseBody200 -- ^ Ok
  | GetCurrentSmashHealthResponse400 GetCurrentSmashHealthResponseBody400 -- ^ Bad Request
  | GetCurrentSmashHealthResponse406 GetCurrentSmashHealthResponseBody406 -- ^ Not Acceptable
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/smash\/health.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- The status of the SMASH server. Possible values are:
-- 
-- health                  | description
-- ---                     | ---
-- \`\"available\"\`           | server is awaiting your requests
-- \`\"unavailable\"\`         | server is running, but currently unavailable, try again in a short time
-- \`\"unreachable\"\`         | server could not be reached or didn\'t return a health status
-- \`\"no_smash_configured\"\` | SMASH is currently not configured, adjust the Settings first
data GetCurrentSmashHealthResponseBody200 = GetCurrentSmashHealthResponseBody200 {
  -- | health
  getCurrentSmashHealthResponseBody200Health :: GetCurrentSmashHealthResponseBody200Health
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetCurrentSmashHealthResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["health" Data.Aeson.Types.ToJSON..= getCurrentSmashHealthResponseBody200Health obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["health" Data.Aeson.Types.ToJSON..= getCurrentSmashHealthResponseBody200Health obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetCurrentSmashHealthResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetCurrentSmashHealthResponseBody200" (\obj -> GHC.Base.pure GetCurrentSmashHealthResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "health"))
-- | Create a new 'GetCurrentSmashHealthResponseBody200' with all required fields.
mkGetCurrentSmashHealthResponseBody200 :: GetCurrentSmashHealthResponseBody200Health -- ^ 'getCurrentSmashHealthResponseBody200Health'
  -> GetCurrentSmashHealthResponseBody200
mkGetCurrentSmashHealthResponseBody200 getCurrentSmashHealthResponseBody200Health = GetCurrentSmashHealthResponseBody200{getCurrentSmashHealthResponseBody200Health = getCurrentSmashHealthResponseBody200Health}
-- | Defines the enum schema located at @paths.\/smash\/health.GET.responses.200.content.application\/json.schema.properties.health@ in the specification.
-- 
-- 
data GetCurrentSmashHealthResponseBody200Health =
   GetCurrentSmashHealthResponseBody200HealthOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetCurrentSmashHealthResponseBody200HealthTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetCurrentSmashHealthResponseBody200HealthEnumAvailable -- ^ Represents the JSON value @"available"@
  | GetCurrentSmashHealthResponseBody200HealthEnumUnavailable -- ^ Represents the JSON value @"unavailable"@
  | GetCurrentSmashHealthResponseBody200HealthEnumUnreachable -- ^ Represents the JSON value @"unreachable"@
  | GetCurrentSmashHealthResponseBody200HealthEnumNo_smash_configured -- ^ Represents the JSON value @"no_smash_configured"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetCurrentSmashHealthResponseBody200Health
    where toJSON (GetCurrentSmashHealthResponseBody200HealthOther val) = val
          toJSON (GetCurrentSmashHealthResponseBody200HealthTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetCurrentSmashHealthResponseBody200HealthEnumAvailable) = "available"
          toJSON (GetCurrentSmashHealthResponseBody200HealthEnumUnavailable) = "unavailable"
          toJSON (GetCurrentSmashHealthResponseBody200HealthEnumUnreachable) = "unreachable"
          toJSON (GetCurrentSmashHealthResponseBody200HealthEnumNo_smash_configured) = "no_smash_configured"
instance Data.Aeson.Types.FromJSON.FromJSON GetCurrentSmashHealthResponseBody200Health
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "available" -> GetCurrentSmashHealthResponseBody200HealthEnumAvailable
                                            | val GHC.Classes.== "unavailable" -> GetCurrentSmashHealthResponseBody200HealthEnumUnavailable
                                            | val GHC.Classes.== "unreachable" -> GetCurrentSmashHealthResponseBody200HealthEnumUnreachable
                                            | val GHC.Classes.== "no_smash_configured" -> GetCurrentSmashHealthResponseBody200HealthEnumNo_smash_configured
                                            | GHC.Base.otherwise -> GetCurrentSmashHealthResponseBody200HealthOther val)
-- | Defines the object schema located at @paths.\/smash\/health.GET.responses.400.content.application\/json.schema@ in the specification.
-- 
-- 
data GetCurrentSmashHealthResponseBody400 = GetCurrentSmashHealthResponseBody400 {
  -- | message: May occur when a request is not well-formed; that is, it fails to parse
  -- successfully. This could be the case when some required parameters
  -- are missing or, when malformed values are provided.
  getCurrentSmashHealthResponseBody400Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetCurrentSmashHealthResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= getCurrentSmashHealthResponseBody400Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "bad_request"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= getCurrentSmashHealthResponseBody400Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "bad_request"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetCurrentSmashHealthResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetCurrentSmashHealthResponseBody400" (\obj -> GHC.Base.pure GetCurrentSmashHealthResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'GetCurrentSmashHealthResponseBody400' with all required fields.
mkGetCurrentSmashHealthResponseBody400 :: Data.Text.Internal.Text -- ^ 'getCurrentSmashHealthResponseBody400Message'
  -> GetCurrentSmashHealthResponseBody400
mkGetCurrentSmashHealthResponseBody400 getCurrentSmashHealthResponseBody400Message = GetCurrentSmashHealthResponseBody400{getCurrentSmashHealthResponseBody400Message = getCurrentSmashHealthResponseBody400Message}
-- | Defines the object schema located at @paths.\/smash\/health.GET.responses.406.content.application\/json.schema@ in the specification.
-- 
-- 
data GetCurrentSmashHealthResponseBody406 = GetCurrentSmashHealthResponseBody406 {
  -- | message: May occur when providing an invalid \'Accept\' header.
  getCurrentSmashHealthResponseBody406Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetCurrentSmashHealthResponseBody406
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= getCurrentSmashHealthResponseBody406Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "not_acceptable"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= getCurrentSmashHealthResponseBody406Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "not_acceptable"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetCurrentSmashHealthResponseBody406
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetCurrentSmashHealthResponseBody406" (\obj -> GHC.Base.pure GetCurrentSmashHealthResponseBody406 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'GetCurrentSmashHealthResponseBody406' with all required fields.
mkGetCurrentSmashHealthResponseBody406 :: Data.Text.Internal.Text -- ^ 'getCurrentSmashHealthResponseBody406Message'
  -> GetCurrentSmashHealthResponseBody406
mkGetCurrentSmashHealthResponseBody406 getCurrentSmashHealthResponseBody406Message = GetCurrentSmashHealthResponseBody406{getCurrentSmashHealthResponseBody406Message = getCurrentSmashHealthResponseBody406Message}
-- | > GET /smash/health
-- 
-- The same as 'getCurrentSmashHealth' but accepts an explicit configuration.
getCurrentSmashHealthWithConfiguration :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> GHC.Maybe.Maybe Data.Text.Internal.Text -- ^ url: check this url for health instead of the currently configured one | Constraints: Must match pattern \'^https?:\\\/\\\/[a-zA-Z0-9-_~.]+(:[0-9]+)?\/?\$\'
  -> m (Network.HTTP.Client.Types.Response GetCurrentSmashHealthResponse) -- ^ Monadic computation which returns the result of the operation
getCurrentSmashHealthWithConfiguration config
                                       url = GHC.Base.fmap (\response_4 -> GHC.Base.fmap (Data.Either.either GetCurrentSmashHealthResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetCurrentSmashHealthResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                  GetCurrentSmashHealthResponseBody200)
                                                                                                                                                                                             | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetCurrentSmashHealthResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                  GetCurrentSmashHealthResponseBody400)
                                                                                                                                                                                             | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 406) (Network.HTTP.Client.Types.responseStatus response) -> GetCurrentSmashHealthResponse406 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                  GetCurrentSmashHealthResponseBody406)
                                                                                                                                                                                             | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_4) response_4) (Wallet.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") "/smash/health" [Wallet.Common.QueryParameter (Data.Text.pack "url") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> url) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /smash/health
-- 
-- The same as 'getCurrentSmashHealth' but returns the raw 'Data.ByteString.ByteString'.
getCurrentSmashHealthRaw :: forall m . Wallet.Common.MonadHTTP m => GHC.Maybe.Maybe Data.Text.Internal.Text -- ^ url: check this url for health instead of the currently configured one | Constraints: Must match pattern \'^https?:\\\/\\\/[a-zA-Z0-9-_~.]+(:[0-9]+)?\/?\$\'
  -> Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
getCurrentSmashHealthRaw url = GHC.Base.id (Wallet.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") "/smash/health" [Wallet.Common.QueryParameter (Data.Text.pack "url") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> url) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /smash/health
-- 
-- The same as 'getCurrentSmashHealth' but accepts an explicit configuration and returns the raw 'Data.ByteString.ByteString'.
getCurrentSmashHealthWithConfigurationRaw :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> GHC.Maybe.Maybe Data.Text.Internal.Text -- ^ url: check this url for health instead of the currently configured one | Constraints: Must match pattern \'^https?:\\\/\\\/[a-zA-Z0-9-_~.]+(:[0-9]+)?\/?\$\'
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
getCurrentSmashHealthWithConfigurationRaw config
                                          url = GHC.Base.id (Wallet.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") "/smash/health" [Wallet.Common.QueryParameter (Data.Text.pack "url") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> url) (Data.Text.pack "form") GHC.Types.False])
