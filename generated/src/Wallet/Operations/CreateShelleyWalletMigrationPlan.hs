-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation createShelleyWalletMigrationPlan
module Wallet.Operations.CreateShelleyWalletMigrationPlan where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Wallet.Common
import Wallet.Types

-- | > POST /wallets/{walletId}/migrations/plan
-- 
-- Generate a plan for migrating the UTxO balance of this wallet to
-- another wallet, without executing the plan.
-- 
-- This operation generates a plan that transfers as much of the wallet\'s
-- balance as possible, by creating as many selections as may be necessary
-- to migrate the entire balance.  Each selection created is the basis for
-- a transaction.
-- 
-- In order to minimize the total transaction fee required, UTxO entries
-- are coalesced together to the greatest extent possible in the resulting
-- selections. No attempt is made to preserve the wallet\'s UTxO
-- distribution.
-- 
-- The plan is generated on a best-effort basis. If there is insufficient
-- ada available to pay for the entire UTxO set to be migrated, then only
-- a subset of the wallet\'s UTxO set will be included in the resultant
-- plan.
createShelleyWalletMigrationPlan :: forall m . Wallet.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ walletId | Constraints: Maximum length of 40, Minimum length of 40
  -> CreateShelleyWalletMigrationPlanRequestBody -- ^ The request body to send
  -> Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response CreateShelleyWalletMigrationPlanResponse) -- ^ Monadic computation which returns the result of the operation
createShelleyWalletMigrationPlan walletId
                                 body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either CreateShelleyWalletMigrationPlanResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 202) (Network.HTTP.Client.Types.responseStatus response) -> CreateShelleyWalletMigrationPlanResponse202 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   CreateShelleyWalletMigrationPlanResponseBody202)
                                                                                                                                                                                                   | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> CreateShelleyWalletMigrationPlanResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   CreateShelleyWalletMigrationPlanResponseBody403)
                                                                                                                                                                                                   | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> CreateShelleyWalletMigrationPlanResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   CreateShelleyWalletMigrationPlanResponseBody404)
                                                                                                                                                                                                   | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 406) (Network.HTTP.Client.Types.responseStatus response) -> CreateShelleyWalletMigrationPlanResponse406 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   CreateShelleyWalletMigrationPlanResponseBody406)
                                                                                                                                                                                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Wallet.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") ("/wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel walletId)) GHC.Base.<> "/migrations/plan")) GHC.Base.mempty (GHC.Maybe.Just body) Wallet.Common.RequestBodyEncodingJSON)
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/migrations\/plan.POST.requestBody.content.application\/json.schema@ in the specification.
-- 
-- 
data CreateShelleyWalletMigrationPlanRequestBody = CreateShelleyWalletMigrationPlanRequestBody {
  -- | addresses: The recipient addresses.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  createShelleyWalletMigrationPlanRequestBodyAddresses :: ([Data.Text.Internal.Text])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateShelleyWalletMigrationPlanRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["addresses" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanRequestBodyAddresses obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["addresses" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanRequestBodyAddresses obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON CreateShelleyWalletMigrationPlanRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateShelleyWalletMigrationPlanRequestBody" (\obj -> GHC.Base.pure CreateShelleyWalletMigrationPlanRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "addresses"))
-- | Create a new 'CreateShelleyWalletMigrationPlanRequestBody' with all required fields.
mkCreateShelleyWalletMigrationPlanRequestBody :: [Data.Text.Internal.Text] -- ^ 'createShelleyWalletMigrationPlanRequestBodyAddresses'
  -> CreateShelleyWalletMigrationPlanRequestBody
mkCreateShelleyWalletMigrationPlanRequestBody createShelleyWalletMigrationPlanRequestBodyAddresses = CreateShelleyWalletMigrationPlanRequestBody{createShelleyWalletMigrationPlanRequestBodyAddresses = createShelleyWalletMigrationPlanRequestBodyAddresses}
-- | Represents a response of the operation 'createShelleyWalletMigrationPlan'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'CreateShelleyWalletMigrationPlanResponseError' is used.
data CreateShelleyWalletMigrationPlanResponse =
   CreateShelleyWalletMigrationPlanResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | CreateShelleyWalletMigrationPlanResponse202 CreateShelleyWalletMigrationPlanResponseBody202 -- ^ Accepted
  | CreateShelleyWalletMigrationPlanResponse403 CreateShelleyWalletMigrationPlanResponseBody403 -- ^ Forbidden
  | CreateShelleyWalletMigrationPlanResponse404 CreateShelleyWalletMigrationPlanResponseBody404 -- ^ Not Found
  | CreateShelleyWalletMigrationPlanResponse406 CreateShelleyWalletMigrationPlanResponseBody406 -- ^ Not Acceptable
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/migrations\/plan.POST.responses.202.content.application\/json.schema@ in the specification.
-- 
-- 
data CreateShelleyWalletMigrationPlanResponseBody202 = CreateShelleyWalletMigrationPlanResponseBody202 {
  -- | balance_leftover: The total balance of assets that **cannot** be migrated.
  -- 
  -- The **ada** component of this balance is the total sum of all dust
  -- ada entries in the UTxO set. An ada entry is considered to be dust
  -- if its value is not large enough to pay for the marginal cost of
  -- including it in a transaction.
  -- 
  -- The **assets** component of this balance is the total sum of all
  -- non-ada assets that cannot currently be migrated. Tokens of a
  -- non-ada asset cannot be migrated if there is insufficient ada
  -- available to pay for their inclusion in a transaction.
  createShelleyWalletMigrationPlanResponseBody202Balance_leftover :: CreateShelleyWalletMigrationPlanResponseBody202Balance_leftover
  -- | balance_selected: The total balance of assets that **can** be migrated.
  , createShelleyWalletMigrationPlanResponseBody202Balance_selected :: CreateShelleyWalletMigrationPlanResponseBody202Balance_selected
  -- | selections: The complete set of selections required for a migration.
  -- 
  -- Each selection is the basis for a single transaction.
  -- 
  -- The ordering of selections within the list is not significant.
  -- After conversion into transactions, the transactions can be
  -- broadcast to the network in any order to perform the migration.
  , createShelleyWalletMigrationPlanResponseBody202Selections :: ([CreateShelleyWalletMigrationPlanResponseBody202Selections])
  -- | total_fee: The total amount to be paid in fees for a migration.
  -- 
  -- This is the total sum of the fees of the individual selections.
  , createShelleyWalletMigrationPlanResponseBody202Total_fee :: CreateShelleyWalletMigrationPlanResponseBody202Total_fee
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateShelleyWalletMigrationPlanResponseBody202
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["balance_leftover" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202Balance_leftover obj] : ["balance_selected" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202Balance_selected obj] : ["selections" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202Selections obj] : ["total_fee" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202Total_fee obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["balance_leftover" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202Balance_leftover obj] : ["balance_selected" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202Balance_selected obj] : ["selections" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202Selections obj] : ["total_fee" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202Total_fee obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON CreateShelleyWalletMigrationPlanResponseBody202
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateShelleyWalletMigrationPlanResponseBody202" (\obj -> (((GHC.Base.pure CreateShelleyWalletMigrationPlanResponseBody202 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "balance_leftover")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "balance_selected")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "selections")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "total_fee"))
-- | Create a new 'CreateShelleyWalletMigrationPlanResponseBody202' with all required fields.
mkCreateShelleyWalletMigrationPlanResponseBody202 :: CreateShelleyWalletMigrationPlanResponseBody202Balance_leftover -- ^ 'createShelleyWalletMigrationPlanResponseBody202Balance_leftover'
  -> CreateShelleyWalletMigrationPlanResponseBody202Balance_selected -- ^ 'createShelleyWalletMigrationPlanResponseBody202Balance_selected'
  -> [CreateShelleyWalletMigrationPlanResponseBody202Selections] -- ^ 'createShelleyWalletMigrationPlanResponseBody202Selections'
  -> CreateShelleyWalletMigrationPlanResponseBody202Total_fee -- ^ 'createShelleyWalletMigrationPlanResponseBody202Total_fee'
  -> CreateShelleyWalletMigrationPlanResponseBody202
mkCreateShelleyWalletMigrationPlanResponseBody202 createShelleyWalletMigrationPlanResponseBody202Balance_leftover createShelleyWalletMigrationPlanResponseBody202Balance_selected createShelleyWalletMigrationPlanResponseBody202Selections createShelleyWalletMigrationPlanResponseBody202Total_fee = CreateShelleyWalletMigrationPlanResponseBody202{createShelleyWalletMigrationPlanResponseBody202Balance_leftover = createShelleyWalletMigrationPlanResponseBody202Balance_leftover,
                                                                                                                                                                                                                                                                                                                                                       createShelleyWalletMigrationPlanResponseBody202Balance_selected = createShelleyWalletMigrationPlanResponseBody202Balance_selected,
                                                                                                                                                                                                                                                                                                                                                       createShelleyWalletMigrationPlanResponseBody202Selections = createShelleyWalletMigrationPlanResponseBody202Selections,
                                                                                                                                                                                                                                                                                                                                                       createShelleyWalletMigrationPlanResponseBody202Total_fee = createShelleyWalletMigrationPlanResponseBody202Total_fee}
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/migrations\/plan.POST.responses.202.content.application\/json.schema.properties.balance_leftover@ in the specification.
-- 
-- The total balance of assets that **cannot** be migrated.
-- 
-- The **ada** component of this balance is the total sum of all dust
-- ada entries in the UTxO set. An ada entry is considered to be dust
-- if its value is not large enough to pay for the marginal cost of
-- including it in a transaction.
-- 
-- The **assets** component of this balance is the total sum of all
-- non-ada assets that cannot currently be migrated. Tokens of a
-- non-ada asset cannot be migrated if there is insufficient ada
-- available to pay for their inclusion in a transaction.
data CreateShelleyWalletMigrationPlanResponseBody202Balance_leftover = CreateShelleyWalletMigrationPlanResponseBody202Balance_leftover {
  -- | ada: Coins, in Lovelace. Only relates to \'Ada\'. Refer to \`assets\` for multi-assets wallets instead.
  createShelleyWalletMigrationPlanResponseBody202Balance_leftoverAda :: CreateShelleyWalletMigrationPlanResponseBody202Balance_leftoverAda
  -- | assets: A flat list of assets (possibly empty).
  , createShelleyWalletMigrationPlanResponseBody202Balance_leftoverAssets :: ([CreateShelleyWalletMigrationPlanResponseBody202Balance_leftoverAssets])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateShelleyWalletMigrationPlanResponseBody202Balance_leftover
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["ada" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202Balance_leftoverAda obj] : ["assets" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202Balance_leftoverAssets obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["ada" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202Balance_leftoverAda obj] : ["assets" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202Balance_leftoverAssets obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON CreateShelleyWalletMigrationPlanResponseBody202Balance_leftover
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateShelleyWalletMigrationPlanResponseBody202Balance_leftover" (\obj -> (GHC.Base.pure CreateShelleyWalletMigrationPlanResponseBody202Balance_leftover GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ada")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "assets"))
-- | Create a new 'CreateShelleyWalletMigrationPlanResponseBody202Balance_leftover' with all required fields.
mkCreateShelleyWalletMigrationPlanResponseBody202Balance_leftover :: CreateShelleyWalletMigrationPlanResponseBody202Balance_leftoverAda -- ^ 'createShelleyWalletMigrationPlanResponseBody202Balance_leftoverAda'
  -> [CreateShelleyWalletMigrationPlanResponseBody202Balance_leftoverAssets] -- ^ 'createShelleyWalletMigrationPlanResponseBody202Balance_leftoverAssets'
  -> CreateShelleyWalletMigrationPlanResponseBody202Balance_leftover
mkCreateShelleyWalletMigrationPlanResponseBody202Balance_leftover createShelleyWalletMigrationPlanResponseBody202Balance_leftoverAda createShelleyWalletMigrationPlanResponseBody202Balance_leftoverAssets = CreateShelleyWalletMigrationPlanResponseBody202Balance_leftover{createShelleyWalletMigrationPlanResponseBody202Balance_leftoverAda = createShelleyWalletMigrationPlanResponseBody202Balance_leftoverAda,
                                                                                                                                                                                                                                                                             createShelleyWalletMigrationPlanResponseBody202Balance_leftoverAssets = createShelleyWalletMigrationPlanResponseBody202Balance_leftoverAssets}
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/migrations\/plan.POST.responses.202.content.application\/json.schema.properties.balance_leftover.properties.ada@ in the specification.
-- 
-- Coins, in Lovelace. Only relates to \'Ada\'. Refer to \`assets\` for multi-assets wallets instead.
data CreateShelleyWalletMigrationPlanResponseBody202Balance_leftoverAda = CreateShelleyWalletMigrationPlanResponseBody202Balance_leftoverAda {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  createShelleyWalletMigrationPlanResponseBody202Balance_leftoverAdaQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateShelleyWalletMigrationPlanResponseBody202Balance_leftoverAda
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202Balance_leftoverAdaQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202Balance_leftoverAdaQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON CreateShelleyWalletMigrationPlanResponseBody202Balance_leftoverAda
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateShelleyWalletMigrationPlanResponseBody202Balance_leftoverAda" (\obj -> GHC.Base.pure CreateShelleyWalletMigrationPlanResponseBody202Balance_leftoverAda GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'CreateShelleyWalletMigrationPlanResponseBody202Balance_leftoverAda' with all required fields.
mkCreateShelleyWalletMigrationPlanResponseBody202Balance_leftoverAda :: GHC.Types.Int -- ^ 'createShelleyWalletMigrationPlanResponseBody202Balance_leftoverAdaQuantity'
  -> CreateShelleyWalletMigrationPlanResponseBody202Balance_leftoverAda
mkCreateShelleyWalletMigrationPlanResponseBody202Balance_leftoverAda createShelleyWalletMigrationPlanResponseBody202Balance_leftoverAdaQuantity = CreateShelleyWalletMigrationPlanResponseBody202Balance_leftoverAda{createShelleyWalletMigrationPlanResponseBody202Balance_leftoverAdaQuantity = createShelleyWalletMigrationPlanResponseBody202Balance_leftoverAdaQuantity}
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/migrations\/plan.POST.responses.202.content.application\/json.schema.properties.balance_leftover.properties.assets.items@ in the specification.
-- 
-- An asset on the Cardano blockchain. An asset is uniquely identified by
-- its \`policy_id\` and \`asset_name\` (together, these form the _asset id_).
-- 
-- Two assets with the same \`asset_name\` and \`policy_id\` are
-- interchangeable. Yet, different assets with a same \`policy_id\` but
-- different \`asset_name\` are treated as separate assets, as are two
-- assets with the same \`asset_name\` but different \`policy_id\`.
data CreateShelleyWalletMigrationPlanResponseBody202Balance_leftoverAssets = CreateShelleyWalletMigrationPlanResponseBody202Balance_leftoverAssets {
  -- | asset_name: The asset on-chain type which acts as a sub-identifier within a
  -- policy. Although we call it \"asset name\", the value needn\'t be
  -- text, and it could even be empty.
  -- 
  -- For policies with a single fungible asset item, asset name is
  -- typically an empty string.
  -- 
  -- This value can be up to 32 bytes of arbitrary data (which is 64
  -- hexadecimal digits).
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  createShelleyWalletMigrationPlanResponseBody202Balance_leftoverAssetsAsset_name :: Data.Text.Internal.Text
  -- | policy_id: A unique identifier of the asset\'s monetary policy. The policy
  -- controls how assets of this kind are created and destroyed.
  -- 
  -- The contents are the blake2b-224 hash of the monetary policy
  -- script, encoded in hexadecimal.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 56
  -- * Minimum length of 56
  , createShelleyWalletMigrationPlanResponseBody202Balance_leftoverAssetsPolicy_id :: Data.Text.Internal.Text
  -- | quantity: Number of assets for the given \`policy_id\` and \`asset_name\`.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , createShelleyWalletMigrationPlanResponseBody202Balance_leftoverAssetsQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateShelleyWalletMigrationPlanResponseBody202Balance_leftoverAssets
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["asset_name" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202Balance_leftoverAssetsAsset_name obj] : ["policy_id" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202Balance_leftoverAssetsPolicy_id obj] : ["quantity" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202Balance_leftoverAssetsQuantity obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["asset_name" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202Balance_leftoverAssetsAsset_name obj] : ["policy_id" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202Balance_leftoverAssetsPolicy_id obj] : ["quantity" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202Balance_leftoverAssetsQuantity obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON CreateShelleyWalletMigrationPlanResponseBody202Balance_leftoverAssets
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateShelleyWalletMigrationPlanResponseBody202Balance_leftoverAssets" (\obj -> ((GHC.Base.pure CreateShelleyWalletMigrationPlanResponseBody202Balance_leftoverAssets GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "asset_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "policy_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'CreateShelleyWalletMigrationPlanResponseBody202Balance_leftoverAssets' with all required fields.
mkCreateShelleyWalletMigrationPlanResponseBody202Balance_leftoverAssets :: Data.Text.Internal.Text -- ^ 'createShelleyWalletMigrationPlanResponseBody202Balance_leftoverAssetsAsset_name'
  -> Data.Text.Internal.Text -- ^ 'createShelleyWalletMigrationPlanResponseBody202Balance_leftoverAssetsPolicy_id'
  -> GHC.Types.Int -- ^ 'createShelleyWalletMigrationPlanResponseBody202Balance_leftoverAssetsQuantity'
  -> CreateShelleyWalletMigrationPlanResponseBody202Balance_leftoverAssets
mkCreateShelleyWalletMigrationPlanResponseBody202Balance_leftoverAssets createShelleyWalletMigrationPlanResponseBody202Balance_leftoverAssetsAsset_name createShelleyWalletMigrationPlanResponseBody202Balance_leftoverAssetsPolicy_id createShelleyWalletMigrationPlanResponseBody202Balance_leftoverAssetsQuantity = CreateShelleyWalletMigrationPlanResponseBody202Balance_leftoverAssets{createShelleyWalletMigrationPlanResponseBody202Balance_leftoverAssetsAsset_name = createShelleyWalletMigrationPlanResponseBody202Balance_leftoverAssetsAsset_name,
                                                                                                                                                                                                                                                                                                                                                                                             createShelleyWalletMigrationPlanResponseBody202Balance_leftoverAssetsPolicy_id = createShelleyWalletMigrationPlanResponseBody202Balance_leftoverAssetsPolicy_id,
                                                                                                                                                                                                                                                                                                                                                                                             createShelleyWalletMigrationPlanResponseBody202Balance_leftoverAssetsQuantity = createShelleyWalletMigrationPlanResponseBody202Balance_leftoverAssetsQuantity}
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/migrations\/plan.POST.responses.202.content.application\/json.schema.properties.balance_selected@ in the specification.
-- 
-- The total balance of assets that **can** be migrated.
data CreateShelleyWalletMigrationPlanResponseBody202Balance_selected = CreateShelleyWalletMigrationPlanResponseBody202Balance_selected {
  -- | ada: Coins, in Lovelace. Only relates to \'Ada\'. Refer to \`assets\` for multi-assets wallets instead.
  createShelleyWalletMigrationPlanResponseBody202Balance_selectedAda :: CreateShelleyWalletMigrationPlanResponseBody202Balance_selectedAda
  -- | assets: A flat list of assets (possibly empty).
  , createShelleyWalletMigrationPlanResponseBody202Balance_selectedAssets :: ([CreateShelleyWalletMigrationPlanResponseBody202Balance_selectedAssets])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateShelleyWalletMigrationPlanResponseBody202Balance_selected
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["ada" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202Balance_selectedAda obj] : ["assets" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202Balance_selectedAssets obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["ada" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202Balance_selectedAda obj] : ["assets" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202Balance_selectedAssets obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON CreateShelleyWalletMigrationPlanResponseBody202Balance_selected
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateShelleyWalletMigrationPlanResponseBody202Balance_selected" (\obj -> (GHC.Base.pure CreateShelleyWalletMigrationPlanResponseBody202Balance_selected GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ada")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "assets"))
-- | Create a new 'CreateShelleyWalletMigrationPlanResponseBody202Balance_selected' with all required fields.
mkCreateShelleyWalletMigrationPlanResponseBody202Balance_selected :: CreateShelleyWalletMigrationPlanResponseBody202Balance_selectedAda -- ^ 'createShelleyWalletMigrationPlanResponseBody202Balance_selectedAda'
  -> [CreateShelleyWalletMigrationPlanResponseBody202Balance_selectedAssets] -- ^ 'createShelleyWalletMigrationPlanResponseBody202Balance_selectedAssets'
  -> CreateShelleyWalletMigrationPlanResponseBody202Balance_selected
mkCreateShelleyWalletMigrationPlanResponseBody202Balance_selected createShelleyWalletMigrationPlanResponseBody202Balance_selectedAda createShelleyWalletMigrationPlanResponseBody202Balance_selectedAssets = CreateShelleyWalletMigrationPlanResponseBody202Balance_selected{createShelleyWalletMigrationPlanResponseBody202Balance_selectedAda = createShelleyWalletMigrationPlanResponseBody202Balance_selectedAda,
                                                                                                                                                                                                                                                                             createShelleyWalletMigrationPlanResponseBody202Balance_selectedAssets = createShelleyWalletMigrationPlanResponseBody202Balance_selectedAssets}
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/migrations\/plan.POST.responses.202.content.application\/json.schema.properties.balance_selected.properties.ada@ in the specification.
-- 
-- Coins, in Lovelace. Only relates to \'Ada\'. Refer to \`assets\` for multi-assets wallets instead.
data CreateShelleyWalletMigrationPlanResponseBody202Balance_selectedAda = CreateShelleyWalletMigrationPlanResponseBody202Balance_selectedAda {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  createShelleyWalletMigrationPlanResponseBody202Balance_selectedAdaQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateShelleyWalletMigrationPlanResponseBody202Balance_selectedAda
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202Balance_selectedAdaQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202Balance_selectedAdaQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON CreateShelleyWalletMigrationPlanResponseBody202Balance_selectedAda
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateShelleyWalletMigrationPlanResponseBody202Balance_selectedAda" (\obj -> GHC.Base.pure CreateShelleyWalletMigrationPlanResponseBody202Balance_selectedAda GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'CreateShelleyWalletMigrationPlanResponseBody202Balance_selectedAda' with all required fields.
mkCreateShelleyWalletMigrationPlanResponseBody202Balance_selectedAda :: GHC.Types.Int -- ^ 'createShelleyWalletMigrationPlanResponseBody202Balance_selectedAdaQuantity'
  -> CreateShelleyWalletMigrationPlanResponseBody202Balance_selectedAda
mkCreateShelleyWalletMigrationPlanResponseBody202Balance_selectedAda createShelleyWalletMigrationPlanResponseBody202Balance_selectedAdaQuantity = CreateShelleyWalletMigrationPlanResponseBody202Balance_selectedAda{createShelleyWalletMigrationPlanResponseBody202Balance_selectedAdaQuantity = createShelleyWalletMigrationPlanResponseBody202Balance_selectedAdaQuantity}
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/migrations\/plan.POST.responses.202.content.application\/json.schema.properties.balance_selected.properties.assets.items@ in the specification.
-- 
-- An asset on the Cardano blockchain. An asset is uniquely identified by
-- its \`policy_id\` and \`asset_name\` (together, these form the _asset id_).
-- 
-- Two assets with the same \`asset_name\` and \`policy_id\` are
-- interchangeable. Yet, different assets with a same \`policy_id\` but
-- different \`asset_name\` are treated as separate assets, as are two
-- assets with the same \`asset_name\` but different \`policy_id\`.
data CreateShelleyWalletMigrationPlanResponseBody202Balance_selectedAssets = CreateShelleyWalletMigrationPlanResponseBody202Balance_selectedAssets {
  -- | asset_name: The asset on-chain type which acts as a sub-identifier within a
  -- policy. Although we call it \"asset name\", the value needn\'t be
  -- text, and it could even be empty.
  -- 
  -- For policies with a single fungible asset item, asset name is
  -- typically an empty string.
  -- 
  -- This value can be up to 32 bytes of arbitrary data (which is 64
  -- hexadecimal digits).
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  createShelleyWalletMigrationPlanResponseBody202Balance_selectedAssetsAsset_name :: Data.Text.Internal.Text
  -- | policy_id: A unique identifier of the asset\'s monetary policy. The policy
  -- controls how assets of this kind are created and destroyed.
  -- 
  -- The contents are the blake2b-224 hash of the monetary policy
  -- script, encoded in hexadecimal.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 56
  -- * Minimum length of 56
  , createShelleyWalletMigrationPlanResponseBody202Balance_selectedAssetsPolicy_id :: Data.Text.Internal.Text
  -- | quantity: Number of assets for the given \`policy_id\` and \`asset_name\`.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , createShelleyWalletMigrationPlanResponseBody202Balance_selectedAssetsQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateShelleyWalletMigrationPlanResponseBody202Balance_selectedAssets
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["asset_name" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202Balance_selectedAssetsAsset_name obj] : ["policy_id" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202Balance_selectedAssetsPolicy_id obj] : ["quantity" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202Balance_selectedAssetsQuantity obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["asset_name" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202Balance_selectedAssetsAsset_name obj] : ["policy_id" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202Balance_selectedAssetsPolicy_id obj] : ["quantity" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202Balance_selectedAssetsQuantity obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON CreateShelleyWalletMigrationPlanResponseBody202Balance_selectedAssets
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateShelleyWalletMigrationPlanResponseBody202Balance_selectedAssets" (\obj -> ((GHC.Base.pure CreateShelleyWalletMigrationPlanResponseBody202Balance_selectedAssets GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "asset_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "policy_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'CreateShelleyWalletMigrationPlanResponseBody202Balance_selectedAssets' with all required fields.
mkCreateShelleyWalletMigrationPlanResponseBody202Balance_selectedAssets :: Data.Text.Internal.Text -- ^ 'createShelleyWalletMigrationPlanResponseBody202Balance_selectedAssetsAsset_name'
  -> Data.Text.Internal.Text -- ^ 'createShelleyWalletMigrationPlanResponseBody202Balance_selectedAssetsPolicy_id'
  -> GHC.Types.Int -- ^ 'createShelleyWalletMigrationPlanResponseBody202Balance_selectedAssetsQuantity'
  -> CreateShelleyWalletMigrationPlanResponseBody202Balance_selectedAssets
mkCreateShelleyWalletMigrationPlanResponseBody202Balance_selectedAssets createShelleyWalletMigrationPlanResponseBody202Balance_selectedAssetsAsset_name createShelleyWalletMigrationPlanResponseBody202Balance_selectedAssetsPolicy_id createShelleyWalletMigrationPlanResponseBody202Balance_selectedAssetsQuantity = CreateShelleyWalletMigrationPlanResponseBody202Balance_selectedAssets{createShelleyWalletMigrationPlanResponseBody202Balance_selectedAssetsAsset_name = createShelleyWalletMigrationPlanResponseBody202Balance_selectedAssetsAsset_name,
                                                                                                                                                                                                                                                                                                                                                                                             createShelleyWalletMigrationPlanResponseBody202Balance_selectedAssetsPolicy_id = createShelleyWalletMigrationPlanResponseBody202Balance_selectedAssetsPolicy_id,
                                                                                                                                                                                                                                                                                                                                                                                             createShelleyWalletMigrationPlanResponseBody202Balance_selectedAssetsQuantity = createShelleyWalletMigrationPlanResponseBody202Balance_selectedAssetsQuantity}
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/migrations\/plan.POST.responses.202.content.application\/json.schema.properties.selections.items@ in the specification.
-- 
-- 
data CreateShelleyWalletMigrationPlanResponseBody202Selections = CreateShelleyWalletMigrationPlanResponseBody202Selections {
  -- | certificates
  createShelleyWalletMigrationPlanResponseBody202SelectionsCertificates :: (GHC.Maybe.Maybe ([CreateShelleyWalletMigrationPlanResponseBody202SelectionsCertificates]))
  -- | change: A list of transaction change outputs.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 0 items
  , createShelleyWalletMigrationPlanResponseBody202SelectionsChange :: ([CreateShelleyWalletMigrationPlanResponseBody202SelectionsChange])
  -- | collateral: A list of transaction inputs used for collateral
  , createShelleyWalletMigrationPlanResponseBody202SelectionsCollateral :: (GHC.Maybe.Maybe ([CreateShelleyWalletMigrationPlanResponseBody202SelectionsCollateral]))
  -- | deposits_returned: A list of deposits associated with a transaction.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 0 items
  , createShelleyWalletMigrationPlanResponseBody202SelectionsDeposits_returned :: (GHC.Maybe.Maybe ([CreateShelleyWalletMigrationPlanResponseBody202SelectionsDeposits_returned]))
  -- | deposits_taken: A list of deposits associated with a transaction.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 0 items
  , createShelleyWalletMigrationPlanResponseBody202SelectionsDeposits_taken :: (GHC.Maybe.Maybe ([CreateShelleyWalletMigrationPlanResponseBody202SelectionsDeposits_taken]))
  -- | inputs: A list of transaction inputs
  , createShelleyWalletMigrationPlanResponseBody202SelectionsInputs :: ([CreateShelleyWalletMigrationPlanResponseBody202SelectionsInputs])
  -- | metadata: Transaction metadata, serialized according to the expected on-chain binary format, base64-encoded.
  , createShelleyWalletMigrationPlanResponseBody202SelectionsMetadata :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | outputs: A list of target outputs with amounts specified.
  -- 
  -- When creating a new transaction, the wallet software ensures that all
  -- user-specified transaction outputs have ada amounts that satisfy the ledger
  -- minimum UTxO rule:
  -- 
  -- - If a user-specified transaction output has an ada \`amount\` that is
  --   **zero**, the wallet software will automatically assign a minimal amount
  --   of ada to the output so that it satisfies the ledger minimum UTxO rule.
  -- 
  -- - If a user-specified transaction output has an ada \`amount\` that is
  --   **non-zero**, the wallet software will verify that the specified amount
  --   is large enough to satisfy the ledger minimum UTxO rule. If the amount is
  --   not large enough, the wallet software will return a \`utxo_too_small\`
  --   error, together with a revised ada amount that does satisfy the minimum
  --   UTxO rule.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 0 items
  , createShelleyWalletMigrationPlanResponseBody202SelectionsOutputs :: ([CreateShelleyWalletMigrationPlanResponseBody202SelectionsOutputs])
  -- | withdrawals: A list of withdrawals from stake addresses.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 0 items
  , createShelleyWalletMigrationPlanResponseBody202SelectionsWithdrawals :: (GHC.Maybe.Maybe ([CreateShelleyWalletMigrationPlanResponseBody202SelectionsWithdrawals]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateShelleyWalletMigrationPlanResponseBody202Selections
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("certificates" Data.Aeson.Types.ToJSON..=)) (createShelleyWalletMigrationPlanResponseBody202SelectionsCertificates obj) : ["change" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsChange obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("collateral" Data.Aeson.Types.ToJSON..=)) (createShelleyWalletMigrationPlanResponseBody202SelectionsCollateral obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("deposits_returned" Data.Aeson.Types.ToJSON..=)) (createShelleyWalletMigrationPlanResponseBody202SelectionsDeposits_returned obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("deposits_taken" Data.Aeson.Types.ToJSON..=)) (createShelleyWalletMigrationPlanResponseBody202SelectionsDeposits_taken obj) : ["inputs" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsInputs obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("metadata" Data.Aeson.Types.ToJSON..=)) (createShelleyWalletMigrationPlanResponseBody202SelectionsMetadata obj) : ["outputs" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsOutputs obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("withdrawals" Data.Aeson.Types.ToJSON..=)) (createShelleyWalletMigrationPlanResponseBody202SelectionsWithdrawals obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("certificates" Data.Aeson.Types.ToJSON..=)) (createShelleyWalletMigrationPlanResponseBody202SelectionsCertificates obj) : ["change" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsChange obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("collateral" Data.Aeson.Types.ToJSON..=)) (createShelleyWalletMigrationPlanResponseBody202SelectionsCollateral obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("deposits_returned" Data.Aeson.Types.ToJSON..=)) (createShelleyWalletMigrationPlanResponseBody202SelectionsDeposits_returned obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("deposits_taken" Data.Aeson.Types.ToJSON..=)) (createShelleyWalletMigrationPlanResponseBody202SelectionsDeposits_taken obj) : ["inputs" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsInputs obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("metadata" Data.Aeson.Types.ToJSON..=)) (createShelleyWalletMigrationPlanResponseBody202SelectionsMetadata obj) : ["outputs" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsOutputs obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("withdrawals" Data.Aeson.Types.ToJSON..=)) (createShelleyWalletMigrationPlanResponseBody202SelectionsWithdrawals obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON CreateShelleyWalletMigrationPlanResponseBody202Selections
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateShelleyWalletMigrationPlanResponseBody202Selections" (\obj -> ((((((((GHC.Base.pure CreateShelleyWalletMigrationPlanResponseBody202Selections GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "certificates")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "change")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "collateral")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "deposits_returned")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "deposits_taken")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "inputs")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "outputs")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "withdrawals"))
-- | Create a new 'CreateShelleyWalletMigrationPlanResponseBody202Selections' with all required fields.
mkCreateShelleyWalletMigrationPlanResponseBody202Selections :: [CreateShelleyWalletMigrationPlanResponseBody202SelectionsChange] -- ^ 'createShelleyWalletMigrationPlanResponseBody202SelectionsChange'
  -> [CreateShelleyWalletMigrationPlanResponseBody202SelectionsInputs] -- ^ 'createShelleyWalletMigrationPlanResponseBody202SelectionsInputs'
  -> [CreateShelleyWalletMigrationPlanResponseBody202SelectionsOutputs] -- ^ 'createShelleyWalletMigrationPlanResponseBody202SelectionsOutputs'
  -> CreateShelleyWalletMigrationPlanResponseBody202Selections
mkCreateShelleyWalletMigrationPlanResponseBody202Selections createShelleyWalletMigrationPlanResponseBody202SelectionsChange createShelleyWalletMigrationPlanResponseBody202SelectionsInputs createShelleyWalletMigrationPlanResponseBody202SelectionsOutputs = CreateShelleyWalletMigrationPlanResponseBody202Selections{createShelleyWalletMigrationPlanResponseBody202SelectionsCertificates = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                                                                         createShelleyWalletMigrationPlanResponseBody202SelectionsChange = createShelleyWalletMigrationPlanResponseBody202SelectionsChange,
                                                                                                                                                                                                                                                                                                                         createShelleyWalletMigrationPlanResponseBody202SelectionsCollateral = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                                                                         createShelleyWalletMigrationPlanResponseBody202SelectionsDeposits_returned = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                                                                         createShelleyWalletMigrationPlanResponseBody202SelectionsDeposits_taken = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                                                                         createShelleyWalletMigrationPlanResponseBody202SelectionsInputs = createShelleyWalletMigrationPlanResponseBody202SelectionsInputs,
                                                                                                                                                                                                                                                                                                                         createShelleyWalletMigrationPlanResponseBody202SelectionsMetadata = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                                                                         createShelleyWalletMigrationPlanResponseBody202SelectionsOutputs = createShelleyWalletMigrationPlanResponseBody202SelectionsOutputs,
                                                                                                                                                                                                                                                                                                                         createShelleyWalletMigrationPlanResponseBody202SelectionsWithdrawals = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/migrations\/plan.POST.responses.202.content.application\/json.schema.properties.selections.items.properties.certificates.items@ in the specification.
-- 
-- A delegation certificate belonging to wallet
-- 
-- Only for \'join_pool\' the \'pool\' property is required.
data CreateShelleyWalletMigrationPlanResponseBody202SelectionsCertificates = CreateShelleyWalletMigrationPlanResponseBody202SelectionsCertificates {
  -- | certificate_type
  createShelleyWalletMigrationPlanResponseBody202SelectionsCertificatesCertificate_type :: CreateShelleyWalletMigrationPlanResponseBody202SelectionsCertificatesCertificate_type
  -- | pool: A unique identifier for the pool.
  , createShelleyWalletMigrationPlanResponseBody202SelectionsCertificatesPool :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | reward_account_path
  -- 
  -- Constraints:
  -- 
  -- * Must have a maximum of 5 items
  -- * Must have a minimum of 5 items
  , createShelleyWalletMigrationPlanResponseBody202SelectionsCertificatesReward_account_path :: ([Data.Text.Internal.Text])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateShelleyWalletMigrationPlanResponseBody202SelectionsCertificates
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["certificate_type" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsCertificatesCertificate_type obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pool" Data.Aeson.Types.ToJSON..=)) (createShelleyWalletMigrationPlanResponseBody202SelectionsCertificatesPool obj) : ["reward_account_path" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsCertificatesReward_account_path obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["certificate_type" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsCertificatesCertificate_type obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pool" Data.Aeson.Types.ToJSON..=)) (createShelleyWalletMigrationPlanResponseBody202SelectionsCertificatesPool obj) : ["reward_account_path" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsCertificatesReward_account_path obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON CreateShelleyWalletMigrationPlanResponseBody202SelectionsCertificates
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateShelleyWalletMigrationPlanResponseBody202SelectionsCertificates" (\obj -> ((GHC.Base.pure CreateShelleyWalletMigrationPlanResponseBody202SelectionsCertificates GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "certificate_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "pool")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "reward_account_path"))
-- | Create a new 'CreateShelleyWalletMigrationPlanResponseBody202SelectionsCertificates' with all required fields.
mkCreateShelleyWalletMigrationPlanResponseBody202SelectionsCertificates :: CreateShelleyWalletMigrationPlanResponseBody202SelectionsCertificatesCertificate_type -- ^ 'createShelleyWalletMigrationPlanResponseBody202SelectionsCertificatesCertificate_type'
  -> [Data.Text.Internal.Text] -- ^ 'createShelleyWalletMigrationPlanResponseBody202SelectionsCertificatesReward_account_path'
  -> CreateShelleyWalletMigrationPlanResponseBody202SelectionsCertificates
mkCreateShelleyWalletMigrationPlanResponseBody202SelectionsCertificates createShelleyWalletMigrationPlanResponseBody202SelectionsCertificatesCertificate_type createShelleyWalletMigrationPlanResponseBody202SelectionsCertificatesReward_account_path = CreateShelleyWalletMigrationPlanResponseBody202SelectionsCertificates{createShelleyWalletMigrationPlanResponseBody202SelectionsCertificatesCertificate_type = createShelleyWalletMigrationPlanResponseBody202SelectionsCertificatesCertificate_type,
                                                                                                                                                                                                                                                                                                                               createShelleyWalletMigrationPlanResponseBody202SelectionsCertificatesPool = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                                                                               createShelleyWalletMigrationPlanResponseBody202SelectionsCertificatesReward_account_path = createShelleyWalletMigrationPlanResponseBody202SelectionsCertificatesReward_account_path}
-- | Defines the enum schema located at @paths.\/wallets\/{walletId}\/migrations\/plan.POST.responses.202.content.application\/json.schema.properties.selections.items.properties.certificates.items.properties.certificate_type@ in the specification.
-- 
-- 
data CreateShelleyWalletMigrationPlanResponseBody202SelectionsCertificatesCertificate_type =
   CreateShelleyWalletMigrationPlanResponseBody202SelectionsCertificatesCertificate_typeOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | CreateShelleyWalletMigrationPlanResponseBody202SelectionsCertificatesCertificate_typeTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | CreateShelleyWalletMigrationPlanResponseBody202SelectionsCertificatesCertificate_typeEnumJoin_pool -- ^ Represents the JSON value @"join_pool"@
  | CreateShelleyWalletMigrationPlanResponseBody202SelectionsCertificatesCertificate_typeEnumQuit_pool -- ^ Represents the JSON value @"quit_pool"@
  | CreateShelleyWalletMigrationPlanResponseBody202SelectionsCertificatesCertificate_typeEnumRegister_reward_account -- ^ Represents the JSON value @"register_reward_account"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateShelleyWalletMigrationPlanResponseBody202SelectionsCertificatesCertificate_type
    where toJSON (CreateShelleyWalletMigrationPlanResponseBody202SelectionsCertificatesCertificate_typeOther val) = val
          toJSON (CreateShelleyWalletMigrationPlanResponseBody202SelectionsCertificatesCertificate_typeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (CreateShelleyWalletMigrationPlanResponseBody202SelectionsCertificatesCertificate_typeEnumJoin_pool) = "join_pool"
          toJSON (CreateShelleyWalletMigrationPlanResponseBody202SelectionsCertificatesCertificate_typeEnumQuit_pool) = "quit_pool"
          toJSON (CreateShelleyWalletMigrationPlanResponseBody202SelectionsCertificatesCertificate_typeEnumRegister_reward_account) = "register_reward_account"
instance Data.Aeson.Types.FromJSON.FromJSON CreateShelleyWalletMigrationPlanResponseBody202SelectionsCertificatesCertificate_type
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "join_pool" -> CreateShelleyWalletMigrationPlanResponseBody202SelectionsCertificatesCertificate_typeEnumJoin_pool
                                            | val GHC.Classes.== "quit_pool" -> CreateShelleyWalletMigrationPlanResponseBody202SelectionsCertificatesCertificate_typeEnumQuit_pool
                                            | val GHC.Classes.== "register_reward_account" -> CreateShelleyWalletMigrationPlanResponseBody202SelectionsCertificatesCertificate_typeEnumRegister_reward_account
                                            | GHC.Base.otherwise -> CreateShelleyWalletMigrationPlanResponseBody202SelectionsCertificatesCertificate_typeOther val)
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/migrations\/plan.POST.responses.202.content.application\/json.schema.properties.selections.items.properties.change.items@ in the specification.
-- 
-- 
data CreateShelleyWalletMigrationPlanResponseBody202SelectionsChange = CreateShelleyWalletMigrationPlanResponseBody202SelectionsChange {
  -- | address: A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
  -- which represents an address on the Cardano blockchain.
  -- Sequences in Base58 encoding are expected to be legacy Byron addresses,
  -- whereas sequences in Bech32 encoding correspond to current Shelley addresses.
  -- 
  -- For more details, see
  -- [CIP-0019 — Cardano addresses](https:\/\/github.com\/cardano-foundation\/CIPs\/tree\/master\/CIP-0019)
  -- .
  createShelleyWalletMigrationPlanResponseBody202SelectionsChangeAddress :: Data.Text.Internal.Text
  -- | amount: Coins, in Lovelace. Only relates to \'Ada\'. Refer to \`assets\` for multi-assets wallets instead.
  , createShelleyWalletMigrationPlanResponseBody202SelectionsChangeAmount :: CreateShelleyWalletMigrationPlanResponseBody202SelectionsChangeAmount
  -- | assets: A flat list of assets (possibly empty).
  , createShelleyWalletMigrationPlanResponseBody202SelectionsChangeAssets :: (GHC.Maybe.Maybe ([CreateShelleyWalletMigrationPlanResponseBody202SelectionsChangeAssets]))
  -- | derivation_path: A path for deriving a child key from a parent key.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  , createShelleyWalletMigrationPlanResponseBody202SelectionsChangeDerivation_path :: ([Data.Text.Internal.Text])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateShelleyWalletMigrationPlanResponseBody202SelectionsChange
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["address" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsChangeAddress obj] : ["amount" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsChangeAmount obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("assets" Data.Aeson.Types.ToJSON..=)) (createShelleyWalletMigrationPlanResponseBody202SelectionsChangeAssets obj) : ["derivation_path" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsChangeDerivation_path obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["address" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsChangeAddress obj] : ["amount" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsChangeAmount obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("assets" Data.Aeson.Types.ToJSON..=)) (createShelleyWalletMigrationPlanResponseBody202SelectionsChangeAssets obj) : ["derivation_path" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsChangeDerivation_path obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON CreateShelleyWalletMigrationPlanResponseBody202SelectionsChange
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateShelleyWalletMigrationPlanResponseBody202SelectionsChange" (\obj -> (((GHC.Base.pure CreateShelleyWalletMigrationPlanResponseBody202SelectionsChange GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "assets")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "derivation_path"))
-- | Create a new 'CreateShelleyWalletMigrationPlanResponseBody202SelectionsChange' with all required fields.
mkCreateShelleyWalletMigrationPlanResponseBody202SelectionsChange :: Data.Text.Internal.Text -- ^ 'createShelleyWalletMigrationPlanResponseBody202SelectionsChangeAddress'
  -> CreateShelleyWalletMigrationPlanResponseBody202SelectionsChangeAmount -- ^ 'createShelleyWalletMigrationPlanResponseBody202SelectionsChangeAmount'
  -> [Data.Text.Internal.Text] -- ^ 'createShelleyWalletMigrationPlanResponseBody202SelectionsChangeDerivation_path'
  -> CreateShelleyWalletMigrationPlanResponseBody202SelectionsChange
mkCreateShelleyWalletMigrationPlanResponseBody202SelectionsChange createShelleyWalletMigrationPlanResponseBody202SelectionsChangeAddress createShelleyWalletMigrationPlanResponseBody202SelectionsChangeAmount createShelleyWalletMigrationPlanResponseBody202SelectionsChangeDerivation_path = CreateShelleyWalletMigrationPlanResponseBody202SelectionsChange{createShelleyWalletMigrationPlanResponseBody202SelectionsChangeAddress = createShelleyWalletMigrationPlanResponseBody202SelectionsChangeAddress,
                                                                                                                                                                                                                                                                                                                                                                createShelleyWalletMigrationPlanResponseBody202SelectionsChangeAmount = createShelleyWalletMigrationPlanResponseBody202SelectionsChangeAmount,
                                                                                                                                                                                                                                                                                                                                                                createShelleyWalletMigrationPlanResponseBody202SelectionsChangeAssets = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                                                                                                                createShelleyWalletMigrationPlanResponseBody202SelectionsChangeDerivation_path = createShelleyWalletMigrationPlanResponseBody202SelectionsChangeDerivation_path}
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/migrations\/plan.POST.responses.202.content.application\/json.schema.properties.selections.items.properties.change.items.properties.amount@ in the specification.
-- 
-- Coins, in Lovelace. Only relates to \'Ada\'. Refer to \`assets\` for multi-assets wallets instead.
data CreateShelleyWalletMigrationPlanResponseBody202SelectionsChangeAmount = CreateShelleyWalletMigrationPlanResponseBody202SelectionsChangeAmount {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  createShelleyWalletMigrationPlanResponseBody202SelectionsChangeAmountQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateShelleyWalletMigrationPlanResponseBody202SelectionsChangeAmount
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsChangeAmountQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsChangeAmountQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON CreateShelleyWalletMigrationPlanResponseBody202SelectionsChangeAmount
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateShelleyWalletMigrationPlanResponseBody202SelectionsChangeAmount" (\obj -> GHC.Base.pure CreateShelleyWalletMigrationPlanResponseBody202SelectionsChangeAmount GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'CreateShelleyWalletMigrationPlanResponseBody202SelectionsChangeAmount' with all required fields.
mkCreateShelleyWalletMigrationPlanResponseBody202SelectionsChangeAmount :: GHC.Types.Int -- ^ 'createShelleyWalletMigrationPlanResponseBody202SelectionsChangeAmountQuantity'
  -> CreateShelleyWalletMigrationPlanResponseBody202SelectionsChangeAmount
mkCreateShelleyWalletMigrationPlanResponseBody202SelectionsChangeAmount createShelleyWalletMigrationPlanResponseBody202SelectionsChangeAmountQuantity = CreateShelleyWalletMigrationPlanResponseBody202SelectionsChangeAmount{createShelleyWalletMigrationPlanResponseBody202SelectionsChangeAmountQuantity = createShelleyWalletMigrationPlanResponseBody202SelectionsChangeAmountQuantity}
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/migrations\/plan.POST.responses.202.content.application\/json.schema.properties.selections.items.properties.change.items.properties.assets.items@ in the specification.
-- 
-- An asset on the Cardano blockchain. An asset is uniquely identified by
-- its \`policy_id\` and \`asset_name\` (together, these form the _asset id_).
-- 
-- Two assets with the same \`asset_name\` and \`policy_id\` are
-- interchangeable. Yet, different assets with a same \`policy_id\` but
-- different \`asset_name\` are treated as separate assets, as are two
-- assets with the same \`asset_name\` but different \`policy_id\`.
data CreateShelleyWalletMigrationPlanResponseBody202SelectionsChangeAssets = CreateShelleyWalletMigrationPlanResponseBody202SelectionsChangeAssets {
  -- | asset_name: The asset on-chain type which acts as a sub-identifier within a
  -- policy. Although we call it \"asset name\", the value needn\'t be
  -- text, and it could even be empty.
  -- 
  -- For policies with a single fungible asset item, asset name is
  -- typically an empty string.
  -- 
  -- This value can be up to 32 bytes of arbitrary data (which is 64
  -- hexadecimal digits).
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  createShelleyWalletMigrationPlanResponseBody202SelectionsChangeAssetsAsset_name :: Data.Text.Internal.Text
  -- | policy_id: A unique identifier of the asset\'s monetary policy. The policy
  -- controls how assets of this kind are created and destroyed.
  -- 
  -- The contents are the blake2b-224 hash of the monetary policy
  -- script, encoded in hexadecimal.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 56
  -- * Minimum length of 56
  , createShelleyWalletMigrationPlanResponseBody202SelectionsChangeAssetsPolicy_id :: Data.Text.Internal.Text
  -- | quantity: Number of assets for the given \`policy_id\` and \`asset_name\`.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , createShelleyWalletMigrationPlanResponseBody202SelectionsChangeAssetsQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateShelleyWalletMigrationPlanResponseBody202SelectionsChangeAssets
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["asset_name" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsChangeAssetsAsset_name obj] : ["policy_id" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsChangeAssetsPolicy_id obj] : ["quantity" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsChangeAssetsQuantity obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["asset_name" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsChangeAssetsAsset_name obj] : ["policy_id" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsChangeAssetsPolicy_id obj] : ["quantity" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsChangeAssetsQuantity obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON CreateShelleyWalletMigrationPlanResponseBody202SelectionsChangeAssets
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateShelleyWalletMigrationPlanResponseBody202SelectionsChangeAssets" (\obj -> ((GHC.Base.pure CreateShelleyWalletMigrationPlanResponseBody202SelectionsChangeAssets GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "asset_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "policy_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'CreateShelleyWalletMigrationPlanResponseBody202SelectionsChangeAssets' with all required fields.
mkCreateShelleyWalletMigrationPlanResponseBody202SelectionsChangeAssets :: Data.Text.Internal.Text -- ^ 'createShelleyWalletMigrationPlanResponseBody202SelectionsChangeAssetsAsset_name'
  -> Data.Text.Internal.Text -- ^ 'createShelleyWalletMigrationPlanResponseBody202SelectionsChangeAssetsPolicy_id'
  -> GHC.Types.Int -- ^ 'createShelleyWalletMigrationPlanResponseBody202SelectionsChangeAssetsQuantity'
  -> CreateShelleyWalletMigrationPlanResponseBody202SelectionsChangeAssets
mkCreateShelleyWalletMigrationPlanResponseBody202SelectionsChangeAssets createShelleyWalletMigrationPlanResponseBody202SelectionsChangeAssetsAsset_name createShelleyWalletMigrationPlanResponseBody202SelectionsChangeAssetsPolicy_id createShelleyWalletMigrationPlanResponseBody202SelectionsChangeAssetsQuantity = CreateShelleyWalletMigrationPlanResponseBody202SelectionsChangeAssets{createShelleyWalletMigrationPlanResponseBody202SelectionsChangeAssetsAsset_name = createShelleyWalletMigrationPlanResponseBody202SelectionsChangeAssetsAsset_name,
                                                                                                                                                                                                                                                                                                                                                                                             createShelleyWalletMigrationPlanResponseBody202SelectionsChangeAssetsPolicy_id = createShelleyWalletMigrationPlanResponseBody202SelectionsChangeAssetsPolicy_id,
                                                                                                                                                                                                                                                                                                                                                                                             createShelleyWalletMigrationPlanResponseBody202SelectionsChangeAssetsQuantity = createShelleyWalletMigrationPlanResponseBody202SelectionsChangeAssetsQuantity}
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/migrations\/plan.POST.responses.202.content.application\/json.schema.properties.selections.items.properties.collateral.items@ in the specification.
-- 
-- 
data CreateShelleyWalletMigrationPlanResponseBody202SelectionsCollateral = CreateShelleyWalletMigrationPlanResponseBody202SelectionsCollateral {
  -- | address: A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
  -- which represents an address on the Cardano blockchain.
  -- Sequences in Base58 encoding are expected to be legacy Byron addresses,
  -- whereas sequences in Bech32 encoding correspond to current Shelley addresses.
  -- 
  -- For more details, see
  -- [CIP-0019 — Cardano addresses](https:\/\/github.com\/cardano-foundation\/CIPs\/tree\/master\/CIP-0019)
  -- .
  createShelleyWalletMigrationPlanResponseBody202SelectionsCollateralAddress :: Data.Text.Internal.Text
  -- | amount: Coins, in Lovelace. Only relates to \'Ada\'. Refer to \`assets\` for multi-assets wallets instead.
  , createShelleyWalletMigrationPlanResponseBody202SelectionsCollateralAmount :: CreateShelleyWalletMigrationPlanResponseBody202SelectionsCollateralAmount
  -- | derivation_path: A path for deriving a child key from a parent key.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  , createShelleyWalletMigrationPlanResponseBody202SelectionsCollateralDerivation_path :: ([Data.Text.Internal.Text])
  -- | id: A unique identifier for this transaction
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  -- * Minimum length of 64
  , createShelleyWalletMigrationPlanResponseBody202SelectionsCollateralId :: Data.Text.Internal.Text
  -- | index
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , createShelleyWalletMigrationPlanResponseBody202SelectionsCollateralIndex :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateShelleyWalletMigrationPlanResponseBody202SelectionsCollateral
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["address" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsCollateralAddress obj] : ["amount" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsCollateralAmount obj] : ["derivation_path" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsCollateralDerivation_path obj] : ["id" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsCollateralId obj] : ["index" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsCollateralIndex obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["address" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsCollateralAddress obj] : ["amount" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsCollateralAmount obj] : ["derivation_path" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsCollateralDerivation_path obj] : ["id" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsCollateralId obj] : ["index" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsCollateralIndex obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON CreateShelleyWalletMigrationPlanResponseBody202SelectionsCollateral
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateShelleyWalletMigrationPlanResponseBody202SelectionsCollateral" (\obj -> ((((GHC.Base.pure CreateShelleyWalletMigrationPlanResponseBody202SelectionsCollateral GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "derivation_path")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "index"))
-- | Create a new 'CreateShelleyWalletMigrationPlanResponseBody202SelectionsCollateral' with all required fields.
mkCreateShelleyWalletMigrationPlanResponseBody202SelectionsCollateral :: Data.Text.Internal.Text -- ^ 'createShelleyWalletMigrationPlanResponseBody202SelectionsCollateralAddress'
  -> CreateShelleyWalletMigrationPlanResponseBody202SelectionsCollateralAmount -- ^ 'createShelleyWalletMigrationPlanResponseBody202SelectionsCollateralAmount'
  -> [Data.Text.Internal.Text] -- ^ 'createShelleyWalletMigrationPlanResponseBody202SelectionsCollateralDerivation_path'
  -> Data.Text.Internal.Text -- ^ 'createShelleyWalletMigrationPlanResponseBody202SelectionsCollateralId'
  -> GHC.Types.Int -- ^ 'createShelleyWalletMigrationPlanResponseBody202SelectionsCollateralIndex'
  -> CreateShelleyWalletMigrationPlanResponseBody202SelectionsCollateral
mkCreateShelleyWalletMigrationPlanResponseBody202SelectionsCollateral createShelleyWalletMigrationPlanResponseBody202SelectionsCollateralAddress createShelleyWalletMigrationPlanResponseBody202SelectionsCollateralAmount createShelleyWalletMigrationPlanResponseBody202SelectionsCollateralDerivation_path createShelleyWalletMigrationPlanResponseBody202SelectionsCollateralId createShelleyWalletMigrationPlanResponseBody202SelectionsCollateralIndex = CreateShelleyWalletMigrationPlanResponseBody202SelectionsCollateral{createShelleyWalletMigrationPlanResponseBody202SelectionsCollateralAddress = createShelleyWalletMigrationPlanResponseBody202SelectionsCollateralAddress,
createShelleyWalletMigrationPlanResponseBody202SelectionsCollateralAmount = createShelleyWalletMigrationPlanResponseBody202SelectionsCollateralAmount,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   createShelleyWalletMigrationPlanResponseBody202SelectionsCollateralDerivation_path = createShelleyWalletMigrationPlanResponseBody202SelectionsCollateralDerivation_path,
createShelleyWalletMigrationPlanResponseBody202SelectionsCollateralId = createShelleyWalletMigrationPlanResponseBody202SelectionsCollateralId,
createShelleyWalletMigrationPlanResponseBody202SelectionsCollateralIndex = createShelleyWalletMigrationPlanResponseBody202SelectionsCollateralIndex}
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/migrations\/plan.POST.responses.202.content.application\/json.schema.properties.selections.items.properties.collateral.items.properties.amount@ in the specification.
-- 
-- Coins, in Lovelace. Only relates to \'Ada\'. Refer to \`assets\` for multi-assets wallets instead.
data CreateShelleyWalletMigrationPlanResponseBody202SelectionsCollateralAmount = CreateShelleyWalletMigrationPlanResponseBody202SelectionsCollateralAmount {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  createShelleyWalletMigrationPlanResponseBody202SelectionsCollateralAmountQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateShelleyWalletMigrationPlanResponseBody202SelectionsCollateralAmount
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsCollateralAmountQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsCollateralAmountQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON CreateShelleyWalletMigrationPlanResponseBody202SelectionsCollateralAmount
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateShelleyWalletMigrationPlanResponseBody202SelectionsCollateralAmount" (\obj -> GHC.Base.pure CreateShelleyWalletMigrationPlanResponseBody202SelectionsCollateralAmount GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'CreateShelleyWalletMigrationPlanResponseBody202SelectionsCollateralAmount' with all required fields.
mkCreateShelleyWalletMigrationPlanResponseBody202SelectionsCollateralAmount :: GHC.Types.Int -- ^ 'createShelleyWalletMigrationPlanResponseBody202SelectionsCollateralAmountQuantity'
  -> CreateShelleyWalletMigrationPlanResponseBody202SelectionsCollateralAmount
mkCreateShelleyWalletMigrationPlanResponseBody202SelectionsCollateralAmount createShelleyWalletMigrationPlanResponseBody202SelectionsCollateralAmountQuantity = CreateShelleyWalletMigrationPlanResponseBody202SelectionsCollateralAmount{createShelleyWalletMigrationPlanResponseBody202SelectionsCollateralAmountQuantity = createShelleyWalletMigrationPlanResponseBody202SelectionsCollateralAmountQuantity}
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/migrations\/plan.POST.responses.202.content.application\/json.schema.properties.selections.items.properties.deposits_returned.items@ in the specification.
-- 
-- Coins, in Lovelace. Only relates to \'Ada\'. Refer to \`assets\` for multi-assets wallets instead.
data CreateShelleyWalletMigrationPlanResponseBody202SelectionsDeposits_returned = CreateShelleyWalletMigrationPlanResponseBody202SelectionsDeposits_returned {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  createShelleyWalletMigrationPlanResponseBody202SelectionsDeposits_returnedQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateShelleyWalletMigrationPlanResponseBody202SelectionsDeposits_returned
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsDeposits_returnedQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsDeposits_returnedQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON CreateShelleyWalletMigrationPlanResponseBody202SelectionsDeposits_returned
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateShelleyWalletMigrationPlanResponseBody202SelectionsDeposits_returned" (\obj -> GHC.Base.pure CreateShelleyWalletMigrationPlanResponseBody202SelectionsDeposits_returned GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'CreateShelleyWalletMigrationPlanResponseBody202SelectionsDeposits_returned' with all required fields.
mkCreateShelleyWalletMigrationPlanResponseBody202SelectionsDeposits_returned :: GHC.Types.Int -- ^ 'createShelleyWalletMigrationPlanResponseBody202SelectionsDeposits_returnedQuantity'
  -> CreateShelleyWalletMigrationPlanResponseBody202SelectionsDeposits_returned
mkCreateShelleyWalletMigrationPlanResponseBody202SelectionsDeposits_returned createShelleyWalletMigrationPlanResponseBody202SelectionsDeposits_returnedQuantity = CreateShelleyWalletMigrationPlanResponseBody202SelectionsDeposits_returned{createShelleyWalletMigrationPlanResponseBody202SelectionsDeposits_returnedQuantity = createShelleyWalletMigrationPlanResponseBody202SelectionsDeposits_returnedQuantity}
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/migrations\/plan.POST.responses.202.content.application\/json.schema.properties.selections.items.properties.deposits_taken.items@ in the specification.
-- 
-- Coins, in Lovelace. Only relates to \'Ada\'. Refer to \`assets\` for multi-assets wallets instead.
data CreateShelleyWalletMigrationPlanResponseBody202SelectionsDeposits_taken = CreateShelleyWalletMigrationPlanResponseBody202SelectionsDeposits_taken {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  createShelleyWalletMigrationPlanResponseBody202SelectionsDeposits_takenQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateShelleyWalletMigrationPlanResponseBody202SelectionsDeposits_taken
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsDeposits_takenQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsDeposits_takenQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON CreateShelleyWalletMigrationPlanResponseBody202SelectionsDeposits_taken
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateShelleyWalletMigrationPlanResponseBody202SelectionsDeposits_taken" (\obj -> GHC.Base.pure CreateShelleyWalletMigrationPlanResponseBody202SelectionsDeposits_taken GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'CreateShelleyWalletMigrationPlanResponseBody202SelectionsDeposits_taken' with all required fields.
mkCreateShelleyWalletMigrationPlanResponseBody202SelectionsDeposits_taken :: GHC.Types.Int -- ^ 'createShelleyWalletMigrationPlanResponseBody202SelectionsDeposits_takenQuantity'
  -> CreateShelleyWalletMigrationPlanResponseBody202SelectionsDeposits_taken
mkCreateShelleyWalletMigrationPlanResponseBody202SelectionsDeposits_taken createShelleyWalletMigrationPlanResponseBody202SelectionsDeposits_takenQuantity = CreateShelleyWalletMigrationPlanResponseBody202SelectionsDeposits_taken{createShelleyWalletMigrationPlanResponseBody202SelectionsDeposits_takenQuantity = createShelleyWalletMigrationPlanResponseBody202SelectionsDeposits_takenQuantity}
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/migrations\/plan.POST.responses.202.content.application\/json.schema.properties.selections.items.properties.inputs.items@ in the specification.
-- 
-- 
data CreateShelleyWalletMigrationPlanResponseBody202SelectionsInputs = CreateShelleyWalletMigrationPlanResponseBody202SelectionsInputs {
  -- | address: A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
  -- which represents an address on the Cardano blockchain.
  -- Sequences in Base58 encoding are expected to be legacy Byron addresses,
  -- whereas sequences in Bech32 encoding correspond to current Shelley addresses.
  -- 
  -- For more details, see
  -- [CIP-0019 — Cardano addresses](https:\/\/github.com\/cardano-foundation\/CIPs\/tree\/master\/CIP-0019)
  -- .
  createShelleyWalletMigrationPlanResponseBody202SelectionsInputsAddress :: Data.Text.Internal.Text
  -- | amount: Coins, in Lovelace. Only relates to \'Ada\'. Refer to \`assets\` for multi-assets wallets instead.
  , createShelleyWalletMigrationPlanResponseBody202SelectionsInputsAmount :: CreateShelleyWalletMigrationPlanResponseBody202SelectionsInputsAmount
  -- | assets: A flat list of assets (possibly empty).
  , createShelleyWalletMigrationPlanResponseBody202SelectionsInputsAssets :: (GHC.Maybe.Maybe ([CreateShelleyWalletMigrationPlanResponseBody202SelectionsInputsAssets]))
  -- | derivation_path: A path for deriving a child key from a parent key.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  , createShelleyWalletMigrationPlanResponseBody202SelectionsInputsDerivation_path :: ([Data.Text.Internal.Text])
  -- | id: A unique identifier for this transaction
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  -- * Minimum length of 64
  , createShelleyWalletMigrationPlanResponseBody202SelectionsInputsId :: Data.Text.Internal.Text
  -- | index
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , createShelleyWalletMigrationPlanResponseBody202SelectionsInputsIndex :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateShelleyWalletMigrationPlanResponseBody202SelectionsInputs
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["address" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsInputsAddress obj] : ["amount" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsInputsAmount obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("assets" Data.Aeson.Types.ToJSON..=)) (createShelleyWalletMigrationPlanResponseBody202SelectionsInputsAssets obj) : ["derivation_path" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsInputsDerivation_path obj] : ["id" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsInputsId obj] : ["index" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsInputsIndex obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["address" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsInputsAddress obj] : ["amount" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsInputsAmount obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("assets" Data.Aeson.Types.ToJSON..=)) (createShelleyWalletMigrationPlanResponseBody202SelectionsInputsAssets obj) : ["derivation_path" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsInputsDerivation_path obj] : ["id" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsInputsId obj] : ["index" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsInputsIndex obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON CreateShelleyWalletMigrationPlanResponseBody202SelectionsInputs
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateShelleyWalletMigrationPlanResponseBody202SelectionsInputs" (\obj -> (((((GHC.Base.pure CreateShelleyWalletMigrationPlanResponseBody202SelectionsInputs GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "assets")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "derivation_path")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "index"))
-- | Create a new 'CreateShelleyWalletMigrationPlanResponseBody202SelectionsInputs' with all required fields.
mkCreateShelleyWalletMigrationPlanResponseBody202SelectionsInputs :: Data.Text.Internal.Text -- ^ 'createShelleyWalletMigrationPlanResponseBody202SelectionsInputsAddress'
  -> CreateShelleyWalletMigrationPlanResponseBody202SelectionsInputsAmount -- ^ 'createShelleyWalletMigrationPlanResponseBody202SelectionsInputsAmount'
  -> [Data.Text.Internal.Text] -- ^ 'createShelleyWalletMigrationPlanResponseBody202SelectionsInputsDerivation_path'
  -> Data.Text.Internal.Text -- ^ 'createShelleyWalletMigrationPlanResponseBody202SelectionsInputsId'
  -> GHC.Types.Int -- ^ 'createShelleyWalletMigrationPlanResponseBody202SelectionsInputsIndex'
  -> CreateShelleyWalletMigrationPlanResponseBody202SelectionsInputs
mkCreateShelleyWalletMigrationPlanResponseBody202SelectionsInputs createShelleyWalletMigrationPlanResponseBody202SelectionsInputsAddress createShelleyWalletMigrationPlanResponseBody202SelectionsInputsAmount createShelleyWalletMigrationPlanResponseBody202SelectionsInputsDerivation_path createShelleyWalletMigrationPlanResponseBody202SelectionsInputsId createShelleyWalletMigrationPlanResponseBody202SelectionsInputsIndex = CreateShelleyWalletMigrationPlanResponseBody202SelectionsInputs{createShelleyWalletMigrationPlanResponseBody202SelectionsInputsAddress = createShelleyWalletMigrationPlanResponseBody202SelectionsInputsAddress,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       createShelleyWalletMigrationPlanResponseBody202SelectionsInputsAmount = createShelleyWalletMigrationPlanResponseBody202SelectionsInputsAmount,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       createShelleyWalletMigrationPlanResponseBody202SelectionsInputsAssets = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       createShelleyWalletMigrationPlanResponseBody202SelectionsInputsDerivation_path = createShelleyWalletMigrationPlanResponseBody202SelectionsInputsDerivation_path,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       createShelleyWalletMigrationPlanResponseBody202SelectionsInputsId = createShelleyWalletMigrationPlanResponseBody202SelectionsInputsId,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       createShelleyWalletMigrationPlanResponseBody202SelectionsInputsIndex = createShelleyWalletMigrationPlanResponseBody202SelectionsInputsIndex}
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/migrations\/plan.POST.responses.202.content.application\/json.schema.properties.selections.items.properties.inputs.items.properties.amount@ in the specification.
-- 
-- Coins, in Lovelace. Only relates to \'Ada\'. Refer to \`assets\` for multi-assets wallets instead.
data CreateShelleyWalletMigrationPlanResponseBody202SelectionsInputsAmount = CreateShelleyWalletMigrationPlanResponseBody202SelectionsInputsAmount {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  createShelleyWalletMigrationPlanResponseBody202SelectionsInputsAmountQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateShelleyWalletMigrationPlanResponseBody202SelectionsInputsAmount
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsInputsAmountQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsInputsAmountQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON CreateShelleyWalletMigrationPlanResponseBody202SelectionsInputsAmount
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateShelleyWalletMigrationPlanResponseBody202SelectionsInputsAmount" (\obj -> GHC.Base.pure CreateShelleyWalletMigrationPlanResponseBody202SelectionsInputsAmount GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'CreateShelleyWalletMigrationPlanResponseBody202SelectionsInputsAmount' with all required fields.
mkCreateShelleyWalletMigrationPlanResponseBody202SelectionsInputsAmount :: GHC.Types.Int -- ^ 'createShelleyWalletMigrationPlanResponseBody202SelectionsInputsAmountQuantity'
  -> CreateShelleyWalletMigrationPlanResponseBody202SelectionsInputsAmount
mkCreateShelleyWalletMigrationPlanResponseBody202SelectionsInputsAmount createShelleyWalletMigrationPlanResponseBody202SelectionsInputsAmountQuantity = CreateShelleyWalletMigrationPlanResponseBody202SelectionsInputsAmount{createShelleyWalletMigrationPlanResponseBody202SelectionsInputsAmountQuantity = createShelleyWalletMigrationPlanResponseBody202SelectionsInputsAmountQuantity}
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/migrations\/plan.POST.responses.202.content.application\/json.schema.properties.selections.items.properties.inputs.items.properties.assets.items@ in the specification.
-- 
-- An asset on the Cardano blockchain. An asset is uniquely identified by
-- its \`policy_id\` and \`asset_name\` (together, these form the _asset id_).
-- 
-- Two assets with the same \`asset_name\` and \`policy_id\` are
-- interchangeable. Yet, different assets with a same \`policy_id\` but
-- different \`asset_name\` are treated as separate assets, as are two
-- assets with the same \`asset_name\` but different \`policy_id\`.
data CreateShelleyWalletMigrationPlanResponseBody202SelectionsInputsAssets = CreateShelleyWalletMigrationPlanResponseBody202SelectionsInputsAssets {
  -- | asset_name: The asset on-chain type which acts as a sub-identifier within a
  -- policy. Although we call it \"asset name\", the value needn\'t be
  -- text, and it could even be empty.
  -- 
  -- For policies with a single fungible asset item, asset name is
  -- typically an empty string.
  -- 
  -- This value can be up to 32 bytes of arbitrary data (which is 64
  -- hexadecimal digits).
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  createShelleyWalletMigrationPlanResponseBody202SelectionsInputsAssetsAsset_name :: Data.Text.Internal.Text
  -- | policy_id: A unique identifier of the asset\'s monetary policy. The policy
  -- controls how assets of this kind are created and destroyed.
  -- 
  -- The contents are the blake2b-224 hash of the monetary policy
  -- script, encoded in hexadecimal.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 56
  -- * Minimum length of 56
  , createShelleyWalletMigrationPlanResponseBody202SelectionsInputsAssetsPolicy_id :: Data.Text.Internal.Text
  -- | quantity: Number of assets for the given \`policy_id\` and \`asset_name\`.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , createShelleyWalletMigrationPlanResponseBody202SelectionsInputsAssetsQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateShelleyWalletMigrationPlanResponseBody202SelectionsInputsAssets
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["asset_name" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsInputsAssetsAsset_name obj] : ["policy_id" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsInputsAssetsPolicy_id obj] : ["quantity" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsInputsAssetsQuantity obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["asset_name" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsInputsAssetsAsset_name obj] : ["policy_id" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsInputsAssetsPolicy_id obj] : ["quantity" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsInputsAssetsQuantity obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON CreateShelleyWalletMigrationPlanResponseBody202SelectionsInputsAssets
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateShelleyWalletMigrationPlanResponseBody202SelectionsInputsAssets" (\obj -> ((GHC.Base.pure CreateShelleyWalletMigrationPlanResponseBody202SelectionsInputsAssets GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "asset_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "policy_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'CreateShelleyWalletMigrationPlanResponseBody202SelectionsInputsAssets' with all required fields.
mkCreateShelleyWalletMigrationPlanResponseBody202SelectionsInputsAssets :: Data.Text.Internal.Text -- ^ 'createShelleyWalletMigrationPlanResponseBody202SelectionsInputsAssetsAsset_name'
  -> Data.Text.Internal.Text -- ^ 'createShelleyWalletMigrationPlanResponseBody202SelectionsInputsAssetsPolicy_id'
  -> GHC.Types.Int -- ^ 'createShelleyWalletMigrationPlanResponseBody202SelectionsInputsAssetsQuantity'
  -> CreateShelleyWalletMigrationPlanResponseBody202SelectionsInputsAssets
mkCreateShelleyWalletMigrationPlanResponseBody202SelectionsInputsAssets createShelleyWalletMigrationPlanResponseBody202SelectionsInputsAssetsAsset_name createShelleyWalletMigrationPlanResponseBody202SelectionsInputsAssetsPolicy_id createShelleyWalletMigrationPlanResponseBody202SelectionsInputsAssetsQuantity = CreateShelleyWalletMigrationPlanResponseBody202SelectionsInputsAssets{createShelleyWalletMigrationPlanResponseBody202SelectionsInputsAssetsAsset_name = createShelleyWalletMigrationPlanResponseBody202SelectionsInputsAssetsAsset_name,
                                                                                                                                                                                                                                                                                                                                                                                             createShelleyWalletMigrationPlanResponseBody202SelectionsInputsAssetsPolicy_id = createShelleyWalletMigrationPlanResponseBody202SelectionsInputsAssetsPolicy_id,
                                                                                                                                                                                                                                                                                                                                                                                             createShelleyWalletMigrationPlanResponseBody202SelectionsInputsAssetsQuantity = createShelleyWalletMigrationPlanResponseBody202SelectionsInputsAssetsQuantity}
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/migrations\/plan.POST.responses.202.content.application\/json.schema.properties.selections.items.properties.outputs.items@ in the specification.
-- 
-- 
data CreateShelleyWalletMigrationPlanResponseBody202SelectionsOutputs = CreateShelleyWalletMigrationPlanResponseBody202SelectionsOutputs {
  -- | address: A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
  -- which represents an address on the Cardano blockchain.
  -- Sequences in Base58 encoding are expected to be legacy Byron addresses,
  -- whereas sequences in Bech32 encoding correspond to current Shelley addresses.
  -- 
  -- For more details, see
  -- [CIP-0019 — Cardano addresses](https:\/\/github.com\/cardano-foundation\/CIPs\/tree\/master\/CIP-0019)
  -- .
  createShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAddress :: Data.Text.Internal.Text
  -- | amount: Coins, in Lovelace. Only relates to \'Ada\'. Refer to \`assets\` for multi-assets wallets instead.
  , createShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAmount :: CreateShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAmount
  -- | assets: A flat list of assets (possibly empty).
  , createShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAssets :: (GHC.Maybe.Maybe ([CreateShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAssets]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateShelleyWalletMigrationPlanResponseBody202SelectionsOutputs
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["address" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAddress obj] : ["amount" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAmount obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("assets" Data.Aeson.Types.ToJSON..=)) (createShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAssets obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["address" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAddress obj] : ["amount" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAmount obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("assets" Data.Aeson.Types.ToJSON..=)) (createShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAssets obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON CreateShelleyWalletMigrationPlanResponseBody202SelectionsOutputs
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateShelleyWalletMigrationPlanResponseBody202SelectionsOutputs" (\obj -> ((GHC.Base.pure CreateShelleyWalletMigrationPlanResponseBody202SelectionsOutputs GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "assets"))
-- | Create a new 'CreateShelleyWalletMigrationPlanResponseBody202SelectionsOutputs' with all required fields.
mkCreateShelleyWalletMigrationPlanResponseBody202SelectionsOutputs :: Data.Text.Internal.Text -- ^ 'createShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAddress'
  -> CreateShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAmount -- ^ 'createShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAmount'
  -> CreateShelleyWalletMigrationPlanResponseBody202SelectionsOutputs
mkCreateShelleyWalletMigrationPlanResponseBody202SelectionsOutputs createShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAddress createShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAmount = CreateShelleyWalletMigrationPlanResponseBody202SelectionsOutputs{createShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAddress = createShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAddress,
                                                                                                                                                                                                                                                                                     createShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAmount = createShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAmount,
                                                                                                                                                                                                                                                                                     createShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAssets = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/migrations\/plan.POST.responses.202.content.application\/json.schema.properties.selections.items.properties.outputs.items.properties.amount@ in the specification.
-- 
-- Coins, in Lovelace. Only relates to \'Ada\'. Refer to \`assets\` for multi-assets wallets instead.
data CreateShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAmount = CreateShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAmount {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  createShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAmountQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAmount
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAmountQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAmountQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON CreateShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAmount
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAmount" (\obj -> GHC.Base.pure CreateShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAmount GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'CreateShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAmount' with all required fields.
mkCreateShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAmount :: GHC.Types.Int -- ^ 'createShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAmountQuantity'
  -> CreateShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAmount
mkCreateShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAmount createShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAmountQuantity = CreateShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAmount{createShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAmountQuantity = createShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAmountQuantity}
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/migrations\/plan.POST.responses.202.content.application\/json.schema.properties.selections.items.properties.outputs.items.properties.assets.items@ in the specification.
-- 
-- An asset on the Cardano blockchain. An asset is uniquely identified by
-- its \`policy_id\` and \`asset_name\` (together, these form the _asset id_).
-- 
-- Two assets with the same \`asset_name\` and \`policy_id\` are
-- interchangeable. Yet, different assets with a same \`policy_id\` but
-- different \`asset_name\` are treated as separate assets, as are two
-- assets with the same \`asset_name\` but different \`policy_id\`.
data CreateShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAssets = CreateShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAssets {
  -- | asset_name: The asset on-chain type which acts as a sub-identifier within a
  -- policy. Although we call it \"asset name\", the value needn\'t be
  -- text, and it could even be empty.
  -- 
  -- For policies with a single fungible asset item, asset name is
  -- typically an empty string.
  -- 
  -- This value can be up to 32 bytes of arbitrary data (which is 64
  -- hexadecimal digits).
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  createShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAssetsAsset_name :: Data.Text.Internal.Text
  -- | policy_id: A unique identifier of the asset\'s monetary policy. The policy
  -- controls how assets of this kind are created and destroyed.
  -- 
  -- The contents are the blake2b-224 hash of the monetary policy
  -- script, encoded in hexadecimal.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 56
  -- * Minimum length of 56
  , createShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAssetsPolicy_id :: Data.Text.Internal.Text
  -- | quantity: Number of assets for the given \`policy_id\` and \`asset_name\`.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , createShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAssetsQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAssets
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["asset_name" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAssetsAsset_name obj] : ["policy_id" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAssetsPolicy_id obj] : ["quantity" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAssetsQuantity obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["asset_name" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAssetsAsset_name obj] : ["policy_id" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAssetsPolicy_id obj] : ["quantity" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAssetsQuantity obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON CreateShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAssets
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAssets" (\obj -> ((GHC.Base.pure CreateShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAssets GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "asset_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "policy_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'CreateShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAssets' with all required fields.
mkCreateShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAssets :: Data.Text.Internal.Text -- ^ 'createShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAssetsAsset_name'
  -> Data.Text.Internal.Text -- ^ 'createShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAssetsPolicy_id'
  -> GHC.Types.Int -- ^ 'createShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAssetsQuantity'
  -> CreateShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAssets
mkCreateShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAssets createShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAssetsAsset_name createShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAssetsPolicy_id createShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAssetsQuantity = CreateShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAssets{createShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAssetsAsset_name = createShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAssetsAsset_name,
                                                                                                                                                                                                                                                                                                                                                                                                  createShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAssetsPolicy_id = createShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAssetsPolicy_id,
                                                                                                                                                                                                                                                                                                                                                                                                  createShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAssetsQuantity = createShelleyWalletMigrationPlanResponseBody202SelectionsOutputsAssetsQuantity}
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/migrations\/plan.POST.responses.202.content.application\/json.schema.properties.selections.items.properties.withdrawals.items@ in the specification.
-- 
-- 
data CreateShelleyWalletMigrationPlanResponseBody202SelectionsWithdrawals = CreateShelleyWalletMigrationPlanResponseBody202SelectionsWithdrawals {
  -- | amount: Coins, in Lovelace. Only relates to \'Ada\'. Refer to \`assets\` for multi-assets wallets instead.
  createShelleyWalletMigrationPlanResponseBody202SelectionsWithdrawalsAmount :: CreateShelleyWalletMigrationPlanResponseBody202SelectionsWithdrawalsAmount
  -- | derivation_path: A path for deriving a child key from a parent key.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  , createShelleyWalletMigrationPlanResponseBody202SelectionsWithdrawalsDerivation_path :: ([Data.Text.Internal.Text])
  -- | stake_address
  , createShelleyWalletMigrationPlanResponseBody202SelectionsWithdrawalsStake_address :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateShelleyWalletMigrationPlanResponseBody202SelectionsWithdrawals
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsWithdrawalsAmount obj] : ["derivation_path" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsWithdrawalsDerivation_path obj] : ["stake_address" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsWithdrawalsStake_address obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsWithdrawalsAmount obj] : ["derivation_path" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsWithdrawalsDerivation_path obj] : ["stake_address" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsWithdrawalsStake_address obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON CreateShelleyWalletMigrationPlanResponseBody202SelectionsWithdrawals
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateShelleyWalletMigrationPlanResponseBody202SelectionsWithdrawals" (\obj -> ((GHC.Base.pure CreateShelleyWalletMigrationPlanResponseBody202SelectionsWithdrawals GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "derivation_path")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "stake_address"))
-- | Create a new 'CreateShelleyWalletMigrationPlanResponseBody202SelectionsWithdrawals' with all required fields.
mkCreateShelleyWalletMigrationPlanResponseBody202SelectionsWithdrawals :: CreateShelleyWalletMigrationPlanResponseBody202SelectionsWithdrawalsAmount -- ^ 'createShelleyWalletMigrationPlanResponseBody202SelectionsWithdrawalsAmount'
  -> [Data.Text.Internal.Text] -- ^ 'createShelleyWalletMigrationPlanResponseBody202SelectionsWithdrawalsDerivation_path'
  -> Data.Text.Internal.Text -- ^ 'createShelleyWalletMigrationPlanResponseBody202SelectionsWithdrawalsStake_address'
  -> CreateShelleyWalletMigrationPlanResponseBody202SelectionsWithdrawals
mkCreateShelleyWalletMigrationPlanResponseBody202SelectionsWithdrawals createShelleyWalletMigrationPlanResponseBody202SelectionsWithdrawalsAmount createShelleyWalletMigrationPlanResponseBody202SelectionsWithdrawalsDerivation_path createShelleyWalletMigrationPlanResponseBody202SelectionsWithdrawalsStake_address = CreateShelleyWalletMigrationPlanResponseBody202SelectionsWithdrawals{createShelleyWalletMigrationPlanResponseBody202SelectionsWithdrawalsAmount = createShelleyWalletMigrationPlanResponseBody202SelectionsWithdrawalsAmount,
                                                                                                                                                                                                                                                                                                                                                                                               createShelleyWalletMigrationPlanResponseBody202SelectionsWithdrawalsDerivation_path = createShelleyWalletMigrationPlanResponseBody202SelectionsWithdrawalsDerivation_path,
                                                                                                                                                                                                                                                                                                                                                                                               createShelleyWalletMigrationPlanResponseBody202SelectionsWithdrawalsStake_address = createShelleyWalletMigrationPlanResponseBody202SelectionsWithdrawalsStake_address}
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/migrations\/plan.POST.responses.202.content.application\/json.schema.properties.selections.items.properties.withdrawals.items.properties.amount@ in the specification.
-- 
-- Coins, in Lovelace. Only relates to \'Ada\'. Refer to \`assets\` for multi-assets wallets instead.
data CreateShelleyWalletMigrationPlanResponseBody202SelectionsWithdrawalsAmount = CreateShelleyWalletMigrationPlanResponseBody202SelectionsWithdrawalsAmount {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  createShelleyWalletMigrationPlanResponseBody202SelectionsWithdrawalsAmountQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateShelleyWalletMigrationPlanResponseBody202SelectionsWithdrawalsAmount
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsWithdrawalsAmountQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202SelectionsWithdrawalsAmountQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON CreateShelleyWalletMigrationPlanResponseBody202SelectionsWithdrawalsAmount
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateShelleyWalletMigrationPlanResponseBody202SelectionsWithdrawalsAmount" (\obj -> GHC.Base.pure CreateShelleyWalletMigrationPlanResponseBody202SelectionsWithdrawalsAmount GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'CreateShelleyWalletMigrationPlanResponseBody202SelectionsWithdrawalsAmount' with all required fields.
mkCreateShelleyWalletMigrationPlanResponseBody202SelectionsWithdrawalsAmount :: GHC.Types.Int -- ^ 'createShelleyWalletMigrationPlanResponseBody202SelectionsWithdrawalsAmountQuantity'
  -> CreateShelleyWalletMigrationPlanResponseBody202SelectionsWithdrawalsAmount
mkCreateShelleyWalletMigrationPlanResponseBody202SelectionsWithdrawalsAmount createShelleyWalletMigrationPlanResponseBody202SelectionsWithdrawalsAmountQuantity = CreateShelleyWalletMigrationPlanResponseBody202SelectionsWithdrawalsAmount{createShelleyWalletMigrationPlanResponseBody202SelectionsWithdrawalsAmountQuantity = createShelleyWalletMigrationPlanResponseBody202SelectionsWithdrawalsAmountQuantity}
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/migrations\/plan.POST.responses.202.content.application\/json.schema.properties.total_fee@ in the specification.
-- 
-- The total amount to be paid in fees for a migration.
-- 
-- This is the total sum of the fees of the individual selections.
data CreateShelleyWalletMigrationPlanResponseBody202Total_fee = CreateShelleyWalletMigrationPlanResponseBody202Total_fee {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  createShelleyWalletMigrationPlanResponseBody202Total_feeQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateShelleyWalletMigrationPlanResponseBody202Total_fee
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202Total_feeQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody202Total_feeQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON CreateShelleyWalletMigrationPlanResponseBody202Total_fee
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateShelleyWalletMigrationPlanResponseBody202Total_fee" (\obj -> GHC.Base.pure CreateShelleyWalletMigrationPlanResponseBody202Total_fee GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'CreateShelleyWalletMigrationPlanResponseBody202Total_fee' with all required fields.
mkCreateShelleyWalletMigrationPlanResponseBody202Total_fee :: GHC.Types.Int -- ^ 'createShelleyWalletMigrationPlanResponseBody202Total_feeQuantity'
  -> CreateShelleyWalletMigrationPlanResponseBody202Total_fee
mkCreateShelleyWalletMigrationPlanResponseBody202Total_fee createShelleyWalletMigrationPlanResponseBody202Total_feeQuantity = CreateShelleyWalletMigrationPlanResponseBody202Total_fee{createShelleyWalletMigrationPlanResponseBody202Total_feeQuantity = createShelleyWalletMigrationPlanResponseBody202Total_feeQuantity}
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/migrations\/plan.POST.responses.403.content.application\/json.schema@ in the specification.
-- 
-- 
data CreateShelleyWalletMigrationPlanResponseBody403 = CreateShelleyWalletMigrationPlanResponseBody403 {
  -- | message: May occur when trying to migrate a wallet that is empty or full of dust.
  createShelleyWalletMigrationPlanResponseBody403Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateShelleyWalletMigrationPlanResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody403Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "nothing_to_migrate"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody403Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "nothing_to_migrate"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON CreateShelleyWalletMigrationPlanResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateShelleyWalletMigrationPlanResponseBody403" (\obj -> GHC.Base.pure CreateShelleyWalletMigrationPlanResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'CreateShelleyWalletMigrationPlanResponseBody403' with all required fields.
mkCreateShelleyWalletMigrationPlanResponseBody403 :: Data.Text.Internal.Text -- ^ 'createShelleyWalletMigrationPlanResponseBody403Message'
  -> CreateShelleyWalletMigrationPlanResponseBody403
mkCreateShelleyWalletMigrationPlanResponseBody403 createShelleyWalletMigrationPlanResponseBody403Message = CreateShelleyWalletMigrationPlanResponseBody403{createShelleyWalletMigrationPlanResponseBody403Message = createShelleyWalletMigrationPlanResponseBody403Message}
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/migrations\/plan.POST.responses.404.content.application\/json.schema@ in the specification.
-- 
-- 
data CreateShelleyWalletMigrationPlanResponseBody404 = CreateShelleyWalletMigrationPlanResponseBody404 {
  -- | message: May occur when a given walletId does not match with any known
  -- wallets (because it has been deleted, or has never existed).
  createShelleyWalletMigrationPlanResponseBody404Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateShelleyWalletMigrationPlanResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody404Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "no_such_wallet"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody404Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "no_such_wallet"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON CreateShelleyWalletMigrationPlanResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateShelleyWalletMigrationPlanResponseBody404" (\obj -> GHC.Base.pure CreateShelleyWalletMigrationPlanResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'CreateShelleyWalletMigrationPlanResponseBody404' with all required fields.
mkCreateShelleyWalletMigrationPlanResponseBody404 :: Data.Text.Internal.Text -- ^ 'createShelleyWalletMigrationPlanResponseBody404Message'
  -> CreateShelleyWalletMigrationPlanResponseBody404
mkCreateShelleyWalletMigrationPlanResponseBody404 createShelleyWalletMigrationPlanResponseBody404Message = CreateShelleyWalletMigrationPlanResponseBody404{createShelleyWalletMigrationPlanResponseBody404Message = createShelleyWalletMigrationPlanResponseBody404Message}
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/migrations\/plan.POST.responses.406.content.application\/json.schema@ in the specification.
-- 
-- 
data CreateShelleyWalletMigrationPlanResponseBody406 = CreateShelleyWalletMigrationPlanResponseBody406 {
  -- | message: May occur when providing an invalid \'Accept\' header.
  createShelleyWalletMigrationPlanResponseBody406Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CreateShelleyWalletMigrationPlanResponseBody406
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody406Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "not_acceptable"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= createShelleyWalletMigrationPlanResponseBody406Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "not_acceptable"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON CreateShelleyWalletMigrationPlanResponseBody406
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreateShelleyWalletMigrationPlanResponseBody406" (\obj -> GHC.Base.pure CreateShelleyWalletMigrationPlanResponseBody406 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'CreateShelleyWalletMigrationPlanResponseBody406' with all required fields.
mkCreateShelleyWalletMigrationPlanResponseBody406 :: Data.Text.Internal.Text -- ^ 'createShelleyWalletMigrationPlanResponseBody406Message'
  -> CreateShelleyWalletMigrationPlanResponseBody406
mkCreateShelleyWalletMigrationPlanResponseBody406 createShelleyWalletMigrationPlanResponseBody406Message = CreateShelleyWalletMigrationPlanResponseBody406{createShelleyWalletMigrationPlanResponseBody406Message = createShelleyWalletMigrationPlanResponseBody406Message}
-- | > POST /wallets/{walletId}/migrations/plan
-- 
-- The same as 'createShelleyWalletMigrationPlan' but accepts an explicit configuration.
createShelleyWalletMigrationPlanWithConfiguration :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ walletId | Constraints: Maximum length of 40, Minimum length of 40
  -> CreateShelleyWalletMigrationPlanRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response CreateShelleyWalletMigrationPlanResponse) -- ^ Monadic computation which returns the result of the operation
createShelleyWalletMigrationPlanWithConfiguration config
                                                  walletId
                                                  body = GHC.Base.fmap (\response_5 -> GHC.Base.fmap (Data.Either.either CreateShelleyWalletMigrationPlanResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 202) (Network.HTTP.Client.Types.responseStatus response) -> CreateShelleyWalletMigrationPlanResponse202 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    CreateShelleyWalletMigrationPlanResponseBody202)
                                                                                                                                                                                                                    | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> CreateShelleyWalletMigrationPlanResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    CreateShelleyWalletMigrationPlanResponseBody403)
                                                                                                                                                                                                                    | (\status_8 -> Network.HTTP.Types.Status.statusCode status_8 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> CreateShelleyWalletMigrationPlanResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    CreateShelleyWalletMigrationPlanResponseBody404)
                                                                                                                                                                                                                    | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 406) (Network.HTTP.Client.Types.responseStatus response) -> CreateShelleyWalletMigrationPlanResponse406 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    CreateShelleyWalletMigrationPlanResponseBody406)
                                                                                                                                                                                                                    | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_5) response_5) (Wallet.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") ("/wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel walletId)) GHC.Base.<> "/migrations/plan")) GHC.Base.mempty (GHC.Maybe.Just body) Wallet.Common.RequestBodyEncodingJSON)
-- | > POST /wallets/{walletId}/migrations/plan
-- 
-- The same as 'createShelleyWalletMigrationPlan' but returns the raw 'Data.ByteString.ByteString'.
createShelleyWalletMigrationPlanRaw :: forall m . Wallet.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ walletId | Constraints: Maximum length of 40, Minimum length of 40
  -> CreateShelleyWalletMigrationPlanRequestBody -- ^ The request body to send
  -> Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
createShelleyWalletMigrationPlanRaw walletId
                                    body = GHC.Base.id (Wallet.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") ("/wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel walletId)) GHC.Base.<> "/migrations/plan")) GHC.Base.mempty (GHC.Maybe.Just body) Wallet.Common.RequestBodyEncodingJSON)
-- | > POST /wallets/{walletId}/migrations/plan
-- 
-- The same as 'createShelleyWalletMigrationPlan' but accepts an explicit configuration and returns the raw 'Data.ByteString.ByteString'.
createShelleyWalletMigrationPlanWithConfigurationRaw :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ walletId | Constraints: Maximum length of 40, Minimum length of 40
  -> CreateShelleyWalletMigrationPlanRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
createShelleyWalletMigrationPlanWithConfigurationRaw config
                                                     walletId
                                                     body = GHC.Base.id (Wallet.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") ("/wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel walletId)) GHC.Base.<> "/migrations/plan")) GHC.Base.mempty (GHC.Maybe.Just body) Wallet.Common.RequestBodyEncodingJSON)
