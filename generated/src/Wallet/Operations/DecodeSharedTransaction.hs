-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation decodeSharedTransaction
module Wallet.Operations.DecodeSharedTransaction where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Wallet.Common
import Wallet.Types

-- | > POST /shared-wallets/{walletId}/transactions-decode
-- 
-- \<p align=\"right\">status: \<strong>under development\<\/strong>\<\/p>
-- 
-- Decode a serialized transaction, either freshly constructed,
-- partially signed or fully-signed.
decodeSharedTransaction :: forall m . Wallet.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ walletId | Constraints: Maximum length of 40, Minimum length of 40
  -> DecodeSharedTransactionRequestBody -- ^ The request body to send
  -> Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response DecodeSharedTransactionResponse) -- ^ Monadic computation which returns the result of the operation
decodeSharedTransaction walletId
                        body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either DecodeSharedTransactionResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 202) (Network.HTTP.Client.Types.responseStatus response) -> DecodeSharedTransactionResponse202 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                        DecodeSharedTransactionResponseBody202)
                                                                                                                                                                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> DecodeSharedTransactionResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                        DecodeSharedTransactionResponseBody400)
                                                                                                                                                                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> DecodeSharedTransactionResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                        DecodeSharedTransactionResponseBody404)
                                                                                                                                                                                 | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 406) (Network.HTTP.Client.Types.responseStatus response) -> DecodeSharedTransactionResponse406 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                        DecodeSharedTransactionResponseBody406)
                                                                                                                                                                                 | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 415) (Network.HTTP.Client.Types.responseStatus response) -> DecodeSharedTransactionResponse415 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                        DecodeSharedTransactionResponseBody415)
                                                                                                                                                                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Wallet.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") ("/shared-wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel walletId)) GHC.Base.<> "/transactions-decode")) GHC.Base.mempty (GHC.Maybe.Just body) Wallet.Common.RequestBodyEncodingJSON)
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.requestBody.content.application\/json.schema@ in the specification.
-- 
-- An encoded transaction.
data DecodeSharedTransactionRequestBody = DecodeSharedTransactionRequestBody {
  -- | transaction: The CBOR-encoded transaction, represented in either hex or base64 encoding.
  -- This always includes the transaction body and the witness set, even if the
  -- latter is empty.
  decodeSharedTransactionRequestBodyTransaction :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["transaction" Data.Aeson.Types.ToJSON..= decodeSharedTransactionRequestBodyTransaction obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["transaction" Data.Aeson.Types.ToJSON..= decodeSharedTransactionRequestBodyTransaction obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionRequestBody" (\obj -> GHC.Base.pure DecodeSharedTransactionRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "transaction"))
-- | Create a new 'DecodeSharedTransactionRequestBody' with all required fields.
mkDecodeSharedTransactionRequestBody :: Data.Text.Internal.Text -- ^ 'decodeSharedTransactionRequestBodyTransaction'
  -> DecodeSharedTransactionRequestBody
mkDecodeSharedTransactionRequestBody decodeSharedTransactionRequestBodyTransaction = DecodeSharedTransactionRequestBody{decodeSharedTransactionRequestBodyTransaction = decodeSharedTransactionRequestBodyTransaction}
-- | Represents a response of the operation 'decodeSharedTransaction'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'DecodeSharedTransactionResponseError' is used.
data DecodeSharedTransactionResponse =
   DecodeSharedTransactionResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | DecodeSharedTransactionResponse202 DecodeSharedTransactionResponseBody202 -- ^ Accepted
  | DecodeSharedTransactionResponse400 DecodeSharedTransactionResponseBody400 -- ^ Bad Request
  | DecodeSharedTransactionResponse404 DecodeSharedTransactionResponseBody404 -- ^ Not Found
  | DecodeSharedTransactionResponse406 DecodeSharedTransactionResponseBody406 -- ^ Not Acceptable
  | DecodeSharedTransactionResponse415 DecodeSharedTransactionResponseBody415 -- ^ Unsupported Media Type
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema@ in the specification.
-- 
-- 
data DecodeSharedTransactionResponseBody202 = DecodeSharedTransactionResponseBody202 {
  -- | burn
  decodeSharedTransactionResponseBody202Burn :: DecodeSharedTransactionResponseBody202Burn
  -- | certificates
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 0 items
  , decodeSharedTransactionResponseBody202Certificates :: ([DecodeSharedTransactionResponseBody202CertificatesVariants])
  -- | collateral: Inputs that could be external or belong to the wallet.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 0 items
  , decodeSharedTransactionResponseBody202Collateral :: (GHC.Maybe.Maybe ([DecodeSharedTransactionResponseBody202CollateralVariants]))
  -- | collateral_outputs: Outputs that could be external or belong to the wallet.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Must have a maximum of 1 items
  -- * Must have a minimum of 0 items
  , decodeSharedTransactionResponseBody202Collateral_outputs :: (GHC.Maybe.Maybe ([DecodeSharedTransactionResponseBody202Collateral_outputsVariants]))
  -- | deposits_returned: A list of deposits associated with a transaction.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 0 items
  , decodeSharedTransactionResponseBody202Deposits_returned :: (GHC.Maybe.Maybe ([DecodeSharedTransactionResponseBody202Deposits_returned]))
  -- | deposits_taken: A list of deposits associated with a transaction.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 0 items
  , decodeSharedTransactionResponseBody202Deposits_taken :: (GHC.Maybe.Maybe ([DecodeSharedTransactionResponseBody202Deposits_taken]))
  -- | fee: Coins, in Lovelace. Only relates to \'Ada\'. Refer to \`assets\` for multi-assets wallets instead.
  , decodeSharedTransactionResponseBody202Fee :: DecodeSharedTransactionResponseBody202Fee
  -- | id: A unique identifier for this transaction
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  -- * Minimum length of 64
  , decodeSharedTransactionResponseBody202Id :: Data.Text.Internal.Text
  -- | inputs: Inputs that could be external or belong to the wallet.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 0 items
  , decodeSharedTransactionResponseBody202Inputs :: ([DecodeSharedTransactionResponseBody202InputsVariants])
  -- | metadata: **⚠️ WARNING ⚠️**
  -- 
  -- _Please note that metadata provided in a transaction will be
  -- stored on the blockchain forever. Make sure not to include any sensitive data,
  -- in particular personally identifiable information (PII)._
  -- 
  -- Extra application data attached to the transaction.
  -- 
  -- Cardano allows users and developers to embed their own
  -- authenticated metadata when submitting transactions. Metadata can
  -- be expressed as a JSON object with some restrictions:
  -- 
  -- 1. All top-level keys must be integers between \`0\` and \`2^64 - 1\`.
  -- 
  -- 2. Each metadata value is tagged with its type.
  -- 
  -- 3. Strings must be at most 64 bytes when UTF-8 encoded.
  -- 
  -- 4. Bytestrings are hex-encoded, with a maximum length of 64 bytes.
  -- 
  -- Metadata aren\'t stored as JSON on the Cardano blockchain but are
  -- instead stored using a compact binary encoding (CBOR).
  -- 
  -- The binary encoding of metadata values supports three simple types:
  -- 
  -- * Integers in the range \`-(2^64 - 1)\` to \`2^64 - 1\`
  -- * Strings (UTF-8 encoded)
  -- * Bytestrings
  -- 
  -- And two compound types:
  -- 
  -- * Lists of metadata values
  -- * Mappings from metadata values to metadata values
  -- 
  -- It is possible to transform any JSON object into this schema.
  -- 
  -- However, if your application uses floating point values, they will
  -- need to be converted somehow, according to your
  -- requirements. Likewise for \`null\` or \`bool\` values. When reading
  -- metadata from chain, be aware that integers may exceed the
  -- javascript numeric range, and may need special \"bigint\" parsing.
  , decodeSharedTransactionResponseBody202Metadata :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object)
  -- | mint
  , decodeSharedTransactionResponseBody202Mint :: DecodeSharedTransactionResponseBody202Mint
  -- | outputs: Outputs that could be external or belong to the wallet.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 0 items
  , decodeSharedTransactionResponseBody202Outputs :: ([DecodeSharedTransactionResponseBody202OutputsVariants])
  -- | script_validity: Indicates whether the phase-2 monetary policy script (e.g. Plutus script)
  -- used in the transaction validated or not. Validity may be null if this
  -- transaction was from an era that doesn\'t support phase-2 monetary policy
  -- scripts, or is a pending transaction (we don\'t know if validation passed or
  -- failed until the transaction hits the ledger).
  , decodeSharedTransactionResponseBody202Script_validity :: (GHC.Maybe.Maybe (Wallet.Common.Nullable DecodeSharedTransactionResponseBody202Script_validityNonNullable))
  -- | validity_interval
  , decodeSharedTransactionResponseBody202Validity_interval :: (GHC.Maybe.Maybe DecodeSharedTransactionResponseBody202Validity_interval)
  -- | withdrawals: Withdrawals that could be external or belong to the wallet.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 0 items
  , decodeSharedTransactionResponseBody202Withdrawals :: ([DecodeSharedTransactionResponseBody202Withdrawals])
  -- | witness_count: Specifies the number of verification key and bootstrap wintesses.
  -- As scripts act as witnesses they are also included. Scripts can be specified
  -- and spent in a given transaction or defined to be consumed later.
  -- In the latter case they are defined in transaction outputs (feature possible from Babbage era)
  -- in one transaction and referenced in other later transaction(s). The script referencing
  -- is realized via including of reference in a reference input. If reference script
  -- is present here it included the form of the script and reference to be used later,
  -- ie. tx id and index of tx out where the script was included.
  , decodeSharedTransactionResponseBody202Witness_count :: DecodeSharedTransactionResponseBody202Witness_count
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["burn" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Burn obj] : ["certificates" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Certificates obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("collateral" Data.Aeson.Types.ToJSON..=)) (decodeSharedTransactionResponseBody202Collateral obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("collateral_outputs" Data.Aeson.Types.ToJSON..=)) (decodeSharedTransactionResponseBody202Collateral_outputs obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("deposits_returned" Data.Aeson.Types.ToJSON..=)) (decodeSharedTransactionResponseBody202Deposits_returned obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("deposits_taken" Data.Aeson.Types.ToJSON..=)) (decodeSharedTransactionResponseBody202Deposits_taken obj) : ["fee" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Fee obj] : ["id" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Id obj] : ["inputs" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Inputs obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("metadata" Data.Aeson.Types.ToJSON..=)) (decodeSharedTransactionResponseBody202Metadata obj) : ["mint" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Mint obj] : ["outputs" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Outputs obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("script_validity" Data.Aeson.Types.ToJSON..=)) (decodeSharedTransactionResponseBody202Script_validity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("validity_interval" Data.Aeson.Types.ToJSON..=)) (decodeSharedTransactionResponseBody202Validity_interval obj) : ["withdrawals" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Withdrawals obj] : ["witness_count" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Witness_count obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["burn" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Burn obj] : ["certificates" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Certificates obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("collateral" Data.Aeson.Types.ToJSON..=)) (decodeSharedTransactionResponseBody202Collateral obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("collateral_outputs" Data.Aeson.Types.ToJSON..=)) (decodeSharedTransactionResponseBody202Collateral_outputs obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("deposits_returned" Data.Aeson.Types.ToJSON..=)) (decodeSharedTransactionResponseBody202Deposits_returned obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("deposits_taken" Data.Aeson.Types.ToJSON..=)) (decodeSharedTransactionResponseBody202Deposits_taken obj) : ["fee" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Fee obj] : ["id" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Id obj] : ["inputs" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Inputs obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("metadata" Data.Aeson.Types.ToJSON..=)) (decodeSharedTransactionResponseBody202Metadata obj) : ["mint" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Mint obj] : ["outputs" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Outputs obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("script_validity" Data.Aeson.Types.ToJSON..=)) (decodeSharedTransactionResponseBody202Script_validity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("validity_interval" Data.Aeson.Types.ToJSON..=)) (decodeSharedTransactionResponseBody202Validity_interval obj) : ["withdrawals" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Withdrawals obj] : ["witness_count" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Witness_count obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202" (\obj -> (((((((((((((((GHC.Base.pure DecodeSharedTransactionResponseBody202 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "burn")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "certificates")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "collateral")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "collateral_outputs")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "deposits_returned")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "deposits_taken")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "fee")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "inputs")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "mint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "outputs")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "script_validity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "validity_interval")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "withdrawals")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "witness_count"))
-- | Create a new 'DecodeSharedTransactionResponseBody202' with all required fields.
mkDecodeSharedTransactionResponseBody202 :: DecodeSharedTransactionResponseBody202Burn -- ^ 'decodeSharedTransactionResponseBody202Burn'
  -> [DecodeSharedTransactionResponseBody202CertificatesVariants] -- ^ 'decodeSharedTransactionResponseBody202Certificates'
  -> DecodeSharedTransactionResponseBody202Fee -- ^ 'decodeSharedTransactionResponseBody202Fee'
  -> Data.Text.Internal.Text -- ^ 'decodeSharedTransactionResponseBody202Id'
  -> [DecodeSharedTransactionResponseBody202InputsVariants] -- ^ 'decodeSharedTransactionResponseBody202Inputs'
  -> DecodeSharedTransactionResponseBody202Mint -- ^ 'decodeSharedTransactionResponseBody202Mint'
  -> [DecodeSharedTransactionResponseBody202OutputsVariants] -- ^ 'decodeSharedTransactionResponseBody202Outputs'
  -> [DecodeSharedTransactionResponseBody202Withdrawals] -- ^ 'decodeSharedTransactionResponseBody202Withdrawals'
  -> DecodeSharedTransactionResponseBody202Witness_count -- ^ 'decodeSharedTransactionResponseBody202Witness_count'
  -> DecodeSharedTransactionResponseBody202
mkDecodeSharedTransactionResponseBody202 decodeSharedTransactionResponseBody202Burn decodeSharedTransactionResponseBody202Certificates decodeSharedTransactionResponseBody202Fee decodeSharedTransactionResponseBody202Id decodeSharedTransactionResponseBody202Inputs decodeSharedTransactionResponseBody202Mint decodeSharedTransactionResponseBody202Outputs decodeSharedTransactionResponseBody202Withdrawals decodeSharedTransactionResponseBody202Witness_count = DecodeSharedTransactionResponseBody202{decodeSharedTransactionResponseBody202Burn = decodeSharedTransactionResponseBody202Burn,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               decodeSharedTransactionResponseBody202Certificates = decodeSharedTransactionResponseBody202Certificates,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               decodeSharedTransactionResponseBody202Collateral = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               decodeSharedTransactionResponseBody202Collateral_outputs = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               decodeSharedTransactionResponseBody202Deposits_returned = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               decodeSharedTransactionResponseBody202Deposits_taken = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               decodeSharedTransactionResponseBody202Fee = decodeSharedTransactionResponseBody202Fee,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               decodeSharedTransactionResponseBody202Id = decodeSharedTransactionResponseBody202Id,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               decodeSharedTransactionResponseBody202Inputs = decodeSharedTransactionResponseBody202Inputs,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               decodeSharedTransactionResponseBody202Metadata = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               decodeSharedTransactionResponseBody202Mint = decodeSharedTransactionResponseBody202Mint,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               decodeSharedTransactionResponseBody202Outputs = decodeSharedTransactionResponseBody202Outputs,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               decodeSharedTransactionResponseBody202Script_validity = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               decodeSharedTransactionResponseBody202Validity_interval = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               decodeSharedTransactionResponseBody202Withdrawals = decodeSharedTransactionResponseBody202Withdrawals,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               decodeSharedTransactionResponseBody202Witness_count = decodeSharedTransactionResponseBody202Witness_count}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.burn@ in the specification.
-- 
-- 
data DecodeSharedTransactionResponseBody202Burn = DecodeSharedTransactionResponseBody202Burn {
  -- | tokens
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 0 items
  decodeSharedTransactionResponseBody202BurnTokens :: ([DecodeSharedTransactionResponseBody202BurnTokens])
  -- | wallet_policy_key_hash
  -- 
  -- Constraints:
  -- 
  -- * Must match pattern \'^((policy_vk)|(policy_vkh))1[0-9a-z]*\$\'
  , decodeSharedTransactionResponseBody202BurnWallet_policy_key_hash :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | wallet_policy_key_index: An individual segment within a derivation path.
  -- 
  -- The \`H\` suffix indicates a _Hardened_ child private key, which
  -- means that children of this key cannot be derived from the public
  -- key. Indices without a \`H\` suffix are called _Soft_.
  , decodeSharedTransactionResponseBody202BurnWallet_policy_key_index :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202Burn
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["tokens" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202BurnTokens obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("wallet_policy_key_hash" Data.Aeson.Types.ToJSON..=)) (decodeSharedTransactionResponseBody202BurnWallet_policy_key_hash obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("wallet_policy_key_index" Data.Aeson.Types.ToJSON..=)) (decodeSharedTransactionResponseBody202BurnWallet_policy_key_index obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["tokens" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202BurnTokens obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("wallet_policy_key_hash" Data.Aeson.Types.ToJSON..=)) (decodeSharedTransactionResponseBody202BurnWallet_policy_key_hash obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("wallet_policy_key_index" Data.Aeson.Types.ToJSON..=)) (decodeSharedTransactionResponseBody202BurnWallet_policy_key_index obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202Burn
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202Burn" (\obj -> ((GHC.Base.pure DecodeSharedTransactionResponseBody202Burn GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "tokens")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "wallet_policy_key_hash")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "wallet_policy_key_index"))
-- | Create a new 'DecodeSharedTransactionResponseBody202Burn' with all required fields.
mkDecodeSharedTransactionResponseBody202Burn :: [DecodeSharedTransactionResponseBody202BurnTokens] -- ^ 'decodeSharedTransactionResponseBody202BurnTokens'
  -> DecodeSharedTransactionResponseBody202Burn
mkDecodeSharedTransactionResponseBody202Burn decodeSharedTransactionResponseBody202BurnTokens = DecodeSharedTransactionResponseBody202Burn{decodeSharedTransactionResponseBody202BurnTokens = decodeSharedTransactionResponseBody202BurnTokens,
                                                                                                                                           decodeSharedTransactionResponseBody202BurnWallet_policy_key_hash = GHC.Maybe.Nothing,
                                                                                                                                           decodeSharedTransactionResponseBody202BurnWallet_policy_key_index = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.burn.properties.tokens.items@ in the specification.
-- 
-- 
data DecodeSharedTransactionResponseBody202BurnTokens = DecodeSharedTransactionResponseBody202BurnTokens {
  -- | assets
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  decodeSharedTransactionResponseBody202BurnTokensAssets :: ([DecodeSharedTransactionResponseBody202BurnTokensAssets])
  -- | policy_id: A unique identifier of the asset\'s monetary policy. The policy
  -- controls how assets of this kind are created and destroyed.
  -- 
  -- The contents are the blake2b-224 hash of the monetary policy
  -- script, encoded in hexadecimal.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 56
  -- * Minimum length of 56
  , decodeSharedTransactionResponseBody202BurnTokensPolicy_id :: Data.Text.Internal.Text
  -- | policy_script
  , decodeSharedTransactionResponseBody202BurnTokensPolicy_script :: DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptVariants
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202BurnTokens
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["assets" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202BurnTokensAssets obj] : ["policy_id" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202BurnTokensPolicy_id obj] : ["policy_script" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202BurnTokensPolicy_script obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["assets" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202BurnTokensAssets obj] : ["policy_id" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202BurnTokensPolicy_id obj] : ["policy_script" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202BurnTokensPolicy_script obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202BurnTokens
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202BurnTokens" (\obj -> ((GHC.Base.pure DecodeSharedTransactionResponseBody202BurnTokens GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "assets")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "policy_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "policy_script"))
-- | Create a new 'DecodeSharedTransactionResponseBody202BurnTokens' with all required fields.
mkDecodeSharedTransactionResponseBody202BurnTokens :: [DecodeSharedTransactionResponseBody202BurnTokensAssets] -- ^ 'decodeSharedTransactionResponseBody202BurnTokensAssets'
  -> Data.Text.Internal.Text -- ^ 'decodeSharedTransactionResponseBody202BurnTokensPolicy_id'
  -> DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptVariants -- ^ 'decodeSharedTransactionResponseBody202BurnTokensPolicy_script'
  -> DecodeSharedTransactionResponseBody202BurnTokens
mkDecodeSharedTransactionResponseBody202BurnTokens decodeSharedTransactionResponseBody202BurnTokensAssets decodeSharedTransactionResponseBody202BurnTokensPolicy_id decodeSharedTransactionResponseBody202BurnTokensPolicy_script = DecodeSharedTransactionResponseBody202BurnTokens{decodeSharedTransactionResponseBody202BurnTokensAssets = decodeSharedTransactionResponseBody202BurnTokensAssets,
                                                                                                                                                                                                                                                                                     decodeSharedTransactionResponseBody202BurnTokensPolicy_id = decodeSharedTransactionResponseBody202BurnTokensPolicy_id,
                                                                                                                                                                                                                                                                                     decodeSharedTransactionResponseBody202BurnTokensPolicy_script = decodeSharedTransactionResponseBody202BurnTokensPolicy_script}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.burn.properties.tokens.items.properties.assets.items@ in the specification.
-- 
-- 
data DecodeSharedTransactionResponseBody202BurnTokensAssets = DecodeSharedTransactionResponseBody202BurnTokensAssets {
  -- | asset_name: The asset on-chain type which acts as a sub-identifier within a
  -- policy. Although we call it \"asset name\", the value needn\'t be
  -- text, and it could even be empty.
  -- 
  -- For policies with a single fungible asset item, asset name is
  -- typically an empty string.
  -- 
  -- This value can be up to 32 bytes of arbitrary data (which is 64
  -- hexadecimal digits).
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  decodeSharedTransactionResponseBody202BurnTokensAssetsAsset_name :: Data.Text.Internal.Text
  -- | fingerprint: A user-facing short fingerprint which combines the \`policy_id\` and \`asset_name\`
  -- to allow for an easier human comparison of assets. Note that it is generally
  -- **not okay** to use this fingerprint as a unique identifier for it is not collision
  -- resistant. Yet within the context of a single wallet, it makes for a (rather)
  -- short user-facing comparison mean.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 44
  -- * Minimum length of 44
  -- * Must match pattern \'^(asset)1[0-9a-z]*\$\'
  , decodeSharedTransactionResponseBody202BurnTokensAssetsFingerprint :: Data.Text.Internal.Text
  -- | quantity: Number of assets for the given \`policy_id\` and \`asset_name\`.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , decodeSharedTransactionResponseBody202BurnTokensAssetsQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202BurnTokensAssets
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["asset_name" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202BurnTokensAssetsAsset_name obj] : ["fingerprint" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202BurnTokensAssetsFingerprint obj] : ["quantity" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202BurnTokensAssetsQuantity obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["asset_name" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202BurnTokensAssetsAsset_name obj] : ["fingerprint" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202BurnTokensAssetsFingerprint obj] : ["quantity" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202BurnTokensAssetsQuantity obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202BurnTokensAssets
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202BurnTokensAssets" (\obj -> ((GHC.Base.pure DecodeSharedTransactionResponseBody202BurnTokensAssets GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "asset_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "fingerprint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'DecodeSharedTransactionResponseBody202BurnTokensAssets' with all required fields.
mkDecodeSharedTransactionResponseBody202BurnTokensAssets :: Data.Text.Internal.Text -- ^ 'decodeSharedTransactionResponseBody202BurnTokensAssetsAsset_name'
  -> Data.Text.Internal.Text -- ^ 'decodeSharedTransactionResponseBody202BurnTokensAssetsFingerprint'
  -> GHC.Types.Int -- ^ 'decodeSharedTransactionResponseBody202BurnTokensAssetsQuantity'
  -> DecodeSharedTransactionResponseBody202BurnTokensAssets
mkDecodeSharedTransactionResponseBody202BurnTokensAssets decodeSharedTransactionResponseBody202BurnTokensAssetsAsset_name decodeSharedTransactionResponseBody202BurnTokensAssetsFingerprint decodeSharedTransactionResponseBody202BurnTokensAssetsQuantity = DecodeSharedTransactionResponseBody202BurnTokensAssets{decodeSharedTransactionResponseBody202BurnTokensAssetsAsset_name = decodeSharedTransactionResponseBody202BurnTokensAssetsAsset_name,
                                                                                                                                                                                                                                                                                                                    decodeSharedTransactionResponseBody202BurnTokensAssetsFingerprint = decodeSharedTransactionResponseBody202BurnTokensAssetsFingerprint,
                                                                                                                                                                                                                                                                                                                    decodeSharedTransactionResponseBody202BurnTokensAssetsQuantity = decodeSharedTransactionResponseBody202BurnTokensAssetsQuantity}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.burn.properties.tokens.items.properties.policy_script.oneOf@ in the specification.
-- 
-- 
data DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1 = DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1 {
  -- | reference: A reference input.
  decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1Reference :: (GHC.Maybe.Maybe DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1Reference)
  -- | script
  , decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1Script :: DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptVariants
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reference" Data.Aeson.Types.ToJSON..=)) (decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1Reference obj) : ["script" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1Script obj] : ["script_type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "native"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reference" Data.Aeson.Types.ToJSON..=)) (decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1Reference obj) : ["script" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1Script obj] : ["script_type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "native"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1" (\obj -> (GHC.Base.pure DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "reference")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "script"))
-- | Create a new 'DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1' with all required fields.
mkDecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1 :: DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptVariants -- ^ 'decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1Script'
  -> DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1
mkDecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1 decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1Script = DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1{decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1Reference = GHC.Maybe.Nothing,
                                                                                                                                                                                                                      decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1Script = decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1Script}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.burn.properties.tokens.items.properties.policy_script.oneOf.properties.reference@ in the specification.
-- 
-- A reference input.
data DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1Reference = DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1Reference {
  -- | id: A unique identifier for this transaction
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  -- * Minimum length of 64
  decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ReferenceId :: Data.Text.Internal.Text
  -- | index
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ReferenceIndex :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1Reference
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["id" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ReferenceId obj] : ["index" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ReferenceIndex obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["id" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ReferenceId obj] : ["index" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ReferenceIndex obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1Reference
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1Reference" (\obj -> (GHC.Base.pure DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1Reference GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "index"))
-- | Create a new 'DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1Reference' with all required fields.
mkDecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1Reference :: Data.Text.Internal.Text -- ^ 'decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ReferenceId'
  -> GHC.Types.Int -- ^ 'decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ReferenceIndex'
  -> DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1Reference
mkDecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1Reference decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ReferenceId decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ReferenceIndex = DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1Reference{decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ReferenceId = decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ReferenceId,
                                                                                                                                                                                                                                                                                                                               decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ReferenceIndex = decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ReferenceIndex}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.burn.properties.tokens.items.properties.policy_script.oneOf.properties.script.oneOf@ in the specification.
-- 
-- 
data DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf2 = DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf2 {
  -- | all: Script primitive for which all signing keys corresponding to all list elements\' verification keys are expected to make the script valid.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf2All :: ([ScriptValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf2
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["all" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf2All obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["all" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf2All obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf2
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf2" (\obj -> GHC.Base.pure DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf2 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "all"))
-- | Create a new 'DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf2' with all required fields.
mkDecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf2 :: [ScriptValue] -- ^ 'decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf2All'
  -> DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf2
mkDecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf2 decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf2All = DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf2{decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf2All = decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf2All}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.burn.properties.tokens.items.properties.policy_script.oneOf.properties.script.oneOf@ in the specification.
-- 
-- 
data DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf3 = DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf3 {
  -- | any: Script primitive for which a signing key corresponding to any of the list elements\' verification keys is expected to make the script valid. It is equivalent to \`some\` with \`\"at_least\"=1\`.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf3Any :: ([ScriptValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf3
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["any" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf3Any obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["any" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf3Any obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf3
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf3" (\obj -> GHC.Base.pure DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf3 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "any"))
-- | Create a new 'DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf3' with all required fields.
mkDecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf3 :: [ScriptValue] -- ^ 'decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf3Any'
  -> DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf3
mkDecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf3 decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf3Any = DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf3{decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf3Any = decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf3Any}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.burn.properties.tokens.items.properties.policy_script.oneOf.properties.script.oneOf@ in the specification.
-- 
-- 
data DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf4 = DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf4 {
  -- | some: Script primitive for which at least a given number of signing keys corresponding to the list elements\' verification keys are expected to make the script valid.
  decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf4Some :: DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf4Some
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf4
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["some" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf4Some obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["some" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf4Some obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf4
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf4" (\obj -> GHC.Base.pure DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf4 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "some"))
-- | Create a new 'DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf4' with all required fields.
mkDecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf4 :: DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf4Some -- ^ 'decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf4Some'
  -> DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf4
mkDecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf4 decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf4Some = DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf4{decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf4Some = decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf4Some}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.burn.properties.tokens.items.properties.policy_script.oneOf.properties.script.oneOf.properties.some@ in the specification.
-- 
-- Script primitive for which at least a given number of signing keys corresponding to the list elements\' verification keys are expected to make the script valid.
data DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf4Some = DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf4Some {
  -- | at_least
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 255.0
  -- * Minimum  of 1.0
  decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf4SomeAt_least :: GHC.Types.Int
  -- | from
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  , decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf4SomeFrom :: ([ScriptValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf4Some
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["at_least" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf4SomeAt_least obj] : ["from" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf4SomeFrom obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["at_least" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf4SomeAt_least obj] : ["from" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf4SomeFrom obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf4Some
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf4Some" (\obj -> (GHC.Base.pure DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf4Some GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "at_least")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "from"))
-- | Create a new 'DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf4Some' with all required fields.
mkDecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf4Some :: GHC.Types.Int -- ^ 'decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf4SomeAt_least'
  -> [ScriptValue] -- ^ 'decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf4SomeFrom'
  -> DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf4Some
mkDecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf4Some decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf4SomeAt_least decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf4SomeFrom = DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf4Some{decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf4SomeAt_least = decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf4SomeAt_least,
                                                                                                                                                                                                                                                                                                                                                                decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf4SomeFrom = decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf4SomeFrom}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.burn.properties.tokens.items.properties.policy_script.oneOf.properties.script.oneOf@ in the specification.
-- 
-- 
data DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf5 = DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf5 {
  -- | active_from: Transaction is only valid starting at the specified slot number (\`≥ active_from\`).
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf5Active_from :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf5
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["active_from" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf5Active_from obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["active_from" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf5Active_from obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf5
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf5" (\obj -> GHC.Base.pure DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf5 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active_from"))
-- | Create a new 'DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf5' with all required fields.
mkDecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf5 :: GHC.Types.Int -- ^ 'decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf5Active_from'
  -> DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf5
mkDecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf5 decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf5Active_from = DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf5{decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf5Active_from = decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf5Active_from}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.burn.properties.tokens.items.properties.policy_script.oneOf.properties.script.oneOf@ in the specification.
-- 
-- 
data DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf6 = DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf6 {
  -- | active_until: Transaction is only valid before the specified slot number (\`\< active_until\`).
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf6Active_until :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf6
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["active_until" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf6Active_until obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["active_until" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf6Active_until obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf6
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf6" (\obj -> GHC.Base.pure DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf6 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active_until"))
-- | Create a new 'DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf6' with all required fields.
mkDecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf6 :: GHC.Types.Int -- ^ 'decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf6Active_until'
  -> DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf6
mkDecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf6 decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf6Active_until = DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf6{decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf6Active_until = decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf6Active_until}
-- | Defines the oneOf schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.burn.properties.tokens.items.properties.policy_script.oneOf.properties.script.oneOf@ in the specification.
-- 
-- 
data DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptVariants =
   DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptVariant1 Data.Text.Internal.Text
  | DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptVariant2 DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf2
  | DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptVariant3 DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf3
  | DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptVariant4 DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf4
  | DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptVariant5 DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf5
  | DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptVariant6 DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptOneOf6
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptVariants
    where toJSON (DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptVariant1 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptVariant2 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptVariant3 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptVariant4 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptVariant5 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptVariant6 a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptVariants
    where parseJSON val = case (DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptVariant1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptVariant2 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptVariant3 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptVariant4 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptVariant5 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1ScriptVariant6 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched"))))) of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.burn.properties.tokens.items.properties.policy_script.oneOf@ in the specification.
-- 
-- 
data DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2 = DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2 {
  -- | reference: A reference input.
  decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Reference :: (GHC.Maybe.Maybe DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Reference)
  -- | script_info
  , decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Script_info :: DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Script_info
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reference" Data.Aeson.Types.ToJSON..=)) (decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Reference obj) : ["script_info" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Script_info obj] : ["script_type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "plutus"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reference" Data.Aeson.Types.ToJSON..=)) (decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Reference obj) : ["script_info" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Script_info obj] : ["script_type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "plutus"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2" (\obj -> (GHC.Base.pure DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "reference")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "script_info"))
-- | Create a new 'DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2' with all required fields.
mkDecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2 :: DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Script_info -- ^ 'decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Script_info'
  -> DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2
mkDecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2 decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Script_info = DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2{decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Reference = GHC.Maybe.Nothing,
                                                                                                                                                                                                                           decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Script_info = decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Script_info}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.burn.properties.tokens.items.properties.policy_script.oneOf.properties.reference@ in the specification.
-- 
-- A reference input.
data DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Reference = DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Reference {
  -- | id: A unique identifier for this transaction
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  -- * Minimum length of 64
  decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2ReferenceId :: Data.Text.Internal.Text
  -- | index
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2ReferenceIndex :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Reference
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["id" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2ReferenceId obj] : ["index" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2ReferenceIndex obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["id" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2ReferenceId obj] : ["index" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2ReferenceIndex obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Reference
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Reference" (\obj -> (GHC.Base.pure DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Reference GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "index"))
-- | Create a new 'DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Reference' with all required fields.
mkDecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Reference :: Data.Text.Internal.Text -- ^ 'decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2ReferenceId'
  -> GHC.Types.Int -- ^ 'decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2ReferenceIndex'
  -> DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Reference
mkDecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Reference decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2ReferenceId decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2ReferenceIndex = DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Reference{decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2ReferenceId = decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2ReferenceId,
                                                                                                                                                                                                                                                                                                                               decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2ReferenceIndex = decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2ReferenceIndex}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.burn.properties.tokens.items.properties.policy_script.oneOf.properties.script_info@ in the specification.
-- 
-- 
data DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Script_info = DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Script_info {
  -- | language_version
  decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Script_infoLanguage_version :: DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Script_infoLanguage_version
  -- | script_hash
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 56
  -- * Minimum length of 56
  , decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Script_infoScript_hash :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Script_info
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["language_version" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Script_infoLanguage_version obj] : ["script_hash" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Script_infoScript_hash obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["language_version" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Script_infoLanguage_version obj] : ["script_hash" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Script_infoScript_hash obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Script_info
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Script_info" (\obj -> (GHC.Base.pure DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Script_info GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "language_version")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "script_hash"))
-- | Create a new 'DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Script_info' with all required fields.
mkDecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Script_info :: DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Script_infoLanguage_version -- ^ 'decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Script_infoLanguage_version'
  -> Data.Text.Internal.Text -- ^ 'decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Script_infoScript_hash'
  -> DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Script_info
mkDecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Script_info decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Script_infoLanguage_version decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Script_infoScript_hash = DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Script_info{decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Script_infoLanguage_version = decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Script_infoLanguage_version,
                                                                                                                                                                                                                                                                                                                                                           decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Script_infoScript_hash = decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Script_infoScript_hash}
-- | Defines the enum schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.burn.properties.tokens.items.properties.policy_script.oneOf.properties.script_info.properties.language_version@ in the specification.
-- 
-- 
data DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Script_infoLanguage_version =
   DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Script_infoLanguage_versionOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Script_infoLanguage_versionTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Script_infoLanguage_versionEnumV1 -- ^ Represents the JSON value @"v1"@
  | DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Script_infoLanguage_versionEnumV2 -- ^ Represents the JSON value @"v2"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Script_infoLanguage_version
    where toJSON (DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Script_infoLanguage_versionOther val) = val
          toJSON (DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Script_infoLanguage_versionTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Script_infoLanguage_versionEnumV1) = "v1"
          toJSON (DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Script_infoLanguage_versionEnumV2) = "v2"
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Script_infoLanguage_version
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "v1" -> DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Script_infoLanguage_versionEnumV1
                                            | val GHC.Classes.== "v2" -> DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Script_infoLanguage_versionEnumV2
                                            | GHC.Base.otherwise -> DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2Script_infoLanguage_versionOther val)
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.burn.properties.tokens.items.properties.policy_script.oneOf@ in the specification.
-- 
-- 
data DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf3 = DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf3 {
  -- | references
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf3References :: ([DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf3References])
  -- | script_hash
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 56
  -- * Minimum length of 56
  , decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf3Script_hash :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf3
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["references" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf3References obj] : ["script_hash" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf3Script_hash obj] : ["script_type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "reference script"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["references" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf3References obj] : ["script_hash" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf3Script_hash obj] : ["script_type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "reference script"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf3
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf3" (\obj -> (GHC.Base.pure DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf3 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "references")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "script_hash"))
-- | Create a new 'DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf3' with all required fields.
mkDecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf3 :: [DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf3References] -- ^ 'decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf3References'
  -> Data.Text.Internal.Text -- ^ 'decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf3Script_hash'
  -> DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf3
mkDecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf3 decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf3References decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf3Script_hash = DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf3{decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf3References = decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf3References,
                                                                                                                                                                                                                                                                                                         decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf3Script_hash = decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf3Script_hash}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.burn.properties.tokens.items.properties.policy_script.oneOf.properties.references.items@ in the specification.
-- 
-- A reference input.
data DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf3References = DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf3References {
  -- | id: A unique identifier for this transaction
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  -- * Minimum length of 64
  decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf3ReferencesId :: Data.Text.Internal.Text
  -- | index
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf3ReferencesIndex :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf3References
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["id" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf3ReferencesId obj] : ["index" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf3ReferencesIndex obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["id" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf3ReferencesId obj] : ["index" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf3ReferencesIndex obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf3References
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf3References" (\obj -> (GHC.Base.pure DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf3References GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "index"))
-- | Create a new 'DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf3References' with all required fields.
mkDecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf3References :: Data.Text.Internal.Text -- ^ 'decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf3ReferencesId'
  -> GHC.Types.Int -- ^ 'decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf3ReferencesIndex'
  -> DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf3References
mkDecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf3References decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf3ReferencesId decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf3ReferencesIndex = DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf3References{decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf3ReferencesId = decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf3ReferencesId,
                                                                                                                                                                                                                                                                                                                                   decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf3ReferencesIndex = decodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf3ReferencesIndex}
-- | Defines the oneOf schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.burn.properties.tokens.items.properties.policy_script.oneOf@ in the specification.
-- 
-- 
data DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptVariants =
   DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptVariant1 DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf1
  | DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptVariant2 DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf2
  | DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptVariant3 DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptOneOf3
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptVariants
    where toJSON (DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptVariant1 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptVariant2 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptVariant3 a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptVariants
    where parseJSON val = case (DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptVariant1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptVariant2 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((DecodeSharedTransactionResponseBody202BurnTokensPolicy_scriptVariant3 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched")) of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.certificates.items.oneOf@ in the specification.
-- 
-- A delegation certificate belonging to wallet
-- 
-- Only for \'join_pool\' the \'pool\' property is required.
data DecodeSharedTransactionResponseBody202CertificatesOneOf1 = DecodeSharedTransactionResponseBody202CertificatesOneOf1 {
  -- | certificate_type
  decodeSharedTransactionResponseBody202CertificatesOneOf1Certificate_type :: DecodeSharedTransactionResponseBody202CertificatesOneOf1Certificate_type
  -- | pool: A unique identifier for the pool.
  , decodeSharedTransactionResponseBody202CertificatesOneOf1Pool :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | reward_account_path
  -- 
  -- Constraints:
  -- 
  -- * Must have a maximum of 5 items
  -- * Must have a minimum of 5 items
  , decodeSharedTransactionResponseBody202CertificatesOneOf1Reward_account_path :: ([Data.Text.Internal.Text])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202CertificatesOneOf1
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["certificate_type" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202CertificatesOneOf1Certificate_type obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pool" Data.Aeson.Types.ToJSON..=)) (decodeSharedTransactionResponseBody202CertificatesOneOf1Pool obj) : ["reward_account_path" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202CertificatesOneOf1Reward_account_path obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["certificate_type" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202CertificatesOneOf1Certificate_type obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pool" Data.Aeson.Types.ToJSON..=)) (decodeSharedTransactionResponseBody202CertificatesOneOf1Pool obj) : ["reward_account_path" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202CertificatesOneOf1Reward_account_path obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202CertificatesOneOf1
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202CertificatesOneOf1" (\obj -> ((GHC.Base.pure DecodeSharedTransactionResponseBody202CertificatesOneOf1 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "certificate_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "pool")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "reward_account_path"))
-- | Create a new 'DecodeSharedTransactionResponseBody202CertificatesOneOf1' with all required fields.
mkDecodeSharedTransactionResponseBody202CertificatesOneOf1 :: DecodeSharedTransactionResponseBody202CertificatesOneOf1Certificate_type -- ^ 'decodeSharedTransactionResponseBody202CertificatesOneOf1Certificate_type'
  -> [Data.Text.Internal.Text] -- ^ 'decodeSharedTransactionResponseBody202CertificatesOneOf1Reward_account_path'
  -> DecodeSharedTransactionResponseBody202CertificatesOneOf1
mkDecodeSharedTransactionResponseBody202CertificatesOneOf1 decodeSharedTransactionResponseBody202CertificatesOneOf1Certificate_type decodeSharedTransactionResponseBody202CertificatesOneOf1Reward_account_path = DecodeSharedTransactionResponseBody202CertificatesOneOf1{decodeSharedTransactionResponseBody202CertificatesOneOf1Certificate_type = decodeSharedTransactionResponseBody202CertificatesOneOf1Certificate_type,
                                                                                                                                                                                                                                                                           decodeSharedTransactionResponseBody202CertificatesOneOf1Pool = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                           decodeSharedTransactionResponseBody202CertificatesOneOf1Reward_account_path = decodeSharedTransactionResponseBody202CertificatesOneOf1Reward_account_path}
-- | Defines the enum schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.certificates.items.oneOf.properties.certificate_type@ in the specification.
-- 
-- 
data DecodeSharedTransactionResponseBody202CertificatesOneOf1Certificate_type =
   DecodeSharedTransactionResponseBody202CertificatesOneOf1Certificate_typeOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | DecodeSharedTransactionResponseBody202CertificatesOneOf1Certificate_typeTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | DecodeSharedTransactionResponseBody202CertificatesOneOf1Certificate_typeEnumJoin_pool -- ^ Represents the JSON value @"join_pool"@
  | DecodeSharedTransactionResponseBody202CertificatesOneOf1Certificate_typeEnumQuit_pool -- ^ Represents the JSON value @"quit_pool"@
  | DecodeSharedTransactionResponseBody202CertificatesOneOf1Certificate_typeEnumRegister_reward_account -- ^ Represents the JSON value @"register_reward_account"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202CertificatesOneOf1Certificate_type
    where toJSON (DecodeSharedTransactionResponseBody202CertificatesOneOf1Certificate_typeOther val) = val
          toJSON (DecodeSharedTransactionResponseBody202CertificatesOneOf1Certificate_typeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (DecodeSharedTransactionResponseBody202CertificatesOneOf1Certificate_typeEnumJoin_pool) = "join_pool"
          toJSON (DecodeSharedTransactionResponseBody202CertificatesOneOf1Certificate_typeEnumQuit_pool) = "quit_pool"
          toJSON (DecodeSharedTransactionResponseBody202CertificatesOneOf1Certificate_typeEnumRegister_reward_account) = "register_reward_account"
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202CertificatesOneOf1Certificate_type
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "join_pool" -> DecodeSharedTransactionResponseBody202CertificatesOneOf1Certificate_typeEnumJoin_pool
                                            | val GHC.Classes.== "quit_pool" -> DecodeSharedTransactionResponseBody202CertificatesOneOf1Certificate_typeEnumQuit_pool
                                            | val GHC.Classes.== "register_reward_account" -> DecodeSharedTransactionResponseBody202CertificatesOneOf1Certificate_typeEnumRegister_reward_account
                                            | GHC.Base.otherwise -> DecodeSharedTransactionResponseBody202CertificatesOneOf1Certificate_typeOther val)
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.certificates.items.oneOf@ in the specification.
-- 
-- A delegation certificate not belonging to wallet
-- 
-- Only for \'join_pool\' the \'pool\' property is required.
data DecodeSharedTransactionResponseBody202CertificatesOneOf2 = DecodeSharedTransactionResponseBody202CertificatesOneOf2 {
  -- | certificate_type
  decodeSharedTransactionResponseBody202CertificatesOneOf2Certificate_type :: DecodeSharedTransactionResponseBody202CertificatesOneOf2Certificate_type
  -- | pool: A unique identifier for the pool.
  , decodeSharedTransactionResponseBody202CertificatesOneOf2Pool :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | reward_account
  , decodeSharedTransactionResponseBody202CertificatesOneOf2Reward_account :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202CertificatesOneOf2
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["certificate_type" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202CertificatesOneOf2Certificate_type obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pool" Data.Aeson.Types.ToJSON..=)) (decodeSharedTransactionResponseBody202CertificatesOneOf2Pool obj) : ["reward_account" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202CertificatesOneOf2Reward_account obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["certificate_type" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202CertificatesOneOf2Certificate_type obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pool" Data.Aeson.Types.ToJSON..=)) (decodeSharedTransactionResponseBody202CertificatesOneOf2Pool obj) : ["reward_account" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202CertificatesOneOf2Reward_account obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202CertificatesOneOf2
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202CertificatesOneOf2" (\obj -> ((GHC.Base.pure DecodeSharedTransactionResponseBody202CertificatesOneOf2 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "certificate_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "pool")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "reward_account"))
-- | Create a new 'DecodeSharedTransactionResponseBody202CertificatesOneOf2' with all required fields.
mkDecodeSharedTransactionResponseBody202CertificatesOneOf2 :: DecodeSharedTransactionResponseBody202CertificatesOneOf2Certificate_type -- ^ 'decodeSharedTransactionResponseBody202CertificatesOneOf2Certificate_type'
  -> Data.Text.Internal.Text -- ^ 'decodeSharedTransactionResponseBody202CertificatesOneOf2Reward_account'
  -> DecodeSharedTransactionResponseBody202CertificatesOneOf2
mkDecodeSharedTransactionResponseBody202CertificatesOneOf2 decodeSharedTransactionResponseBody202CertificatesOneOf2Certificate_type decodeSharedTransactionResponseBody202CertificatesOneOf2Reward_account = DecodeSharedTransactionResponseBody202CertificatesOneOf2{decodeSharedTransactionResponseBody202CertificatesOneOf2Certificate_type = decodeSharedTransactionResponseBody202CertificatesOneOf2Certificate_type,
                                                                                                                                                                                                                                                                      decodeSharedTransactionResponseBody202CertificatesOneOf2Pool = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                      decodeSharedTransactionResponseBody202CertificatesOneOf2Reward_account = decodeSharedTransactionResponseBody202CertificatesOneOf2Reward_account}
-- | Defines the enum schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.certificates.items.oneOf.properties.certificate_type@ in the specification.
-- 
-- 
data DecodeSharedTransactionResponseBody202CertificatesOneOf2Certificate_type =
   DecodeSharedTransactionResponseBody202CertificatesOneOf2Certificate_typeOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | DecodeSharedTransactionResponseBody202CertificatesOneOf2Certificate_typeTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | DecodeSharedTransactionResponseBody202CertificatesOneOf2Certificate_typeEnumJoin_pool_external -- ^ Represents the JSON value @"join_pool_external"@
  | DecodeSharedTransactionResponseBody202CertificatesOneOf2Certificate_typeEnumQuit_pool_external -- ^ Represents the JSON value @"quit_pool_external"@
  | DecodeSharedTransactionResponseBody202CertificatesOneOf2Certificate_typeEnumRegister_reward_account_external -- ^ Represents the JSON value @"register_reward_account_external"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202CertificatesOneOf2Certificate_type
    where toJSON (DecodeSharedTransactionResponseBody202CertificatesOneOf2Certificate_typeOther val) = val
          toJSON (DecodeSharedTransactionResponseBody202CertificatesOneOf2Certificate_typeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (DecodeSharedTransactionResponseBody202CertificatesOneOf2Certificate_typeEnumJoin_pool_external) = "join_pool_external"
          toJSON (DecodeSharedTransactionResponseBody202CertificatesOneOf2Certificate_typeEnumQuit_pool_external) = "quit_pool_external"
          toJSON (DecodeSharedTransactionResponseBody202CertificatesOneOf2Certificate_typeEnumRegister_reward_account_external) = "register_reward_account_external"
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202CertificatesOneOf2Certificate_type
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "join_pool_external" -> DecodeSharedTransactionResponseBody202CertificatesOneOf2Certificate_typeEnumJoin_pool_external
                                            | val GHC.Classes.== "quit_pool_external" -> DecodeSharedTransactionResponseBody202CertificatesOneOf2Certificate_typeEnumQuit_pool_external
                                            | val GHC.Classes.== "register_reward_account_external" -> DecodeSharedTransactionResponseBody202CertificatesOneOf2Certificate_typeEnumRegister_reward_account_external
                                            | GHC.Base.otherwise -> DecodeSharedTransactionResponseBody202CertificatesOneOf2Certificate_typeOther val)
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.certificates.items.oneOf@ in the specification.
-- 
-- 
data DecodeSharedTransactionResponseBody202CertificatesOneOf3 = DecodeSharedTransactionResponseBody202CertificatesOneOf3 {
  -- | pool_cost: Estimated cost set by the pool operator when registering his pool.
  -- This fixed cost is taken from each reward earned by the pool before splitting rewards between stakeholders.
  -- 
  -- May be omitted if the wallet hasn\'t found the pool\'s registration cerificate yet.
  decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_cost :: DecodeSharedTransactionResponseBody202CertificatesOneOf3Pool_cost
  -- | pool_id: A unique identifier for the pool.
  , decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_id :: Data.Text.Internal.Text
  -- | pool_margin: Variable margin on the total reward given to an operator before splitting rewards between stakeholders.
  -- 
  -- May be omitted if the wallet hasn\'t found the pool\'s registration cerificate yet.
  , decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_margin :: DecodeSharedTransactionResponseBody202CertificatesOneOf3Pool_margin
  -- | pool_metadata
  , decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_metadata :: (GHC.Maybe.Maybe DecodeSharedTransactionResponseBody202CertificatesOneOf3Pool_metadata)
  -- | pool_owners
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 0 items
  , decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_owners :: ([Data.Text.Internal.Text])
  -- | pool_pledge: Minimal stake amount that a stake pool is willing to honor.
  -- 
  -- May be omitted if the wallet hasn\'t found the pool\'s registration cerificate yet.
  , decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_pledge :: DecodeSharedTransactionResponseBody202CertificatesOneOf3Pool_pledge
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202CertificatesOneOf3
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["pool_cost" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_cost obj] : ["pool_id" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_id obj] : ["pool_margin" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_margin obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pool_metadata" Data.Aeson.Types.ToJSON..=)) (decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_metadata obj) : ["pool_owners" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_owners obj] : ["pool_pledge" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_pledge obj] : ["certificate_type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "register_pool"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["pool_cost" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_cost obj] : ["pool_id" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_id obj] : ["pool_margin" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_margin obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pool_metadata" Data.Aeson.Types.ToJSON..=)) (decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_metadata obj) : ["pool_owners" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_owners obj] : ["pool_pledge" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_pledge obj] : ["certificate_type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "register_pool"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202CertificatesOneOf3
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202CertificatesOneOf3" (\obj -> (((((GHC.Base.pure DecodeSharedTransactionResponseBody202CertificatesOneOf3 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pool_cost")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pool_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pool_margin")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "pool_metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pool_owners")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pool_pledge"))
-- | Create a new 'DecodeSharedTransactionResponseBody202CertificatesOneOf3' with all required fields.
mkDecodeSharedTransactionResponseBody202CertificatesOneOf3 :: DecodeSharedTransactionResponseBody202CertificatesOneOf3Pool_cost -- ^ 'decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_cost'
  -> Data.Text.Internal.Text -- ^ 'decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_id'
  -> DecodeSharedTransactionResponseBody202CertificatesOneOf3Pool_margin -- ^ 'decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_margin'
  -> [Data.Text.Internal.Text] -- ^ 'decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_owners'
  -> DecodeSharedTransactionResponseBody202CertificatesOneOf3Pool_pledge -- ^ 'decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_pledge'
  -> DecodeSharedTransactionResponseBody202CertificatesOneOf3
mkDecodeSharedTransactionResponseBody202CertificatesOneOf3 decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_cost decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_id decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_margin decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_owners decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_pledge = DecodeSharedTransactionResponseBody202CertificatesOneOf3{decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_cost = decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_cost,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_id = decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_id,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_margin = decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_margin,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_metadata = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_owners = decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_owners,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_pledge = decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_pledge}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.certificates.items.oneOf.properties.pool_cost@ in the specification.
-- 
-- Estimated cost set by the pool operator when registering his pool.
-- This fixed cost is taken from each reward earned by the pool before splitting rewards between stakeholders.
-- 
-- May be omitted if the wallet hasn\'t found the pool\'s registration cerificate yet.
data DecodeSharedTransactionResponseBody202CertificatesOneOf3Pool_cost = DecodeSharedTransactionResponseBody202CertificatesOneOf3Pool_cost {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_costQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202CertificatesOneOf3Pool_cost
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_costQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_costQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202CertificatesOneOf3Pool_cost
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202CertificatesOneOf3Pool_cost" (\obj -> GHC.Base.pure DecodeSharedTransactionResponseBody202CertificatesOneOf3Pool_cost GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'DecodeSharedTransactionResponseBody202CertificatesOneOf3Pool_cost' with all required fields.
mkDecodeSharedTransactionResponseBody202CertificatesOneOf3Pool_cost :: GHC.Types.Int -- ^ 'decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_costQuantity'
  -> DecodeSharedTransactionResponseBody202CertificatesOneOf3Pool_cost
mkDecodeSharedTransactionResponseBody202CertificatesOneOf3Pool_cost decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_costQuantity = DecodeSharedTransactionResponseBody202CertificatesOneOf3Pool_cost{decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_costQuantity = decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_costQuantity}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.certificates.items.oneOf.properties.pool_margin@ in the specification.
-- 
-- Variable margin on the total reward given to an operator before splitting rewards between stakeholders.
-- 
-- May be omitted if the wallet hasn\'t found the pool\'s registration cerificate yet.
data DecodeSharedTransactionResponseBody202CertificatesOneOf3Pool_margin = DecodeSharedTransactionResponseBody202CertificatesOneOf3Pool_margin {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  -- * Minimum  of 0.0
  decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_marginQuantity :: GHC.Types.Double
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202CertificatesOneOf3Pool_margin
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_marginQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "percent"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_marginQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "percent"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202CertificatesOneOf3Pool_margin
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202CertificatesOneOf3Pool_margin" (\obj -> GHC.Base.pure DecodeSharedTransactionResponseBody202CertificatesOneOf3Pool_margin GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'DecodeSharedTransactionResponseBody202CertificatesOneOf3Pool_margin' with all required fields.
mkDecodeSharedTransactionResponseBody202CertificatesOneOf3Pool_margin :: GHC.Types.Double -- ^ 'decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_marginQuantity'
  -> DecodeSharedTransactionResponseBody202CertificatesOneOf3Pool_margin
mkDecodeSharedTransactionResponseBody202CertificatesOneOf3Pool_margin decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_marginQuantity = DecodeSharedTransactionResponseBody202CertificatesOneOf3Pool_margin{decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_marginQuantity = decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_marginQuantity}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.certificates.items.oneOf.properties.pool_metadata@ in the specification.
-- 
-- 
data DecodeSharedTransactionResponseBody202CertificatesOneOf3Pool_metadata = DecodeSharedTransactionResponseBody202CertificatesOneOf3Pool_metadata {
  -- | hash
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  -- * Minimum length of 64
  decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_metadataHash :: Data.Text.Internal.Text
  -- | url: A URL to the stake pool\'s website.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 250
  -- * Must match pattern \'^https:\/\/.+\'
  , decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_metadataUrl :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202CertificatesOneOf3Pool_metadata
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["hash" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_metadataHash obj] : ["url" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_metadataUrl obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["hash" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_metadataHash obj] : ["url" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_metadataUrl obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202CertificatesOneOf3Pool_metadata
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202CertificatesOneOf3Pool_metadata" (\obj -> (GHC.Base.pure DecodeSharedTransactionResponseBody202CertificatesOneOf3Pool_metadata GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "hash")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))
-- | Create a new 'DecodeSharedTransactionResponseBody202CertificatesOneOf3Pool_metadata' with all required fields.
mkDecodeSharedTransactionResponseBody202CertificatesOneOf3Pool_metadata :: Data.Text.Internal.Text -- ^ 'decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_metadataHash'
  -> Data.Text.Internal.Text -- ^ 'decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_metadataUrl'
  -> DecodeSharedTransactionResponseBody202CertificatesOneOf3Pool_metadata
mkDecodeSharedTransactionResponseBody202CertificatesOneOf3Pool_metadata decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_metadataHash decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_metadataUrl = DecodeSharedTransactionResponseBody202CertificatesOneOf3Pool_metadata{decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_metadataHash = decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_metadataHash,
                                                                                                                                                                                                                                                                                                   decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_metadataUrl = decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_metadataUrl}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.certificates.items.oneOf.properties.pool_pledge@ in the specification.
-- 
-- Minimal stake amount that a stake pool is willing to honor.
-- 
-- May be omitted if the wallet hasn\'t found the pool\'s registration cerificate yet.
data DecodeSharedTransactionResponseBody202CertificatesOneOf3Pool_pledge = DecodeSharedTransactionResponseBody202CertificatesOneOf3Pool_pledge {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_pledgeQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202CertificatesOneOf3Pool_pledge
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_pledgeQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_pledgeQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202CertificatesOneOf3Pool_pledge
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202CertificatesOneOf3Pool_pledge" (\obj -> GHC.Base.pure DecodeSharedTransactionResponseBody202CertificatesOneOf3Pool_pledge GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'DecodeSharedTransactionResponseBody202CertificatesOneOf3Pool_pledge' with all required fields.
mkDecodeSharedTransactionResponseBody202CertificatesOneOf3Pool_pledge :: GHC.Types.Int -- ^ 'decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_pledgeQuantity'
  -> DecodeSharedTransactionResponseBody202CertificatesOneOf3Pool_pledge
mkDecodeSharedTransactionResponseBody202CertificatesOneOf3Pool_pledge decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_pledgeQuantity = DecodeSharedTransactionResponseBody202CertificatesOneOf3Pool_pledge{decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_pledgeQuantity = decodeSharedTransactionResponseBody202CertificatesOneOf3Pool_pledgeQuantity}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.certificates.items.oneOf@ in the specification.
-- 
-- 
data DecodeSharedTransactionResponseBody202CertificatesOneOf4 = DecodeSharedTransactionResponseBody202CertificatesOneOf4 {
  -- | pool_id: A unique identifier for the pool.
  decodeSharedTransactionResponseBody202CertificatesOneOf4Pool_id :: Data.Text.Internal.Text
  -- | retirement_epoch: An epoch is a time period which is divided into slots.
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , decodeSharedTransactionResponseBody202CertificatesOneOf4Retirement_epoch :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202CertificatesOneOf4
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["pool_id" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202CertificatesOneOf4Pool_id obj] : ["retirement_epoch" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202CertificatesOneOf4Retirement_epoch obj] : ["certificate_type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "deregister_pool"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["pool_id" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202CertificatesOneOf4Pool_id obj] : ["retirement_epoch" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202CertificatesOneOf4Retirement_epoch obj] : ["certificate_type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "deregister_pool"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202CertificatesOneOf4
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202CertificatesOneOf4" (\obj -> (GHC.Base.pure DecodeSharedTransactionResponseBody202CertificatesOneOf4 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pool_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "retirement_epoch"))
-- | Create a new 'DecodeSharedTransactionResponseBody202CertificatesOneOf4' with all required fields.
mkDecodeSharedTransactionResponseBody202CertificatesOneOf4 :: Data.Text.Internal.Text -- ^ 'decodeSharedTransactionResponseBody202CertificatesOneOf4Pool_id'
  -> GHC.Types.Int -- ^ 'decodeSharedTransactionResponseBody202CertificatesOneOf4Retirement_epoch'
  -> DecodeSharedTransactionResponseBody202CertificatesOneOf4
mkDecodeSharedTransactionResponseBody202CertificatesOneOf4 decodeSharedTransactionResponseBody202CertificatesOneOf4Pool_id decodeSharedTransactionResponseBody202CertificatesOneOf4Retirement_epoch = DecodeSharedTransactionResponseBody202CertificatesOneOf4{decodeSharedTransactionResponseBody202CertificatesOneOf4Pool_id = decodeSharedTransactionResponseBody202CertificatesOneOf4Pool_id,
                                                                                                                                                                                                                                                               decodeSharedTransactionResponseBody202CertificatesOneOf4Retirement_epoch = decodeSharedTransactionResponseBody202CertificatesOneOf4Retirement_epoch}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.certificates.items.oneOf@ in the specification.
-- 
-- 
data DecodeSharedTransactionResponseBody202CertificatesOneOf5 = DecodeSharedTransactionResponseBody202CertificatesOneOf5 {
  -- | certificate_type
  decodeSharedTransactionResponseBody202CertificatesOneOf5Certificate_type :: DecodeSharedTransactionResponseBody202CertificatesOneOf5Certificate_type
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202CertificatesOneOf5
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["certificate_type" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202CertificatesOneOf5Certificate_type obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["certificate_type" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202CertificatesOneOf5Certificate_type obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202CertificatesOneOf5
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202CertificatesOneOf5" (\obj -> GHC.Base.pure DecodeSharedTransactionResponseBody202CertificatesOneOf5 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "certificate_type"))
-- | Create a new 'DecodeSharedTransactionResponseBody202CertificatesOneOf5' with all required fields.
mkDecodeSharedTransactionResponseBody202CertificatesOneOf5 :: DecodeSharedTransactionResponseBody202CertificatesOneOf5Certificate_type -- ^ 'decodeSharedTransactionResponseBody202CertificatesOneOf5Certificate_type'
  -> DecodeSharedTransactionResponseBody202CertificatesOneOf5
mkDecodeSharedTransactionResponseBody202CertificatesOneOf5 decodeSharedTransactionResponseBody202CertificatesOneOf5Certificate_type = DecodeSharedTransactionResponseBody202CertificatesOneOf5{decodeSharedTransactionResponseBody202CertificatesOneOf5Certificate_type = decodeSharedTransactionResponseBody202CertificatesOneOf5Certificate_type}
-- | Defines the enum schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.certificates.items.oneOf.properties.certificate_type@ in the specification.
-- 
-- 
data DecodeSharedTransactionResponseBody202CertificatesOneOf5Certificate_type =
   DecodeSharedTransactionResponseBody202CertificatesOneOf5Certificate_typeOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | DecodeSharedTransactionResponseBody202CertificatesOneOf5Certificate_typeTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | DecodeSharedTransactionResponseBody202CertificatesOneOf5Certificate_typeEnumMir -- ^ Represents the JSON value @"mir"@
  | DecodeSharedTransactionResponseBody202CertificatesOneOf5Certificate_typeEnumGenesis -- ^ Represents the JSON value @"genesis"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202CertificatesOneOf5Certificate_type
    where toJSON (DecodeSharedTransactionResponseBody202CertificatesOneOf5Certificate_typeOther val) = val
          toJSON (DecodeSharedTransactionResponseBody202CertificatesOneOf5Certificate_typeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (DecodeSharedTransactionResponseBody202CertificatesOneOf5Certificate_typeEnumMir) = "mir"
          toJSON (DecodeSharedTransactionResponseBody202CertificatesOneOf5Certificate_typeEnumGenesis) = "genesis"
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202CertificatesOneOf5Certificate_type
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "mir" -> DecodeSharedTransactionResponseBody202CertificatesOneOf5Certificate_typeEnumMir
                                            | val GHC.Classes.== "genesis" -> DecodeSharedTransactionResponseBody202CertificatesOneOf5Certificate_typeEnumGenesis
                                            | GHC.Base.otherwise -> DecodeSharedTransactionResponseBody202CertificatesOneOf5Certificate_typeOther val)
-- | Defines the oneOf schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.certificates.items.oneOf@ in the specification.
-- 
-- Any certificate that could occur in an arbitrary transaction:
-- might be related to delegation, pool activities, genesis or MIR.
data DecodeSharedTransactionResponseBody202CertificatesVariants =
   DecodeSharedTransactionResponseBody202CertificatesVariant1 DecodeSharedTransactionResponseBody202CertificatesOneOf1
  | DecodeSharedTransactionResponseBody202CertificatesVariant2 DecodeSharedTransactionResponseBody202CertificatesOneOf2
  | DecodeSharedTransactionResponseBody202CertificatesVariant3 DecodeSharedTransactionResponseBody202CertificatesOneOf3
  | DecodeSharedTransactionResponseBody202CertificatesVariant4 DecodeSharedTransactionResponseBody202CertificatesOneOf4
  | DecodeSharedTransactionResponseBody202CertificatesVariant5 DecodeSharedTransactionResponseBody202CertificatesOneOf5
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202CertificatesVariants
    where toJSON (DecodeSharedTransactionResponseBody202CertificatesVariant1 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (DecodeSharedTransactionResponseBody202CertificatesVariant2 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (DecodeSharedTransactionResponseBody202CertificatesVariant3 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (DecodeSharedTransactionResponseBody202CertificatesVariant4 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (DecodeSharedTransactionResponseBody202CertificatesVariant5 a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202CertificatesVariants
    where parseJSON val = case (DecodeSharedTransactionResponseBody202CertificatesVariant1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((DecodeSharedTransactionResponseBody202CertificatesVariant2 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((DecodeSharedTransactionResponseBody202CertificatesVariant3 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((DecodeSharedTransactionResponseBody202CertificatesVariant4 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((DecodeSharedTransactionResponseBody202CertificatesVariant5 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched")))) of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.collateral.items.oneOf@ in the specification.
-- 
-- A transaction input not belonging to a given wallet.
data DecodeSharedTransactionResponseBody202CollateralOneOf1 = DecodeSharedTransactionResponseBody202CollateralOneOf1 {
  -- | id: A unique identifier for this transaction
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  -- * Minimum length of 64
  decodeSharedTransactionResponseBody202CollateralOneOf1Id :: Data.Text.Internal.Text
  -- | index
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , decodeSharedTransactionResponseBody202CollateralOneOf1Index :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202CollateralOneOf1
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["id" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202CollateralOneOf1Id obj] : ["index" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202CollateralOneOf1Index obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["id" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202CollateralOneOf1Id obj] : ["index" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202CollateralOneOf1Index obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202CollateralOneOf1
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202CollateralOneOf1" (\obj -> (GHC.Base.pure DecodeSharedTransactionResponseBody202CollateralOneOf1 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "index"))
-- | Create a new 'DecodeSharedTransactionResponseBody202CollateralOneOf1' with all required fields.
mkDecodeSharedTransactionResponseBody202CollateralOneOf1 :: Data.Text.Internal.Text -- ^ 'decodeSharedTransactionResponseBody202CollateralOneOf1Id'
  -> GHC.Types.Int -- ^ 'decodeSharedTransactionResponseBody202CollateralOneOf1Index'
  -> DecodeSharedTransactionResponseBody202CollateralOneOf1
mkDecodeSharedTransactionResponseBody202CollateralOneOf1 decodeSharedTransactionResponseBody202CollateralOneOf1Id decodeSharedTransactionResponseBody202CollateralOneOf1Index = DecodeSharedTransactionResponseBody202CollateralOneOf1{decodeSharedTransactionResponseBody202CollateralOneOf1Id = decodeSharedTransactionResponseBody202CollateralOneOf1Id,
                                                                                                                                                                                                                                       decodeSharedTransactionResponseBody202CollateralOneOf1Index = decodeSharedTransactionResponseBody202CollateralOneOf1Index}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.collateral.items.oneOf@ in the specification.
-- 
-- A transaction input belonging to a given wallet.
data DecodeSharedTransactionResponseBody202CollateralOneOf2 = DecodeSharedTransactionResponseBody202CollateralOneOf2 {
  -- | address: A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
  -- which represents an address on the Cardano blockchain.
  -- Sequences in Base58 encoding are expected to be legacy Byron addresses,
  -- whereas sequences in Bech32 encoding correspond to current Shelley addresses.
  -- 
  -- For more details, see
  -- [CIP-0019 — Cardano addresses](https:\/\/github.com\/cardano-foundation\/CIPs\/tree\/master\/CIP-0019)
  -- .
  decodeSharedTransactionResponseBody202CollateralOneOf2Address :: Data.Text.Internal.Text
  -- | amount: Coins, in Lovelace. Only relates to \'Ada\'. Refer to \`assets\` for multi-assets wallets instead.
  , decodeSharedTransactionResponseBody202CollateralOneOf2Amount :: DecodeSharedTransactionResponseBody202CollateralOneOf2Amount
  -- | assets: A flat list of assets (possibly empty).
  , decodeSharedTransactionResponseBody202CollateralOneOf2Assets :: (GHC.Maybe.Maybe ([DecodeSharedTransactionResponseBody202CollateralOneOf2Assets]))
  -- | derivation_path: A path for deriving a child key from a parent key.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  , decodeSharedTransactionResponseBody202CollateralOneOf2Derivation_path :: ([Data.Text.Internal.Text])
  -- | id: A unique identifier for this transaction
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  -- * Minimum length of 64
  , decodeSharedTransactionResponseBody202CollateralOneOf2Id :: Data.Text.Internal.Text
  -- | index
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , decodeSharedTransactionResponseBody202CollateralOneOf2Index :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202CollateralOneOf2
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["address" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202CollateralOneOf2Address obj] : ["amount" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202CollateralOneOf2Amount obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("assets" Data.Aeson.Types.ToJSON..=)) (decodeSharedTransactionResponseBody202CollateralOneOf2Assets obj) : ["derivation_path" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202CollateralOneOf2Derivation_path obj] : ["id" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202CollateralOneOf2Id obj] : ["index" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202CollateralOneOf2Index obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["address" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202CollateralOneOf2Address obj] : ["amount" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202CollateralOneOf2Amount obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("assets" Data.Aeson.Types.ToJSON..=)) (decodeSharedTransactionResponseBody202CollateralOneOf2Assets obj) : ["derivation_path" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202CollateralOneOf2Derivation_path obj] : ["id" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202CollateralOneOf2Id obj] : ["index" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202CollateralOneOf2Index obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202CollateralOneOf2
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202CollateralOneOf2" (\obj -> (((((GHC.Base.pure DecodeSharedTransactionResponseBody202CollateralOneOf2 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "assets")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "derivation_path")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "index"))
-- | Create a new 'DecodeSharedTransactionResponseBody202CollateralOneOf2' with all required fields.
mkDecodeSharedTransactionResponseBody202CollateralOneOf2 :: Data.Text.Internal.Text -- ^ 'decodeSharedTransactionResponseBody202CollateralOneOf2Address'
  -> DecodeSharedTransactionResponseBody202CollateralOneOf2Amount -- ^ 'decodeSharedTransactionResponseBody202CollateralOneOf2Amount'
  -> [Data.Text.Internal.Text] -- ^ 'decodeSharedTransactionResponseBody202CollateralOneOf2Derivation_path'
  -> Data.Text.Internal.Text -- ^ 'decodeSharedTransactionResponseBody202CollateralOneOf2Id'
  -> GHC.Types.Int -- ^ 'decodeSharedTransactionResponseBody202CollateralOneOf2Index'
  -> DecodeSharedTransactionResponseBody202CollateralOneOf2
mkDecodeSharedTransactionResponseBody202CollateralOneOf2 decodeSharedTransactionResponseBody202CollateralOneOf2Address decodeSharedTransactionResponseBody202CollateralOneOf2Amount decodeSharedTransactionResponseBody202CollateralOneOf2Derivation_path decodeSharedTransactionResponseBody202CollateralOneOf2Id decodeSharedTransactionResponseBody202CollateralOneOf2Index = DecodeSharedTransactionResponseBody202CollateralOneOf2{decodeSharedTransactionResponseBody202CollateralOneOf2Address = decodeSharedTransactionResponseBody202CollateralOneOf2Address,
                                                                                                                                                                                                                                                                                                                                                                                                                                        decodeSharedTransactionResponseBody202CollateralOneOf2Amount = decodeSharedTransactionResponseBody202CollateralOneOf2Amount,
                                                                                                                                                                                                                                                                                                                                                                                                                                        decodeSharedTransactionResponseBody202CollateralOneOf2Assets = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                                                                                                                                                                                        decodeSharedTransactionResponseBody202CollateralOneOf2Derivation_path = decodeSharedTransactionResponseBody202CollateralOneOf2Derivation_path,
                                                                                                                                                                                                                                                                                                                                                                                                                                        decodeSharedTransactionResponseBody202CollateralOneOf2Id = decodeSharedTransactionResponseBody202CollateralOneOf2Id,
                                                                                                                                                                                                                                                                                                                                                                                                                                        decodeSharedTransactionResponseBody202CollateralOneOf2Index = decodeSharedTransactionResponseBody202CollateralOneOf2Index}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.collateral.items.oneOf.properties.amount@ in the specification.
-- 
-- Coins, in Lovelace. Only relates to \'Ada\'. Refer to \`assets\` for multi-assets wallets instead.
data DecodeSharedTransactionResponseBody202CollateralOneOf2Amount = DecodeSharedTransactionResponseBody202CollateralOneOf2Amount {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  decodeSharedTransactionResponseBody202CollateralOneOf2AmountQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202CollateralOneOf2Amount
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202CollateralOneOf2AmountQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202CollateralOneOf2AmountQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202CollateralOneOf2Amount
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202CollateralOneOf2Amount" (\obj -> GHC.Base.pure DecodeSharedTransactionResponseBody202CollateralOneOf2Amount GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'DecodeSharedTransactionResponseBody202CollateralOneOf2Amount' with all required fields.
mkDecodeSharedTransactionResponseBody202CollateralOneOf2Amount :: GHC.Types.Int -- ^ 'decodeSharedTransactionResponseBody202CollateralOneOf2AmountQuantity'
  -> DecodeSharedTransactionResponseBody202CollateralOneOf2Amount
mkDecodeSharedTransactionResponseBody202CollateralOneOf2Amount decodeSharedTransactionResponseBody202CollateralOneOf2AmountQuantity = DecodeSharedTransactionResponseBody202CollateralOneOf2Amount{decodeSharedTransactionResponseBody202CollateralOneOf2AmountQuantity = decodeSharedTransactionResponseBody202CollateralOneOf2AmountQuantity}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.collateral.items.oneOf.properties.assets.items@ in the specification.
-- 
-- An asset on the Cardano blockchain. An asset is uniquely identified by
-- its \`policy_id\` and \`asset_name\` (together, these form the _asset id_).
-- 
-- Two assets with the same \`asset_name\` and \`policy_id\` are
-- interchangeable. Yet, different assets with a same \`policy_id\` but
-- different \`asset_name\` are treated as separate assets, as are two
-- assets with the same \`asset_name\` but different \`policy_id\`.
data DecodeSharedTransactionResponseBody202CollateralOneOf2Assets = DecodeSharedTransactionResponseBody202CollateralOneOf2Assets {
  -- | asset_name: The asset on-chain type which acts as a sub-identifier within a
  -- policy. Although we call it \"asset name\", the value needn\'t be
  -- text, and it could even be empty.
  -- 
  -- For policies with a single fungible asset item, asset name is
  -- typically an empty string.
  -- 
  -- This value can be up to 32 bytes of arbitrary data (which is 64
  -- hexadecimal digits).
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  decodeSharedTransactionResponseBody202CollateralOneOf2AssetsAsset_name :: Data.Text.Internal.Text
  -- | policy_id: A unique identifier of the asset\'s monetary policy. The policy
  -- controls how assets of this kind are created and destroyed.
  -- 
  -- The contents are the blake2b-224 hash of the monetary policy
  -- script, encoded in hexadecimal.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 56
  -- * Minimum length of 56
  , decodeSharedTransactionResponseBody202CollateralOneOf2AssetsPolicy_id :: Data.Text.Internal.Text
  -- | quantity: Number of assets for the given \`policy_id\` and \`asset_name\`.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , decodeSharedTransactionResponseBody202CollateralOneOf2AssetsQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202CollateralOneOf2Assets
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["asset_name" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202CollateralOneOf2AssetsAsset_name obj] : ["policy_id" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202CollateralOneOf2AssetsPolicy_id obj] : ["quantity" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202CollateralOneOf2AssetsQuantity obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["asset_name" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202CollateralOneOf2AssetsAsset_name obj] : ["policy_id" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202CollateralOneOf2AssetsPolicy_id obj] : ["quantity" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202CollateralOneOf2AssetsQuantity obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202CollateralOneOf2Assets
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202CollateralOneOf2Assets" (\obj -> ((GHC.Base.pure DecodeSharedTransactionResponseBody202CollateralOneOf2Assets GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "asset_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "policy_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'DecodeSharedTransactionResponseBody202CollateralOneOf2Assets' with all required fields.
mkDecodeSharedTransactionResponseBody202CollateralOneOf2Assets :: Data.Text.Internal.Text -- ^ 'decodeSharedTransactionResponseBody202CollateralOneOf2AssetsAsset_name'
  -> Data.Text.Internal.Text -- ^ 'decodeSharedTransactionResponseBody202CollateralOneOf2AssetsPolicy_id'
  -> GHC.Types.Int -- ^ 'decodeSharedTransactionResponseBody202CollateralOneOf2AssetsQuantity'
  -> DecodeSharedTransactionResponseBody202CollateralOneOf2Assets
mkDecodeSharedTransactionResponseBody202CollateralOneOf2Assets decodeSharedTransactionResponseBody202CollateralOneOf2AssetsAsset_name decodeSharedTransactionResponseBody202CollateralOneOf2AssetsPolicy_id decodeSharedTransactionResponseBody202CollateralOneOf2AssetsQuantity = DecodeSharedTransactionResponseBody202CollateralOneOf2Assets{decodeSharedTransactionResponseBody202CollateralOneOf2AssetsAsset_name = decodeSharedTransactionResponseBody202CollateralOneOf2AssetsAsset_name,
                                                                                                                                                                                                                                                                                                                                                decodeSharedTransactionResponseBody202CollateralOneOf2AssetsPolicy_id = decodeSharedTransactionResponseBody202CollateralOneOf2AssetsPolicy_id,
                                                                                                                                                                                                                                                                                                                                                decodeSharedTransactionResponseBody202CollateralOneOf2AssetsQuantity = decodeSharedTransactionResponseBody202CollateralOneOf2AssetsQuantity}
-- | Defines the oneOf schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.collateral.items.oneOf@ in the specification.
-- 
-- 
data DecodeSharedTransactionResponseBody202CollateralVariants =
   DecodeSharedTransactionResponseBody202CollateralVariant1 DecodeSharedTransactionResponseBody202CollateralOneOf1
  | DecodeSharedTransactionResponseBody202CollateralVariant2 DecodeSharedTransactionResponseBody202CollateralOneOf2
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202CollateralVariants
    where toJSON (DecodeSharedTransactionResponseBody202CollateralVariant1 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (DecodeSharedTransactionResponseBody202CollateralVariant2 a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202CollateralVariants
    where parseJSON val = case (DecodeSharedTransactionResponseBody202CollateralVariant1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((DecodeSharedTransactionResponseBody202CollateralVariant2 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.collateral_outputs.items.oneOf@ in the specification.
-- 
-- A transaction output not belonging to the wallet
data DecodeSharedTransactionResponseBody202Collateral_outputsOneOf1 = DecodeSharedTransactionResponseBody202Collateral_outputsOneOf1 {
  -- | address: A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
  -- which represents an address on the Cardano blockchain.
  -- Sequences in Base58 encoding are expected to be legacy Byron addresses,
  -- whereas sequences in Bech32 encoding correspond to current Shelley addresses.
  -- 
  -- For more details, see
  -- [CIP-0019 — Cardano addresses](https:\/\/github.com\/cardano-foundation\/CIPs\/tree\/master\/CIP-0019)
  -- .
  decodeSharedTransactionResponseBody202Collateral_outputsOneOf1Address :: Data.Text.Internal.Text
  -- | amount: Coins, in Lovelace. Only relates to \'Ada\'. Refer to \`assets\` for multi-assets wallets instead.
  , decodeSharedTransactionResponseBody202Collateral_outputsOneOf1Amount :: DecodeSharedTransactionResponseBody202Collateral_outputsOneOf1Amount
  -- | assets: A flat list of assets (possibly empty).
  , decodeSharedTransactionResponseBody202Collateral_outputsOneOf1Assets :: (GHC.Maybe.Maybe ([DecodeSharedTransactionResponseBody202Collateral_outputsOneOf1Assets]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202Collateral_outputsOneOf1
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["address" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Collateral_outputsOneOf1Address obj] : ["amount" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Collateral_outputsOneOf1Amount obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("assets" Data.Aeson.Types.ToJSON..=)) (decodeSharedTransactionResponseBody202Collateral_outputsOneOf1Assets obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["address" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Collateral_outputsOneOf1Address obj] : ["amount" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Collateral_outputsOneOf1Amount obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("assets" Data.Aeson.Types.ToJSON..=)) (decodeSharedTransactionResponseBody202Collateral_outputsOneOf1Assets obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202Collateral_outputsOneOf1
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202Collateral_outputsOneOf1" (\obj -> ((GHC.Base.pure DecodeSharedTransactionResponseBody202Collateral_outputsOneOf1 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "assets"))
-- | Create a new 'DecodeSharedTransactionResponseBody202Collateral_outputsOneOf1' with all required fields.
mkDecodeSharedTransactionResponseBody202Collateral_outputsOneOf1 :: Data.Text.Internal.Text -- ^ 'decodeSharedTransactionResponseBody202Collateral_outputsOneOf1Address'
  -> DecodeSharedTransactionResponseBody202Collateral_outputsOneOf1Amount -- ^ 'decodeSharedTransactionResponseBody202Collateral_outputsOneOf1Amount'
  -> DecodeSharedTransactionResponseBody202Collateral_outputsOneOf1
mkDecodeSharedTransactionResponseBody202Collateral_outputsOneOf1 decodeSharedTransactionResponseBody202Collateral_outputsOneOf1Address decodeSharedTransactionResponseBody202Collateral_outputsOneOf1Amount = DecodeSharedTransactionResponseBody202Collateral_outputsOneOf1{decodeSharedTransactionResponseBody202Collateral_outputsOneOf1Address = decodeSharedTransactionResponseBody202Collateral_outputsOneOf1Address,
                                                                                                                                                                                                                                                                             decodeSharedTransactionResponseBody202Collateral_outputsOneOf1Amount = decodeSharedTransactionResponseBody202Collateral_outputsOneOf1Amount,
                                                                                                                                                                                                                                                                             decodeSharedTransactionResponseBody202Collateral_outputsOneOf1Assets = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.collateral_outputs.items.oneOf.properties.amount@ in the specification.
-- 
-- Coins, in Lovelace. Only relates to \'Ada\'. Refer to \`assets\` for multi-assets wallets instead.
data DecodeSharedTransactionResponseBody202Collateral_outputsOneOf1Amount = DecodeSharedTransactionResponseBody202Collateral_outputsOneOf1Amount {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  decodeSharedTransactionResponseBody202Collateral_outputsOneOf1AmountQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202Collateral_outputsOneOf1Amount
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Collateral_outputsOneOf1AmountQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Collateral_outputsOneOf1AmountQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202Collateral_outputsOneOf1Amount
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202Collateral_outputsOneOf1Amount" (\obj -> GHC.Base.pure DecodeSharedTransactionResponseBody202Collateral_outputsOneOf1Amount GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'DecodeSharedTransactionResponseBody202Collateral_outputsOneOf1Amount' with all required fields.
mkDecodeSharedTransactionResponseBody202Collateral_outputsOneOf1Amount :: GHC.Types.Int -- ^ 'decodeSharedTransactionResponseBody202Collateral_outputsOneOf1AmountQuantity'
  -> DecodeSharedTransactionResponseBody202Collateral_outputsOneOf1Amount
mkDecodeSharedTransactionResponseBody202Collateral_outputsOneOf1Amount decodeSharedTransactionResponseBody202Collateral_outputsOneOf1AmountQuantity = DecodeSharedTransactionResponseBody202Collateral_outputsOneOf1Amount{decodeSharedTransactionResponseBody202Collateral_outputsOneOf1AmountQuantity = decodeSharedTransactionResponseBody202Collateral_outputsOneOf1AmountQuantity}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.collateral_outputs.items.oneOf.properties.assets.items@ in the specification.
-- 
-- An asset on the Cardano blockchain. An asset is uniquely identified by
-- its \`policy_id\` and \`asset_name\` (together, these form the _asset id_).
-- 
-- Two assets with the same \`asset_name\` and \`policy_id\` are
-- interchangeable. Yet, different assets with a same \`policy_id\` but
-- different \`asset_name\` are treated as separate assets, as are two
-- assets with the same \`asset_name\` but different \`policy_id\`.
data DecodeSharedTransactionResponseBody202Collateral_outputsOneOf1Assets = DecodeSharedTransactionResponseBody202Collateral_outputsOneOf1Assets {
  -- | asset_name: The asset on-chain type which acts as a sub-identifier within a
  -- policy. Although we call it \"asset name\", the value needn\'t be
  -- text, and it could even be empty.
  -- 
  -- For policies with a single fungible asset item, asset name is
  -- typically an empty string.
  -- 
  -- This value can be up to 32 bytes of arbitrary data (which is 64
  -- hexadecimal digits).
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  decodeSharedTransactionResponseBody202Collateral_outputsOneOf1AssetsAsset_name :: Data.Text.Internal.Text
  -- | policy_id: A unique identifier of the asset\'s monetary policy. The policy
  -- controls how assets of this kind are created and destroyed.
  -- 
  -- The contents are the blake2b-224 hash of the monetary policy
  -- script, encoded in hexadecimal.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 56
  -- * Minimum length of 56
  , decodeSharedTransactionResponseBody202Collateral_outputsOneOf1AssetsPolicy_id :: Data.Text.Internal.Text
  -- | quantity: Number of assets for the given \`policy_id\` and \`asset_name\`.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , decodeSharedTransactionResponseBody202Collateral_outputsOneOf1AssetsQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202Collateral_outputsOneOf1Assets
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["asset_name" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Collateral_outputsOneOf1AssetsAsset_name obj] : ["policy_id" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Collateral_outputsOneOf1AssetsPolicy_id obj] : ["quantity" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Collateral_outputsOneOf1AssetsQuantity obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["asset_name" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Collateral_outputsOneOf1AssetsAsset_name obj] : ["policy_id" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Collateral_outputsOneOf1AssetsPolicy_id obj] : ["quantity" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Collateral_outputsOneOf1AssetsQuantity obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202Collateral_outputsOneOf1Assets
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202Collateral_outputsOneOf1Assets" (\obj -> ((GHC.Base.pure DecodeSharedTransactionResponseBody202Collateral_outputsOneOf1Assets GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "asset_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "policy_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'DecodeSharedTransactionResponseBody202Collateral_outputsOneOf1Assets' with all required fields.
mkDecodeSharedTransactionResponseBody202Collateral_outputsOneOf1Assets :: Data.Text.Internal.Text -- ^ 'decodeSharedTransactionResponseBody202Collateral_outputsOneOf1AssetsAsset_name'
  -> Data.Text.Internal.Text -- ^ 'decodeSharedTransactionResponseBody202Collateral_outputsOneOf1AssetsPolicy_id'
  -> GHC.Types.Int -- ^ 'decodeSharedTransactionResponseBody202Collateral_outputsOneOf1AssetsQuantity'
  -> DecodeSharedTransactionResponseBody202Collateral_outputsOneOf1Assets
mkDecodeSharedTransactionResponseBody202Collateral_outputsOneOf1Assets decodeSharedTransactionResponseBody202Collateral_outputsOneOf1AssetsAsset_name decodeSharedTransactionResponseBody202Collateral_outputsOneOf1AssetsPolicy_id decodeSharedTransactionResponseBody202Collateral_outputsOneOf1AssetsQuantity = DecodeSharedTransactionResponseBody202Collateral_outputsOneOf1Assets{decodeSharedTransactionResponseBody202Collateral_outputsOneOf1AssetsAsset_name = decodeSharedTransactionResponseBody202Collateral_outputsOneOf1AssetsAsset_name,
                                                                                                                                                                                                                                                                                                                                                                                        decodeSharedTransactionResponseBody202Collateral_outputsOneOf1AssetsPolicy_id = decodeSharedTransactionResponseBody202Collateral_outputsOneOf1AssetsPolicy_id,
                                                                                                                                                                                                                                                                                                                                                                                        decodeSharedTransactionResponseBody202Collateral_outputsOneOf1AssetsQuantity = decodeSharedTransactionResponseBody202Collateral_outputsOneOf1AssetsQuantity}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.collateral_outputs.items.oneOf@ in the specification.
-- 
-- A transaction output not belonging to the wallet
data DecodeSharedTransactionResponseBody202Collateral_outputsOneOf2 = DecodeSharedTransactionResponseBody202Collateral_outputsOneOf2 {
  -- | address: A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
  -- which represents an address on the Cardano blockchain.
  -- Sequences in Base58 encoding are expected to be legacy Byron addresses,
  -- whereas sequences in Bech32 encoding correspond to current Shelley addresses.
  -- 
  -- For more details, see
  -- [CIP-0019 — Cardano addresses](https:\/\/github.com\/cardano-foundation\/CIPs\/tree\/master\/CIP-0019)
  -- .
  decodeSharedTransactionResponseBody202Collateral_outputsOneOf2Address :: Data.Text.Internal.Text
  -- | amount: Coins, in Lovelace. Only relates to \'Ada\'. Refer to \`assets\` for multi-assets wallets instead.
  , decodeSharedTransactionResponseBody202Collateral_outputsOneOf2Amount :: DecodeSharedTransactionResponseBody202Collateral_outputsOneOf2Amount
  -- | assets: A flat list of assets (possibly empty).
  , decodeSharedTransactionResponseBody202Collateral_outputsOneOf2Assets :: (GHC.Maybe.Maybe ([DecodeSharedTransactionResponseBody202Collateral_outputsOneOf2Assets]))
  -- | derivation_path: A path for deriving a child key from a parent key.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  , decodeSharedTransactionResponseBody202Collateral_outputsOneOf2Derivation_path :: ([Data.Text.Internal.Text])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202Collateral_outputsOneOf2
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["address" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Collateral_outputsOneOf2Address obj] : ["amount" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Collateral_outputsOneOf2Amount obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("assets" Data.Aeson.Types.ToJSON..=)) (decodeSharedTransactionResponseBody202Collateral_outputsOneOf2Assets obj) : ["derivation_path" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Collateral_outputsOneOf2Derivation_path obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["address" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Collateral_outputsOneOf2Address obj] : ["amount" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Collateral_outputsOneOf2Amount obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("assets" Data.Aeson.Types.ToJSON..=)) (decodeSharedTransactionResponseBody202Collateral_outputsOneOf2Assets obj) : ["derivation_path" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Collateral_outputsOneOf2Derivation_path obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202Collateral_outputsOneOf2
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202Collateral_outputsOneOf2" (\obj -> (((GHC.Base.pure DecodeSharedTransactionResponseBody202Collateral_outputsOneOf2 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "assets")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "derivation_path"))
-- | Create a new 'DecodeSharedTransactionResponseBody202Collateral_outputsOneOf2' with all required fields.
mkDecodeSharedTransactionResponseBody202Collateral_outputsOneOf2 :: Data.Text.Internal.Text -- ^ 'decodeSharedTransactionResponseBody202Collateral_outputsOneOf2Address'
  -> DecodeSharedTransactionResponseBody202Collateral_outputsOneOf2Amount -- ^ 'decodeSharedTransactionResponseBody202Collateral_outputsOneOf2Amount'
  -> [Data.Text.Internal.Text] -- ^ 'decodeSharedTransactionResponseBody202Collateral_outputsOneOf2Derivation_path'
  -> DecodeSharedTransactionResponseBody202Collateral_outputsOneOf2
mkDecodeSharedTransactionResponseBody202Collateral_outputsOneOf2 decodeSharedTransactionResponseBody202Collateral_outputsOneOf2Address decodeSharedTransactionResponseBody202Collateral_outputsOneOf2Amount decodeSharedTransactionResponseBody202Collateral_outputsOneOf2Derivation_path = DecodeSharedTransactionResponseBody202Collateral_outputsOneOf2{decodeSharedTransactionResponseBody202Collateral_outputsOneOf2Address = decodeSharedTransactionResponseBody202Collateral_outputsOneOf2Address,
                                                                                                                                                                                                                                                                                                                                                           decodeSharedTransactionResponseBody202Collateral_outputsOneOf2Amount = decodeSharedTransactionResponseBody202Collateral_outputsOneOf2Amount,
                                                                                                                                                                                                                                                                                                                                                           decodeSharedTransactionResponseBody202Collateral_outputsOneOf2Assets = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                                                                                                           decodeSharedTransactionResponseBody202Collateral_outputsOneOf2Derivation_path = decodeSharedTransactionResponseBody202Collateral_outputsOneOf2Derivation_path}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.collateral_outputs.items.oneOf.properties.amount@ in the specification.
-- 
-- Coins, in Lovelace. Only relates to \'Ada\'. Refer to \`assets\` for multi-assets wallets instead.
data DecodeSharedTransactionResponseBody202Collateral_outputsOneOf2Amount = DecodeSharedTransactionResponseBody202Collateral_outputsOneOf2Amount {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  decodeSharedTransactionResponseBody202Collateral_outputsOneOf2AmountQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202Collateral_outputsOneOf2Amount
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Collateral_outputsOneOf2AmountQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Collateral_outputsOneOf2AmountQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202Collateral_outputsOneOf2Amount
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202Collateral_outputsOneOf2Amount" (\obj -> GHC.Base.pure DecodeSharedTransactionResponseBody202Collateral_outputsOneOf2Amount GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'DecodeSharedTransactionResponseBody202Collateral_outputsOneOf2Amount' with all required fields.
mkDecodeSharedTransactionResponseBody202Collateral_outputsOneOf2Amount :: GHC.Types.Int -- ^ 'decodeSharedTransactionResponseBody202Collateral_outputsOneOf2AmountQuantity'
  -> DecodeSharedTransactionResponseBody202Collateral_outputsOneOf2Amount
mkDecodeSharedTransactionResponseBody202Collateral_outputsOneOf2Amount decodeSharedTransactionResponseBody202Collateral_outputsOneOf2AmountQuantity = DecodeSharedTransactionResponseBody202Collateral_outputsOneOf2Amount{decodeSharedTransactionResponseBody202Collateral_outputsOneOf2AmountQuantity = decodeSharedTransactionResponseBody202Collateral_outputsOneOf2AmountQuantity}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.collateral_outputs.items.oneOf.properties.assets.items@ in the specification.
-- 
-- An asset on the Cardano blockchain. An asset is uniquely identified by
-- its \`policy_id\` and \`asset_name\` (together, these form the _asset id_).
-- 
-- Two assets with the same \`asset_name\` and \`policy_id\` are
-- interchangeable. Yet, different assets with a same \`policy_id\` but
-- different \`asset_name\` are treated as separate assets, as are two
-- assets with the same \`asset_name\` but different \`policy_id\`.
data DecodeSharedTransactionResponseBody202Collateral_outputsOneOf2Assets = DecodeSharedTransactionResponseBody202Collateral_outputsOneOf2Assets {
  -- | asset_name: The asset on-chain type which acts as a sub-identifier within a
  -- policy. Although we call it \"asset name\", the value needn\'t be
  -- text, and it could even be empty.
  -- 
  -- For policies with a single fungible asset item, asset name is
  -- typically an empty string.
  -- 
  -- This value can be up to 32 bytes of arbitrary data (which is 64
  -- hexadecimal digits).
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  decodeSharedTransactionResponseBody202Collateral_outputsOneOf2AssetsAsset_name :: Data.Text.Internal.Text
  -- | policy_id: A unique identifier of the asset\'s monetary policy. The policy
  -- controls how assets of this kind are created and destroyed.
  -- 
  -- The contents are the blake2b-224 hash of the monetary policy
  -- script, encoded in hexadecimal.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 56
  -- * Minimum length of 56
  , decodeSharedTransactionResponseBody202Collateral_outputsOneOf2AssetsPolicy_id :: Data.Text.Internal.Text
  -- | quantity: Number of assets for the given \`policy_id\` and \`asset_name\`.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , decodeSharedTransactionResponseBody202Collateral_outputsOneOf2AssetsQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202Collateral_outputsOneOf2Assets
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["asset_name" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Collateral_outputsOneOf2AssetsAsset_name obj] : ["policy_id" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Collateral_outputsOneOf2AssetsPolicy_id obj] : ["quantity" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Collateral_outputsOneOf2AssetsQuantity obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["asset_name" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Collateral_outputsOneOf2AssetsAsset_name obj] : ["policy_id" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Collateral_outputsOneOf2AssetsPolicy_id obj] : ["quantity" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Collateral_outputsOneOf2AssetsQuantity obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202Collateral_outputsOneOf2Assets
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202Collateral_outputsOneOf2Assets" (\obj -> ((GHC.Base.pure DecodeSharedTransactionResponseBody202Collateral_outputsOneOf2Assets GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "asset_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "policy_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'DecodeSharedTransactionResponseBody202Collateral_outputsOneOf2Assets' with all required fields.
mkDecodeSharedTransactionResponseBody202Collateral_outputsOneOf2Assets :: Data.Text.Internal.Text -- ^ 'decodeSharedTransactionResponseBody202Collateral_outputsOneOf2AssetsAsset_name'
  -> Data.Text.Internal.Text -- ^ 'decodeSharedTransactionResponseBody202Collateral_outputsOneOf2AssetsPolicy_id'
  -> GHC.Types.Int -- ^ 'decodeSharedTransactionResponseBody202Collateral_outputsOneOf2AssetsQuantity'
  -> DecodeSharedTransactionResponseBody202Collateral_outputsOneOf2Assets
mkDecodeSharedTransactionResponseBody202Collateral_outputsOneOf2Assets decodeSharedTransactionResponseBody202Collateral_outputsOneOf2AssetsAsset_name decodeSharedTransactionResponseBody202Collateral_outputsOneOf2AssetsPolicy_id decodeSharedTransactionResponseBody202Collateral_outputsOneOf2AssetsQuantity = DecodeSharedTransactionResponseBody202Collateral_outputsOneOf2Assets{decodeSharedTransactionResponseBody202Collateral_outputsOneOf2AssetsAsset_name = decodeSharedTransactionResponseBody202Collateral_outputsOneOf2AssetsAsset_name,
                                                                                                                                                                                                                                                                                                                                                                                        decodeSharedTransactionResponseBody202Collateral_outputsOneOf2AssetsPolicy_id = decodeSharedTransactionResponseBody202Collateral_outputsOneOf2AssetsPolicy_id,
                                                                                                                                                                                                                                                                                                                                                                                        decodeSharedTransactionResponseBody202Collateral_outputsOneOf2AssetsQuantity = decodeSharedTransactionResponseBody202Collateral_outputsOneOf2AssetsQuantity}
-- | Defines the oneOf schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.collateral_outputs.items.oneOf@ in the specification.
-- 
-- 
data DecodeSharedTransactionResponseBody202Collateral_outputsVariants =
   DecodeSharedTransactionResponseBody202Collateral_outputsVariant1 DecodeSharedTransactionResponseBody202Collateral_outputsOneOf1
  | DecodeSharedTransactionResponseBody202Collateral_outputsVariant2 DecodeSharedTransactionResponseBody202Collateral_outputsOneOf2
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202Collateral_outputsVariants
    where toJSON (DecodeSharedTransactionResponseBody202Collateral_outputsVariant1 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (DecodeSharedTransactionResponseBody202Collateral_outputsVariant2 a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202Collateral_outputsVariants
    where parseJSON val = case (DecodeSharedTransactionResponseBody202Collateral_outputsVariant1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((DecodeSharedTransactionResponseBody202Collateral_outputsVariant2 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.deposits_returned.items@ in the specification.
-- 
-- Coins, in Lovelace. Only relates to \'Ada\'. Refer to \`assets\` for multi-assets wallets instead.
data DecodeSharedTransactionResponseBody202Deposits_returned = DecodeSharedTransactionResponseBody202Deposits_returned {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  decodeSharedTransactionResponseBody202Deposits_returnedQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202Deposits_returned
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Deposits_returnedQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Deposits_returnedQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202Deposits_returned
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202Deposits_returned" (\obj -> GHC.Base.pure DecodeSharedTransactionResponseBody202Deposits_returned GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'DecodeSharedTransactionResponseBody202Deposits_returned' with all required fields.
mkDecodeSharedTransactionResponseBody202Deposits_returned :: GHC.Types.Int -- ^ 'decodeSharedTransactionResponseBody202Deposits_returnedQuantity'
  -> DecodeSharedTransactionResponseBody202Deposits_returned
mkDecodeSharedTransactionResponseBody202Deposits_returned decodeSharedTransactionResponseBody202Deposits_returnedQuantity = DecodeSharedTransactionResponseBody202Deposits_returned{decodeSharedTransactionResponseBody202Deposits_returnedQuantity = decodeSharedTransactionResponseBody202Deposits_returnedQuantity}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.deposits_taken.items@ in the specification.
-- 
-- Coins, in Lovelace. Only relates to \'Ada\'. Refer to \`assets\` for multi-assets wallets instead.
data DecodeSharedTransactionResponseBody202Deposits_taken = DecodeSharedTransactionResponseBody202Deposits_taken {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  decodeSharedTransactionResponseBody202Deposits_takenQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202Deposits_taken
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Deposits_takenQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Deposits_takenQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202Deposits_taken
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202Deposits_taken" (\obj -> GHC.Base.pure DecodeSharedTransactionResponseBody202Deposits_taken GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'DecodeSharedTransactionResponseBody202Deposits_taken' with all required fields.
mkDecodeSharedTransactionResponseBody202Deposits_taken :: GHC.Types.Int -- ^ 'decodeSharedTransactionResponseBody202Deposits_takenQuantity'
  -> DecodeSharedTransactionResponseBody202Deposits_taken
mkDecodeSharedTransactionResponseBody202Deposits_taken decodeSharedTransactionResponseBody202Deposits_takenQuantity = DecodeSharedTransactionResponseBody202Deposits_taken{decodeSharedTransactionResponseBody202Deposits_takenQuantity = decodeSharedTransactionResponseBody202Deposits_takenQuantity}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.fee@ in the specification.
-- 
-- Coins, in Lovelace. Only relates to \'Ada\'. Refer to \`assets\` for multi-assets wallets instead.
data DecodeSharedTransactionResponseBody202Fee = DecodeSharedTransactionResponseBody202Fee {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  decodeSharedTransactionResponseBody202FeeQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202Fee
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202FeeQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202FeeQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202Fee
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202Fee" (\obj -> GHC.Base.pure DecodeSharedTransactionResponseBody202Fee GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'DecodeSharedTransactionResponseBody202Fee' with all required fields.
mkDecodeSharedTransactionResponseBody202Fee :: GHC.Types.Int -- ^ 'decodeSharedTransactionResponseBody202FeeQuantity'
  -> DecodeSharedTransactionResponseBody202Fee
mkDecodeSharedTransactionResponseBody202Fee decodeSharedTransactionResponseBody202FeeQuantity = DecodeSharedTransactionResponseBody202Fee{decodeSharedTransactionResponseBody202FeeQuantity = decodeSharedTransactionResponseBody202FeeQuantity}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.inputs.items.oneOf@ in the specification.
-- 
-- A transaction input not belonging to a given wallet.
data DecodeSharedTransactionResponseBody202InputsOneOf1 = DecodeSharedTransactionResponseBody202InputsOneOf1 {
  -- | id: A unique identifier for this transaction
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  -- * Minimum length of 64
  decodeSharedTransactionResponseBody202InputsOneOf1Id :: Data.Text.Internal.Text
  -- | index
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , decodeSharedTransactionResponseBody202InputsOneOf1Index :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202InputsOneOf1
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["id" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202InputsOneOf1Id obj] : ["index" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202InputsOneOf1Index obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["id" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202InputsOneOf1Id obj] : ["index" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202InputsOneOf1Index obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202InputsOneOf1
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202InputsOneOf1" (\obj -> (GHC.Base.pure DecodeSharedTransactionResponseBody202InputsOneOf1 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "index"))
-- | Create a new 'DecodeSharedTransactionResponseBody202InputsOneOf1' with all required fields.
mkDecodeSharedTransactionResponseBody202InputsOneOf1 :: Data.Text.Internal.Text -- ^ 'decodeSharedTransactionResponseBody202InputsOneOf1Id'
  -> GHC.Types.Int -- ^ 'decodeSharedTransactionResponseBody202InputsOneOf1Index'
  -> DecodeSharedTransactionResponseBody202InputsOneOf1
mkDecodeSharedTransactionResponseBody202InputsOneOf1 decodeSharedTransactionResponseBody202InputsOneOf1Id decodeSharedTransactionResponseBody202InputsOneOf1Index = DecodeSharedTransactionResponseBody202InputsOneOf1{decodeSharedTransactionResponseBody202InputsOneOf1Id = decodeSharedTransactionResponseBody202InputsOneOf1Id,
                                                                                                                                                                                                                       decodeSharedTransactionResponseBody202InputsOneOf1Index = decodeSharedTransactionResponseBody202InputsOneOf1Index}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.inputs.items.oneOf@ in the specification.
-- 
-- A transaction input belonging to a given wallet.
data DecodeSharedTransactionResponseBody202InputsOneOf2 = DecodeSharedTransactionResponseBody202InputsOneOf2 {
  -- | address: A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
  -- which represents an address on the Cardano blockchain.
  -- Sequences in Base58 encoding are expected to be legacy Byron addresses,
  -- whereas sequences in Bech32 encoding correspond to current Shelley addresses.
  -- 
  -- For more details, see
  -- [CIP-0019 — Cardano addresses](https:\/\/github.com\/cardano-foundation\/CIPs\/tree\/master\/CIP-0019)
  -- .
  decodeSharedTransactionResponseBody202InputsOneOf2Address :: Data.Text.Internal.Text
  -- | amount: Coins, in Lovelace. Only relates to \'Ada\'. Refer to \`assets\` for multi-assets wallets instead.
  , decodeSharedTransactionResponseBody202InputsOneOf2Amount :: DecodeSharedTransactionResponseBody202InputsOneOf2Amount
  -- | assets: A flat list of assets (possibly empty).
  , decodeSharedTransactionResponseBody202InputsOneOf2Assets :: (GHC.Maybe.Maybe ([DecodeSharedTransactionResponseBody202InputsOneOf2Assets]))
  -- | derivation_path: A path for deriving a child key from a parent key.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  , decodeSharedTransactionResponseBody202InputsOneOf2Derivation_path :: ([Data.Text.Internal.Text])
  -- | id: A unique identifier for this transaction
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  -- * Minimum length of 64
  , decodeSharedTransactionResponseBody202InputsOneOf2Id :: Data.Text.Internal.Text
  -- | index
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , decodeSharedTransactionResponseBody202InputsOneOf2Index :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202InputsOneOf2
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["address" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202InputsOneOf2Address obj] : ["amount" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202InputsOneOf2Amount obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("assets" Data.Aeson.Types.ToJSON..=)) (decodeSharedTransactionResponseBody202InputsOneOf2Assets obj) : ["derivation_path" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202InputsOneOf2Derivation_path obj] : ["id" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202InputsOneOf2Id obj] : ["index" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202InputsOneOf2Index obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["address" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202InputsOneOf2Address obj] : ["amount" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202InputsOneOf2Amount obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("assets" Data.Aeson.Types.ToJSON..=)) (decodeSharedTransactionResponseBody202InputsOneOf2Assets obj) : ["derivation_path" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202InputsOneOf2Derivation_path obj] : ["id" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202InputsOneOf2Id obj] : ["index" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202InputsOneOf2Index obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202InputsOneOf2
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202InputsOneOf2" (\obj -> (((((GHC.Base.pure DecodeSharedTransactionResponseBody202InputsOneOf2 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "assets")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "derivation_path")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "index"))
-- | Create a new 'DecodeSharedTransactionResponseBody202InputsOneOf2' with all required fields.
mkDecodeSharedTransactionResponseBody202InputsOneOf2 :: Data.Text.Internal.Text -- ^ 'decodeSharedTransactionResponseBody202InputsOneOf2Address'
  -> DecodeSharedTransactionResponseBody202InputsOneOf2Amount -- ^ 'decodeSharedTransactionResponseBody202InputsOneOf2Amount'
  -> [Data.Text.Internal.Text] -- ^ 'decodeSharedTransactionResponseBody202InputsOneOf2Derivation_path'
  -> Data.Text.Internal.Text -- ^ 'decodeSharedTransactionResponseBody202InputsOneOf2Id'
  -> GHC.Types.Int -- ^ 'decodeSharedTransactionResponseBody202InputsOneOf2Index'
  -> DecodeSharedTransactionResponseBody202InputsOneOf2
mkDecodeSharedTransactionResponseBody202InputsOneOf2 decodeSharedTransactionResponseBody202InputsOneOf2Address decodeSharedTransactionResponseBody202InputsOneOf2Amount decodeSharedTransactionResponseBody202InputsOneOf2Derivation_path decodeSharedTransactionResponseBody202InputsOneOf2Id decodeSharedTransactionResponseBody202InputsOneOf2Index = DecodeSharedTransactionResponseBody202InputsOneOf2{decodeSharedTransactionResponseBody202InputsOneOf2Address = decodeSharedTransactionResponseBody202InputsOneOf2Address,
                                                                                                                                                                                                                                                                                                                                                                                                            decodeSharedTransactionResponseBody202InputsOneOf2Amount = decodeSharedTransactionResponseBody202InputsOneOf2Amount,
                                                                                                                                                                                                                                                                                                                                                                                                            decodeSharedTransactionResponseBody202InputsOneOf2Assets = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                                                                                                                                                            decodeSharedTransactionResponseBody202InputsOneOf2Derivation_path = decodeSharedTransactionResponseBody202InputsOneOf2Derivation_path,
                                                                                                                                                                                                                                                                                                                                                                                                            decodeSharedTransactionResponseBody202InputsOneOf2Id = decodeSharedTransactionResponseBody202InputsOneOf2Id,
                                                                                                                                                                                                                                                                                                                                                                                                            decodeSharedTransactionResponseBody202InputsOneOf2Index = decodeSharedTransactionResponseBody202InputsOneOf2Index}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.inputs.items.oneOf.properties.amount@ in the specification.
-- 
-- Coins, in Lovelace. Only relates to \'Ada\'. Refer to \`assets\` for multi-assets wallets instead.
data DecodeSharedTransactionResponseBody202InputsOneOf2Amount = DecodeSharedTransactionResponseBody202InputsOneOf2Amount {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  decodeSharedTransactionResponseBody202InputsOneOf2AmountQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202InputsOneOf2Amount
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202InputsOneOf2AmountQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202InputsOneOf2AmountQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202InputsOneOf2Amount
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202InputsOneOf2Amount" (\obj -> GHC.Base.pure DecodeSharedTransactionResponseBody202InputsOneOf2Amount GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'DecodeSharedTransactionResponseBody202InputsOneOf2Amount' with all required fields.
mkDecodeSharedTransactionResponseBody202InputsOneOf2Amount :: GHC.Types.Int -- ^ 'decodeSharedTransactionResponseBody202InputsOneOf2AmountQuantity'
  -> DecodeSharedTransactionResponseBody202InputsOneOf2Amount
mkDecodeSharedTransactionResponseBody202InputsOneOf2Amount decodeSharedTransactionResponseBody202InputsOneOf2AmountQuantity = DecodeSharedTransactionResponseBody202InputsOneOf2Amount{decodeSharedTransactionResponseBody202InputsOneOf2AmountQuantity = decodeSharedTransactionResponseBody202InputsOneOf2AmountQuantity}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.inputs.items.oneOf.properties.assets.items@ in the specification.
-- 
-- An asset on the Cardano blockchain. An asset is uniquely identified by
-- its \`policy_id\` and \`asset_name\` (together, these form the _asset id_).
-- 
-- Two assets with the same \`asset_name\` and \`policy_id\` are
-- interchangeable. Yet, different assets with a same \`policy_id\` but
-- different \`asset_name\` are treated as separate assets, as are two
-- assets with the same \`asset_name\` but different \`policy_id\`.
data DecodeSharedTransactionResponseBody202InputsOneOf2Assets = DecodeSharedTransactionResponseBody202InputsOneOf2Assets {
  -- | asset_name: The asset on-chain type which acts as a sub-identifier within a
  -- policy. Although we call it \"asset name\", the value needn\'t be
  -- text, and it could even be empty.
  -- 
  -- For policies with a single fungible asset item, asset name is
  -- typically an empty string.
  -- 
  -- This value can be up to 32 bytes of arbitrary data (which is 64
  -- hexadecimal digits).
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  decodeSharedTransactionResponseBody202InputsOneOf2AssetsAsset_name :: Data.Text.Internal.Text
  -- | policy_id: A unique identifier of the asset\'s monetary policy. The policy
  -- controls how assets of this kind are created and destroyed.
  -- 
  -- The contents are the blake2b-224 hash of the monetary policy
  -- script, encoded in hexadecimal.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 56
  -- * Minimum length of 56
  , decodeSharedTransactionResponseBody202InputsOneOf2AssetsPolicy_id :: Data.Text.Internal.Text
  -- | quantity: Number of assets for the given \`policy_id\` and \`asset_name\`.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , decodeSharedTransactionResponseBody202InputsOneOf2AssetsQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202InputsOneOf2Assets
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["asset_name" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202InputsOneOf2AssetsAsset_name obj] : ["policy_id" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202InputsOneOf2AssetsPolicy_id obj] : ["quantity" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202InputsOneOf2AssetsQuantity obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["asset_name" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202InputsOneOf2AssetsAsset_name obj] : ["policy_id" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202InputsOneOf2AssetsPolicy_id obj] : ["quantity" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202InputsOneOf2AssetsQuantity obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202InputsOneOf2Assets
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202InputsOneOf2Assets" (\obj -> ((GHC.Base.pure DecodeSharedTransactionResponseBody202InputsOneOf2Assets GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "asset_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "policy_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'DecodeSharedTransactionResponseBody202InputsOneOf2Assets' with all required fields.
mkDecodeSharedTransactionResponseBody202InputsOneOf2Assets :: Data.Text.Internal.Text -- ^ 'decodeSharedTransactionResponseBody202InputsOneOf2AssetsAsset_name'
  -> Data.Text.Internal.Text -- ^ 'decodeSharedTransactionResponseBody202InputsOneOf2AssetsPolicy_id'
  -> GHC.Types.Int -- ^ 'decodeSharedTransactionResponseBody202InputsOneOf2AssetsQuantity'
  -> DecodeSharedTransactionResponseBody202InputsOneOf2Assets
mkDecodeSharedTransactionResponseBody202InputsOneOf2Assets decodeSharedTransactionResponseBody202InputsOneOf2AssetsAsset_name decodeSharedTransactionResponseBody202InputsOneOf2AssetsPolicy_id decodeSharedTransactionResponseBody202InputsOneOf2AssetsQuantity = DecodeSharedTransactionResponseBody202InputsOneOf2Assets{decodeSharedTransactionResponseBody202InputsOneOf2AssetsAsset_name = decodeSharedTransactionResponseBody202InputsOneOf2AssetsAsset_name,
                                                                                                                                                                                                                                                                                                                            decodeSharedTransactionResponseBody202InputsOneOf2AssetsPolicy_id = decodeSharedTransactionResponseBody202InputsOneOf2AssetsPolicy_id,
                                                                                                                                                                                                                                                                                                                            decodeSharedTransactionResponseBody202InputsOneOf2AssetsQuantity = decodeSharedTransactionResponseBody202InputsOneOf2AssetsQuantity}
-- | Defines the oneOf schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.inputs.items.oneOf@ in the specification.
-- 
-- 
data DecodeSharedTransactionResponseBody202InputsVariants =
   DecodeSharedTransactionResponseBody202InputsVariant1 DecodeSharedTransactionResponseBody202InputsOneOf1
  | DecodeSharedTransactionResponseBody202InputsVariant2 DecodeSharedTransactionResponseBody202InputsOneOf2
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202InputsVariants
    where toJSON (DecodeSharedTransactionResponseBody202InputsVariant1 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (DecodeSharedTransactionResponseBody202InputsVariant2 a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202InputsVariants
    where parseJSON val = case (DecodeSharedTransactionResponseBody202InputsVariant1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((DecodeSharedTransactionResponseBody202InputsVariant2 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.mint@ in the specification.
-- 
-- 
data DecodeSharedTransactionResponseBody202Mint = DecodeSharedTransactionResponseBody202Mint {
  -- | tokens
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 0 items
  decodeSharedTransactionResponseBody202MintTokens :: ([DecodeSharedTransactionResponseBody202MintTokens])
  -- | wallet_policy_key_hash
  -- 
  -- Constraints:
  -- 
  -- * Must match pattern \'^((policy_vk)|(policy_vkh))1[0-9a-z]*\$\'
  , decodeSharedTransactionResponseBody202MintWallet_policy_key_hash :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | wallet_policy_key_index: An individual segment within a derivation path.
  -- 
  -- The \`H\` suffix indicates a _Hardened_ child private key, which
  -- means that children of this key cannot be derived from the public
  -- key. Indices without a \`H\` suffix are called _Soft_.
  , decodeSharedTransactionResponseBody202MintWallet_policy_key_index :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202Mint
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["tokens" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202MintTokens obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("wallet_policy_key_hash" Data.Aeson.Types.ToJSON..=)) (decodeSharedTransactionResponseBody202MintWallet_policy_key_hash obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("wallet_policy_key_index" Data.Aeson.Types.ToJSON..=)) (decodeSharedTransactionResponseBody202MintWallet_policy_key_index obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["tokens" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202MintTokens obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("wallet_policy_key_hash" Data.Aeson.Types.ToJSON..=)) (decodeSharedTransactionResponseBody202MintWallet_policy_key_hash obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("wallet_policy_key_index" Data.Aeson.Types.ToJSON..=)) (decodeSharedTransactionResponseBody202MintWallet_policy_key_index obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202Mint
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202Mint" (\obj -> ((GHC.Base.pure DecodeSharedTransactionResponseBody202Mint GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "tokens")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "wallet_policy_key_hash")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "wallet_policy_key_index"))
-- | Create a new 'DecodeSharedTransactionResponseBody202Mint' with all required fields.
mkDecodeSharedTransactionResponseBody202Mint :: [DecodeSharedTransactionResponseBody202MintTokens] -- ^ 'decodeSharedTransactionResponseBody202MintTokens'
  -> DecodeSharedTransactionResponseBody202Mint
mkDecodeSharedTransactionResponseBody202Mint decodeSharedTransactionResponseBody202MintTokens = DecodeSharedTransactionResponseBody202Mint{decodeSharedTransactionResponseBody202MintTokens = decodeSharedTransactionResponseBody202MintTokens,
                                                                                                                                           decodeSharedTransactionResponseBody202MintWallet_policy_key_hash = GHC.Maybe.Nothing,
                                                                                                                                           decodeSharedTransactionResponseBody202MintWallet_policy_key_index = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.mint.properties.tokens.items@ in the specification.
-- 
-- 
data DecodeSharedTransactionResponseBody202MintTokens = DecodeSharedTransactionResponseBody202MintTokens {
  -- | assets
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  decodeSharedTransactionResponseBody202MintTokensAssets :: ([DecodeSharedTransactionResponseBody202MintTokensAssets])
  -- | policy_id: A unique identifier of the asset\'s monetary policy. The policy
  -- controls how assets of this kind are created and destroyed.
  -- 
  -- The contents are the blake2b-224 hash of the monetary policy
  -- script, encoded in hexadecimal.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 56
  -- * Minimum length of 56
  , decodeSharedTransactionResponseBody202MintTokensPolicy_id :: Data.Text.Internal.Text
  -- | policy_script
  , decodeSharedTransactionResponseBody202MintTokensPolicy_script :: DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptVariants
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202MintTokens
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["assets" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202MintTokensAssets obj] : ["policy_id" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202MintTokensPolicy_id obj] : ["policy_script" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202MintTokensPolicy_script obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["assets" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202MintTokensAssets obj] : ["policy_id" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202MintTokensPolicy_id obj] : ["policy_script" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202MintTokensPolicy_script obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202MintTokens
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202MintTokens" (\obj -> ((GHC.Base.pure DecodeSharedTransactionResponseBody202MintTokens GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "assets")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "policy_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "policy_script"))
-- | Create a new 'DecodeSharedTransactionResponseBody202MintTokens' with all required fields.
mkDecodeSharedTransactionResponseBody202MintTokens :: [DecodeSharedTransactionResponseBody202MintTokensAssets] -- ^ 'decodeSharedTransactionResponseBody202MintTokensAssets'
  -> Data.Text.Internal.Text -- ^ 'decodeSharedTransactionResponseBody202MintTokensPolicy_id'
  -> DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptVariants -- ^ 'decodeSharedTransactionResponseBody202MintTokensPolicy_script'
  -> DecodeSharedTransactionResponseBody202MintTokens
mkDecodeSharedTransactionResponseBody202MintTokens decodeSharedTransactionResponseBody202MintTokensAssets decodeSharedTransactionResponseBody202MintTokensPolicy_id decodeSharedTransactionResponseBody202MintTokensPolicy_script = DecodeSharedTransactionResponseBody202MintTokens{decodeSharedTransactionResponseBody202MintTokensAssets = decodeSharedTransactionResponseBody202MintTokensAssets,
                                                                                                                                                                                                                                                                                     decodeSharedTransactionResponseBody202MintTokensPolicy_id = decodeSharedTransactionResponseBody202MintTokensPolicy_id,
                                                                                                                                                                                                                                                                                     decodeSharedTransactionResponseBody202MintTokensPolicy_script = decodeSharedTransactionResponseBody202MintTokensPolicy_script}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.mint.properties.tokens.items.properties.assets.items@ in the specification.
-- 
-- 
data DecodeSharedTransactionResponseBody202MintTokensAssets = DecodeSharedTransactionResponseBody202MintTokensAssets {
  -- | asset_name: The asset on-chain type which acts as a sub-identifier within a
  -- policy. Although we call it \"asset name\", the value needn\'t be
  -- text, and it could even be empty.
  -- 
  -- For policies with a single fungible asset item, asset name is
  -- typically an empty string.
  -- 
  -- This value can be up to 32 bytes of arbitrary data (which is 64
  -- hexadecimal digits).
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  decodeSharedTransactionResponseBody202MintTokensAssetsAsset_name :: Data.Text.Internal.Text
  -- | fingerprint: A user-facing short fingerprint which combines the \`policy_id\` and \`asset_name\`
  -- to allow for an easier human comparison of assets. Note that it is generally
  -- **not okay** to use this fingerprint as a unique identifier for it is not collision
  -- resistant. Yet within the context of a single wallet, it makes for a (rather)
  -- short user-facing comparison mean.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 44
  -- * Minimum length of 44
  -- * Must match pattern \'^(asset)1[0-9a-z]*\$\'
  , decodeSharedTransactionResponseBody202MintTokensAssetsFingerprint :: Data.Text.Internal.Text
  -- | quantity: Number of assets for the given \`policy_id\` and \`asset_name\`.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , decodeSharedTransactionResponseBody202MintTokensAssetsQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202MintTokensAssets
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["asset_name" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202MintTokensAssetsAsset_name obj] : ["fingerprint" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202MintTokensAssetsFingerprint obj] : ["quantity" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202MintTokensAssetsQuantity obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["asset_name" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202MintTokensAssetsAsset_name obj] : ["fingerprint" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202MintTokensAssetsFingerprint obj] : ["quantity" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202MintTokensAssetsQuantity obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202MintTokensAssets
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202MintTokensAssets" (\obj -> ((GHC.Base.pure DecodeSharedTransactionResponseBody202MintTokensAssets GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "asset_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "fingerprint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'DecodeSharedTransactionResponseBody202MintTokensAssets' with all required fields.
mkDecodeSharedTransactionResponseBody202MintTokensAssets :: Data.Text.Internal.Text -- ^ 'decodeSharedTransactionResponseBody202MintTokensAssetsAsset_name'
  -> Data.Text.Internal.Text -- ^ 'decodeSharedTransactionResponseBody202MintTokensAssetsFingerprint'
  -> GHC.Types.Int -- ^ 'decodeSharedTransactionResponseBody202MintTokensAssetsQuantity'
  -> DecodeSharedTransactionResponseBody202MintTokensAssets
mkDecodeSharedTransactionResponseBody202MintTokensAssets decodeSharedTransactionResponseBody202MintTokensAssetsAsset_name decodeSharedTransactionResponseBody202MintTokensAssetsFingerprint decodeSharedTransactionResponseBody202MintTokensAssetsQuantity = DecodeSharedTransactionResponseBody202MintTokensAssets{decodeSharedTransactionResponseBody202MintTokensAssetsAsset_name = decodeSharedTransactionResponseBody202MintTokensAssetsAsset_name,
                                                                                                                                                                                                                                                                                                                    decodeSharedTransactionResponseBody202MintTokensAssetsFingerprint = decodeSharedTransactionResponseBody202MintTokensAssetsFingerprint,
                                                                                                                                                                                                                                                                                                                    decodeSharedTransactionResponseBody202MintTokensAssetsQuantity = decodeSharedTransactionResponseBody202MintTokensAssetsQuantity}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.mint.properties.tokens.items.properties.policy_script.oneOf@ in the specification.
-- 
-- 
data DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1 = DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1 {
  -- | reference: A reference input.
  decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1Reference :: (GHC.Maybe.Maybe DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1Reference)
  -- | script
  , decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1Script :: DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptVariants
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reference" Data.Aeson.Types.ToJSON..=)) (decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1Reference obj) : ["script" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1Script obj] : ["script_type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "native"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reference" Data.Aeson.Types.ToJSON..=)) (decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1Reference obj) : ["script" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1Script obj] : ["script_type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "native"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1" (\obj -> (GHC.Base.pure DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "reference")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "script"))
-- | Create a new 'DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1' with all required fields.
mkDecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1 :: DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptVariants -- ^ 'decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1Script'
  -> DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1
mkDecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1 decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1Script = DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1{decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1Reference = GHC.Maybe.Nothing,
                                                                                                                                                                                                                      decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1Script = decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1Script}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.mint.properties.tokens.items.properties.policy_script.oneOf.properties.reference@ in the specification.
-- 
-- A reference input.
data DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1Reference = DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1Reference {
  -- | id: A unique identifier for this transaction
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  -- * Minimum length of 64
  decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ReferenceId :: Data.Text.Internal.Text
  -- | index
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ReferenceIndex :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1Reference
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["id" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ReferenceId obj] : ["index" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ReferenceIndex obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["id" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ReferenceId obj] : ["index" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ReferenceIndex obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1Reference
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1Reference" (\obj -> (GHC.Base.pure DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1Reference GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "index"))
-- | Create a new 'DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1Reference' with all required fields.
mkDecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1Reference :: Data.Text.Internal.Text -- ^ 'decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ReferenceId'
  -> GHC.Types.Int -- ^ 'decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ReferenceIndex'
  -> DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1Reference
mkDecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1Reference decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ReferenceId decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ReferenceIndex = DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1Reference{decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ReferenceId = decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ReferenceId,
                                                                                                                                                                                                                                                                                                                               decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ReferenceIndex = decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ReferenceIndex}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.mint.properties.tokens.items.properties.policy_script.oneOf.properties.script.oneOf@ in the specification.
-- 
-- 
data DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf2 = DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf2 {
  -- | all: Script primitive for which all signing keys corresponding to all list elements\' verification keys are expected to make the script valid.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf2All :: ([ScriptValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf2
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["all" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf2All obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["all" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf2All obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf2
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf2" (\obj -> GHC.Base.pure DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf2 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "all"))
-- | Create a new 'DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf2' with all required fields.
mkDecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf2 :: [ScriptValue] -- ^ 'decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf2All'
  -> DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf2
mkDecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf2 decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf2All = DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf2{decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf2All = decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf2All}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.mint.properties.tokens.items.properties.policy_script.oneOf.properties.script.oneOf@ in the specification.
-- 
-- 
data DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf3 = DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf3 {
  -- | any: Script primitive for which a signing key corresponding to any of the list elements\' verification keys is expected to make the script valid. It is equivalent to \`some\` with \`\"at_least\"=1\`.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf3Any :: ([ScriptValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf3
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["any" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf3Any obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["any" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf3Any obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf3
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf3" (\obj -> GHC.Base.pure DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf3 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "any"))
-- | Create a new 'DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf3' with all required fields.
mkDecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf3 :: [ScriptValue] -- ^ 'decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf3Any'
  -> DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf3
mkDecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf3 decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf3Any = DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf3{decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf3Any = decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf3Any}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.mint.properties.tokens.items.properties.policy_script.oneOf.properties.script.oneOf@ in the specification.
-- 
-- 
data DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf4 = DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf4 {
  -- | some: Script primitive for which at least a given number of signing keys corresponding to the list elements\' verification keys are expected to make the script valid.
  decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf4Some :: DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf4Some
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf4
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["some" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf4Some obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["some" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf4Some obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf4
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf4" (\obj -> GHC.Base.pure DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf4 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "some"))
-- | Create a new 'DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf4' with all required fields.
mkDecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf4 :: DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf4Some -- ^ 'decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf4Some'
  -> DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf4
mkDecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf4 decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf4Some = DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf4{decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf4Some = decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf4Some}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.mint.properties.tokens.items.properties.policy_script.oneOf.properties.script.oneOf.properties.some@ in the specification.
-- 
-- Script primitive for which at least a given number of signing keys corresponding to the list elements\' verification keys are expected to make the script valid.
data DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf4Some = DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf4Some {
  -- | at_least
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 255.0
  -- * Minimum  of 1.0
  decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf4SomeAt_least :: GHC.Types.Int
  -- | from
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  , decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf4SomeFrom :: ([ScriptValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf4Some
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["at_least" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf4SomeAt_least obj] : ["from" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf4SomeFrom obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["at_least" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf4SomeAt_least obj] : ["from" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf4SomeFrom obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf4Some
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf4Some" (\obj -> (GHC.Base.pure DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf4Some GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "at_least")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "from"))
-- | Create a new 'DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf4Some' with all required fields.
mkDecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf4Some :: GHC.Types.Int -- ^ 'decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf4SomeAt_least'
  -> [ScriptValue] -- ^ 'decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf4SomeFrom'
  -> DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf4Some
mkDecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf4Some decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf4SomeAt_least decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf4SomeFrom = DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf4Some{decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf4SomeAt_least = decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf4SomeAt_least,
                                                                                                                                                                                                                                                                                                                                                                decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf4SomeFrom = decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf4SomeFrom}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.mint.properties.tokens.items.properties.policy_script.oneOf.properties.script.oneOf@ in the specification.
-- 
-- 
data DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf5 = DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf5 {
  -- | active_from: Transaction is only valid starting at the specified slot number (\`≥ active_from\`).
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf5Active_from :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf5
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["active_from" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf5Active_from obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["active_from" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf5Active_from obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf5
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf5" (\obj -> GHC.Base.pure DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf5 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active_from"))
-- | Create a new 'DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf5' with all required fields.
mkDecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf5 :: GHC.Types.Int -- ^ 'decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf5Active_from'
  -> DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf5
mkDecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf5 decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf5Active_from = DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf5{decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf5Active_from = decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf5Active_from}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.mint.properties.tokens.items.properties.policy_script.oneOf.properties.script.oneOf@ in the specification.
-- 
-- 
data DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf6 = DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf6 {
  -- | active_until: Transaction is only valid before the specified slot number (\`\< active_until\`).
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf6Active_until :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf6
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["active_until" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf6Active_until obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["active_until" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf6Active_until obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf6
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf6" (\obj -> GHC.Base.pure DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf6 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active_until"))
-- | Create a new 'DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf6' with all required fields.
mkDecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf6 :: GHC.Types.Int -- ^ 'decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf6Active_until'
  -> DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf6
mkDecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf6 decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf6Active_until = DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf6{decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf6Active_until = decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf6Active_until}
-- | Defines the oneOf schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.mint.properties.tokens.items.properties.policy_script.oneOf.properties.script.oneOf@ in the specification.
-- 
-- 
data DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptVariants =
   DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptVariant1 Data.Text.Internal.Text
  | DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptVariant2 DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf2
  | DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptVariant3 DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf3
  | DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptVariant4 DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf4
  | DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptVariant5 DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf5
  | DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptVariant6 DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptOneOf6
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptVariants
    where toJSON (DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptVariant1 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptVariant2 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptVariant3 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptVariant4 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptVariant5 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptVariant6 a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptVariants
    where parseJSON val = case (DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptVariant1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptVariant2 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptVariant3 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptVariant4 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptVariant5 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1ScriptVariant6 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched"))))) of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.mint.properties.tokens.items.properties.policy_script.oneOf@ in the specification.
-- 
-- 
data DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2 = DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2 {
  -- | reference: A reference input.
  decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Reference :: (GHC.Maybe.Maybe DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Reference)
  -- | script_info
  , decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Script_info :: DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Script_info
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reference" Data.Aeson.Types.ToJSON..=)) (decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Reference obj) : ["script_info" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Script_info obj] : ["script_type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "plutus"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reference" Data.Aeson.Types.ToJSON..=)) (decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Reference obj) : ["script_info" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Script_info obj] : ["script_type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "plutus"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2" (\obj -> (GHC.Base.pure DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "reference")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "script_info"))
-- | Create a new 'DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2' with all required fields.
mkDecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2 :: DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Script_info -- ^ 'decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Script_info'
  -> DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2
mkDecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2 decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Script_info = DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2{decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Reference = GHC.Maybe.Nothing,
                                                                                                                                                                                                                           decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Script_info = decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Script_info}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.mint.properties.tokens.items.properties.policy_script.oneOf.properties.reference@ in the specification.
-- 
-- A reference input.
data DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Reference = DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Reference {
  -- | id: A unique identifier for this transaction
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  -- * Minimum length of 64
  decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2ReferenceId :: Data.Text.Internal.Text
  -- | index
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2ReferenceIndex :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Reference
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["id" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2ReferenceId obj] : ["index" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2ReferenceIndex obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["id" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2ReferenceId obj] : ["index" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2ReferenceIndex obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Reference
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Reference" (\obj -> (GHC.Base.pure DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Reference GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "index"))
-- | Create a new 'DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Reference' with all required fields.
mkDecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Reference :: Data.Text.Internal.Text -- ^ 'decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2ReferenceId'
  -> GHC.Types.Int -- ^ 'decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2ReferenceIndex'
  -> DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Reference
mkDecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Reference decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2ReferenceId decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2ReferenceIndex = DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Reference{decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2ReferenceId = decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2ReferenceId,
                                                                                                                                                                                                                                                                                                                               decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2ReferenceIndex = decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2ReferenceIndex}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.mint.properties.tokens.items.properties.policy_script.oneOf.properties.script_info@ in the specification.
-- 
-- 
data DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Script_info = DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Script_info {
  -- | language_version
  decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Script_infoLanguage_version :: DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Script_infoLanguage_version
  -- | script_hash
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 56
  -- * Minimum length of 56
  , decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Script_infoScript_hash :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Script_info
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["language_version" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Script_infoLanguage_version obj] : ["script_hash" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Script_infoScript_hash obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["language_version" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Script_infoLanguage_version obj] : ["script_hash" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Script_infoScript_hash obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Script_info
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Script_info" (\obj -> (GHC.Base.pure DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Script_info GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "language_version")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "script_hash"))
-- | Create a new 'DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Script_info' with all required fields.
mkDecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Script_info :: DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Script_infoLanguage_version -- ^ 'decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Script_infoLanguage_version'
  -> Data.Text.Internal.Text -- ^ 'decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Script_infoScript_hash'
  -> DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Script_info
mkDecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Script_info decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Script_infoLanguage_version decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Script_infoScript_hash = DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Script_info{decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Script_infoLanguage_version = decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Script_infoLanguage_version,
                                                                                                                                                                                                                                                                                                                                                           decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Script_infoScript_hash = decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Script_infoScript_hash}
-- | Defines the enum schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.mint.properties.tokens.items.properties.policy_script.oneOf.properties.script_info.properties.language_version@ in the specification.
-- 
-- 
data DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Script_infoLanguage_version =
   DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Script_infoLanguage_versionOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Script_infoLanguage_versionTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Script_infoLanguage_versionEnumV1 -- ^ Represents the JSON value @"v1"@
  | DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Script_infoLanguage_versionEnumV2 -- ^ Represents the JSON value @"v2"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Script_infoLanguage_version
    where toJSON (DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Script_infoLanguage_versionOther val) = val
          toJSON (DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Script_infoLanguage_versionTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Script_infoLanguage_versionEnumV1) = "v1"
          toJSON (DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Script_infoLanguage_versionEnumV2) = "v2"
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Script_infoLanguage_version
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "v1" -> DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Script_infoLanguage_versionEnumV1
                                            | val GHC.Classes.== "v2" -> DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Script_infoLanguage_versionEnumV2
                                            | GHC.Base.otherwise -> DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2Script_infoLanguage_versionOther val)
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.mint.properties.tokens.items.properties.policy_script.oneOf@ in the specification.
-- 
-- 
data DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf3 = DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf3 {
  -- | references
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf3References :: ([DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf3References])
  -- | script_hash
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 56
  -- * Minimum length of 56
  , decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf3Script_hash :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf3
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["references" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf3References obj] : ["script_hash" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf3Script_hash obj] : ["script_type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "reference script"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["references" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf3References obj] : ["script_hash" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf3Script_hash obj] : ["script_type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "reference script"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf3
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf3" (\obj -> (GHC.Base.pure DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf3 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "references")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "script_hash"))
-- | Create a new 'DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf3' with all required fields.
mkDecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf3 :: [DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf3References] -- ^ 'decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf3References'
  -> Data.Text.Internal.Text -- ^ 'decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf3Script_hash'
  -> DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf3
mkDecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf3 decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf3References decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf3Script_hash = DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf3{decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf3References = decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf3References,
                                                                                                                                                                                                                                                                                                         decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf3Script_hash = decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf3Script_hash}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.mint.properties.tokens.items.properties.policy_script.oneOf.properties.references.items@ in the specification.
-- 
-- A reference input.
data DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf3References = DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf3References {
  -- | id: A unique identifier for this transaction
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  -- * Minimum length of 64
  decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf3ReferencesId :: Data.Text.Internal.Text
  -- | index
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf3ReferencesIndex :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf3References
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["id" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf3ReferencesId obj] : ["index" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf3ReferencesIndex obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["id" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf3ReferencesId obj] : ["index" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf3ReferencesIndex obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf3References
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf3References" (\obj -> (GHC.Base.pure DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf3References GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "index"))
-- | Create a new 'DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf3References' with all required fields.
mkDecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf3References :: Data.Text.Internal.Text -- ^ 'decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf3ReferencesId'
  -> GHC.Types.Int -- ^ 'decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf3ReferencesIndex'
  -> DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf3References
mkDecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf3References decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf3ReferencesId decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf3ReferencesIndex = DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf3References{decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf3ReferencesId = decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf3ReferencesId,
                                                                                                                                                                                                                                                                                                                                   decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf3ReferencesIndex = decodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf3ReferencesIndex}
-- | Defines the oneOf schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.mint.properties.tokens.items.properties.policy_script.oneOf@ in the specification.
-- 
-- 
data DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptVariants =
   DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptVariant1 DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf1
  | DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptVariant2 DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf2
  | DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptVariant3 DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptOneOf3
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptVariants
    where toJSON (DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptVariant1 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptVariant2 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptVariant3 a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptVariants
    where parseJSON val = case (DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptVariant1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptVariant2 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((DecodeSharedTransactionResponseBody202MintTokensPolicy_scriptVariant3 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched")) of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.outputs.items.oneOf@ in the specification.
-- 
-- A transaction output not belonging to the wallet
data DecodeSharedTransactionResponseBody202OutputsOneOf1 = DecodeSharedTransactionResponseBody202OutputsOneOf1 {
  -- | address: A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
  -- which represents an address on the Cardano blockchain.
  -- Sequences in Base58 encoding are expected to be legacy Byron addresses,
  -- whereas sequences in Bech32 encoding correspond to current Shelley addresses.
  -- 
  -- For more details, see
  -- [CIP-0019 — Cardano addresses](https:\/\/github.com\/cardano-foundation\/CIPs\/tree\/master\/CIP-0019)
  -- .
  decodeSharedTransactionResponseBody202OutputsOneOf1Address :: Data.Text.Internal.Text
  -- | amount: Coins, in Lovelace. Only relates to \'Ada\'. Refer to \`assets\` for multi-assets wallets instead.
  , decodeSharedTransactionResponseBody202OutputsOneOf1Amount :: DecodeSharedTransactionResponseBody202OutputsOneOf1Amount
  -- | assets: A flat list of assets (possibly empty).
  , decodeSharedTransactionResponseBody202OutputsOneOf1Assets :: (GHC.Maybe.Maybe ([DecodeSharedTransactionResponseBody202OutputsOneOf1Assets]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202OutputsOneOf1
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["address" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202OutputsOneOf1Address obj] : ["amount" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202OutputsOneOf1Amount obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("assets" Data.Aeson.Types.ToJSON..=)) (decodeSharedTransactionResponseBody202OutputsOneOf1Assets obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["address" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202OutputsOneOf1Address obj] : ["amount" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202OutputsOneOf1Amount obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("assets" Data.Aeson.Types.ToJSON..=)) (decodeSharedTransactionResponseBody202OutputsOneOf1Assets obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202OutputsOneOf1
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202OutputsOneOf1" (\obj -> ((GHC.Base.pure DecodeSharedTransactionResponseBody202OutputsOneOf1 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "assets"))
-- | Create a new 'DecodeSharedTransactionResponseBody202OutputsOneOf1' with all required fields.
mkDecodeSharedTransactionResponseBody202OutputsOneOf1 :: Data.Text.Internal.Text -- ^ 'decodeSharedTransactionResponseBody202OutputsOneOf1Address'
  -> DecodeSharedTransactionResponseBody202OutputsOneOf1Amount -- ^ 'decodeSharedTransactionResponseBody202OutputsOneOf1Amount'
  -> DecodeSharedTransactionResponseBody202OutputsOneOf1
mkDecodeSharedTransactionResponseBody202OutputsOneOf1 decodeSharedTransactionResponseBody202OutputsOneOf1Address decodeSharedTransactionResponseBody202OutputsOneOf1Amount = DecodeSharedTransactionResponseBody202OutputsOneOf1{decodeSharedTransactionResponseBody202OutputsOneOf1Address = decodeSharedTransactionResponseBody202OutputsOneOf1Address,
                                                                                                                                                                                                                                 decodeSharedTransactionResponseBody202OutputsOneOf1Amount = decodeSharedTransactionResponseBody202OutputsOneOf1Amount,
                                                                                                                                                                                                                                 decodeSharedTransactionResponseBody202OutputsOneOf1Assets = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.outputs.items.oneOf.properties.amount@ in the specification.
-- 
-- Coins, in Lovelace. Only relates to \'Ada\'. Refer to \`assets\` for multi-assets wallets instead.
data DecodeSharedTransactionResponseBody202OutputsOneOf1Amount = DecodeSharedTransactionResponseBody202OutputsOneOf1Amount {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  decodeSharedTransactionResponseBody202OutputsOneOf1AmountQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202OutputsOneOf1Amount
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202OutputsOneOf1AmountQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202OutputsOneOf1AmountQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202OutputsOneOf1Amount
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202OutputsOneOf1Amount" (\obj -> GHC.Base.pure DecodeSharedTransactionResponseBody202OutputsOneOf1Amount GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'DecodeSharedTransactionResponseBody202OutputsOneOf1Amount' with all required fields.
mkDecodeSharedTransactionResponseBody202OutputsOneOf1Amount :: GHC.Types.Int -- ^ 'decodeSharedTransactionResponseBody202OutputsOneOf1AmountQuantity'
  -> DecodeSharedTransactionResponseBody202OutputsOneOf1Amount
mkDecodeSharedTransactionResponseBody202OutputsOneOf1Amount decodeSharedTransactionResponseBody202OutputsOneOf1AmountQuantity = DecodeSharedTransactionResponseBody202OutputsOneOf1Amount{decodeSharedTransactionResponseBody202OutputsOneOf1AmountQuantity = decodeSharedTransactionResponseBody202OutputsOneOf1AmountQuantity}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.outputs.items.oneOf.properties.assets.items@ in the specification.
-- 
-- An asset on the Cardano blockchain. An asset is uniquely identified by
-- its \`policy_id\` and \`asset_name\` (together, these form the _asset id_).
-- 
-- Two assets with the same \`asset_name\` and \`policy_id\` are
-- interchangeable. Yet, different assets with a same \`policy_id\` but
-- different \`asset_name\` are treated as separate assets, as are two
-- assets with the same \`asset_name\` but different \`policy_id\`.
data DecodeSharedTransactionResponseBody202OutputsOneOf1Assets = DecodeSharedTransactionResponseBody202OutputsOneOf1Assets {
  -- | asset_name: The asset on-chain type which acts as a sub-identifier within a
  -- policy. Although we call it \"asset name\", the value needn\'t be
  -- text, and it could even be empty.
  -- 
  -- For policies with a single fungible asset item, asset name is
  -- typically an empty string.
  -- 
  -- This value can be up to 32 bytes of arbitrary data (which is 64
  -- hexadecimal digits).
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  decodeSharedTransactionResponseBody202OutputsOneOf1AssetsAsset_name :: Data.Text.Internal.Text
  -- | policy_id: A unique identifier of the asset\'s monetary policy. The policy
  -- controls how assets of this kind are created and destroyed.
  -- 
  -- The contents are the blake2b-224 hash of the monetary policy
  -- script, encoded in hexadecimal.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 56
  -- * Minimum length of 56
  , decodeSharedTransactionResponseBody202OutputsOneOf1AssetsPolicy_id :: Data.Text.Internal.Text
  -- | quantity: Number of assets for the given \`policy_id\` and \`asset_name\`.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , decodeSharedTransactionResponseBody202OutputsOneOf1AssetsQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202OutputsOneOf1Assets
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["asset_name" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202OutputsOneOf1AssetsAsset_name obj] : ["policy_id" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202OutputsOneOf1AssetsPolicy_id obj] : ["quantity" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202OutputsOneOf1AssetsQuantity obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["asset_name" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202OutputsOneOf1AssetsAsset_name obj] : ["policy_id" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202OutputsOneOf1AssetsPolicy_id obj] : ["quantity" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202OutputsOneOf1AssetsQuantity obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202OutputsOneOf1Assets
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202OutputsOneOf1Assets" (\obj -> ((GHC.Base.pure DecodeSharedTransactionResponseBody202OutputsOneOf1Assets GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "asset_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "policy_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'DecodeSharedTransactionResponseBody202OutputsOneOf1Assets' with all required fields.
mkDecodeSharedTransactionResponseBody202OutputsOneOf1Assets :: Data.Text.Internal.Text -- ^ 'decodeSharedTransactionResponseBody202OutputsOneOf1AssetsAsset_name'
  -> Data.Text.Internal.Text -- ^ 'decodeSharedTransactionResponseBody202OutputsOneOf1AssetsPolicy_id'
  -> GHC.Types.Int -- ^ 'decodeSharedTransactionResponseBody202OutputsOneOf1AssetsQuantity'
  -> DecodeSharedTransactionResponseBody202OutputsOneOf1Assets
mkDecodeSharedTransactionResponseBody202OutputsOneOf1Assets decodeSharedTransactionResponseBody202OutputsOneOf1AssetsAsset_name decodeSharedTransactionResponseBody202OutputsOneOf1AssetsPolicy_id decodeSharedTransactionResponseBody202OutputsOneOf1AssetsQuantity = DecodeSharedTransactionResponseBody202OutputsOneOf1Assets{decodeSharedTransactionResponseBody202OutputsOneOf1AssetsAsset_name = decodeSharedTransactionResponseBody202OutputsOneOf1AssetsAsset_name,
                                                                                                                                                                                                                                                                                                                                 decodeSharedTransactionResponseBody202OutputsOneOf1AssetsPolicy_id = decodeSharedTransactionResponseBody202OutputsOneOf1AssetsPolicy_id,
                                                                                                                                                                                                                                                                                                                                 decodeSharedTransactionResponseBody202OutputsOneOf1AssetsQuantity = decodeSharedTransactionResponseBody202OutputsOneOf1AssetsQuantity}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.outputs.items.oneOf@ in the specification.
-- 
-- A transaction output not belonging to the wallet
data DecodeSharedTransactionResponseBody202OutputsOneOf2 = DecodeSharedTransactionResponseBody202OutputsOneOf2 {
  -- | address: A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
  -- which represents an address on the Cardano blockchain.
  -- Sequences in Base58 encoding are expected to be legacy Byron addresses,
  -- whereas sequences in Bech32 encoding correspond to current Shelley addresses.
  -- 
  -- For more details, see
  -- [CIP-0019 — Cardano addresses](https:\/\/github.com\/cardano-foundation\/CIPs\/tree\/master\/CIP-0019)
  -- .
  decodeSharedTransactionResponseBody202OutputsOneOf2Address :: Data.Text.Internal.Text
  -- | amount: Coins, in Lovelace. Only relates to \'Ada\'. Refer to \`assets\` for multi-assets wallets instead.
  , decodeSharedTransactionResponseBody202OutputsOneOf2Amount :: DecodeSharedTransactionResponseBody202OutputsOneOf2Amount
  -- | assets: A flat list of assets (possibly empty).
  , decodeSharedTransactionResponseBody202OutputsOneOf2Assets :: (GHC.Maybe.Maybe ([DecodeSharedTransactionResponseBody202OutputsOneOf2Assets]))
  -- | derivation_path: A path for deriving a child key from a parent key.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  , decodeSharedTransactionResponseBody202OutputsOneOf2Derivation_path :: ([Data.Text.Internal.Text])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202OutputsOneOf2
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["address" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202OutputsOneOf2Address obj] : ["amount" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202OutputsOneOf2Amount obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("assets" Data.Aeson.Types.ToJSON..=)) (decodeSharedTransactionResponseBody202OutputsOneOf2Assets obj) : ["derivation_path" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202OutputsOneOf2Derivation_path obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["address" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202OutputsOneOf2Address obj] : ["amount" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202OutputsOneOf2Amount obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("assets" Data.Aeson.Types.ToJSON..=)) (decodeSharedTransactionResponseBody202OutputsOneOf2Assets obj) : ["derivation_path" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202OutputsOneOf2Derivation_path obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202OutputsOneOf2
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202OutputsOneOf2" (\obj -> (((GHC.Base.pure DecodeSharedTransactionResponseBody202OutputsOneOf2 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "assets")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "derivation_path"))
-- | Create a new 'DecodeSharedTransactionResponseBody202OutputsOneOf2' with all required fields.
mkDecodeSharedTransactionResponseBody202OutputsOneOf2 :: Data.Text.Internal.Text -- ^ 'decodeSharedTransactionResponseBody202OutputsOneOf2Address'
  -> DecodeSharedTransactionResponseBody202OutputsOneOf2Amount -- ^ 'decodeSharedTransactionResponseBody202OutputsOneOf2Amount'
  -> [Data.Text.Internal.Text] -- ^ 'decodeSharedTransactionResponseBody202OutputsOneOf2Derivation_path'
  -> DecodeSharedTransactionResponseBody202OutputsOneOf2
mkDecodeSharedTransactionResponseBody202OutputsOneOf2 decodeSharedTransactionResponseBody202OutputsOneOf2Address decodeSharedTransactionResponseBody202OutputsOneOf2Amount decodeSharedTransactionResponseBody202OutputsOneOf2Derivation_path = DecodeSharedTransactionResponseBody202OutputsOneOf2{decodeSharedTransactionResponseBody202OutputsOneOf2Address = decodeSharedTransactionResponseBody202OutputsOneOf2Address,
                                                                                                                                                                                                                                                                                                    decodeSharedTransactionResponseBody202OutputsOneOf2Amount = decodeSharedTransactionResponseBody202OutputsOneOf2Amount,
                                                                                                                                                                                                                                                                                                    decodeSharedTransactionResponseBody202OutputsOneOf2Assets = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                                                    decodeSharedTransactionResponseBody202OutputsOneOf2Derivation_path = decodeSharedTransactionResponseBody202OutputsOneOf2Derivation_path}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.outputs.items.oneOf.properties.amount@ in the specification.
-- 
-- Coins, in Lovelace. Only relates to \'Ada\'. Refer to \`assets\` for multi-assets wallets instead.
data DecodeSharedTransactionResponseBody202OutputsOneOf2Amount = DecodeSharedTransactionResponseBody202OutputsOneOf2Amount {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  decodeSharedTransactionResponseBody202OutputsOneOf2AmountQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202OutputsOneOf2Amount
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202OutputsOneOf2AmountQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202OutputsOneOf2AmountQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202OutputsOneOf2Amount
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202OutputsOneOf2Amount" (\obj -> GHC.Base.pure DecodeSharedTransactionResponseBody202OutputsOneOf2Amount GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'DecodeSharedTransactionResponseBody202OutputsOneOf2Amount' with all required fields.
mkDecodeSharedTransactionResponseBody202OutputsOneOf2Amount :: GHC.Types.Int -- ^ 'decodeSharedTransactionResponseBody202OutputsOneOf2AmountQuantity'
  -> DecodeSharedTransactionResponseBody202OutputsOneOf2Amount
mkDecodeSharedTransactionResponseBody202OutputsOneOf2Amount decodeSharedTransactionResponseBody202OutputsOneOf2AmountQuantity = DecodeSharedTransactionResponseBody202OutputsOneOf2Amount{decodeSharedTransactionResponseBody202OutputsOneOf2AmountQuantity = decodeSharedTransactionResponseBody202OutputsOneOf2AmountQuantity}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.outputs.items.oneOf.properties.assets.items@ in the specification.
-- 
-- An asset on the Cardano blockchain. An asset is uniquely identified by
-- its \`policy_id\` and \`asset_name\` (together, these form the _asset id_).
-- 
-- Two assets with the same \`asset_name\` and \`policy_id\` are
-- interchangeable. Yet, different assets with a same \`policy_id\` but
-- different \`asset_name\` are treated as separate assets, as are two
-- assets with the same \`asset_name\` but different \`policy_id\`.
data DecodeSharedTransactionResponseBody202OutputsOneOf2Assets = DecodeSharedTransactionResponseBody202OutputsOneOf2Assets {
  -- | asset_name: The asset on-chain type which acts as a sub-identifier within a
  -- policy. Although we call it \"asset name\", the value needn\'t be
  -- text, and it could even be empty.
  -- 
  -- For policies with a single fungible asset item, asset name is
  -- typically an empty string.
  -- 
  -- This value can be up to 32 bytes of arbitrary data (which is 64
  -- hexadecimal digits).
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  decodeSharedTransactionResponseBody202OutputsOneOf2AssetsAsset_name :: Data.Text.Internal.Text
  -- | policy_id: A unique identifier of the asset\'s monetary policy. The policy
  -- controls how assets of this kind are created and destroyed.
  -- 
  -- The contents are the blake2b-224 hash of the monetary policy
  -- script, encoded in hexadecimal.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 56
  -- * Minimum length of 56
  , decodeSharedTransactionResponseBody202OutputsOneOf2AssetsPolicy_id :: Data.Text.Internal.Text
  -- | quantity: Number of assets for the given \`policy_id\` and \`asset_name\`.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , decodeSharedTransactionResponseBody202OutputsOneOf2AssetsQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202OutputsOneOf2Assets
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["asset_name" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202OutputsOneOf2AssetsAsset_name obj] : ["policy_id" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202OutputsOneOf2AssetsPolicy_id obj] : ["quantity" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202OutputsOneOf2AssetsQuantity obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["asset_name" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202OutputsOneOf2AssetsAsset_name obj] : ["policy_id" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202OutputsOneOf2AssetsPolicy_id obj] : ["quantity" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202OutputsOneOf2AssetsQuantity obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202OutputsOneOf2Assets
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202OutputsOneOf2Assets" (\obj -> ((GHC.Base.pure DecodeSharedTransactionResponseBody202OutputsOneOf2Assets GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "asset_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "policy_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'DecodeSharedTransactionResponseBody202OutputsOneOf2Assets' with all required fields.
mkDecodeSharedTransactionResponseBody202OutputsOneOf2Assets :: Data.Text.Internal.Text -- ^ 'decodeSharedTransactionResponseBody202OutputsOneOf2AssetsAsset_name'
  -> Data.Text.Internal.Text -- ^ 'decodeSharedTransactionResponseBody202OutputsOneOf2AssetsPolicy_id'
  -> GHC.Types.Int -- ^ 'decodeSharedTransactionResponseBody202OutputsOneOf2AssetsQuantity'
  -> DecodeSharedTransactionResponseBody202OutputsOneOf2Assets
mkDecodeSharedTransactionResponseBody202OutputsOneOf2Assets decodeSharedTransactionResponseBody202OutputsOneOf2AssetsAsset_name decodeSharedTransactionResponseBody202OutputsOneOf2AssetsPolicy_id decodeSharedTransactionResponseBody202OutputsOneOf2AssetsQuantity = DecodeSharedTransactionResponseBody202OutputsOneOf2Assets{decodeSharedTransactionResponseBody202OutputsOneOf2AssetsAsset_name = decodeSharedTransactionResponseBody202OutputsOneOf2AssetsAsset_name,
                                                                                                                                                                                                                                                                                                                                 decodeSharedTransactionResponseBody202OutputsOneOf2AssetsPolicy_id = decodeSharedTransactionResponseBody202OutputsOneOf2AssetsPolicy_id,
                                                                                                                                                                                                                                                                                                                                 decodeSharedTransactionResponseBody202OutputsOneOf2AssetsQuantity = decodeSharedTransactionResponseBody202OutputsOneOf2AssetsQuantity}
-- | Defines the oneOf schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.outputs.items.oneOf@ in the specification.
-- 
-- 
data DecodeSharedTransactionResponseBody202OutputsVariants =
   DecodeSharedTransactionResponseBody202OutputsVariant1 DecodeSharedTransactionResponseBody202OutputsOneOf1
  | DecodeSharedTransactionResponseBody202OutputsVariant2 DecodeSharedTransactionResponseBody202OutputsOneOf2
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202OutputsVariants
    where toJSON (DecodeSharedTransactionResponseBody202OutputsVariant1 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (DecodeSharedTransactionResponseBody202OutputsVariant2 a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202OutputsVariants
    where parseJSON val = case (DecodeSharedTransactionResponseBody202OutputsVariant1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((DecodeSharedTransactionResponseBody202OutputsVariant2 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the enum schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.script_validity@ in the specification.
-- 
-- Indicates whether the phase-2 monetary policy script (e.g. Plutus script)
-- used in the transaction validated or not. Validity may be null if this
-- transaction was from an era that doesn\'t support phase-2 monetary policy
-- scripts, or is a pending transaction (we don\'t know if validation passed or
-- failed until the transaction hits the ledger).
data DecodeSharedTransactionResponseBody202Script_validityNonNullable =
   DecodeSharedTransactionResponseBody202Script_validityNonNullableOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | DecodeSharedTransactionResponseBody202Script_validityNonNullableTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | DecodeSharedTransactionResponseBody202Script_validityNonNullableEnumValid -- ^ Represents the JSON value @"valid"@
  | DecodeSharedTransactionResponseBody202Script_validityNonNullableEnumInvalid -- ^ Represents the JSON value @"invalid"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202Script_validityNonNullable
    where toJSON (DecodeSharedTransactionResponseBody202Script_validityNonNullableOther val) = val
          toJSON (DecodeSharedTransactionResponseBody202Script_validityNonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (DecodeSharedTransactionResponseBody202Script_validityNonNullableEnumValid) = "valid"
          toJSON (DecodeSharedTransactionResponseBody202Script_validityNonNullableEnumInvalid) = "invalid"
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202Script_validityNonNullable
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "valid" -> DecodeSharedTransactionResponseBody202Script_validityNonNullableEnumValid
                                            | val GHC.Classes.== "invalid" -> DecodeSharedTransactionResponseBody202Script_validityNonNullableEnumInvalid
                                            | GHC.Base.otherwise -> DecodeSharedTransactionResponseBody202Script_validityNonNullableOther val)
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.validity_interval@ in the specification.
-- 
-- 
data DecodeSharedTransactionResponseBody202Validity_interval = DecodeSharedTransactionResponseBody202Validity_interval {
  -- | invalid_before
  decodeSharedTransactionResponseBody202Validity_intervalInvalid_before :: DecodeSharedTransactionResponseBody202Validity_intervalInvalid_before
  -- | invalid_hereafter
  , decodeSharedTransactionResponseBody202Validity_intervalInvalid_hereafter :: DecodeSharedTransactionResponseBody202Validity_intervalInvalid_hereafter
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202Validity_interval
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["invalid_before" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Validity_intervalInvalid_before obj] : ["invalid_hereafter" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Validity_intervalInvalid_hereafter obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["invalid_before" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Validity_intervalInvalid_before obj] : ["invalid_hereafter" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Validity_intervalInvalid_hereafter obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202Validity_interval
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202Validity_interval" (\obj -> (GHC.Base.pure DecodeSharedTransactionResponseBody202Validity_interval GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "invalid_before")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "invalid_hereafter"))
-- | Create a new 'DecodeSharedTransactionResponseBody202Validity_interval' with all required fields.
mkDecodeSharedTransactionResponseBody202Validity_interval :: DecodeSharedTransactionResponseBody202Validity_intervalInvalid_before -- ^ 'decodeSharedTransactionResponseBody202Validity_intervalInvalid_before'
  -> DecodeSharedTransactionResponseBody202Validity_intervalInvalid_hereafter -- ^ 'decodeSharedTransactionResponseBody202Validity_intervalInvalid_hereafter'
  -> DecodeSharedTransactionResponseBody202Validity_interval
mkDecodeSharedTransactionResponseBody202Validity_interval decodeSharedTransactionResponseBody202Validity_intervalInvalid_before decodeSharedTransactionResponseBody202Validity_intervalInvalid_hereafter = DecodeSharedTransactionResponseBody202Validity_interval{decodeSharedTransactionResponseBody202Validity_intervalInvalid_before = decodeSharedTransactionResponseBody202Validity_intervalInvalid_before,
                                                                                                                                                                                                                                                                   decodeSharedTransactionResponseBody202Validity_intervalInvalid_hereafter = decodeSharedTransactionResponseBody202Validity_intervalInvalid_hereafter}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.validity_interval.properties.invalid_before@ in the specification.
-- 
-- 
data DecodeSharedTransactionResponseBody202Validity_intervalInvalid_before = DecodeSharedTransactionResponseBody202Validity_intervalInvalid_before {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  decodeSharedTransactionResponseBody202Validity_intervalInvalid_beforeQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202Validity_intervalInvalid_before
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Validity_intervalInvalid_beforeQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "slot"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Validity_intervalInvalid_beforeQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "slot"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202Validity_intervalInvalid_before
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202Validity_intervalInvalid_before" (\obj -> GHC.Base.pure DecodeSharedTransactionResponseBody202Validity_intervalInvalid_before GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'DecodeSharedTransactionResponseBody202Validity_intervalInvalid_before' with all required fields.
mkDecodeSharedTransactionResponseBody202Validity_intervalInvalid_before :: GHC.Types.Int -- ^ 'decodeSharedTransactionResponseBody202Validity_intervalInvalid_beforeQuantity'
  -> DecodeSharedTransactionResponseBody202Validity_intervalInvalid_before
mkDecodeSharedTransactionResponseBody202Validity_intervalInvalid_before decodeSharedTransactionResponseBody202Validity_intervalInvalid_beforeQuantity = DecodeSharedTransactionResponseBody202Validity_intervalInvalid_before{decodeSharedTransactionResponseBody202Validity_intervalInvalid_beforeQuantity = decodeSharedTransactionResponseBody202Validity_intervalInvalid_beforeQuantity}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.validity_interval.properties.invalid_hereafter@ in the specification.
-- 
-- 
data DecodeSharedTransactionResponseBody202Validity_intervalInvalid_hereafter = DecodeSharedTransactionResponseBody202Validity_intervalInvalid_hereafter {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  decodeSharedTransactionResponseBody202Validity_intervalInvalid_hereafterQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202Validity_intervalInvalid_hereafter
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Validity_intervalInvalid_hereafterQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "slot"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Validity_intervalInvalid_hereafterQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "slot"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202Validity_intervalInvalid_hereafter
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202Validity_intervalInvalid_hereafter" (\obj -> GHC.Base.pure DecodeSharedTransactionResponseBody202Validity_intervalInvalid_hereafter GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'DecodeSharedTransactionResponseBody202Validity_intervalInvalid_hereafter' with all required fields.
mkDecodeSharedTransactionResponseBody202Validity_intervalInvalid_hereafter :: GHC.Types.Int -- ^ 'decodeSharedTransactionResponseBody202Validity_intervalInvalid_hereafterQuantity'
  -> DecodeSharedTransactionResponseBody202Validity_intervalInvalid_hereafter
mkDecodeSharedTransactionResponseBody202Validity_intervalInvalid_hereafter decodeSharedTransactionResponseBody202Validity_intervalInvalid_hereafterQuantity = DecodeSharedTransactionResponseBody202Validity_intervalInvalid_hereafter{decodeSharedTransactionResponseBody202Validity_intervalInvalid_hereafterQuantity = decodeSharedTransactionResponseBody202Validity_intervalInvalid_hereafterQuantity}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.withdrawals.items@ in the specification.
-- 
-- 
data DecodeSharedTransactionResponseBody202Withdrawals = DecodeSharedTransactionResponseBody202Withdrawals {
  -- | amount: Coins, in Lovelace. Only relates to \'Ada\'. Refer to \`assets\` for multi-assets wallets instead.
  decodeSharedTransactionResponseBody202WithdrawalsAmount :: DecodeSharedTransactionResponseBody202WithdrawalsAmount
  -- | context: Used when withdrawal or output is ours.
  , decodeSharedTransactionResponseBody202WithdrawalsContext :: (GHC.Maybe.Maybe DecodeSharedTransactionResponseBody202WithdrawalsContext)
  -- | stake_address
  , decodeSharedTransactionResponseBody202WithdrawalsStake_address :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202Withdrawals
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202WithdrawalsAmount obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("context" Data.Aeson.Types.ToJSON..=)) (decodeSharedTransactionResponseBody202WithdrawalsContext obj) : ["stake_address" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202WithdrawalsStake_address obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202WithdrawalsAmount obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("context" Data.Aeson.Types.ToJSON..=)) (decodeSharedTransactionResponseBody202WithdrawalsContext obj) : ["stake_address" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202WithdrawalsStake_address obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202Withdrawals
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202Withdrawals" (\obj -> ((GHC.Base.pure DecodeSharedTransactionResponseBody202Withdrawals GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "context")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "stake_address"))
-- | Create a new 'DecodeSharedTransactionResponseBody202Withdrawals' with all required fields.
mkDecodeSharedTransactionResponseBody202Withdrawals :: DecodeSharedTransactionResponseBody202WithdrawalsAmount -- ^ 'decodeSharedTransactionResponseBody202WithdrawalsAmount'
  -> Data.Text.Internal.Text -- ^ 'decodeSharedTransactionResponseBody202WithdrawalsStake_address'
  -> DecodeSharedTransactionResponseBody202Withdrawals
mkDecodeSharedTransactionResponseBody202Withdrawals decodeSharedTransactionResponseBody202WithdrawalsAmount decodeSharedTransactionResponseBody202WithdrawalsStake_address = DecodeSharedTransactionResponseBody202Withdrawals{decodeSharedTransactionResponseBody202WithdrawalsAmount = decodeSharedTransactionResponseBody202WithdrawalsAmount,
                                                                                                                                                                                                                               decodeSharedTransactionResponseBody202WithdrawalsContext = GHC.Maybe.Nothing,
                                                                                                                                                                                                                               decodeSharedTransactionResponseBody202WithdrawalsStake_address = decodeSharedTransactionResponseBody202WithdrawalsStake_address}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.withdrawals.items.properties.amount@ in the specification.
-- 
-- Coins, in Lovelace. Only relates to \'Ada\'. Refer to \`assets\` for multi-assets wallets instead.
data DecodeSharedTransactionResponseBody202WithdrawalsAmount = DecodeSharedTransactionResponseBody202WithdrawalsAmount {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  decodeSharedTransactionResponseBody202WithdrawalsAmountQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202WithdrawalsAmount
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202WithdrawalsAmountQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202WithdrawalsAmountQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202WithdrawalsAmount
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202WithdrawalsAmount" (\obj -> GHC.Base.pure DecodeSharedTransactionResponseBody202WithdrawalsAmount GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'DecodeSharedTransactionResponseBody202WithdrawalsAmount' with all required fields.
mkDecodeSharedTransactionResponseBody202WithdrawalsAmount :: GHC.Types.Int -- ^ 'decodeSharedTransactionResponseBody202WithdrawalsAmountQuantity'
  -> DecodeSharedTransactionResponseBody202WithdrawalsAmount
mkDecodeSharedTransactionResponseBody202WithdrawalsAmount decodeSharedTransactionResponseBody202WithdrawalsAmountQuantity = DecodeSharedTransactionResponseBody202WithdrawalsAmount{decodeSharedTransactionResponseBody202WithdrawalsAmountQuantity = decodeSharedTransactionResponseBody202WithdrawalsAmountQuantity}
-- | Defines the enum schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.withdrawals.items.properties.context@ in the specification.
-- 
-- Used when withdrawal or output is ours.
data DecodeSharedTransactionResponseBody202WithdrawalsContext =
   DecodeSharedTransactionResponseBody202WithdrawalsContextOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | DecodeSharedTransactionResponseBody202WithdrawalsContextTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | DecodeSharedTransactionResponseBody202WithdrawalsContextEnumOurs -- ^ Represents the JSON value @"ours"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202WithdrawalsContext
    where toJSON (DecodeSharedTransactionResponseBody202WithdrawalsContextOther val) = val
          toJSON (DecodeSharedTransactionResponseBody202WithdrawalsContextTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (DecodeSharedTransactionResponseBody202WithdrawalsContextEnumOurs) = "ours"
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202WithdrawalsContext
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "ours" -> DecodeSharedTransactionResponseBody202WithdrawalsContextEnumOurs
                                            | GHC.Base.otherwise -> DecodeSharedTransactionResponseBody202WithdrawalsContextOther val)
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.witness_count@ in the specification.
-- 
-- Specifies the number of verification key and bootstrap wintesses.
-- As scripts act as witnesses they are also included. Scripts can be specified
-- and spent in a given transaction or defined to be consumed later.
-- In the latter case they are defined in transaction outputs (feature possible from Babbage era)
-- in one transaction and referenced in other later transaction(s). The script referencing
-- is realized via including of reference in a reference input. If reference script
-- is present here it included the form of the script and reference to be used later,
-- ie. tx id and index of tx out where the script was included.
data DecodeSharedTransactionResponseBody202Witness_count = DecodeSharedTransactionResponseBody202Witness_count {
  -- | bootstrap: The number of witnesses detected
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 127.0
  -- * Minimum  of 0.0
  decodeSharedTransactionResponseBody202Witness_countBootstrap :: GHC.Types.Int
  -- | scripts
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 0 items
  , decodeSharedTransactionResponseBody202Witness_countScripts :: ([DecodeSharedTransactionResponseBody202Witness_countScriptsVariants])
  -- | verification_key: The number of witnesses detected
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 127.0
  -- * Minimum  of 0.0
  , decodeSharedTransactionResponseBody202Witness_countVerification_key :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202Witness_count
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["bootstrap" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Witness_countBootstrap obj] : ["scripts" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Witness_countScripts obj] : ["verification_key" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Witness_countVerification_key obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["bootstrap" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Witness_countBootstrap obj] : ["scripts" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Witness_countScripts obj] : ["verification_key" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Witness_countVerification_key obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202Witness_count
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202Witness_count" (\obj -> ((GHC.Base.pure DecodeSharedTransactionResponseBody202Witness_count GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "bootstrap")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "scripts")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verification_key"))
-- | Create a new 'DecodeSharedTransactionResponseBody202Witness_count' with all required fields.
mkDecodeSharedTransactionResponseBody202Witness_count :: GHC.Types.Int -- ^ 'decodeSharedTransactionResponseBody202Witness_countBootstrap'
  -> [DecodeSharedTransactionResponseBody202Witness_countScriptsVariants] -- ^ 'decodeSharedTransactionResponseBody202Witness_countScripts'
  -> GHC.Types.Int -- ^ 'decodeSharedTransactionResponseBody202Witness_countVerification_key'
  -> DecodeSharedTransactionResponseBody202Witness_count
mkDecodeSharedTransactionResponseBody202Witness_count decodeSharedTransactionResponseBody202Witness_countBootstrap decodeSharedTransactionResponseBody202Witness_countScripts decodeSharedTransactionResponseBody202Witness_countVerification_key = DecodeSharedTransactionResponseBody202Witness_count{decodeSharedTransactionResponseBody202Witness_countBootstrap = decodeSharedTransactionResponseBody202Witness_countBootstrap,
                                                                                                                                                                                                                                                                                                        decodeSharedTransactionResponseBody202Witness_countScripts = decodeSharedTransactionResponseBody202Witness_countScripts,
                                                                                                                                                                                                                                                                                                        decodeSharedTransactionResponseBody202Witness_countVerification_key = decodeSharedTransactionResponseBody202Witness_countVerification_key}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.witness_count.properties.scripts.items.oneOf@ in the specification.
-- 
-- 
data DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1 = DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1 {
  -- | reference: A reference input.
  decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1Reference :: (GHC.Maybe.Maybe DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1Reference)
  -- | script
  , decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1Script :: DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptVariants
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reference" Data.Aeson.Types.ToJSON..=)) (decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1Reference obj) : ["script" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1Script obj] : ["script_type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "native"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reference" Data.Aeson.Types.ToJSON..=)) (decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1Reference obj) : ["script" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1Script obj] : ["script_type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "native"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1" (\obj -> (GHC.Base.pure DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "reference")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "script"))
-- | Create a new 'DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1' with all required fields.
mkDecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1 :: DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptVariants -- ^ 'decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1Script'
  -> DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1
mkDecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1 decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1Script = DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1{decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1Reference = GHC.Maybe.Nothing,
                                                                                                                                                                                                             decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1Script = decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1Script}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.witness_count.properties.scripts.items.oneOf.properties.reference@ in the specification.
-- 
-- A reference input.
data DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1Reference = DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1Reference {
  -- | id: A unique identifier for this transaction
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  -- * Minimum length of 64
  decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ReferenceId :: Data.Text.Internal.Text
  -- | index
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ReferenceIndex :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1Reference
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["id" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ReferenceId obj] : ["index" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ReferenceIndex obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["id" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ReferenceId obj] : ["index" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ReferenceIndex obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1Reference
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1Reference" (\obj -> (GHC.Base.pure DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1Reference GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "index"))
-- | Create a new 'DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1Reference' with all required fields.
mkDecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1Reference :: Data.Text.Internal.Text -- ^ 'decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ReferenceId'
  -> GHC.Types.Int -- ^ 'decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ReferenceIndex'
  -> DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1Reference
mkDecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1Reference decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ReferenceId decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ReferenceIndex = DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1Reference{decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ReferenceId = decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ReferenceId,
                                                                                                                                                                                                                                                                                                                   decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ReferenceIndex = decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ReferenceIndex}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.witness_count.properties.scripts.items.oneOf.properties.script.oneOf@ in the specification.
-- 
-- 
data DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf2 = DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf2 {
  -- | all: Script primitive for which all signing keys corresponding to all list elements\' verification keys are expected to make the script valid.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf2All :: ([ScriptValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf2
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["all" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf2All obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["all" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf2All obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf2
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf2" (\obj -> GHC.Base.pure DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf2 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "all"))
-- | Create a new 'DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf2' with all required fields.
mkDecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf2 :: [ScriptValue] -- ^ 'decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf2All'
  -> DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf2
mkDecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf2 decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf2All = DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf2{decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf2All = decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf2All}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.witness_count.properties.scripts.items.oneOf.properties.script.oneOf@ in the specification.
-- 
-- 
data DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf3 = DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf3 {
  -- | any: Script primitive for which a signing key corresponding to any of the list elements\' verification keys is expected to make the script valid. It is equivalent to \`some\` with \`\"at_least\"=1\`.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf3Any :: ([ScriptValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf3
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["any" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf3Any obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["any" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf3Any obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf3
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf3" (\obj -> GHC.Base.pure DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf3 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "any"))
-- | Create a new 'DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf3' with all required fields.
mkDecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf3 :: [ScriptValue] -- ^ 'decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf3Any'
  -> DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf3
mkDecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf3 decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf3Any = DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf3{decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf3Any = decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf3Any}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.witness_count.properties.scripts.items.oneOf.properties.script.oneOf@ in the specification.
-- 
-- 
data DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf4 = DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf4 {
  -- | some: Script primitive for which at least a given number of signing keys corresponding to the list elements\' verification keys are expected to make the script valid.
  decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf4Some :: DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf4Some
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf4
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["some" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf4Some obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["some" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf4Some obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf4
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf4" (\obj -> GHC.Base.pure DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf4 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "some"))
-- | Create a new 'DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf4' with all required fields.
mkDecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf4 :: DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf4Some -- ^ 'decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf4Some'
  -> DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf4
mkDecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf4 decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf4Some = DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf4{decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf4Some = decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf4Some}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.witness_count.properties.scripts.items.oneOf.properties.script.oneOf.properties.some@ in the specification.
-- 
-- Script primitive for which at least a given number of signing keys corresponding to the list elements\' verification keys are expected to make the script valid.
data DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf4Some = DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf4Some {
  -- | at_least
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 255.0
  -- * Minimum  of 1.0
  decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf4SomeAt_least :: GHC.Types.Int
  -- | from
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  , decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf4SomeFrom :: ([ScriptValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf4Some
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["at_least" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf4SomeAt_least obj] : ["from" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf4SomeFrom obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["at_least" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf4SomeAt_least obj] : ["from" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf4SomeFrom obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf4Some
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf4Some" (\obj -> (GHC.Base.pure DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf4Some GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "at_least")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "from"))
-- | Create a new 'DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf4Some' with all required fields.
mkDecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf4Some :: GHC.Types.Int -- ^ 'decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf4SomeAt_least'
  -> [ScriptValue] -- ^ 'decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf4SomeFrom'
  -> DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf4Some
mkDecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf4Some decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf4SomeAt_least decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf4SomeFrom = DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf4Some{decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf4SomeAt_least = decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf4SomeAt_least,
                                                                                                                                                                                                                                                                                                                                                    decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf4SomeFrom = decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf4SomeFrom}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.witness_count.properties.scripts.items.oneOf.properties.script.oneOf@ in the specification.
-- 
-- 
data DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf5 = DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf5 {
  -- | active_from: Transaction is only valid starting at the specified slot number (\`≥ active_from\`).
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf5Active_from :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf5
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["active_from" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf5Active_from obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["active_from" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf5Active_from obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf5
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf5" (\obj -> GHC.Base.pure DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf5 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active_from"))
-- | Create a new 'DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf5' with all required fields.
mkDecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf5 :: GHC.Types.Int -- ^ 'decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf5Active_from'
  -> DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf5
mkDecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf5 decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf5Active_from = DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf5{decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf5Active_from = decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf5Active_from}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.witness_count.properties.scripts.items.oneOf.properties.script.oneOf@ in the specification.
-- 
-- 
data DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf6 = DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf6 {
  -- | active_until: Transaction is only valid before the specified slot number (\`\< active_until\`).
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf6Active_until :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf6
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["active_until" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf6Active_until obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["active_until" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf6Active_until obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf6
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf6" (\obj -> GHC.Base.pure DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf6 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active_until"))
-- | Create a new 'DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf6' with all required fields.
mkDecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf6 :: GHC.Types.Int -- ^ 'decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf6Active_until'
  -> DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf6
mkDecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf6 decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf6Active_until = DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf6{decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf6Active_until = decodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf6Active_until}
-- | Defines the oneOf schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.witness_count.properties.scripts.items.oneOf.properties.script.oneOf@ in the specification.
-- 
-- 
data DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptVariants =
   DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptVariant1 Data.Text.Internal.Text
  | DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptVariant2 DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf2
  | DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptVariant3 DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf3
  | DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptVariant4 DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf4
  | DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptVariant5 DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf5
  | DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptVariant6 DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptOneOf6
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptVariants
    where toJSON (DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptVariant1 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptVariant2 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptVariant3 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptVariant4 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptVariant5 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptVariant6 a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptVariants
    where parseJSON val = case (DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptVariant1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptVariant2 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptVariant3 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptVariant4 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptVariant5 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1ScriptVariant6 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched"))))) of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.witness_count.properties.scripts.items.oneOf@ in the specification.
-- 
-- 
data DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf2 = DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf2 {
  -- | reference: A reference input.
  decodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Reference :: (GHC.Maybe.Maybe DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Reference)
  -- | script_info
  , decodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Script_info :: DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Script_info
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf2
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reference" Data.Aeson.Types.ToJSON..=)) (decodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Reference obj) : ["script_info" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Script_info obj] : ["script_type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "plutus"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reference" Data.Aeson.Types.ToJSON..=)) (decodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Reference obj) : ["script_info" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Script_info obj] : ["script_type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "plutus"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf2
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf2" (\obj -> (GHC.Base.pure DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf2 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "reference")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "script_info"))
-- | Create a new 'DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf2' with all required fields.
mkDecodeSharedTransactionResponseBody202Witness_countScriptsOneOf2 :: DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Script_info -- ^ 'decodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Script_info'
  -> DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf2
mkDecodeSharedTransactionResponseBody202Witness_countScriptsOneOf2 decodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Script_info = DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf2{decodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Reference = GHC.Maybe.Nothing,
                                                                                                                                                                                                                  decodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Script_info = decodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Script_info}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.witness_count.properties.scripts.items.oneOf.properties.reference@ in the specification.
-- 
-- A reference input.
data DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Reference = DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Reference {
  -- | id: A unique identifier for this transaction
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  -- * Minimum length of 64
  decodeSharedTransactionResponseBody202Witness_countScriptsOneOf2ReferenceId :: Data.Text.Internal.Text
  -- | index
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , decodeSharedTransactionResponseBody202Witness_countScriptsOneOf2ReferenceIndex :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Reference
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["id" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Witness_countScriptsOneOf2ReferenceId obj] : ["index" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Witness_countScriptsOneOf2ReferenceIndex obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["id" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Witness_countScriptsOneOf2ReferenceId obj] : ["index" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Witness_countScriptsOneOf2ReferenceIndex obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Reference
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Reference" (\obj -> (GHC.Base.pure DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Reference GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "index"))
-- | Create a new 'DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Reference' with all required fields.
mkDecodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Reference :: Data.Text.Internal.Text -- ^ 'decodeSharedTransactionResponseBody202Witness_countScriptsOneOf2ReferenceId'
  -> GHC.Types.Int -- ^ 'decodeSharedTransactionResponseBody202Witness_countScriptsOneOf2ReferenceIndex'
  -> DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Reference
mkDecodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Reference decodeSharedTransactionResponseBody202Witness_countScriptsOneOf2ReferenceId decodeSharedTransactionResponseBody202Witness_countScriptsOneOf2ReferenceIndex = DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Reference{decodeSharedTransactionResponseBody202Witness_countScriptsOneOf2ReferenceId = decodeSharedTransactionResponseBody202Witness_countScriptsOneOf2ReferenceId,
                                                                                                                                                                                                                                                                                                                   decodeSharedTransactionResponseBody202Witness_countScriptsOneOf2ReferenceIndex = decodeSharedTransactionResponseBody202Witness_countScriptsOneOf2ReferenceIndex}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.witness_count.properties.scripts.items.oneOf.properties.script_info@ in the specification.
-- 
-- 
data DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Script_info = DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Script_info {
  -- | language_version
  decodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Script_infoLanguage_version :: DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Script_infoLanguage_version
  -- | script_hash
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 56
  -- * Minimum length of 56
  , decodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Script_infoScript_hash :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Script_info
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["language_version" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Script_infoLanguage_version obj] : ["script_hash" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Script_infoScript_hash obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["language_version" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Script_infoLanguage_version obj] : ["script_hash" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Script_infoScript_hash obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Script_info
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Script_info" (\obj -> (GHC.Base.pure DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Script_info GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "language_version")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "script_hash"))
-- | Create a new 'DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Script_info' with all required fields.
mkDecodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Script_info :: DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Script_infoLanguage_version -- ^ 'decodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Script_infoLanguage_version'
  -> Data.Text.Internal.Text -- ^ 'decodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Script_infoScript_hash'
  -> DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Script_info
mkDecodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Script_info decodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Script_infoLanguage_version decodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Script_infoScript_hash = DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Script_info{decodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Script_infoLanguage_version = decodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Script_infoLanguage_version,
                                                                                                                                                                                                                                                                                                                                               decodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Script_infoScript_hash = decodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Script_infoScript_hash}
-- | Defines the enum schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.witness_count.properties.scripts.items.oneOf.properties.script_info.properties.language_version@ in the specification.
-- 
-- 
data DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Script_infoLanguage_version =
   DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Script_infoLanguage_versionOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Script_infoLanguage_versionTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Script_infoLanguage_versionEnumV1 -- ^ Represents the JSON value @"v1"@
  | DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Script_infoLanguage_versionEnumV2 -- ^ Represents the JSON value @"v2"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Script_infoLanguage_version
    where toJSON (DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Script_infoLanguage_versionOther val) = val
          toJSON (DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Script_infoLanguage_versionTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Script_infoLanguage_versionEnumV1) = "v1"
          toJSON (DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Script_infoLanguage_versionEnumV2) = "v2"
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Script_infoLanguage_version
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "v1" -> DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Script_infoLanguage_versionEnumV1
                                            | val GHC.Classes.== "v2" -> DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Script_infoLanguage_versionEnumV2
                                            | GHC.Base.otherwise -> DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf2Script_infoLanguage_versionOther val)
-- | Defines the oneOf schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.202.content.application\/json.schema.properties.witness_count.properties.scripts.items.oneOf@ in the specification.
-- 
-- 
data DecodeSharedTransactionResponseBody202Witness_countScriptsVariants =
   DecodeSharedTransactionResponseBody202Witness_countScriptsVariant1 DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf1
  | DecodeSharedTransactionResponseBody202Witness_countScriptsVariant2 DecodeSharedTransactionResponseBody202Witness_countScriptsOneOf2
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody202Witness_countScriptsVariants
    where toJSON (DecodeSharedTransactionResponseBody202Witness_countScriptsVariant1 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (DecodeSharedTransactionResponseBody202Witness_countScriptsVariant2 a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody202Witness_countScriptsVariants
    where parseJSON val = case (DecodeSharedTransactionResponseBody202Witness_countScriptsVariant1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((DecodeSharedTransactionResponseBody202Witness_countScriptsVariant2 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.400.content.application\/json.schema@ in the specification.
-- 
-- 
data DecodeSharedTransactionResponseBody400 = DecodeSharedTransactionResponseBody400 {
  -- | message: May occur when a request is not well-formed; that is, it fails to parse
  -- successfully. This could be the case when some required parameters
  -- are missing or, when malformed values are provided.
  decodeSharedTransactionResponseBody400Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody400Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "bad_request"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody400Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "bad_request"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody400" (\obj -> GHC.Base.pure DecodeSharedTransactionResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'DecodeSharedTransactionResponseBody400' with all required fields.
mkDecodeSharedTransactionResponseBody400 :: Data.Text.Internal.Text -- ^ 'decodeSharedTransactionResponseBody400Message'
  -> DecodeSharedTransactionResponseBody400
mkDecodeSharedTransactionResponseBody400 decodeSharedTransactionResponseBody400Message = DecodeSharedTransactionResponseBody400{decodeSharedTransactionResponseBody400Message = decodeSharedTransactionResponseBody400Message}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.404.content.application\/json.schema@ in the specification.
-- 
-- 
data DecodeSharedTransactionResponseBody404 = DecodeSharedTransactionResponseBody404 {
  -- | message: May occur when a given walletId does not match with any known
  -- wallets (because it has been deleted, or has never existed).
  decodeSharedTransactionResponseBody404Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody404Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "no_such_wallet"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody404Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "no_such_wallet"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody404" (\obj -> GHC.Base.pure DecodeSharedTransactionResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'DecodeSharedTransactionResponseBody404' with all required fields.
mkDecodeSharedTransactionResponseBody404 :: Data.Text.Internal.Text -- ^ 'decodeSharedTransactionResponseBody404Message'
  -> DecodeSharedTransactionResponseBody404
mkDecodeSharedTransactionResponseBody404 decodeSharedTransactionResponseBody404Message = DecodeSharedTransactionResponseBody404{decodeSharedTransactionResponseBody404Message = decodeSharedTransactionResponseBody404Message}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.406.content.application\/json.schema@ in the specification.
-- 
-- 
data DecodeSharedTransactionResponseBody406 = DecodeSharedTransactionResponseBody406 {
  -- | message: May occur when providing an invalid \'Accept\' header.
  decodeSharedTransactionResponseBody406Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody406
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody406Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "not_acceptable"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody406Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "not_acceptable"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody406
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody406" (\obj -> GHC.Base.pure DecodeSharedTransactionResponseBody406 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'DecodeSharedTransactionResponseBody406' with all required fields.
mkDecodeSharedTransactionResponseBody406 :: Data.Text.Internal.Text -- ^ 'decodeSharedTransactionResponseBody406Message'
  -> DecodeSharedTransactionResponseBody406
mkDecodeSharedTransactionResponseBody406 decodeSharedTransactionResponseBody406Message = DecodeSharedTransactionResponseBody406{decodeSharedTransactionResponseBody406Message = decodeSharedTransactionResponseBody406Message}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-decode.POST.responses.415.content.application\/json.schema@ in the specification.
-- 
-- 
data DecodeSharedTransactionResponseBody415 = DecodeSharedTransactionResponseBody415 {
  -- | message: May occur when providing an invalid \'Content-Type\' header.
  decodeSharedTransactionResponseBody415Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DecodeSharedTransactionResponseBody415
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody415Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "unsupported_media_type"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= decodeSharedTransactionResponseBody415Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "unsupported_media_type"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DecodeSharedTransactionResponseBody415
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DecodeSharedTransactionResponseBody415" (\obj -> GHC.Base.pure DecodeSharedTransactionResponseBody415 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'DecodeSharedTransactionResponseBody415' with all required fields.
mkDecodeSharedTransactionResponseBody415 :: Data.Text.Internal.Text -- ^ 'decodeSharedTransactionResponseBody415Message'
  -> DecodeSharedTransactionResponseBody415
mkDecodeSharedTransactionResponseBody415 decodeSharedTransactionResponseBody415Message = DecodeSharedTransactionResponseBody415{decodeSharedTransactionResponseBody415Message = decodeSharedTransactionResponseBody415Message}
-- | > POST /shared-wallets/{walletId}/transactions-decode
-- 
-- The same as 'decodeSharedTransaction' but accepts an explicit configuration.
decodeSharedTransactionWithConfiguration :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ walletId | Constraints: Maximum length of 40, Minimum length of 40
  -> DecodeSharedTransactionRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response DecodeSharedTransactionResponse) -- ^ Monadic computation which returns the result of the operation
decodeSharedTransactionWithConfiguration config
                                         walletId
                                         body = GHC.Base.fmap (\response_6 -> GHC.Base.fmap (Data.Either.either DecodeSharedTransactionResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 202) (Network.HTTP.Client.Types.responseStatus response) -> DecodeSharedTransactionResponse202 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                         DecodeSharedTransactionResponseBody202)
                                                                                                                                                                                                  | (\status_8 -> Network.HTTP.Types.Status.statusCode status_8 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> DecodeSharedTransactionResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                         DecodeSharedTransactionResponseBody400)
                                                                                                                                                                                                  | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> DecodeSharedTransactionResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                         DecodeSharedTransactionResponseBody404)
                                                                                                                                                                                                  | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 406) (Network.HTTP.Client.Types.responseStatus response) -> DecodeSharedTransactionResponse406 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                           DecodeSharedTransactionResponseBody406)
                                                                                                                                                                                                  | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 415) (Network.HTTP.Client.Types.responseStatus response) -> DecodeSharedTransactionResponse415 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                           DecodeSharedTransactionResponseBody415)
                                                                                                                                                                                                  | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_6) response_6) (Wallet.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") ("/shared-wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel walletId)) GHC.Base.<> "/transactions-decode")) GHC.Base.mempty (GHC.Maybe.Just body) Wallet.Common.RequestBodyEncodingJSON)
-- | > POST /shared-wallets/{walletId}/transactions-decode
-- 
-- The same as 'decodeSharedTransaction' but returns the raw 'Data.ByteString.ByteString'.
decodeSharedTransactionRaw :: forall m . Wallet.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ walletId | Constraints: Maximum length of 40, Minimum length of 40
  -> DecodeSharedTransactionRequestBody -- ^ The request body to send
  -> Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
decodeSharedTransactionRaw walletId
                           body = GHC.Base.id (Wallet.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") ("/shared-wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel walletId)) GHC.Base.<> "/transactions-decode")) GHC.Base.mempty (GHC.Maybe.Just body) Wallet.Common.RequestBodyEncodingJSON)
-- | > POST /shared-wallets/{walletId}/transactions-decode
-- 
-- The same as 'decodeSharedTransaction' but accepts an explicit configuration and returns the raw 'Data.ByteString.ByteString'.
decodeSharedTransactionWithConfigurationRaw :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ walletId | Constraints: Maximum length of 40, Minimum length of 40
  -> DecodeSharedTransactionRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
decodeSharedTransactionWithConfigurationRaw config
                                            walletId
                                            body = GHC.Base.id (Wallet.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") ("/shared-wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel walletId)) GHC.Base.<> "/transactions-decode")) GHC.Base.mempty (GHC.Maybe.Just body) Wallet.Common.RequestBodyEncodingJSON)
