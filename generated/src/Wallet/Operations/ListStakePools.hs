-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation listStakePools
module Wallet.Operations.ListStakePools where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Wallet.Common
import Wallet.Types

-- | > GET /stake-pools
-- 
-- \<p align=\"right\">status: \<strong>stable\<\/strong>\<\/p>
-- 
-- List all known stake pools ordered by descending \`non_myopic_member_rewards\`.
-- The \`non_myopic_member_rewards\` — and thus the ordering — depends on the \`?stake\` query
-- parameter.
-- 
-- Some pools _may_ also have metadata attached to them.
listStakePools :: forall m . Wallet.Common.MonadHTTP m => GHC.Types.Int -- ^ stake: The stake the user intends to delegate in Lovelace. Required.  | Constraints: Maxium  of 4.5e16, Minimum  of 0.0
  -> Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response ListStakePoolsResponse) -- ^ Monadic computation which returns the result of the operation
listStakePools stake = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either ListStakePoolsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> ListStakePoolsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                              ([ListStakePoolsResponseBody200]))
                                                                                                                                                                | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> ListStakePoolsResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                              ListStakePoolsResponseBody400)
                                                                                                                                                                | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Wallet.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") "/stake-pools" [Wallet.Common.QueryParameter (Data.Text.pack "stake") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON stake) (Data.Text.pack "form") GHC.Types.False])
-- | Represents a response of the operation 'listStakePools'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'ListStakePoolsResponseError' is used.
data ListStakePoolsResponse =
   ListStakePoolsResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | ListStakePoolsResponse200 ([ListStakePoolsResponseBody200]) -- ^ Ok
  | ListStakePoolsResponse400 ListStakePoolsResponseBody400 -- ^ Bad Request
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/stake-pools.GET.responses.200.content.application\/json.schema.items@ in the specification.
-- 
-- 
data ListStakePoolsResponseBody200 = ListStakePoolsResponseBody200 {
  -- | cost: Estimated cost set by the pool operator when registering his pool.
  -- This fixed cost is taken from each reward earned by the pool before splitting rewards between stakeholders.
  -- 
  -- May be omitted if the wallet hasn\'t found the pool\'s registration cerificate yet.
  listStakePoolsResponseBody200Cost :: ListStakePoolsResponseBody200Cost
  -- | flags: Various flags applicable to stake pools. Possible flags:
  -- 
  -- | flag     | description                                                                                                      |
  -- | ---      | ---                                                                                                              |
  -- | delisted | The pool is marked as delisted on a configured SMASH server; metadata for this pool have therefore been dropped. |
  , listStakePoolsResponseBody200Flags :: ([ListStakePoolsResponseBody200Flags])
  -- | id: A unique identifier for the pool.
  , listStakePoolsResponseBody200Id :: Data.Text.Internal.Text
  -- | margin: Variable margin on the total reward given to an operator before splitting rewards between stakeholders.
  -- 
  -- May be omitted if the wallet hasn\'t found the pool\'s registration cerificate yet.
  , listStakePoolsResponseBody200Margin :: ListStakePoolsResponseBody200Margin
  -- | metadata: Information about the stake pool.
  , listStakePoolsResponseBody200Metadata :: (GHC.Maybe.Maybe ListStakePoolsResponseBody200Metadata)
  -- | metrics
  , listStakePoolsResponseBody200Metrics :: ListStakePoolsResponseBody200Metrics
  -- | pledge: Minimal stake amount that a stake pool is willing to honor.
  -- 
  -- May be omitted if the wallet hasn\'t found the pool\'s registration cerificate yet.
  , listStakePoolsResponseBody200Pledge :: ListStakePoolsResponseBody200Pledge
  -- | retirement: The epoch in which a stake pool retires.
  -- 
  -- May be omitted if the wallet hasn\'t yet found a retirement certificate
  -- for this stake pool.
  , listStakePoolsResponseBody200Retirement :: (GHC.Maybe.Maybe ListStakePoolsResponseBody200Retirement)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListStakePoolsResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["cost" Data.Aeson.Types.ToJSON..= listStakePoolsResponseBody200Cost obj] : ["flags" Data.Aeson.Types.ToJSON..= listStakePoolsResponseBody200Flags obj] : ["id" Data.Aeson.Types.ToJSON..= listStakePoolsResponseBody200Id obj] : ["margin" Data.Aeson.Types.ToJSON..= listStakePoolsResponseBody200Margin obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("metadata" Data.Aeson.Types.ToJSON..=)) (listStakePoolsResponseBody200Metadata obj) : ["metrics" Data.Aeson.Types.ToJSON..= listStakePoolsResponseBody200Metrics obj] : ["pledge" Data.Aeson.Types.ToJSON..= listStakePoolsResponseBody200Pledge obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("retirement" Data.Aeson.Types.ToJSON..=)) (listStakePoolsResponseBody200Retirement obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["cost" Data.Aeson.Types.ToJSON..= listStakePoolsResponseBody200Cost obj] : ["flags" Data.Aeson.Types.ToJSON..= listStakePoolsResponseBody200Flags obj] : ["id" Data.Aeson.Types.ToJSON..= listStakePoolsResponseBody200Id obj] : ["margin" Data.Aeson.Types.ToJSON..= listStakePoolsResponseBody200Margin obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("metadata" Data.Aeson.Types.ToJSON..=)) (listStakePoolsResponseBody200Metadata obj) : ["metrics" Data.Aeson.Types.ToJSON..= listStakePoolsResponseBody200Metrics obj] : ["pledge" Data.Aeson.Types.ToJSON..= listStakePoolsResponseBody200Pledge obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("retirement" Data.Aeson.Types.ToJSON..=)) (listStakePoolsResponseBody200Retirement obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListStakePoolsResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListStakePoolsResponseBody200" (\obj -> (((((((GHC.Base.pure ListStakePoolsResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cost")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "flags")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "margin")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "metrics")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pledge")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "retirement"))
-- | Create a new 'ListStakePoolsResponseBody200' with all required fields.
mkListStakePoolsResponseBody200 :: ListStakePoolsResponseBody200Cost -- ^ 'listStakePoolsResponseBody200Cost'
  -> [ListStakePoolsResponseBody200Flags] -- ^ 'listStakePoolsResponseBody200Flags'
  -> Data.Text.Internal.Text -- ^ 'listStakePoolsResponseBody200Id'
  -> ListStakePoolsResponseBody200Margin -- ^ 'listStakePoolsResponseBody200Margin'
  -> ListStakePoolsResponseBody200Metrics -- ^ 'listStakePoolsResponseBody200Metrics'
  -> ListStakePoolsResponseBody200Pledge -- ^ 'listStakePoolsResponseBody200Pledge'
  -> ListStakePoolsResponseBody200
mkListStakePoolsResponseBody200 listStakePoolsResponseBody200Cost listStakePoolsResponseBody200Flags listStakePoolsResponseBody200Id listStakePoolsResponseBody200Margin listStakePoolsResponseBody200Metrics listStakePoolsResponseBody200Pledge = ListStakePoolsResponseBody200{listStakePoolsResponseBody200Cost = listStakePoolsResponseBody200Cost,
                                                                                                                                                                                                                                                                                  listStakePoolsResponseBody200Flags = listStakePoolsResponseBody200Flags,
                                                                                                                                                                                                                                                                                  listStakePoolsResponseBody200Id = listStakePoolsResponseBody200Id,
                                                                                                                                                                                                                                                                                  listStakePoolsResponseBody200Margin = listStakePoolsResponseBody200Margin,
                                                                                                                                                                                                                                                                                  listStakePoolsResponseBody200Metadata = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                                  listStakePoolsResponseBody200Metrics = listStakePoolsResponseBody200Metrics,
                                                                                                                                                                                                                                                                                  listStakePoolsResponseBody200Pledge = listStakePoolsResponseBody200Pledge,
                                                                                                                                                                                                                                                                                  listStakePoolsResponseBody200Retirement = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/stake-pools.GET.responses.200.content.application\/json.schema.items.properties.cost@ in the specification.
-- 
-- Estimated cost set by the pool operator when registering his pool.
-- This fixed cost is taken from each reward earned by the pool before splitting rewards between stakeholders.
-- 
-- May be omitted if the wallet hasn\'t found the pool\'s registration cerificate yet.
data ListStakePoolsResponseBody200Cost = ListStakePoolsResponseBody200Cost {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  listStakePoolsResponseBody200CostQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListStakePoolsResponseBody200Cost
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= listStakePoolsResponseBody200CostQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= listStakePoolsResponseBody200CostQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListStakePoolsResponseBody200Cost
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListStakePoolsResponseBody200Cost" (\obj -> GHC.Base.pure ListStakePoolsResponseBody200Cost GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'ListStakePoolsResponseBody200Cost' with all required fields.
mkListStakePoolsResponseBody200Cost :: GHC.Types.Int -- ^ 'listStakePoolsResponseBody200CostQuantity'
  -> ListStakePoolsResponseBody200Cost
mkListStakePoolsResponseBody200Cost listStakePoolsResponseBody200CostQuantity = ListStakePoolsResponseBody200Cost{listStakePoolsResponseBody200CostQuantity = listStakePoolsResponseBody200CostQuantity}
-- | Defines the enum schema located at @paths.\/stake-pools.GET.responses.200.content.application\/json.schema.items.properties.flags.items@ in the specification.
-- 
-- 
data ListStakePoolsResponseBody200Flags =
   ListStakePoolsResponseBody200FlagsOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | ListStakePoolsResponseBody200FlagsTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | ListStakePoolsResponseBody200FlagsEnumDelisted -- ^ Represents the JSON value @"delisted"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListStakePoolsResponseBody200Flags
    where toJSON (ListStakePoolsResponseBody200FlagsOther val) = val
          toJSON (ListStakePoolsResponseBody200FlagsTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (ListStakePoolsResponseBody200FlagsEnumDelisted) = "delisted"
instance Data.Aeson.Types.FromJSON.FromJSON ListStakePoolsResponseBody200Flags
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "delisted" -> ListStakePoolsResponseBody200FlagsEnumDelisted
                                            | GHC.Base.otherwise -> ListStakePoolsResponseBody200FlagsOther val)
-- | Defines the object schema located at @paths.\/stake-pools.GET.responses.200.content.application\/json.schema.items.properties.margin@ in the specification.
-- 
-- Variable margin on the total reward given to an operator before splitting rewards between stakeholders.
-- 
-- May be omitted if the wallet hasn\'t found the pool\'s registration cerificate yet.
data ListStakePoolsResponseBody200Margin = ListStakePoolsResponseBody200Margin {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  -- * Minimum  of 0.0
  listStakePoolsResponseBody200MarginQuantity :: GHC.Types.Double
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListStakePoolsResponseBody200Margin
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= listStakePoolsResponseBody200MarginQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "percent"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= listStakePoolsResponseBody200MarginQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "percent"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListStakePoolsResponseBody200Margin
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListStakePoolsResponseBody200Margin" (\obj -> GHC.Base.pure ListStakePoolsResponseBody200Margin GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'ListStakePoolsResponseBody200Margin' with all required fields.
mkListStakePoolsResponseBody200Margin :: GHC.Types.Double -- ^ 'listStakePoolsResponseBody200MarginQuantity'
  -> ListStakePoolsResponseBody200Margin
mkListStakePoolsResponseBody200Margin listStakePoolsResponseBody200MarginQuantity = ListStakePoolsResponseBody200Margin{listStakePoolsResponseBody200MarginQuantity = listStakePoolsResponseBody200MarginQuantity}
-- | Defines the object schema located at @paths.\/stake-pools.GET.responses.200.content.application\/json.schema.items.properties.metadata@ in the specification.
-- 
-- Information about the stake pool.
data ListStakePoolsResponseBody200Metadata = ListStakePoolsResponseBody200Metadata {
  -- | description
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 255
  listStakePoolsResponseBody200MetadataDescription :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | homepage
  , listStakePoolsResponseBody200MetadataHomepage :: Data.Text.Internal.Text
  -- | name
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 50
  -- * Minimum length of 1
  , listStakePoolsResponseBody200MetadataName :: Data.Text.Internal.Text
  -- | ticker
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5
  -- * Minimum length of 3
  , listStakePoolsResponseBody200MetadataTicker :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListStakePoolsResponseBody200Metadata
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (listStakePoolsResponseBody200MetadataDescription obj) : ["homepage" Data.Aeson.Types.ToJSON..= listStakePoolsResponseBody200MetadataHomepage obj] : ["name" Data.Aeson.Types.ToJSON..= listStakePoolsResponseBody200MetadataName obj] : ["ticker" Data.Aeson.Types.ToJSON..= listStakePoolsResponseBody200MetadataTicker obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (listStakePoolsResponseBody200MetadataDescription obj) : ["homepage" Data.Aeson.Types.ToJSON..= listStakePoolsResponseBody200MetadataHomepage obj] : ["name" Data.Aeson.Types.ToJSON..= listStakePoolsResponseBody200MetadataName obj] : ["ticker" Data.Aeson.Types.ToJSON..= listStakePoolsResponseBody200MetadataTicker obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListStakePoolsResponseBody200Metadata
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListStakePoolsResponseBody200Metadata" (\obj -> (((GHC.Base.pure ListStakePoolsResponseBody200Metadata GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "homepage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ticker"))
-- | Create a new 'ListStakePoolsResponseBody200Metadata' with all required fields.
mkListStakePoolsResponseBody200Metadata :: Data.Text.Internal.Text -- ^ 'listStakePoolsResponseBody200MetadataHomepage'
  -> Data.Text.Internal.Text -- ^ 'listStakePoolsResponseBody200MetadataName'
  -> Data.Text.Internal.Text -- ^ 'listStakePoolsResponseBody200MetadataTicker'
  -> ListStakePoolsResponseBody200Metadata
mkListStakePoolsResponseBody200Metadata listStakePoolsResponseBody200MetadataHomepage listStakePoolsResponseBody200MetadataName listStakePoolsResponseBody200MetadataTicker = ListStakePoolsResponseBody200Metadata{listStakePoolsResponseBody200MetadataDescription = GHC.Maybe.Nothing,
                                                                                                                                                                                                                    listStakePoolsResponseBody200MetadataHomepage = listStakePoolsResponseBody200MetadataHomepage,
                                                                                                                                                                                                                    listStakePoolsResponseBody200MetadataName = listStakePoolsResponseBody200MetadataName,
                                                                                                                                                                                                                    listStakePoolsResponseBody200MetadataTicker = listStakePoolsResponseBody200MetadataTicker}
-- | Defines the object schema located at @paths.\/stake-pools.GET.responses.200.content.application\/json.schema.items.properties.metrics@ in the specification.
-- 
-- 
data ListStakePoolsResponseBody200Metrics = ListStakePoolsResponseBody200Metrics {
  -- | non_myopic_member_rewards: The rewards the wallet can expect to receive at the end of an epoch, in the long term, if delegating to
  -- this pool.
  -- 
  -- For more details, see the
  -- [Design Specification for Delegation and Incentives in Cardano](https:\/\/hydra.iohk.io\/job\/Cardano\/cardano-ledger-specs\/delegationDesignSpec\/latest\/download-by-type\/doc-pdf\/delegation_design_spec)
  -- document.
  listStakePoolsResponseBody200MetricsNon_myopic_member_rewards :: ListStakePoolsResponseBody200MetricsNon_myopic_member_rewards
  -- | produced_blocks: Number of blocks produced by a given stake pool in its lifetime.
  , listStakePoolsResponseBody200MetricsProduced_blocks :: ListStakePoolsResponseBody200MetricsProduced_blocks
  -- | relative_stake: The live pool stake relative to the *total* stake.
  -- 
  -- For more details, see the section \"Relative Stake: Active vs Total\" in
  -- [Design Specification for Delegation and Incentives in Cardano](https:\/\/hydra.iohk.io\/job\/Cardano\/cardano-ledger-specs\/delegationDesignSpec\/latest\/download-by-type\/doc-pdf\/delegation_design_spec).
  , listStakePoolsResponseBody200MetricsRelative_stake :: ListStakePoolsResponseBody200MetricsRelative_stake
  -- | saturation: Saturation-level of the pool based on the desired number of pools aimed by the network.
  -- A value above \`1\` indicates that the pool is saturated.
  -- 
  -- The \`non_myopic_member_rewards\` take oversaturation into account, as specified by the [specs](https:\/\/hydra.iohk.io\/job\/Cardano\/cardano-ledger-specs\/delegationDesignSpec\/latest\/download-by-type\/doc-pdf\/delegation_design_spec).
  -- 
  -- The saturation is based on the live \`relative_stake\`. The saturation at the end of epoch e,
  -- will affect the rewards paid out at the end of epoch e+3.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , listStakePoolsResponseBody200MetricsSaturation :: GHC.Types.Double
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListStakePoolsResponseBody200Metrics
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["non_myopic_member_rewards" Data.Aeson.Types.ToJSON..= listStakePoolsResponseBody200MetricsNon_myopic_member_rewards obj] : ["produced_blocks" Data.Aeson.Types.ToJSON..= listStakePoolsResponseBody200MetricsProduced_blocks obj] : ["relative_stake" Data.Aeson.Types.ToJSON..= listStakePoolsResponseBody200MetricsRelative_stake obj] : ["saturation" Data.Aeson.Types.ToJSON..= listStakePoolsResponseBody200MetricsSaturation obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["non_myopic_member_rewards" Data.Aeson.Types.ToJSON..= listStakePoolsResponseBody200MetricsNon_myopic_member_rewards obj] : ["produced_blocks" Data.Aeson.Types.ToJSON..= listStakePoolsResponseBody200MetricsProduced_blocks obj] : ["relative_stake" Data.Aeson.Types.ToJSON..= listStakePoolsResponseBody200MetricsRelative_stake obj] : ["saturation" Data.Aeson.Types.ToJSON..= listStakePoolsResponseBody200MetricsSaturation obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListStakePoolsResponseBody200Metrics
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListStakePoolsResponseBody200Metrics" (\obj -> (((GHC.Base.pure ListStakePoolsResponseBody200Metrics GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "non_myopic_member_rewards")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "produced_blocks")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "relative_stake")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "saturation"))
-- | Create a new 'ListStakePoolsResponseBody200Metrics' with all required fields.
mkListStakePoolsResponseBody200Metrics :: ListStakePoolsResponseBody200MetricsNon_myopic_member_rewards -- ^ 'listStakePoolsResponseBody200MetricsNon_myopic_member_rewards'
  -> ListStakePoolsResponseBody200MetricsProduced_blocks -- ^ 'listStakePoolsResponseBody200MetricsProduced_blocks'
  -> ListStakePoolsResponseBody200MetricsRelative_stake -- ^ 'listStakePoolsResponseBody200MetricsRelative_stake'
  -> GHC.Types.Double -- ^ 'listStakePoolsResponseBody200MetricsSaturation'
  -> ListStakePoolsResponseBody200Metrics
mkListStakePoolsResponseBody200Metrics listStakePoolsResponseBody200MetricsNon_myopic_member_rewards listStakePoolsResponseBody200MetricsProduced_blocks listStakePoolsResponseBody200MetricsRelative_stake listStakePoolsResponseBody200MetricsSaturation = ListStakePoolsResponseBody200Metrics{listStakePoolsResponseBody200MetricsNon_myopic_member_rewards = listStakePoolsResponseBody200MetricsNon_myopic_member_rewards,
                                                                                                                                                                                                                                                                                                  listStakePoolsResponseBody200MetricsProduced_blocks = listStakePoolsResponseBody200MetricsProduced_blocks,
                                                                                                                                                                                                                                                                                                  listStakePoolsResponseBody200MetricsRelative_stake = listStakePoolsResponseBody200MetricsRelative_stake,
                                                                                                                                                                                                                                                                                                  listStakePoolsResponseBody200MetricsSaturation = listStakePoolsResponseBody200MetricsSaturation}
-- | Defines the object schema located at @paths.\/stake-pools.GET.responses.200.content.application\/json.schema.items.properties.metrics.properties.non_myopic_member_rewards@ in the specification.
-- 
-- The rewards the wallet can expect to receive at the end of an epoch, in the long term, if delegating to
-- this pool.
-- 
-- For more details, see the
-- [Design Specification for Delegation and Incentives in Cardano](https:\/\/hydra.iohk.io\/job\/Cardano\/cardano-ledger-specs\/delegationDesignSpec\/latest\/download-by-type\/doc-pdf\/delegation_design_spec)
-- document.
data ListStakePoolsResponseBody200MetricsNon_myopic_member_rewards = ListStakePoolsResponseBody200MetricsNon_myopic_member_rewards {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  listStakePoolsResponseBody200MetricsNon_myopic_member_rewardsQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListStakePoolsResponseBody200MetricsNon_myopic_member_rewards
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= listStakePoolsResponseBody200MetricsNon_myopic_member_rewardsQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= listStakePoolsResponseBody200MetricsNon_myopic_member_rewardsQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListStakePoolsResponseBody200MetricsNon_myopic_member_rewards
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListStakePoolsResponseBody200MetricsNon_myopic_member_rewards" (\obj -> GHC.Base.pure ListStakePoolsResponseBody200MetricsNon_myopic_member_rewards GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'ListStakePoolsResponseBody200MetricsNon_myopic_member_rewards' with all required fields.
mkListStakePoolsResponseBody200MetricsNon_myopic_member_rewards :: GHC.Types.Int -- ^ 'listStakePoolsResponseBody200MetricsNon_myopic_member_rewardsQuantity'
  -> ListStakePoolsResponseBody200MetricsNon_myopic_member_rewards
mkListStakePoolsResponseBody200MetricsNon_myopic_member_rewards listStakePoolsResponseBody200MetricsNon_myopic_member_rewardsQuantity = ListStakePoolsResponseBody200MetricsNon_myopic_member_rewards{listStakePoolsResponseBody200MetricsNon_myopic_member_rewardsQuantity = listStakePoolsResponseBody200MetricsNon_myopic_member_rewardsQuantity}
-- | Defines the object schema located at @paths.\/stake-pools.GET.responses.200.content.application\/json.schema.items.properties.metrics.properties.produced_blocks@ in the specification.
-- 
-- Number of blocks produced by a given stake pool in its lifetime.
data ListStakePoolsResponseBody200MetricsProduced_blocks = ListStakePoolsResponseBody200MetricsProduced_blocks {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  listStakePoolsResponseBody200MetricsProduced_blocksQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListStakePoolsResponseBody200MetricsProduced_blocks
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= listStakePoolsResponseBody200MetricsProduced_blocksQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "block"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= listStakePoolsResponseBody200MetricsProduced_blocksQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "block"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListStakePoolsResponseBody200MetricsProduced_blocks
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListStakePoolsResponseBody200MetricsProduced_blocks" (\obj -> GHC.Base.pure ListStakePoolsResponseBody200MetricsProduced_blocks GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'ListStakePoolsResponseBody200MetricsProduced_blocks' with all required fields.
mkListStakePoolsResponseBody200MetricsProduced_blocks :: GHC.Types.Int -- ^ 'listStakePoolsResponseBody200MetricsProduced_blocksQuantity'
  -> ListStakePoolsResponseBody200MetricsProduced_blocks
mkListStakePoolsResponseBody200MetricsProduced_blocks listStakePoolsResponseBody200MetricsProduced_blocksQuantity = ListStakePoolsResponseBody200MetricsProduced_blocks{listStakePoolsResponseBody200MetricsProduced_blocksQuantity = listStakePoolsResponseBody200MetricsProduced_blocksQuantity}
-- | Defines the object schema located at @paths.\/stake-pools.GET.responses.200.content.application\/json.schema.items.properties.metrics.properties.relative_stake@ in the specification.
-- 
-- The live pool stake relative to the *total* stake.
-- 
-- For more details, see the section \"Relative Stake: Active vs Total\" in
-- [Design Specification for Delegation and Incentives in Cardano](https:\/\/hydra.iohk.io\/job\/Cardano\/cardano-ledger-specs\/delegationDesignSpec\/latest\/download-by-type\/doc-pdf\/delegation_design_spec).
data ListStakePoolsResponseBody200MetricsRelative_stake = ListStakePoolsResponseBody200MetricsRelative_stake {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  -- * Minimum  of 0.0
  listStakePoolsResponseBody200MetricsRelative_stakeQuantity :: GHC.Types.Double
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListStakePoolsResponseBody200MetricsRelative_stake
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= listStakePoolsResponseBody200MetricsRelative_stakeQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "percent"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= listStakePoolsResponseBody200MetricsRelative_stakeQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "percent"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListStakePoolsResponseBody200MetricsRelative_stake
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListStakePoolsResponseBody200MetricsRelative_stake" (\obj -> GHC.Base.pure ListStakePoolsResponseBody200MetricsRelative_stake GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'ListStakePoolsResponseBody200MetricsRelative_stake' with all required fields.
mkListStakePoolsResponseBody200MetricsRelative_stake :: GHC.Types.Double -- ^ 'listStakePoolsResponseBody200MetricsRelative_stakeQuantity'
  -> ListStakePoolsResponseBody200MetricsRelative_stake
mkListStakePoolsResponseBody200MetricsRelative_stake listStakePoolsResponseBody200MetricsRelative_stakeQuantity = ListStakePoolsResponseBody200MetricsRelative_stake{listStakePoolsResponseBody200MetricsRelative_stakeQuantity = listStakePoolsResponseBody200MetricsRelative_stakeQuantity}
-- | Defines the object schema located at @paths.\/stake-pools.GET.responses.200.content.application\/json.schema.items.properties.pledge@ in the specification.
-- 
-- Minimal stake amount that a stake pool is willing to honor.
-- 
-- May be omitted if the wallet hasn\'t found the pool\'s registration cerificate yet.
data ListStakePoolsResponseBody200Pledge = ListStakePoolsResponseBody200Pledge {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  listStakePoolsResponseBody200PledgeQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListStakePoolsResponseBody200Pledge
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= listStakePoolsResponseBody200PledgeQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= listStakePoolsResponseBody200PledgeQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListStakePoolsResponseBody200Pledge
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListStakePoolsResponseBody200Pledge" (\obj -> GHC.Base.pure ListStakePoolsResponseBody200Pledge GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'ListStakePoolsResponseBody200Pledge' with all required fields.
mkListStakePoolsResponseBody200Pledge :: GHC.Types.Int -- ^ 'listStakePoolsResponseBody200PledgeQuantity'
  -> ListStakePoolsResponseBody200Pledge
mkListStakePoolsResponseBody200Pledge listStakePoolsResponseBody200PledgeQuantity = ListStakePoolsResponseBody200Pledge{listStakePoolsResponseBody200PledgeQuantity = listStakePoolsResponseBody200PledgeQuantity}
-- | Defines the object schema located at @paths.\/stake-pools.GET.responses.200.content.application\/json.schema.items.properties.retirement@ in the specification.
-- 
-- The epoch in which a stake pool retires.
-- 
-- May be omitted if the wallet hasn\'t yet found a retirement certificate
-- for this stake pool.
data ListStakePoolsResponseBody200Retirement = ListStakePoolsResponseBody200Retirement {
  -- | epoch_number: An epoch is a time period which is divided into slots.
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  listStakePoolsResponseBody200RetirementEpoch_number :: GHC.Types.Int
  -- | epoch_start_time
  , listStakePoolsResponseBody200RetirementEpoch_start_time :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListStakePoolsResponseBody200Retirement
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["epoch_number" Data.Aeson.Types.ToJSON..= listStakePoolsResponseBody200RetirementEpoch_number obj] : ["epoch_start_time" Data.Aeson.Types.ToJSON..= listStakePoolsResponseBody200RetirementEpoch_start_time obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["epoch_number" Data.Aeson.Types.ToJSON..= listStakePoolsResponseBody200RetirementEpoch_number obj] : ["epoch_start_time" Data.Aeson.Types.ToJSON..= listStakePoolsResponseBody200RetirementEpoch_start_time obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListStakePoolsResponseBody200Retirement
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListStakePoolsResponseBody200Retirement" (\obj -> (GHC.Base.pure ListStakePoolsResponseBody200Retirement GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "epoch_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "epoch_start_time"))
-- | Create a new 'ListStakePoolsResponseBody200Retirement' with all required fields.
mkListStakePoolsResponseBody200Retirement :: GHC.Types.Int -- ^ 'listStakePoolsResponseBody200RetirementEpoch_number'
  -> Data.Text.Internal.Text -- ^ 'listStakePoolsResponseBody200RetirementEpoch_start_time'
  -> ListStakePoolsResponseBody200Retirement
mkListStakePoolsResponseBody200Retirement listStakePoolsResponseBody200RetirementEpoch_number listStakePoolsResponseBody200RetirementEpoch_start_time = ListStakePoolsResponseBody200Retirement{listStakePoolsResponseBody200RetirementEpoch_number = listStakePoolsResponseBody200RetirementEpoch_number,
                                                                                                                                                                                                listStakePoolsResponseBody200RetirementEpoch_start_time = listStakePoolsResponseBody200RetirementEpoch_start_time}
-- | Defines the object schema located at @paths.\/stake-pools.GET.responses.400.content.application\/json.schema@ in the specification.
-- 
-- 
data ListStakePoolsResponseBody400 = ListStakePoolsResponseBody400 {
  -- | message: May occur when an endpoint requires the presence of a query parameter that is missing.
  listStakePoolsResponseBody400Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListStakePoolsResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= listStakePoolsResponseBody400Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "query_param_missing"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= listStakePoolsResponseBody400Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "query_param_missing"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListStakePoolsResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListStakePoolsResponseBody400" (\obj -> GHC.Base.pure ListStakePoolsResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'ListStakePoolsResponseBody400' with all required fields.
mkListStakePoolsResponseBody400 :: Data.Text.Internal.Text -- ^ 'listStakePoolsResponseBody400Message'
  -> ListStakePoolsResponseBody400
mkListStakePoolsResponseBody400 listStakePoolsResponseBody400Message = ListStakePoolsResponseBody400{listStakePoolsResponseBody400Message = listStakePoolsResponseBody400Message}
-- | > GET /stake-pools
-- 
-- The same as 'listStakePools' but accepts an explicit configuration.
listStakePoolsWithConfiguration :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> GHC.Types.Int -- ^ stake: The stake the user intends to delegate in Lovelace. Required.  | Constraints: Maxium  of 4.5e16, Minimum  of 0.0
  -> m (Network.HTTP.Client.Types.Response ListStakePoolsResponse) -- ^ Monadic computation which returns the result of the operation
listStakePoolsWithConfiguration config
                                stake = GHC.Base.fmap (\response_3 -> GHC.Base.fmap (Data.Either.either ListStakePoolsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> ListStakePoolsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                               ([ListStakePoolsResponseBody200]))
                                                                                                                                                                                 | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> ListStakePoolsResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                               ListStakePoolsResponseBody400)
                                                                                                                                                                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_3) response_3) (Wallet.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") "/stake-pools" [Wallet.Common.QueryParameter (Data.Text.pack "stake") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON stake) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /stake-pools
-- 
-- The same as 'listStakePools' but returns the raw 'Data.ByteString.ByteString'.
listStakePoolsRaw :: forall m . Wallet.Common.MonadHTTP m => GHC.Types.Int -- ^ stake: The stake the user intends to delegate in Lovelace. Required.  | Constraints: Maxium  of 4.5e16, Minimum  of 0.0
  -> Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
listStakePoolsRaw stake = GHC.Base.id (Wallet.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") "/stake-pools" [Wallet.Common.QueryParameter (Data.Text.pack "stake") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON stake) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /stake-pools
-- 
-- The same as 'listStakePools' but accepts an explicit configuration and returns the raw 'Data.ByteString.ByteString'.
listStakePoolsWithConfigurationRaw :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> GHC.Types.Int -- ^ stake: The stake the user intends to delegate in Lovelace. Required.  | Constraints: Maxium  of 4.5e16, Minimum  of 0.0
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
listStakePoolsWithConfigurationRaw config
                                   stake = GHC.Base.id (Wallet.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") "/stake-pools" [Wallet.Common.QueryParameter (Data.Text.pack "stake") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON stake) (Data.Text.pack "form") GHC.Types.False])
