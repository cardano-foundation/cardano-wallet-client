-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation importAddress
module Wallet.Operations.ImportAddress where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Wallet.Common
import Wallet.Types

-- | > PUT /byron-wallets/{walletId}/addresses/{addressId}
-- 
-- \<p align=\"right\">status: \<strong>stable\<\/strong>\<\/p>
-- 
-- ⚠️  This endpoint is available for \`random\` wallets only. Any
-- attempt to call this endpoint on another type of wallet will result in
-- a \`403 Forbidden\` error from the server.
importAddress :: forall m . Wallet.Common.MonadHTTP m => ImportAddressParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response ImportAddressResponse) -- ^ Monadic computation which returns the result of the operation
importAddress parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either ImportAddressResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 204) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right ImportAddressResponse204
                                                                                                                                                                   | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> ImportAddressResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                ImportAddressResponseBody400)
                                                                                                                                                                   | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> ImportAddressResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                ImportAddressResponseBody403)
                                                                                                                                                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Wallet.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "PUT") ("/byron-wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (importAddressParametersPathWalletId parameters))) GHC.Base.<> ("/addresses/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (importAddressParametersPathAddressId parameters))) GHC.Base.<> "")))) GHC.Base.mempty)
-- | Defines the object schema located at @paths.\/byron-wallets\/{walletId}\/addresses\/{addressId}.PUT.parameters@ in the specification.
-- 
-- 
data ImportAddressParameters = ImportAddressParameters {
  -- | pathAddressId: Represents the parameter named \'addressId\'
  importAddressParametersPathAddressId :: Data.Text.Internal.Text
  -- | pathWalletId: Represents the parameter named \'walletId\'
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 40
  -- * Minimum length of 40
  , importAddressParametersPathWalletId :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ImportAddressParameters
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["pathAddressId" Data.Aeson.Types.ToJSON..= importAddressParametersPathAddressId obj] : ["pathWalletId" Data.Aeson.Types.ToJSON..= importAddressParametersPathWalletId obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["pathAddressId" Data.Aeson.Types.ToJSON..= importAddressParametersPathAddressId obj] : ["pathWalletId" Data.Aeson.Types.ToJSON..= importAddressParametersPathWalletId obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ImportAddressParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ImportAddressParameters" (\obj -> (GHC.Base.pure ImportAddressParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathAddressId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathWalletId"))
-- | Create a new 'ImportAddressParameters' with all required fields.
mkImportAddressParameters :: Data.Text.Internal.Text -- ^ 'importAddressParametersPathAddressId'
  -> Data.Text.Internal.Text -- ^ 'importAddressParametersPathWalletId'
  -> ImportAddressParameters
mkImportAddressParameters importAddressParametersPathAddressId importAddressParametersPathWalletId = ImportAddressParameters{importAddressParametersPathAddressId = importAddressParametersPathAddressId,
                                                                                                                             importAddressParametersPathWalletId = importAddressParametersPathWalletId}
-- | Represents a response of the operation 'importAddress'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'ImportAddressResponseError' is used.
data ImportAddressResponse =
   ImportAddressResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | ImportAddressResponse204 -- ^ No Content
  | ImportAddressResponse400 ImportAddressResponseBody400 -- ^ Bad Request
  | ImportAddressResponse403 ImportAddressResponseBody403 -- ^ Forbidden
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/byron-wallets\/{walletId}\/addresses\/{addressId}.PUT.responses.400.content.application\/json.schema@ in the specification.
-- 
-- 
data ImportAddressResponseBody400 = ImportAddressResponseBody400 {
  -- | message: May occur when a request is not well-formed; that is, it fails to parse
  -- successfully. This could be the case when some required parameters
  -- are missing or, when malformed values are provided.
  importAddressResponseBody400Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ImportAddressResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= importAddressResponseBody400Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "bad_request"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= importAddressResponseBody400Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "bad_request"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ImportAddressResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ImportAddressResponseBody400" (\obj -> GHC.Base.pure ImportAddressResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'ImportAddressResponseBody400' with all required fields.
mkImportAddressResponseBody400 :: Data.Text.Internal.Text -- ^ 'importAddressResponseBody400Message'
  -> ImportAddressResponseBody400
mkImportAddressResponseBody400 importAddressResponseBody400Message = ImportAddressResponseBody400{importAddressResponseBody400Message = importAddressResponseBody400Message}
-- | Defines the object schema located at @paths.\/byron-wallets\/{walletId}\/addresses\/{addressId}.PUT.responses.403.content.application\/json.schema@ in the specification.
-- 
-- 
data ImportAddressResponseBody403 = ImportAddressResponseBody403 {
  -- | code: A specific error code for this error, more precise than HTTP ones.
  importAddressResponseBody403Code :: Data.Text.Internal.Text
  -- | message: A descriptive error message.
  , importAddressResponseBody403Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ImportAddressResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["code" Data.Aeson.Types.ToJSON..= importAddressResponseBody403Code obj] : ["message" Data.Aeson.Types.ToJSON..= importAddressResponseBody403Message obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["code" Data.Aeson.Types.ToJSON..= importAddressResponseBody403Code obj] : ["message" Data.Aeson.Types.ToJSON..= importAddressResponseBody403Message obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ImportAddressResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ImportAddressResponseBody403" (\obj -> (GHC.Base.pure ImportAddressResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'ImportAddressResponseBody403' with all required fields.
mkImportAddressResponseBody403 :: Data.Text.Internal.Text -- ^ 'importAddressResponseBody403Code'
  -> Data.Text.Internal.Text -- ^ 'importAddressResponseBody403Message'
  -> ImportAddressResponseBody403
mkImportAddressResponseBody403 importAddressResponseBody403Code importAddressResponseBody403Message = ImportAddressResponseBody403{importAddressResponseBody403Code = importAddressResponseBody403Code,
                                                                                                                                   importAddressResponseBody403Message = importAddressResponseBody403Message}
-- | > PUT /byron-wallets/{walletId}/addresses/{addressId}
-- 
-- The same as 'importAddress' but accepts an explicit configuration.
importAddressWithConfiguration :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> ImportAddressParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response ImportAddressResponse) -- ^ Monadic computation which returns the result of the operation
importAddressWithConfiguration config
                               parameters = GHC.Base.fmap (\response_4 -> GHC.Base.fmap (Data.Either.either ImportAddressResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 204) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right ImportAddressResponse204
                                                                                                                                                                                    | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> ImportAddressResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                 ImportAddressResponseBody400)
                                                                                                                                                                                    | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> ImportAddressResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                 ImportAddressResponseBody403)
                                                                                                                                                                                    | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_4) response_4) (Wallet.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "PUT") ("/byron-wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (importAddressParametersPathWalletId parameters))) GHC.Base.<> ("/addresses/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (importAddressParametersPathAddressId parameters))) GHC.Base.<> "")))) GHC.Base.mempty)
-- | > PUT /byron-wallets/{walletId}/addresses/{addressId}
-- 
-- The same as 'importAddress' but returns the raw 'Data.ByteString.ByteString'.
importAddressRaw :: forall m . Wallet.Common.MonadHTTP m => ImportAddressParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
importAddressRaw parameters = GHC.Base.id (Wallet.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "PUT") ("/byron-wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (importAddressParametersPathWalletId parameters))) GHC.Base.<> ("/addresses/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (importAddressParametersPathAddressId parameters))) GHC.Base.<> "")))) GHC.Base.mempty)
-- | > PUT /byron-wallets/{walletId}/addresses/{addressId}
-- 
-- The same as 'importAddress' but accepts an explicit configuration and returns the raw 'Data.ByteString.ByteString'.
importAddressWithConfigurationRaw :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> ImportAddressParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
importAddressWithConfigurationRaw config
                                  parameters = GHC.Base.id (Wallet.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "PUT") ("/byron-wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (importAddressParametersPathWalletId parameters))) GHC.Base.<> ("/addresses/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (importAddressParametersPathAddressId parameters))) GHC.Base.<> "")))) GHC.Base.mempty)
