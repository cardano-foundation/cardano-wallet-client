-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getSharedWallet
module Wallet.Operations.GetSharedWallet where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Wallet.Common
import Wallet.Types

-- | > GET /shared-wallets/{walletId}
-- 
-- \<p align=\"right\">status: \<strong>âš  under development\<\/strong>\<\/p>
-- Get a shared wallet for a given wallet id.
getSharedWallet :: forall m . Wallet.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ walletId | Constraints: Maximum length of 40, Minimum length of 40
  -> Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response GetSharedWalletResponse) -- ^ Monadic computation which returns the result of the operation
getSharedWallet walletId = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetSharedWalletResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetSharedWalletResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                    GetSharedWalletResponseBody200Variants)
                                                                                                                                                                     | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetSharedWalletResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                    GetSharedWalletResponseBody400)
                                                                                                                                                                     | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetSharedWalletResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                    GetSharedWalletResponseBody404)
                                                                                                                                                                     | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 406) (Network.HTTP.Client.Types.responseStatus response) -> GetSharedWalletResponse406 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                    GetSharedWalletResponseBody406)
                                                                                                                                                                     | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Wallet.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") ("/shared-wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel walletId)) GHC.Base.<> "")) GHC.Base.mempty)
-- | Represents a response of the operation 'getSharedWallet'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetSharedWalletResponseError' is used.
data GetSharedWalletResponse =
   GetSharedWalletResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetSharedWalletResponse200 GetSharedWalletResponseBody200Variants -- ^ Ok
  | GetSharedWalletResponse400 GetSharedWalletResponseBody400 -- ^ Bad Request
  | GetSharedWalletResponse404 GetSharedWalletResponseBody404 -- ^ Not Found
  | GetSharedWalletResponse406 GetSharedWalletResponseBody406 -- ^ Not Acceptable
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}.GET.responses.200.content.application\/json.schema.oneOf@ in the specification.
-- 
-- 
data GetSharedWalletResponseBody200OneOf1 = GetSharedWalletResponseBody200OneOf1 {
  -- | account_index: An individual segment within a derivation path.
  -- 
  -- The \`H\` suffix indicates a _Hardened_ child private key, which
  -- means that children of this key cannot be derived from the public
  -- key. Indices without a \`H\` suffix are called _Soft_.
  getSharedWalletResponseBody200OneOf1Account_index :: Data.Text.Internal.Text
  -- | address_pool_gap: Number of consecutive unused addresses allowed.
  -- 
  -- **IMPORTANT DISCLAIMER:** Using values other than \`20\` automatically makes your wallet invalid with regards to BIP-44 address discovery. It means that you **will not** be able to fully restore
  -- your wallet in a different software which is strictly following BIP-44.
  -- 
  -- Beside, using large gaps is **not recommended** as it may induce important performance degradations. Use at your own risks.
  -- 
  -- **IMPORTANT DISCLAIMER 2:** There is no way to \`import\` addresses generated outside (e.g. using cardano-addresses) into the wallet.
  -- Wallet only discovers transactions on its used and unused addresses that are within its currently seen \`address_pool_gap\`.
  -- Transactions on addresses that \"belong\" to the wallet but happen to be beyond its \`address_pool_gap\` will not be visible to the wallet.
  -- This is a technical limitation of the industry standard [BIP-44](https:\/\/github.com\/bitcoin\/bips\/blob\/master\/bip-0044.mediawiki). See also [CIP-1852](https:\/\/github.com\/cardano-foundation\/CIPs\/blob\/master\/CIP-1852\/CIP-1852.md).
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100000.0
  -- * Minimum  of 10.0
  , getSharedWalletResponseBody200OneOf1Address_pool_gap :: GHC.Types.Int
  -- | delegation_script_template
  , getSharedWalletResponseBody200OneOf1Delegation_script_template :: (GHC.Maybe.Maybe GetSharedWalletResponseBody200OneOf1Delegation_script_template)
  -- | id: A unique identifier for the wallet
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 40
  -- * Minimum length of 40
  , getSharedWalletResponseBody200OneOf1Id :: Data.Text.Internal.Text
  -- | name
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 255
  -- * Minimum length of 1
  , getSharedWalletResponseBody200OneOf1Name :: Data.Text.Internal.Text
  -- | payment_script_template
  , getSharedWalletResponseBody200OneOf1Payment_script_template :: GetSharedWalletResponseBody200OneOf1Payment_script_template
  -- | state
  , getSharedWalletResponseBody200OneOf1State :: GetSharedWalletResponseBody200OneOf1State
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletResponseBody200OneOf1
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["account_index" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf1Account_index obj] : ["address_pool_gap" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf1Address_pool_gap obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("delegation_script_template" Data.Aeson.Types.ToJSON..=)) (getSharedWalletResponseBody200OneOf1Delegation_script_template obj) : ["id" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf1Id obj] : ["name" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf1Name obj] : ["payment_script_template" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf1Payment_script_template obj] : ["state" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf1State obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["account_index" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf1Account_index obj] : ["address_pool_gap" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf1Address_pool_gap obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("delegation_script_template" Data.Aeson.Types.ToJSON..=)) (getSharedWalletResponseBody200OneOf1Delegation_script_template obj) : ["id" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf1Id obj] : ["name" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf1Name obj] : ["payment_script_template" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf1Payment_script_template obj] : ["state" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf1State obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletResponseBody200OneOf1
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedWalletResponseBody200OneOf1" (\obj -> ((((((GHC.Base.pure GetSharedWalletResponseBody200OneOf1 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "account_index")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "address_pool_gap")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "delegation_script_template")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "payment_script_template")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "state"))
-- | Create a new 'GetSharedWalletResponseBody200OneOf1' with all required fields.
mkGetSharedWalletResponseBody200OneOf1 :: Data.Text.Internal.Text -- ^ 'getSharedWalletResponseBody200OneOf1Account_index'
  -> GHC.Types.Int -- ^ 'getSharedWalletResponseBody200OneOf1Address_pool_gap'
  -> Data.Text.Internal.Text -- ^ 'getSharedWalletResponseBody200OneOf1Id'
  -> Data.Text.Internal.Text -- ^ 'getSharedWalletResponseBody200OneOf1Name'
  -> GetSharedWalletResponseBody200OneOf1Payment_script_template -- ^ 'getSharedWalletResponseBody200OneOf1Payment_script_template'
  -> GetSharedWalletResponseBody200OneOf1State -- ^ 'getSharedWalletResponseBody200OneOf1State'
  -> GetSharedWalletResponseBody200OneOf1
mkGetSharedWalletResponseBody200OneOf1 getSharedWalletResponseBody200OneOf1Account_index getSharedWalletResponseBody200OneOf1Address_pool_gap getSharedWalletResponseBody200OneOf1Id getSharedWalletResponseBody200OneOf1Name getSharedWalletResponseBody200OneOf1Payment_script_template getSharedWalletResponseBody200OneOf1State = GetSharedWalletResponseBody200OneOf1{getSharedWalletResponseBody200OneOf1Account_index = getSharedWalletResponseBody200OneOf1Account_index,
                                                                                                                                                                                                                                                                                                                                                                           getSharedWalletResponseBody200OneOf1Address_pool_gap = getSharedWalletResponseBody200OneOf1Address_pool_gap,
                                                                                                                                                                                                                                                                                                                                                                           getSharedWalletResponseBody200OneOf1Delegation_script_template = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                                                                                                                           getSharedWalletResponseBody200OneOf1Id = getSharedWalletResponseBody200OneOf1Id,
                                                                                                                                                                                                                                                                                                                                                                           getSharedWalletResponseBody200OneOf1Name = getSharedWalletResponseBody200OneOf1Name,
                                                                                                                                                                                                                                                                                                                                                                           getSharedWalletResponseBody200OneOf1Payment_script_template = getSharedWalletResponseBody200OneOf1Payment_script_template,
                                                                                                                                                                                                                                                                                                                                                                           getSharedWalletResponseBody200OneOf1State = getSharedWalletResponseBody200OneOf1State}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}.GET.responses.200.content.application\/json.schema.oneOf.properties.delegation_script_template@ in the specification.
-- 
-- 
data GetSharedWalletResponseBody200OneOf1Delegation_script_template = GetSharedWalletResponseBody200OneOf1Delegation_script_template {
  -- | cosigners: Map of cosigners and their account public keys. Use key as in &cosigner, eg. \"cosigner\#\"
  getSharedWalletResponseBody200OneOf1Delegation_script_templateCosigners :: Data.Aeson.Types.Internal.Object
  -- | template
  , getSharedWalletResponseBody200OneOf1Delegation_script_templateTemplate :: GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateVariants
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletResponseBody200OneOf1Delegation_script_template
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["cosigners" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf1Delegation_script_templateCosigners obj] : ["template" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf1Delegation_script_templateTemplate obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["cosigners" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf1Delegation_script_templateCosigners obj] : ["template" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf1Delegation_script_templateTemplate obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletResponseBody200OneOf1Delegation_script_template
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedWalletResponseBody200OneOf1Delegation_script_template" (\obj -> (GHC.Base.pure GetSharedWalletResponseBody200OneOf1Delegation_script_template GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cosigners")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "template"))
-- | Create a new 'GetSharedWalletResponseBody200OneOf1Delegation_script_template' with all required fields.
mkGetSharedWalletResponseBody200OneOf1Delegation_script_template :: Data.Aeson.Types.Internal.Object -- ^ 'getSharedWalletResponseBody200OneOf1Delegation_script_templateCosigners'
  -> GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateVariants -- ^ 'getSharedWalletResponseBody200OneOf1Delegation_script_templateTemplate'
  -> GetSharedWalletResponseBody200OneOf1Delegation_script_template
mkGetSharedWalletResponseBody200OneOf1Delegation_script_template getSharedWalletResponseBody200OneOf1Delegation_script_templateCosigners getSharedWalletResponseBody200OneOf1Delegation_script_templateTemplate = GetSharedWalletResponseBody200OneOf1Delegation_script_template{getSharedWalletResponseBody200OneOf1Delegation_script_templateCosigners = getSharedWalletResponseBody200OneOf1Delegation_script_templateCosigners,
                                                                                                                                                                                                                                                                                 getSharedWalletResponseBody200OneOf1Delegation_script_templateTemplate = getSharedWalletResponseBody200OneOf1Delegation_script_templateTemplate}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}.GET.responses.200.content.application\/json.schema.oneOf.properties.delegation_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf2 = GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf2 {
  -- | all: Script primitive for which all signing keys corresponding to all list cosigners\' verification keys are expected to make the script valid.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  getSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf2All :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf2
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["all" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf2All obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["all" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf2All obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf2
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf2" (\obj -> GHC.Base.pure GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf2 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "all"))
-- | Create a new 'GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf2' with all required fields.
mkGetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf2 :: [ScriptTemplateValue] -- ^ 'getSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf2All'
  -> GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf2
mkGetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf2 getSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf2All = GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf2{getSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf2All = getSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf2All}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}.GET.responses.200.content.application\/json.schema.oneOf.properties.delegation_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf3 = GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf3 {
  -- | any: Script primitive for which a signing key corresponding to any of the list cosigners\' verification keys is expected to make the script valid. It is equivalent to \`some\` with \`\"at_least\"=1\`.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  getSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf3Any :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf3
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["any" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf3Any obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["any" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf3Any obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf3
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf3" (\obj -> GHC.Base.pure GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf3 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "any"))
-- | Create a new 'GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf3' with all required fields.
mkGetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf3 :: [ScriptTemplateValue] -- ^ 'getSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf3Any'
  -> GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf3
mkGetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf3 getSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf3Any = GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf3{getSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf3Any = getSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf3Any}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}.GET.responses.200.content.application\/json.schema.oneOf.properties.delegation_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf4 = GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf4 {
  -- | some: Script primitive for which at least a given number of signing keys corresponding to the list cosigners\' verification keys are expected to make the script valid.
  getSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf4Some :: GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf4Some
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf4
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["some" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf4Some obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["some" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf4Some obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf4
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf4" (\obj -> GHC.Base.pure GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf4 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "some"))
-- | Create a new 'GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf4' with all required fields.
mkGetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf4 :: GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf4Some -- ^ 'getSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf4Some'
  -> GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf4
mkGetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf4 getSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf4Some = GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf4{getSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf4Some = getSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf4Some}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}.GET.responses.200.content.application\/json.schema.oneOf.properties.delegation_script_template.properties.template.oneOf.properties.some@ in the specification.
-- 
-- Script primitive for which at least a given number of signing keys corresponding to the list cosigners\' verification keys are expected to make the script valid.
data GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf4Some = GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf4Some {
  -- | at_least
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 255.0
  -- * Minimum  of 1.0
  getSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf4SomeAt_least :: GHC.Types.Int
  -- | from
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  , getSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf4SomeFrom :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf4Some
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["at_least" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf4SomeAt_least obj] : ["from" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf4SomeFrom obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["at_least" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf4SomeAt_least obj] : ["from" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf4SomeFrom obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf4Some
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf4Some" (\obj -> (GHC.Base.pure GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf4Some GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "at_least")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "from"))
-- | Create a new 'GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf4Some' with all required fields.
mkGetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf4Some :: GHC.Types.Int -- ^ 'getSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf4SomeAt_least'
  -> [ScriptTemplateValue] -- ^ 'getSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf4SomeFrom'
  -> GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf4Some
mkGetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf4Some getSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf4SomeAt_least getSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf4SomeFrom = GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf4Some{getSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf4SomeAt_least = getSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf4SomeAt_least,
                                                                                                                                                                                                                                                                                                                                                    getSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf4SomeFrom = getSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf4SomeFrom}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}.GET.responses.200.content.application\/json.schema.oneOf.properties.delegation_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf5 = GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf5 {
  -- | active_from: Transaction is only valid starting at the specified slot number (\`â‰¥ active_from\`).
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  getSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf5Active_from :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf5
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["active_from" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf5Active_from obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["active_from" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf5Active_from obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf5
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf5" (\obj -> GHC.Base.pure GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf5 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active_from"))
-- | Create a new 'GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf5' with all required fields.
mkGetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf5 :: GHC.Types.Int -- ^ 'getSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf5Active_from'
  -> GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf5
mkGetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf5 getSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf5Active_from = GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf5{getSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf5Active_from = getSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf5Active_from}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}.GET.responses.200.content.application\/json.schema.oneOf.properties.delegation_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf6 = GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf6 {
  -- | active_until: Transaction is only valid before the specified slot number (\`\< active_until\`).
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  getSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf6Active_until :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf6
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["active_until" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf6Active_until obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["active_until" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf6Active_until obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf6
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf6" (\obj -> GHC.Base.pure GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf6 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active_until"))
-- | Create a new 'GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf6' with all required fields.
mkGetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf6 :: GHC.Types.Int -- ^ 'getSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf6Active_until'
  -> GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf6
mkGetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf6 getSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf6Active_until = GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf6{getSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf6Active_until = getSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf6Active_until}
-- | Defines the oneOf schema located at @paths.\/shared-wallets\/{walletId}.GET.responses.200.content.application\/json.schema.oneOf.properties.delegation_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateVariants =
   GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateVariant1 Data.Text.Internal.Text
  | GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateVariant2 GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf2
  | GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateVariant3 GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf3
  | GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateVariant4 GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf4
  | GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateVariant5 GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf5
  | GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateVariant6 GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateOneOf6
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateVariants
    where toJSON (GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateVariant1 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateVariant2 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateVariant3 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateVariant4 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateVariant5 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateVariant6 a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateVariants
    where parseJSON val = case (GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateVariant1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateVariant2 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateVariant3 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateVariant4 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateVariant5 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetSharedWalletResponseBody200OneOf1Delegation_script_templateTemplateVariant6 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched"))))) of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}.GET.responses.200.content.application\/json.schema.oneOf.properties.payment_script_template@ in the specification.
-- 
-- 
data GetSharedWalletResponseBody200OneOf1Payment_script_template = GetSharedWalletResponseBody200OneOf1Payment_script_template {
  -- | cosigners: Map of cosigners and their account public keys. Use key as in &cosigner, eg. \"cosigner\#\"
  getSharedWalletResponseBody200OneOf1Payment_script_templateCosigners :: Data.Aeson.Types.Internal.Object
  -- | template
  , getSharedWalletResponseBody200OneOf1Payment_script_templateTemplate :: GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateVariants
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletResponseBody200OneOf1Payment_script_template
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["cosigners" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf1Payment_script_templateCosigners obj] : ["template" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf1Payment_script_templateTemplate obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["cosigners" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf1Payment_script_templateCosigners obj] : ["template" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf1Payment_script_templateTemplate obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletResponseBody200OneOf1Payment_script_template
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedWalletResponseBody200OneOf1Payment_script_template" (\obj -> (GHC.Base.pure GetSharedWalletResponseBody200OneOf1Payment_script_template GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cosigners")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "template"))
-- | Create a new 'GetSharedWalletResponseBody200OneOf1Payment_script_template' with all required fields.
mkGetSharedWalletResponseBody200OneOf1Payment_script_template :: Data.Aeson.Types.Internal.Object -- ^ 'getSharedWalletResponseBody200OneOf1Payment_script_templateCosigners'
  -> GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateVariants -- ^ 'getSharedWalletResponseBody200OneOf1Payment_script_templateTemplate'
  -> GetSharedWalletResponseBody200OneOf1Payment_script_template
mkGetSharedWalletResponseBody200OneOf1Payment_script_template getSharedWalletResponseBody200OneOf1Payment_script_templateCosigners getSharedWalletResponseBody200OneOf1Payment_script_templateTemplate = GetSharedWalletResponseBody200OneOf1Payment_script_template{getSharedWalletResponseBody200OneOf1Payment_script_templateCosigners = getSharedWalletResponseBody200OneOf1Payment_script_templateCosigners,
                                                                                                                                                                                                                                                                     getSharedWalletResponseBody200OneOf1Payment_script_templateTemplate = getSharedWalletResponseBody200OneOf1Payment_script_templateTemplate}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}.GET.responses.200.content.application\/json.schema.oneOf.properties.payment_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf2 = GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf2 {
  -- | all: Script primitive for which all signing keys corresponding to all list cosigners\' verification keys are expected to make the script valid.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  getSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf2All :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf2
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["all" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf2All obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["all" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf2All obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf2
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf2" (\obj -> GHC.Base.pure GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf2 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "all"))
-- | Create a new 'GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf2' with all required fields.
mkGetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf2 :: [ScriptTemplateValue] -- ^ 'getSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf2All'
  -> GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf2
mkGetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf2 getSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf2All = GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf2{getSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf2All = getSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf2All}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}.GET.responses.200.content.application\/json.schema.oneOf.properties.payment_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf3 = GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf3 {
  -- | any: Script primitive for which a signing key corresponding to any of the list cosigners\' verification keys is expected to make the script valid. It is equivalent to \`some\` with \`\"at_least\"=1\`.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  getSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf3Any :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf3
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["any" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf3Any obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["any" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf3Any obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf3
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf3" (\obj -> GHC.Base.pure GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf3 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "any"))
-- | Create a new 'GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf3' with all required fields.
mkGetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf3 :: [ScriptTemplateValue] -- ^ 'getSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf3Any'
  -> GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf3
mkGetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf3 getSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf3Any = GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf3{getSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf3Any = getSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf3Any}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}.GET.responses.200.content.application\/json.schema.oneOf.properties.payment_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf4 = GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf4 {
  -- | some: Script primitive for which at least a given number of signing keys corresponding to the list cosigners\' verification keys are expected to make the script valid.
  getSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf4Some :: GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf4Some
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf4
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["some" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf4Some obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["some" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf4Some obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf4
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf4" (\obj -> GHC.Base.pure GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf4 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "some"))
-- | Create a new 'GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf4' with all required fields.
mkGetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf4 :: GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf4Some -- ^ 'getSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf4Some'
  -> GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf4
mkGetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf4 getSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf4Some = GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf4{getSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf4Some = getSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf4Some}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}.GET.responses.200.content.application\/json.schema.oneOf.properties.payment_script_template.properties.template.oneOf.properties.some@ in the specification.
-- 
-- Script primitive for which at least a given number of signing keys corresponding to the list cosigners\' verification keys are expected to make the script valid.
data GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf4Some = GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf4Some {
  -- | at_least
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 255.0
  -- * Minimum  of 1.0
  getSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf4SomeAt_least :: GHC.Types.Int
  -- | from
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  , getSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf4SomeFrom :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf4Some
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["at_least" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf4SomeAt_least obj] : ["from" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf4SomeFrom obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["at_least" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf4SomeAt_least obj] : ["from" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf4SomeFrom obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf4Some
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf4Some" (\obj -> (GHC.Base.pure GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf4Some GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "at_least")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "from"))
-- | Create a new 'GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf4Some' with all required fields.
mkGetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf4Some :: GHC.Types.Int -- ^ 'getSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf4SomeAt_least'
  -> [ScriptTemplateValue] -- ^ 'getSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf4SomeFrom'
  -> GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf4Some
mkGetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf4Some getSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf4SomeAt_least getSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf4SomeFrom = GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf4Some{getSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf4SomeAt_least = getSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf4SomeAt_least,
                                                                                                                                                                                                                                                                                                                                        getSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf4SomeFrom = getSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf4SomeFrom}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}.GET.responses.200.content.application\/json.schema.oneOf.properties.payment_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf5 = GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf5 {
  -- | active_from: Transaction is only valid starting at the specified slot number (\`â‰¥ active_from\`).
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  getSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf5Active_from :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf5
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["active_from" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf5Active_from obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["active_from" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf5Active_from obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf5
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf5" (\obj -> GHC.Base.pure GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf5 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active_from"))
-- | Create a new 'GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf5' with all required fields.
mkGetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf5 :: GHC.Types.Int -- ^ 'getSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf5Active_from'
  -> GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf5
mkGetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf5 getSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf5Active_from = GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf5{getSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf5Active_from = getSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf5Active_from}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}.GET.responses.200.content.application\/json.schema.oneOf.properties.payment_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf6 = GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf6 {
  -- | active_until: Transaction is only valid before the specified slot number (\`\< active_until\`).
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  getSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf6Active_until :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf6
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["active_until" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf6Active_until obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["active_until" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf6Active_until obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf6
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf6" (\obj -> GHC.Base.pure GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf6 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active_until"))
-- | Create a new 'GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf6' with all required fields.
mkGetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf6 :: GHC.Types.Int -- ^ 'getSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf6Active_until'
  -> GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf6
mkGetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf6 getSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf6Active_until = GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf6{getSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf6Active_until = getSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf6Active_until}
-- | Defines the oneOf schema located at @paths.\/shared-wallets\/{walletId}.GET.responses.200.content.application\/json.schema.oneOf.properties.payment_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateVariants =
   GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateVariant1 Data.Text.Internal.Text
  | GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateVariant2 GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf2
  | GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateVariant3 GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf3
  | GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateVariant4 GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf4
  | GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateVariant5 GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf5
  | GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateVariant6 GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateOneOf6
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateVariants
    where toJSON (GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateVariant1 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateVariant2 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateVariant3 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateVariant4 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateVariant5 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateVariant6 a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateVariants
    where parseJSON val = case (GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateVariant1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateVariant2 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateVariant3 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateVariant4 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateVariant5 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetSharedWalletResponseBody200OneOf1Payment_script_templateTemplateVariant6 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched"))))) of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}.GET.responses.200.content.application\/json.schema.oneOf.properties.state@ in the specification.
-- 
-- 
data GetSharedWalletResponseBody200OneOf1State = GetSharedWalletResponseBody200OneOf1State {

  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletResponseBody200OneOf1State
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["status" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "incomplete"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["status" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "incomplete"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletResponseBody200OneOf1State
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedWalletResponseBody200OneOf1State" (\obj -> GHC.Base.pure GetSharedWalletResponseBody200OneOf1State)
-- | Create a new 'GetSharedWalletResponseBody200OneOf1State' with all required fields.
mkGetSharedWalletResponseBody200OneOf1State :: GetSharedWalletResponseBody200OneOf1State
mkGetSharedWalletResponseBody200OneOf1State = GetSharedWalletResponseBody200OneOf1State{}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}.GET.responses.200.content.application\/json.schema.oneOf@ in the specification.
-- 
-- 
data GetSharedWalletResponseBody200OneOf2 = GetSharedWalletResponseBody200OneOf2 {
  -- | account_index: An individual segment within a derivation path.
  -- 
  -- The \`H\` suffix indicates a _Hardened_ child private key, which
  -- means that children of this key cannot be derived from the public
  -- key. Indices without a \`H\` suffix are called _Soft_.
  getSharedWalletResponseBody200OneOf2Account_index :: Data.Text.Internal.Text
  -- | address_pool_gap: Number of consecutive unused addresses allowed.
  -- 
  -- **IMPORTANT DISCLAIMER:** Using values other than \`20\` automatically makes your wallet invalid with regards to BIP-44 address discovery. It means that you **will not** be able to fully restore
  -- your wallet in a different software which is strictly following BIP-44.
  -- 
  -- Beside, using large gaps is **not recommended** as it may induce important performance degradations. Use at your own risks.
  -- 
  -- **IMPORTANT DISCLAIMER 2:** There is no way to \`import\` addresses generated outside (e.g. using cardano-addresses) into the wallet.
  -- Wallet only discovers transactions on its used and unused addresses that are within its currently seen \`address_pool_gap\`.
  -- Transactions on addresses that \"belong\" to the wallet but happen to be beyond its \`address_pool_gap\` will not be visible to the wallet.
  -- This is a technical limitation of the industry standard [BIP-44](https:\/\/github.com\/bitcoin\/bips\/blob\/master\/bip-0044.mediawiki). See also [CIP-1852](https:\/\/github.com\/cardano-foundation\/CIPs\/blob\/master\/CIP-1852\/CIP-1852.md).
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100000.0
  -- * Minimum  of 10.0
  , getSharedWalletResponseBody200OneOf2Address_pool_gap :: GHC.Types.Int
  -- | assets: Current non-Ada asset holdings of the wallet.
  -- 
  -- The amount of assets available to spend may be less than the total
  -- unspent assets due to transaction change amounts which are yet to
  -- be fully confirmed (pending).
  , getSharedWalletResponseBody200OneOf2Assets :: GetSharedWalletResponseBody200OneOf2Assets
  -- | balance: Wallet current Ada balance(s).
  , getSharedWalletResponseBody200OneOf2Balance :: GetSharedWalletResponseBody200OneOf2Balance
  -- | delegation: Delegation settings
  , getSharedWalletResponseBody200OneOf2Delegation :: GetSharedWalletResponseBody200OneOf2Delegation
  -- | delegation_script_template
  , getSharedWalletResponseBody200OneOf2Delegation_script_template :: (GHC.Maybe.Maybe GetSharedWalletResponseBody200OneOf2Delegation_script_template)
  -- | id: A unique identifier for the wallet
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 40
  -- * Minimum length of 40
  , getSharedWalletResponseBody200OneOf2Id :: Data.Text.Internal.Text
  -- | name
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 255
  -- * Minimum length of 1
  , getSharedWalletResponseBody200OneOf2Name :: Data.Text.Internal.Text
  -- | passphrase: Information about the wallet\'s passphrase
  , getSharedWalletResponseBody200OneOf2Passphrase :: (GHC.Maybe.Maybe GetSharedWalletResponseBody200OneOf2Passphrase)
  -- | payment_script_template
  , getSharedWalletResponseBody200OneOf2Payment_script_template :: GetSharedWalletResponseBody200OneOf2Payment_script_template
  -- | state: Whether a wallet is ready to use or still syncing
  , getSharedWalletResponseBody200OneOf2State :: GetSharedWalletResponseBody200OneOf2State
  -- | tip: A reference to a particular time slot, and the block height at that point.
  , getSharedWalletResponseBody200OneOf2Tip :: GetSharedWalletResponseBody200OneOf2Tip
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletResponseBody200OneOf2
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["account_index" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2Account_index obj] : ["address_pool_gap" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2Address_pool_gap obj] : ["assets" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2Assets obj] : ["balance" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2Balance obj] : ["delegation" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2Delegation obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("delegation_script_template" Data.Aeson.Types.ToJSON..=)) (getSharedWalletResponseBody200OneOf2Delegation_script_template obj) : ["id" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2Id obj] : ["name" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2Name obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("passphrase" Data.Aeson.Types.ToJSON..=)) (getSharedWalletResponseBody200OneOf2Passphrase obj) : ["payment_script_template" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2Payment_script_template obj] : ["state" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2State obj] : ["tip" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2Tip obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["account_index" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2Account_index obj] : ["address_pool_gap" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2Address_pool_gap obj] : ["assets" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2Assets obj] : ["balance" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2Balance obj] : ["delegation" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2Delegation obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("delegation_script_template" Data.Aeson.Types.ToJSON..=)) (getSharedWalletResponseBody200OneOf2Delegation_script_template obj) : ["id" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2Id obj] : ["name" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2Name obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("passphrase" Data.Aeson.Types.ToJSON..=)) (getSharedWalletResponseBody200OneOf2Passphrase obj) : ["payment_script_template" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2Payment_script_template obj] : ["state" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2State obj] : ["tip" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2Tip obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletResponseBody200OneOf2
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedWalletResponseBody200OneOf2" (\obj -> (((((((((((GHC.Base.pure GetSharedWalletResponseBody200OneOf2 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "account_index")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "address_pool_gap")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "assets")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "balance")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "delegation")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "delegation_script_template")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "passphrase")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "payment_script_template")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "state")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "tip"))
-- | Create a new 'GetSharedWalletResponseBody200OneOf2' with all required fields.
mkGetSharedWalletResponseBody200OneOf2 :: Data.Text.Internal.Text -- ^ 'getSharedWalletResponseBody200OneOf2Account_index'
  -> GHC.Types.Int -- ^ 'getSharedWalletResponseBody200OneOf2Address_pool_gap'
  -> GetSharedWalletResponseBody200OneOf2Assets -- ^ 'getSharedWalletResponseBody200OneOf2Assets'
  -> GetSharedWalletResponseBody200OneOf2Balance -- ^ 'getSharedWalletResponseBody200OneOf2Balance'
  -> GetSharedWalletResponseBody200OneOf2Delegation -- ^ 'getSharedWalletResponseBody200OneOf2Delegation'
  -> Data.Text.Internal.Text -- ^ 'getSharedWalletResponseBody200OneOf2Id'
  -> Data.Text.Internal.Text -- ^ 'getSharedWalletResponseBody200OneOf2Name'
  -> GetSharedWalletResponseBody200OneOf2Payment_script_template -- ^ 'getSharedWalletResponseBody200OneOf2Payment_script_template'
  -> GetSharedWalletResponseBody200OneOf2State -- ^ 'getSharedWalletResponseBody200OneOf2State'
  -> GetSharedWalletResponseBody200OneOf2Tip -- ^ 'getSharedWalletResponseBody200OneOf2Tip'
  -> GetSharedWalletResponseBody200OneOf2
mkGetSharedWalletResponseBody200OneOf2 getSharedWalletResponseBody200OneOf2Account_index getSharedWalletResponseBody200OneOf2Address_pool_gap getSharedWalletResponseBody200OneOf2Assets getSharedWalletResponseBody200OneOf2Balance getSharedWalletResponseBody200OneOf2Delegation getSharedWalletResponseBody200OneOf2Id getSharedWalletResponseBody200OneOf2Name getSharedWalletResponseBody200OneOf2Payment_script_template getSharedWalletResponseBody200OneOf2State getSharedWalletResponseBody200OneOf2Tip = GetSharedWalletResponseBody200OneOf2{getSharedWalletResponseBody200OneOf2Account_index = getSharedWalletResponseBody200OneOf2Account_index,
getSharedWalletResponseBody200OneOf2Address_pool_gap = getSharedWalletResponseBody200OneOf2Address_pool_gap,
getSharedWalletResponseBody200OneOf2Assets = getSharedWalletResponseBody200OneOf2Assets,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         getSharedWalletResponseBody200OneOf2Balance = getSharedWalletResponseBody200OneOf2Balance,
getSharedWalletResponseBody200OneOf2Delegation = getSharedWalletResponseBody200OneOf2Delegation,
getSharedWalletResponseBody200OneOf2Delegation_script_template = GHC.Maybe.Nothing,
getSharedWalletResponseBody200OneOf2Id = getSharedWalletResponseBody200OneOf2Id,
getSharedWalletResponseBody200OneOf2Name = getSharedWalletResponseBody200OneOf2Name,
getSharedWalletResponseBody200OneOf2Passphrase = GHC.Maybe.Nothing,
getSharedWalletResponseBody200OneOf2Payment_script_template = getSharedWalletResponseBody200OneOf2Payment_script_template,
getSharedWalletResponseBody200OneOf2State = getSharedWalletResponseBody200OneOf2State,
getSharedWalletResponseBody200OneOf2Tip = getSharedWalletResponseBody200OneOf2Tip}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}.GET.responses.200.content.application\/json.schema.oneOf.properties.assets@ in the specification.
-- 
-- Current non-Ada asset holdings of the wallet.
-- 
-- The amount of assets available to spend may be less than the total
-- unspent assets due to transaction change amounts which are yet to
-- be fully confirmed (pending).
data GetSharedWalletResponseBody200OneOf2Assets = GetSharedWalletResponseBody200OneOf2Assets {
  -- | available: Available UTxO asset balances (funds that can be spent without
  -- condition).
  getSharedWalletResponseBody200OneOf2AssetsAvailable :: ([GetSharedWalletResponseBody200OneOf2AssetsAvailable])
  -- | total: Total asset balances (available balances plus pending change balances).
  , getSharedWalletResponseBody200OneOf2AssetsTotal :: ([GetSharedWalletResponseBody200OneOf2AssetsTotal])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletResponseBody200OneOf2Assets
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["available" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2AssetsAvailable obj] : ["total" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2AssetsTotal obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["available" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2AssetsAvailable obj] : ["total" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2AssetsTotal obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletResponseBody200OneOf2Assets
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedWalletResponseBody200OneOf2Assets" (\obj -> (GHC.Base.pure GetSharedWalletResponseBody200OneOf2Assets GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "available")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "total"))
-- | Create a new 'GetSharedWalletResponseBody200OneOf2Assets' with all required fields.
mkGetSharedWalletResponseBody200OneOf2Assets :: [GetSharedWalletResponseBody200OneOf2AssetsAvailable] -- ^ 'getSharedWalletResponseBody200OneOf2AssetsAvailable'
  -> [GetSharedWalletResponseBody200OneOf2AssetsTotal] -- ^ 'getSharedWalletResponseBody200OneOf2AssetsTotal'
  -> GetSharedWalletResponseBody200OneOf2Assets
mkGetSharedWalletResponseBody200OneOf2Assets getSharedWalletResponseBody200OneOf2AssetsAvailable getSharedWalletResponseBody200OneOf2AssetsTotal = GetSharedWalletResponseBody200OneOf2Assets{getSharedWalletResponseBody200OneOf2AssetsAvailable = getSharedWalletResponseBody200OneOf2AssetsAvailable,
                                                                                                                                                                                              getSharedWalletResponseBody200OneOf2AssetsTotal = getSharedWalletResponseBody200OneOf2AssetsTotal}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}.GET.responses.200.content.application\/json.schema.oneOf.properties.assets.properties.available.items@ in the specification.
-- 
-- An asset on the Cardano blockchain. An asset is uniquely identified by
-- its \`policy_id\` and \`asset_name\` (together, these form the _asset id_).
-- 
-- Two assets with the same \`asset_name\` and \`policy_id\` are
-- interchangeable. Yet, different assets with a same \`policy_id\` but
-- different \`asset_name\` are treated as separate assets, as are two
-- assets with the same \`asset_name\` but different \`policy_id\`.
data GetSharedWalletResponseBody200OneOf2AssetsAvailable = GetSharedWalletResponseBody200OneOf2AssetsAvailable {
  -- | asset_name: The asset on-chain type which acts as a sub-identifier within a
  -- policy. Although we call it \"asset name\", the value needn\'t be
  -- text, and it could even be empty.
  -- 
  -- For policies with a single fungible asset item, asset name is
  -- typically an empty string.
  -- 
  -- This value can be up to 32 bytes of arbitrary data (which is 64
  -- hexadecimal digits).
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  getSharedWalletResponseBody200OneOf2AssetsAvailableAsset_name :: Data.Text.Internal.Text
  -- | policy_id: A unique identifier of the asset\'s monetary policy. The policy
  -- controls how assets of this kind are created and destroyed.
  -- 
  -- The contents are the blake2b-224 hash of the monetary policy
  -- script, encoded in hexadecimal.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 56
  -- * Minimum length of 56
  , getSharedWalletResponseBody200OneOf2AssetsAvailablePolicy_id :: Data.Text.Internal.Text
  -- | quantity: Number of assets for the given \`policy_id\` and \`asset_name\`.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , getSharedWalletResponseBody200OneOf2AssetsAvailableQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletResponseBody200OneOf2AssetsAvailable
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["asset_name" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2AssetsAvailableAsset_name obj] : ["policy_id" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2AssetsAvailablePolicy_id obj] : ["quantity" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2AssetsAvailableQuantity obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["asset_name" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2AssetsAvailableAsset_name obj] : ["policy_id" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2AssetsAvailablePolicy_id obj] : ["quantity" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2AssetsAvailableQuantity obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletResponseBody200OneOf2AssetsAvailable
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedWalletResponseBody200OneOf2AssetsAvailable" (\obj -> ((GHC.Base.pure GetSharedWalletResponseBody200OneOf2AssetsAvailable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "asset_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "policy_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'GetSharedWalletResponseBody200OneOf2AssetsAvailable' with all required fields.
mkGetSharedWalletResponseBody200OneOf2AssetsAvailable :: Data.Text.Internal.Text -- ^ 'getSharedWalletResponseBody200OneOf2AssetsAvailableAsset_name'
  -> Data.Text.Internal.Text -- ^ 'getSharedWalletResponseBody200OneOf2AssetsAvailablePolicy_id'
  -> GHC.Types.Int -- ^ 'getSharedWalletResponseBody200OneOf2AssetsAvailableQuantity'
  -> GetSharedWalletResponseBody200OneOf2AssetsAvailable
mkGetSharedWalletResponseBody200OneOf2AssetsAvailable getSharedWalletResponseBody200OneOf2AssetsAvailableAsset_name getSharedWalletResponseBody200OneOf2AssetsAvailablePolicy_id getSharedWalletResponseBody200OneOf2AssetsAvailableQuantity = GetSharedWalletResponseBody200OneOf2AssetsAvailable{getSharedWalletResponseBody200OneOf2AssetsAvailableAsset_name = getSharedWalletResponseBody200OneOf2AssetsAvailableAsset_name,
                                                                                                                                                                                                                                                                                                   getSharedWalletResponseBody200OneOf2AssetsAvailablePolicy_id = getSharedWalletResponseBody200OneOf2AssetsAvailablePolicy_id,
                                                                                                                                                                                                                                                                                                   getSharedWalletResponseBody200OneOf2AssetsAvailableQuantity = getSharedWalletResponseBody200OneOf2AssetsAvailableQuantity}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}.GET.responses.200.content.application\/json.schema.oneOf.properties.assets.properties.total.items@ in the specification.
-- 
-- An asset on the Cardano blockchain. An asset is uniquely identified by
-- its \`policy_id\` and \`asset_name\` (together, these form the _asset id_).
-- 
-- Two assets with the same \`asset_name\` and \`policy_id\` are
-- interchangeable. Yet, different assets with a same \`policy_id\` but
-- different \`asset_name\` are treated as separate assets, as are two
-- assets with the same \`asset_name\` but different \`policy_id\`.
data GetSharedWalletResponseBody200OneOf2AssetsTotal = GetSharedWalletResponseBody200OneOf2AssetsTotal {
  -- | asset_name: The asset on-chain type which acts as a sub-identifier within a
  -- policy. Although we call it \"asset name\", the value needn\'t be
  -- text, and it could even be empty.
  -- 
  -- For policies with a single fungible asset item, asset name is
  -- typically an empty string.
  -- 
  -- This value can be up to 32 bytes of arbitrary data (which is 64
  -- hexadecimal digits).
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  getSharedWalletResponseBody200OneOf2AssetsTotalAsset_name :: Data.Text.Internal.Text
  -- | policy_id: A unique identifier of the asset\'s monetary policy. The policy
  -- controls how assets of this kind are created and destroyed.
  -- 
  -- The contents are the blake2b-224 hash of the monetary policy
  -- script, encoded in hexadecimal.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 56
  -- * Minimum length of 56
  , getSharedWalletResponseBody200OneOf2AssetsTotalPolicy_id :: Data.Text.Internal.Text
  -- | quantity: Number of assets for the given \`policy_id\` and \`asset_name\`.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , getSharedWalletResponseBody200OneOf2AssetsTotalQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletResponseBody200OneOf2AssetsTotal
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["asset_name" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2AssetsTotalAsset_name obj] : ["policy_id" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2AssetsTotalPolicy_id obj] : ["quantity" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2AssetsTotalQuantity obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["asset_name" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2AssetsTotalAsset_name obj] : ["policy_id" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2AssetsTotalPolicy_id obj] : ["quantity" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2AssetsTotalQuantity obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletResponseBody200OneOf2AssetsTotal
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedWalletResponseBody200OneOf2AssetsTotal" (\obj -> ((GHC.Base.pure GetSharedWalletResponseBody200OneOf2AssetsTotal GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "asset_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "policy_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'GetSharedWalletResponseBody200OneOf2AssetsTotal' with all required fields.
mkGetSharedWalletResponseBody200OneOf2AssetsTotal :: Data.Text.Internal.Text -- ^ 'getSharedWalletResponseBody200OneOf2AssetsTotalAsset_name'
  -> Data.Text.Internal.Text -- ^ 'getSharedWalletResponseBody200OneOf2AssetsTotalPolicy_id'
  -> GHC.Types.Int -- ^ 'getSharedWalletResponseBody200OneOf2AssetsTotalQuantity'
  -> GetSharedWalletResponseBody200OneOf2AssetsTotal
mkGetSharedWalletResponseBody200OneOf2AssetsTotal getSharedWalletResponseBody200OneOf2AssetsTotalAsset_name getSharedWalletResponseBody200OneOf2AssetsTotalPolicy_id getSharedWalletResponseBody200OneOf2AssetsTotalQuantity = GetSharedWalletResponseBody200OneOf2AssetsTotal{getSharedWalletResponseBody200OneOf2AssetsTotalAsset_name = getSharedWalletResponseBody200OneOf2AssetsTotalAsset_name,
                                                                                                                                                                                                                                                                               getSharedWalletResponseBody200OneOf2AssetsTotalPolicy_id = getSharedWalletResponseBody200OneOf2AssetsTotalPolicy_id,
                                                                                                                                                                                                                                                                               getSharedWalletResponseBody200OneOf2AssetsTotalQuantity = getSharedWalletResponseBody200OneOf2AssetsTotalQuantity}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}.GET.responses.200.content.application\/json.schema.oneOf.properties.balance@ in the specification.
-- 
-- Wallet current Ada balance(s).
data GetSharedWalletResponseBody200OneOf2Balance = GetSharedWalletResponseBody200OneOf2Balance {
  -- | available: Available Ada UTxO balance (funds that can be spent without condition).
  getSharedWalletResponseBody200OneOf2BalanceAvailable :: GetSharedWalletResponseBody200OneOf2BalanceAvailable
  -- | reward: The Ada balance of the reward account for this wallet.
  , getSharedWalletResponseBody200OneOf2BalanceReward :: GetSharedWalletResponseBody200OneOf2BalanceReward
  -- | total: Total Ada balance (available balance plus pending change and reward balance).
  , getSharedWalletResponseBody200OneOf2BalanceTotal :: GetSharedWalletResponseBody200OneOf2BalanceTotal
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletResponseBody200OneOf2Balance
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["available" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2BalanceAvailable obj] : ["reward" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2BalanceReward obj] : ["total" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2BalanceTotal obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["available" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2BalanceAvailable obj] : ["reward" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2BalanceReward obj] : ["total" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2BalanceTotal obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletResponseBody200OneOf2Balance
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedWalletResponseBody200OneOf2Balance" (\obj -> ((GHC.Base.pure GetSharedWalletResponseBody200OneOf2Balance GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "available")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "reward")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "total"))
-- | Create a new 'GetSharedWalletResponseBody200OneOf2Balance' with all required fields.
mkGetSharedWalletResponseBody200OneOf2Balance :: GetSharedWalletResponseBody200OneOf2BalanceAvailable -- ^ 'getSharedWalletResponseBody200OneOf2BalanceAvailable'
  -> GetSharedWalletResponseBody200OneOf2BalanceReward -- ^ 'getSharedWalletResponseBody200OneOf2BalanceReward'
  -> GetSharedWalletResponseBody200OneOf2BalanceTotal -- ^ 'getSharedWalletResponseBody200OneOf2BalanceTotal'
  -> GetSharedWalletResponseBody200OneOf2Balance
mkGetSharedWalletResponseBody200OneOf2Balance getSharedWalletResponseBody200OneOf2BalanceAvailable getSharedWalletResponseBody200OneOf2BalanceReward getSharedWalletResponseBody200OneOf2BalanceTotal = GetSharedWalletResponseBody200OneOf2Balance{getSharedWalletResponseBody200OneOf2BalanceAvailable = getSharedWalletResponseBody200OneOf2BalanceAvailable,
                                                                                                                                                                                                                                                    getSharedWalletResponseBody200OneOf2BalanceReward = getSharedWalletResponseBody200OneOf2BalanceReward,
                                                                                                                                                                                                                                                    getSharedWalletResponseBody200OneOf2BalanceTotal = getSharedWalletResponseBody200OneOf2BalanceTotal}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}.GET.responses.200.content.application\/json.schema.oneOf.properties.balance.properties.available@ in the specification.
-- 
-- Available Ada UTxO balance (funds that can be spent without condition).
data GetSharedWalletResponseBody200OneOf2BalanceAvailable = GetSharedWalletResponseBody200OneOf2BalanceAvailable {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  getSharedWalletResponseBody200OneOf2BalanceAvailableQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletResponseBody200OneOf2BalanceAvailable
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2BalanceAvailableQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2BalanceAvailableQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletResponseBody200OneOf2BalanceAvailable
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedWalletResponseBody200OneOf2BalanceAvailable" (\obj -> GHC.Base.pure GetSharedWalletResponseBody200OneOf2BalanceAvailable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'GetSharedWalletResponseBody200OneOf2BalanceAvailable' with all required fields.
mkGetSharedWalletResponseBody200OneOf2BalanceAvailable :: GHC.Types.Int -- ^ 'getSharedWalletResponseBody200OneOf2BalanceAvailableQuantity'
  -> GetSharedWalletResponseBody200OneOf2BalanceAvailable
mkGetSharedWalletResponseBody200OneOf2BalanceAvailable getSharedWalletResponseBody200OneOf2BalanceAvailableQuantity = GetSharedWalletResponseBody200OneOf2BalanceAvailable{getSharedWalletResponseBody200OneOf2BalanceAvailableQuantity = getSharedWalletResponseBody200OneOf2BalanceAvailableQuantity}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}.GET.responses.200.content.application\/json.schema.oneOf.properties.balance.properties.reward@ in the specification.
-- 
-- The Ada balance of the reward account for this wallet.
data GetSharedWalletResponseBody200OneOf2BalanceReward = GetSharedWalletResponseBody200OneOf2BalanceReward {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  getSharedWalletResponseBody200OneOf2BalanceRewardQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletResponseBody200OneOf2BalanceReward
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2BalanceRewardQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2BalanceRewardQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletResponseBody200OneOf2BalanceReward
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedWalletResponseBody200OneOf2BalanceReward" (\obj -> GHC.Base.pure GetSharedWalletResponseBody200OneOf2BalanceReward GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'GetSharedWalletResponseBody200OneOf2BalanceReward' with all required fields.
mkGetSharedWalletResponseBody200OneOf2BalanceReward :: GHC.Types.Int -- ^ 'getSharedWalletResponseBody200OneOf2BalanceRewardQuantity'
  -> GetSharedWalletResponseBody200OneOf2BalanceReward
mkGetSharedWalletResponseBody200OneOf2BalanceReward getSharedWalletResponseBody200OneOf2BalanceRewardQuantity = GetSharedWalletResponseBody200OneOf2BalanceReward{getSharedWalletResponseBody200OneOf2BalanceRewardQuantity = getSharedWalletResponseBody200OneOf2BalanceRewardQuantity}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}.GET.responses.200.content.application\/json.schema.oneOf.properties.balance.properties.total@ in the specification.
-- 
-- Total Ada balance (available balance plus pending change and reward balance).
data GetSharedWalletResponseBody200OneOf2BalanceTotal = GetSharedWalletResponseBody200OneOf2BalanceTotal {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  getSharedWalletResponseBody200OneOf2BalanceTotalQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletResponseBody200OneOf2BalanceTotal
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2BalanceTotalQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2BalanceTotalQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletResponseBody200OneOf2BalanceTotal
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedWalletResponseBody200OneOf2BalanceTotal" (\obj -> GHC.Base.pure GetSharedWalletResponseBody200OneOf2BalanceTotal GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'GetSharedWalletResponseBody200OneOf2BalanceTotal' with all required fields.
mkGetSharedWalletResponseBody200OneOf2BalanceTotal :: GHC.Types.Int -- ^ 'getSharedWalletResponseBody200OneOf2BalanceTotalQuantity'
  -> GetSharedWalletResponseBody200OneOf2BalanceTotal
mkGetSharedWalletResponseBody200OneOf2BalanceTotal getSharedWalletResponseBody200OneOf2BalanceTotalQuantity = GetSharedWalletResponseBody200OneOf2BalanceTotal{getSharedWalletResponseBody200OneOf2BalanceTotalQuantity = getSharedWalletResponseBody200OneOf2BalanceTotalQuantity}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}.GET.responses.200.content.application\/json.schema.oneOf.properties.delegation@ in the specification.
-- 
-- Delegation settings
data GetSharedWalletResponseBody200OneOf2Delegation = GetSharedWalletResponseBody200OneOf2Delegation {
  -- | active: Currently active delegation status.
  getSharedWalletResponseBody200OneOf2DelegationActive :: GetSharedWalletResponseBody200OneOf2DelegationActive
  -- | next
  , getSharedWalletResponseBody200OneOf2DelegationNext :: ([GetSharedWalletResponseBody200OneOf2DelegationNext])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletResponseBody200OneOf2Delegation
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["active" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2DelegationActive obj] : ["next" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2DelegationNext obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["active" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2DelegationActive obj] : ["next" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2DelegationNext obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletResponseBody200OneOf2Delegation
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedWalletResponseBody200OneOf2Delegation" (\obj -> (GHC.Base.pure GetSharedWalletResponseBody200OneOf2Delegation GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "next"))
-- | Create a new 'GetSharedWalletResponseBody200OneOf2Delegation' with all required fields.
mkGetSharedWalletResponseBody200OneOf2Delegation :: GetSharedWalletResponseBody200OneOf2DelegationActive -- ^ 'getSharedWalletResponseBody200OneOf2DelegationActive'
  -> [GetSharedWalletResponseBody200OneOf2DelegationNext] -- ^ 'getSharedWalletResponseBody200OneOf2DelegationNext'
  -> GetSharedWalletResponseBody200OneOf2Delegation
mkGetSharedWalletResponseBody200OneOf2Delegation getSharedWalletResponseBody200OneOf2DelegationActive getSharedWalletResponseBody200OneOf2DelegationNext = GetSharedWalletResponseBody200OneOf2Delegation{getSharedWalletResponseBody200OneOf2DelegationActive = getSharedWalletResponseBody200OneOf2DelegationActive,
                                                                                                                                                                                                          getSharedWalletResponseBody200OneOf2DelegationNext = getSharedWalletResponseBody200OneOf2DelegationNext}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}.GET.responses.200.content.application\/json.schema.oneOf.properties.delegation.properties.active@ in the specification.
-- 
-- Currently active delegation status.
data GetSharedWalletResponseBody200OneOf2DelegationActive = GetSharedWalletResponseBody200OneOf2DelegationActive {
  -- | status
  getSharedWalletResponseBody200OneOf2DelegationActiveStatus :: GetSharedWalletResponseBody200OneOf2DelegationActiveStatus
  -- | target: A unique Stake-Pool identifier (present only if status = \`delegating\`)
  , getSharedWalletResponseBody200OneOf2DelegationActiveTarget :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletResponseBody200OneOf2DelegationActive
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["status" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2DelegationActiveStatus obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("target" Data.Aeson.Types.ToJSON..=)) (getSharedWalletResponseBody200OneOf2DelegationActiveTarget obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["status" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2DelegationActiveStatus obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("target" Data.Aeson.Types.ToJSON..=)) (getSharedWalletResponseBody200OneOf2DelegationActiveTarget obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletResponseBody200OneOf2DelegationActive
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedWalletResponseBody200OneOf2DelegationActive" (\obj -> (GHC.Base.pure GetSharedWalletResponseBody200OneOf2DelegationActive GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "target"))
-- | Create a new 'GetSharedWalletResponseBody200OneOf2DelegationActive' with all required fields.
mkGetSharedWalletResponseBody200OneOf2DelegationActive :: GetSharedWalletResponseBody200OneOf2DelegationActiveStatus -- ^ 'getSharedWalletResponseBody200OneOf2DelegationActiveStatus'
  -> GetSharedWalletResponseBody200OneOf2DelegationActive
mkGetSharedWalletResponseBody200OneOf2DelegationActive getSharedWalletResponseBody200OneOf2DelegationActiveStatus = GetSharedWalletResponseBody200OneOf2DelegationActive{getSharedWalletResponseBody200OneOf2DelegationActiveStatus = getSharedWalletResponseBody200OneOf2DelegationActiveStatus,
                                                                                                                                                                         getSharedWalletResponseBody200OneOf2DelegationActiveTarget = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/shared-wallets\/{walletId}.GET.responses.200.content.application\/json.schema.oneOf.properties.delegation.properties.active.properties.status@ in the specification.
-- 
-- 
data GetSharedWalletResponseBody200OneOf2DelegationActiveStatus =
   GetSharedWalletResponseBody200OneOf2DelegationActiveStatusOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetSharedWalletResponseBody200OneOf2DelegationActiveStatusTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetSharedWalletResponseBody200OneOf2DelegationActiveStatusEnumNot_delegating -- ^ Represents the JSON value @"not_delegating"@
  | GetSharedWalletResponseBody200OneOf2DelegationActiveStatusEnumDelegating -- ^ Represents the JSON value @"delegating"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletResponseBody200OneOf2DelegationActiveStatus
    where toJSON (GetSharedWalletResponseBody200OneOf2DelegationActiveStatusOther val) = val
          toJSON (GetSharedWalletResponseBody200OneOf2DelegationActiveStatusTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetSharedWalletResponseBody200OneOf2DelegationActiveStatusEnumNot_delegating) = "not_delegating"
          toJSON (GetSharedWalletResponseBody200OneOf2DelegationActiveStatusEnumDelegating) = "delegating"
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletResponseBody200OneOf2DelegationActiveStatus
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "not_delegating" -> GetSharedWalletResponseBody200OneOf2DelegationActiveStatusEnumNot_delegating
                                            | val GHC.Classes.== "delegating" -> GetSharedWalletResponseBody200OneOf2DelegationActiveStatusEnumDelegating
                                            | GHC.Base.otherwise -> GetSharedWalletResponseBody200OneOf2DelegationActiveStatusOther val)
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}.GET.responses.200.content.application\/json.schema.oneOf.properties.delegation.properties.next.items@ in the specification.
-- 
-- Next delegation status becomes active at the start of the second epoch after the corresponding delegation certificate was discovered. The exact moment is specified by changes_at
data GetSharedWalletResponseBody200OneOf2DelegationNext = GetSharedWalletResponseBody200OneOf2DelegationNext {
  -- | changes_at
  getSharedWalletResponseBody200OneOf2DelegationNextChanges_at :: GetSharedWalletResponseBody200OneOf2DelegationNextChanges_at
  -- | status
  , getSharedWalletResponseBody200OneOf2DelegationNextStatus :: GetSharedWalletResponseBody200OneOf2DelegationNextStatus
  -- | target: A unique Stake-Pool identifier (present only if status = \`delegating\`)
  , getSharedWalletResponseBody200OneOf2DelegationNextTarget :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletResponseBody200OneOf2DelegationNext
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["changes_at" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2DelegationNextChanges_at obj] : ["status" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2DelegationNextStatus obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("target" Data.Aeson.Types.ToJSON..=)) (getSharedWalletResponseBody200OneOf2DelegationNextTarget obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["changes_at" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2DelegationNextChanges_at obj] : ["status" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2DelegationNextStatus obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("target" Data.Aeson.Types.ToJSON..=)) (getSharedWalletResponseBody200OneOf2DelegationNextTarget obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletResponseBody200OneOf2DelegationNext
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedWalletResponseBody200OneOf2DelegationNext" (\obj -> ((GHC.Base.pure GetSharedWalletResponseBody200OneOf2DelegationNext GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "changes_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "target"))
-- | Create a new 'GetSharedWalletResponseBody200OneOf2DelegationNext' with all required fields.
mkGetSharedWalletResponseBody200OneOf2DelegationNext :: GetSharedWalletResponseBody200OneOf2DelegationNextChanges_at -- ^ 'getSharedWalletResponseBody200OneOf2DelegationNextChanges_at'
  -> GetSharedWalletResponseBody200OneOf2DelegationNextStatus -- ^ 'getSharedWalletResponseBody200OneOf2DelegationNextStatus'
  -> GetSharedWalletResponseBody200OneOf2DelegationNext
mkGetSharedWalletResponseBody200OneOf2DelegationNext getSharedWalletResponseBody200OneOf2DelegationNextChanges_at getSharedWalletResponseBody200OneOf2DelegationNextStatus = GetSharedWalletResponseBody200OneOf2DelegationNext{getSharedWalletResponseBody200OneOf2DelegationNextChanges_at = getSharedWalletResponseBody200OneOf2DelegationNextChanges_at,
                                                                                                                                                                                                                                getSharedWalletResponseBody200OneOf2DelegationNextStatus = getSharedWalletResponseBody200OneOf2DelegationNextStatus,
                                                                                                                                                                                                                                getSharedWalletResponseBody200OneOf2DelegationNextTarget = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}.GET.responses.200.content.application\/json.schema.oneOf.properties.delegation.properties.next.items.properties.changes_at@ in the specification.
-- 
-- 
data GetSharedWalletResponseBody200OneOf2DelegationNextChanges_at = GetSharedWalletResponseBody200OneOf2DelegationNextChanges_at {
  -- | epoch_number: An epoch is a time period which is divided into slots.
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  getSharedWalletResponseBody200OneOf2DelegationNextChanges_atEpoch_number :: GHC.Types.Int
  -- | epoch_start_time
  , getSharedWalletResponseBody200OneOf2DelegationNextChanges_atEpoch_start_time :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletResponseBody200OneOf2DelegationNextChanges_at
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["epoch_number" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2DelegationNextChanges_atEpoch_number obj] : ["epoch_start_time" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2DelegationNextChanges_atEpoch_start_time obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["epoch_number" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2DelegationNextChanges_atEpoch_number obj] : ["epoch_start_time" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2DelegationNextChanges_atEpoch_start_time obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletResponseBody200OneOf2DelegationNextChanges_at
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedWalletResponseBody200OneOf2DelegationNextChanges_at" (\obj -> (GHC.Base.pure GetSharedWalletResponseBody200OneOf2DelegationNextChanges_at GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "epoch_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "epoch_start_time"))
-- | Create a new 'GetSharedWalletResponseBody200OneOf2DelegationNextChanges_at' with all required fields.
mkGetSharedWalletResponseBody200OneOf2DelegationNextChanges_at :: GHC.Types.Int -- ^ 'getSharedWalletResponseBody200OneOf2DelegationNextChanges_atEpoch_number'
  -> Data.Text.Internal.Text -- ^ 'getSharedWalletResponseBody200OneOf2DelegationNextChanges_atEpoch_start_time'
  -> GetSharedWalletResponseBody200OneOf2DelegationNextChanges_at
mkGetSharedWalletResponseBody200OneOf2DelegationNextChanges_at getSharedWalletResponseBody200OneOf2DelegationNextChanges_atEpoch_number getSharedWalletResponseBody200OneOf2DelegationNextChanges_atEpoch_start_time = GetSharedWalletResponseBody200OneOf2DelegationNextChanges_at{getSharedWalletResponseBody200OneOf2DelegationNextChanges_atEpoch_number = getSharedWalletResponseBody200OneOf2DelegationNextChanges_atEpoch_number,
                                                                                                                                                                                                                                                                                    getSharedWalletResponseBody200OneOf2DelegationNextChanges_atEpoch_start_time = getSharedWalletResponseBody200OneOf2DelegationNextChanges_atEpoch_start_time}
-- | Defines the enum schema located at @paths.\/shared-wallets\/{walletId}.GET.responses.200.content.application\/json.schema.oneOf.properties.delegation.properties.next.items.properties.status@ in the specification.
-- 
-- 
data GetSharedWalletResponseBody200OneOf2DelegationNextStatus =
   GetSharedWalletResponseBody200OneOf2DelegationNextStatusOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetSharedWalletResponseBody200OneOf2DelegationNextStatusTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetSharedWalletResponseBody200OneOf2DelegationNextStatusEnumNot_delegating -- ^ Represents the JSON value @"not_delegating"@
  | GetSharedWalletResponseBody200OneOf2DelegationNextStatusEnumDelegating -- ^ Represents the JSON value @"delegating"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletResponseBody200OneOf2DelegationNextStatus
    where toJSON (GetSharedWalletResponseBody200OneOf2DelegationNextStatusOther val) = val
          toJSON (GetSharedWalletResponseBody200OneOf2DelegationNextStatusTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetSharedWalletResponseBody200OneOf2DelegationNextStatusEnumNot_delegating) = "not_delegating"
          toJSON (GetSharedWalletResponseBody200OneOf2DelegationNextStatusEnumDelegating) = "delegating"
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletResponseBody200OneOf2DelegationNextStatus
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "not_delegating" -> GetSharedWalletResponseBody200OneOf2DelegationNextStatusEnumNot_delegating
                                            | val GHC.Classes.== "delegating" -> GetSharedWalletResponseBody200OneOf2DelegationNextStatusEnumDelegating
                                            | GHC.Base.otherwise -> GetSharedWalletResponseBody200OneOf2DelegationNextStatusOther val)
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}.GET.responses.200.content.application\/json.schema.oneOf.properties.delegation_script_template@ in the specification.
-- 
-- 
data GetSharedWalletResponseBody200OneOf2Delegation_script_template = GetSharedWalletResponseBody200OneOf2Delegation_script_template {
  -- | cosigners: Map of cosigners and their account public keys. Use key as in &cosigner, eg. \"cosigner\#\"
  getSharedWalletResponseBody200OneOf2Delegation_script_templateCosigners :: Data.Aeson.Types.Internal.Object
  -- | template
  , getSharedWalletResponseBody200OneOf2Delegation_script_templateTemplate :: GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateVariants
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletResponseBody200OneOf2Delegation_script_template
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["cosigners" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2Delegation_script_templateCosigners obj] : ["template" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2Delegation_script_templateTemplate obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["cosigners" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2Delegation_script_templateCosigners obj] : ["template" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2Delegation_script_templateTemplate obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletResponseBody200OneOf2Delegation_script_template
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedWalletResponseBody200OneOf2Delegation_script_template" (\obj -> (GHC.Base.pure GetSharedWalletResponseBody200OneOf2Delegation_script_template GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cosigners")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "template"))
-- | Create a new 'GetSharedWalletResponseBody200OneOf2Delegation_script_template' with all required fields.
mkGetSharedWalletResponseBody200OneOf2Delegation_script_template :: Data.Aeson.Types.Internal.Object -- ^ 'getSharedWalletResponseBody200OneOf2Delegation_script_templateCosigners'
  -> GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateVariants -- ^ 'getSharedWalletResponseBody200OneOf2Delegation_script_templateTemplate'
  -> GetSharedWalletResponseBody200OneOf2Delegation_script_template
mkGetSharedWalletResponseBody200OneOf2Delegation_script_template getSharedWalletResponseBody200OneOf2Delegation_script_templateCosigners getSharedWalletResponseBody200OneOf2Delegation_script_templateTemplate = GetSharedWalletResponseBody200OneOf2Delegation_script_template{getSharedWalletResponseBody200OneOf2Delegation_script_templateCosigners = getSharedWalletResponseBody200OneOf2Delegation_script_templateCosigners,
                                                                                                                                                                                                                                                                                 getSharedWalletResponseBody200OneOf2Delegation_script_templateTemplate = getSharedWalletResponseBody200OneOf2Delegation_script_templateTemplate}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}.GET.responses.200.content.application\/json.schema.oneOf.properties.delegation_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf2 = GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf2 {
  -- | all: Script primitive for which all signing keys corresponding to all list cosigners\' verification keys are expected to make the script valid.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  getSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf2All :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf2
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["all" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf2All obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["all" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf2All obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf2
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf2" (\obj -> GHC.Base.pure GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf2 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "all"))
-- | Create a new 'GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf2' with all required fields.
mkGetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf2 :: [ScriptTemplateValue] -- ^ 'getSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf2All'
  -> GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf2
mkGetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf2 getSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf2All = GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf2{getSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf2All = getSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf2All}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}.GET.responses.200.content.application\/json.schema.oneOf.properties.delegation_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf3 = GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf3 {
  -- | any: Script primitive for which a signing key corresponding to any of the list cosigners\' verification keys is expected to make the script valid. It is equivalent to \`some\` with \`\"at_least\"=1\`.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  getSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf3Any :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf3
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["any" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf3Any obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["any" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf3Any obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf3
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf3" (\obj -> GHC.Base.pure GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf3 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "any"))
-- | Create a new 'GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf3' with all required fields.
mkGetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf3 :: [ScriptTemplateValue] -- ^ 'getSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf3Any'
  -> GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf3
mkGetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf3 getSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf3Any = GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf3{getSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf3Any = getSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf3Any}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}.GET.responses.200.content.application\/json.schema.oneOf.properties.delegation_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf4 = GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf4 {
  -- | some: Script primitive for which at least a given number of signing keys corresponding to the list cosigners\' verification keys are expected to make the script valid.
  getSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf4Some :: GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf4Some
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf4
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["some" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf4Some obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["some" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf4Some obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf4
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf4" (\obj -> GHC.Base.pure GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf4 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "some"))
-- | Create a new 'GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf4' with all required fields.
mkGetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf4 :: GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf4Some -- ^ 'getSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf4Some'
  -> GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf4
mkGetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf4 getSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf4Some = GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf4{getSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf4Some = getSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf4Some}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}.GET.responses.200.content.application\/json.schema.oneOf.properties.delegation_script_template.properties.template.oneOf.properties.some@ in the specification.
-- 
-- Script primitive for which at least a given number of signing keys corresponding to the list cosigners\' verification keys are expected to make the script valid.
data GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf4Some = GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf4Some {
  -- | at_least
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 255.0
  -- * Minimum  of 1.0
  getSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf4SomeAt_least :: GHC.Types.Int
  -- | from
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  , getSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf4SomeFrom :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf4Some
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["at_least" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf4SomeAt_least obj] : ["from" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf4SomeFrom obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["at_least" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf4SomeAt_least obj] : ["from" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf4SomeFrom obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf4Some
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf4Some" (\obj -> (GHC.Base.pure GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf4Some GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "at_least")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "from"))
-- | Create a new 'GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf4Some' with all required fields.
mkGetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf4Some :: GHC.Types.Int -- ^ 'getSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf4SomeAt_least'
  -> [ScriptTemplateValue] -- ^ 'getSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf4SomeFrom'
  -> GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf4Some
mkGetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf4Some getSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf4SomeAt_least getSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf4SomeFrom = GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf4Some{getSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf4SomeAt_least = getSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf4SomeAt_least,
                                                                                                                                                                                                                                                                                                                                                    getSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf4SomeFrom = getSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf4SomeFrom}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}.GET.responses.200.content.application\/json.schema.oneOf.properties.delegation_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf5 = GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf5 {
  -- | active_from: Transaction is only valid starting at the specified slot number (\`â‰¥ active_from\`).
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  getSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf5Active_from :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf5
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["active_from" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf5Active_from obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["active_from" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf5Active_from obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf5
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf5" (\obj -> GHC.Base.pure GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf5 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active_from"))
-- | Create a new 'GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf5' with all required fields.
mkGetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf5 :: GHC.Types.Int -- ^ 'getSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf5Active_from'
  -> GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf5
mkGetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf5 getSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf5Active_from = GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf5{getSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf5Active_from = getSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf5Active_from}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}.GET.responses.200.content.application\/json.schema.oneOf.properties.delegation_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf6 = GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf6 {
  -- | active_until: Transaction is only valid before the specified slot number (\`\< active_until\`).
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  getSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf6Active_until :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf6
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["active_until" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf6Active_until obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["active_until" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf6Active_until obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf6
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf6" (\obj -> GHC.Base.pure GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf6 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active_until"))
-- | Create a new 'GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf6' with all required fields.
mkGetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf6 :: GHC.Types.Int -- ^ 'getSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf6Active_until'
  -> GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf6
mkGetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf6 getSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf6Active_until = GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf6{getSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf6Active_until = getSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf6Active_until}
-- | Defines the oneOf schema located at @paths.\/shared-wallets\/{walletId}.GET.responses.200.content.application\/json.schema.oneOf.properties.delegation_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateVariants =
   GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateVariant1 Data.Text.Internal.Text
  | GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateVariant2 GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf2
  | GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateVariant3 GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf3
  | GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateVariant4 GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf4
  | GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateVariant5 GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf5
  | GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateVariant6 GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateOneOf6
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateVariants
    where toJSON (GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateVariant1 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateVariant2 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateVariant3 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateVariant4 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateVariant5 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateVariant6 a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateVariants
    where parseJSON val = case (GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateVariant1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateVariant2 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateVariant3 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateVariant4 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateVariant5 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetSharedWalletResponseBody200OneOf2Delegation_script_templateTemplateVariant6 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched"))))) of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}.GET.responses.200.content.application\/json.schema.oneOf.properties.passphrase@ in the specification.
-- 
-- Information about the wallet\'s passphrase
data GetSharedWalletResponseBody200OneOf2Passphrase = GetSharedWalletResponseBody200OneOf2Passphrase {
  -- | last_updated_at
  getSharedWalletResponseBody200OneOf2PassphraseLast_updated_at :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletResponseBody200OneOf2Passphrase
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["last_updated_at" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2PassphraseLast_updated_at obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["last_updated_at" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2PassphraseLast_updated_at obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletResponseBody200OneOf2Passphrase
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedWalletResponseBody200OneOf2Passphrase" (\obj -> GHC.Base.pure GetSharedWalletResponseBody200OneOf2Passphrase GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "last_updated_at"))
-- | Create a new 'GetSharedWalletResponseBody200OneOf2Passphrase' with all required fields.
mkGetSharedWalletResponseBody200OneOf2Passphrase :: Data.Text.Internal.Text -- ^ 'getSharedWalletResponseBody200OneOf2PassphraseLast_updated_at'
  -> GetSharedWalletResponseBody200OneOf2Passphrase
mkGetSharedWalletResponseBody200OneOf2Passphrase getSharedWalletResponseBody200OneOf2PassphraseLast_updated_at = GetSharedWalletResponseBody200OneOf2Passphrase{getSharedWalletResponseBody200OneOf2PassphraseLast_updated_at = getSharedWalletResponseBody200OneOf2PassphraseLast_updated_at}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}.GET.responses.200.content.application\/json.schema.oneOf.properties.payment_script_template@ in the specification.
-- 
-- 
data GetSharedWalletResponseBody200OneOf2Payment_script_template = GetSharedWalletResponseBody200OneOf2Payment_script_template {
  -- | cosigners: Map of cosigners and their account public keys. Use key as in &cosigner, eg. \"cosigner\#\"
  getSharedWalletResponseBody200OneOf2Payment_script_templateCosigners :: Data.Aeson.Types.Internal.Object
  -- | template
  , getSharedWalletResponseBody200OneOf2Payment_script_templateTemplate :: GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateVariants
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletResponseBody200OneOf2Payment_script_template
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["cosigners" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2Payment_script_templateCosigners obj] : ["template" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2Payment_script_templateTemplate obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["cosigners" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2Payment_script_templateCosigners obj] : ["template" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2Payment_script_templateTemplate obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletResponseBody200OneOf2Payment_script_template
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedWalletResponseBody200OneOf2Payment_script_template" (\obj -> (GHC.Base.pure GetSharedWalletResponseBody200OneOf2Payment_script_template GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cosigners")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "template"))
-- | Create a new 'GetSharedWalletResponseBody200OneOf2Payment_script_template' with all required fields.
mkGetSharedWalletResponseBody200OneOf2Payment_script_template :: Data.Aeson.Types.Internal.Object -- ^ 'getSharedWalletResponseBody200OneOf2Payment_script_templateCosigners'
  -> GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateVariants -- ^ 'getSharedWalletResponseBody200OneOf2Payment_script_templateTemplate'
  -> GetSharedWalletResponseBody200OneOf2Payment_script_template
mkGetSharedWalletResponseBody200OneOf2Payment_script_template getSharedWalletResponseBody200OneOf2Payment_script_templateCosigners getSharedWalletResponseBody200OneOf2Payment_script_templateTemplate = GetSharedWalletResponseBody200OneOf2Payment_script_template{getSharedWalletResponseBody200OneOf2Payment_script_templateCosigners = getSharedWalletResponseBody200OneOf2Payment_script_templateCosigners,
                                                                                                                                                                                                                                                                     getSharedWalletResponseBody200OneOf2Payment_script_templateTemplate = getSharedWalletResponseBody200OneOf2Payment_script_templateTemplate}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}.GET.responses.200.content.application\/json.schema.oneOf.properties.payment_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf2 = GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf2 {
  -- | all: Script primitive for which all signing keys corresponding to all list cosigners\' verification keys are expected to make the script valid.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  getSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf2All :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf2
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["all" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf2All obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["all" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf2All obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf2
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf2" (\obj -> GHC.Base.pure GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf2 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "all"))
-- | Create a new 'GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf2' with all required fields.
mkGetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf2 :: [ScriptTemplateValue] -- ^ 'getSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf2All'
  -> GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf2
mkGetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf2 getSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf2All = GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf2{getSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf2All = getSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf2All}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}.GET.responses.200.content.application\/json.schema.oneOf.properties.payment_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf3 = GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf3 {
  -- | any: Script primitive for which a signing key corresponding to any of the list cosigners\' verification keys is expected to make the script valid. It is equivalent to \`some\` with \`\"at_least\"=1\`.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  getSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf3Any :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf3
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["any" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf3Any obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["any" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf3Any obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf3
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf3" (\obj -> GHC.Base.pure GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf3 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "any"))
-- | Create a new 'GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf3' with all required fields.
mkGetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf3 :: [ScriptTemplateValue] -- ^ 'getSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf3Any'
  -> GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf3
mkGetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf3 getSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf3Any = GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf3{getSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf3Any = getSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf3Any}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}.GET.responses.200.content.application\/json.schema.oneOf.properties.payment_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf4 = GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf4 {
  -- | some: Script primitive for which at least a given number of signing keys corresponding to the list cosigners\' verification keys are expected to make the script valid.
  getSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf4Some :: GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf4Some
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf4
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["some" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf4Some obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["some" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf4Some obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf4
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf4" (\obj -> GHC.Base.pure GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf4 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "some"))
-- | Create a new 'GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf4' with all required fields.
mkGetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf4 :: GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf4Some -- ^ 'getSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf4Some'
  -> GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf4
mkGetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf4 getSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf4Some = GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf4{getSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf4Some = getSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf4Some}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}.GET.responses.200.content.application\/json.schema.oneOf.properties.payment_script_template.properties.template.oneOf.properties.some@ in the specification.
-- 
-- Script primitive for which at least a given number of signing keys corresponding to the list cosigners\' verification keys are expected to make the script valid.
data GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf4Some = GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf4Some {
  -- | at_least
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 255.0
  -- * Minimum  of 1.0
  getSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf4SomeAt_least :: GHC.Types.Int
  -- | from
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  , getSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf4SomeFrom :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf4Some
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["at_least" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf4SomeAt_least obj] : ["from" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf4SomeFrom obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["at_least" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf4SomeAt_least obj] : ["from" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf4SomeFrom obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf4Some
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf4Some" (\obj -> (GHC.Base.pure GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf4Some GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "at_least")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "from"))
-- | Create a new 'GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf4Some' with all required fields.
mkGetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf4Some :: GHC.Types.Int -- ^ 'getSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf4SomeAt_least'
  -> [ScriptTemplateValue] -- ^ 'getSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf4SomeFrom'
  -> GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf4Some
mkGetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf4Some getSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf4SomeAt_least getSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf4SomeFrom = GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf4Some{getSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf4SomeAt_least = getSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf4SomeAt_least,
                                                                                                                                                                                                                                                                                                                                        getSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf4SomeFrom = getSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf4SomeFrom}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}.GET.responses.200.content.application\/json.schema.oneOf.properties.payment_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf5 = GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf5 {
  -- | active_from: Transaction is only valid starting at the specified slot number (\`â‰¥ active_from\`).
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  getSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf5Active_from :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf5
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["active_from" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf5Active_from obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["active_from" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf5Active_from obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf5
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf5" (\obj -> GHC.Base.pure GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf5 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active_from"))
-- | Create a new 'GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf5' with all required fields.
mkGetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf5 :: GHC.Types.Int -- ^ 'getSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf5Active_from'
  -> GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf5
mkGetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf5 getSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf5Active_from = GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf5{getSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf5Active_from = getSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf5Active_from}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}.GET.responses.200.content.application\/json.schema.oneOf.properties.payment_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf6 = GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf6 {
  -- | active_until: Transaction is only valid before the specified slot number (\`\< active_until\`).
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  getSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf6Active_until :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf6
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["active_until" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf6Active_until obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["active_until" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf6Active_until obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf6
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf6" (\obj -> GHC.Base.pure GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf6 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active_until"))
-- | Create a new 'GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf6' with all required fields.
mkGetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf6 :: GHC.Types.Int -- ^ 'getSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf6Active_until'
  -> GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf6
mkGetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf6 getSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf6Active_until = GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf6{getSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf6Active_until = getSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf6Active_until}
-- | Defines the oneOf schema located at @paths.\/shared-wallets\/{walletId}.GET.responses.200.content.application\/json.schema.oneOf.properties.payment_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateVariants =
   GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateVariant1 Data.Text.Internal.Text
  | GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateVariant2 GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf2
  | GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateVariant3 GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf3
  | GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateVariant4 GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf4
  | GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateVariant5 GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf5
  | GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateVariant6 GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateOneOf6
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateVariants
    where toJSON (GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateVariant1 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateVariant2 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateVariant3 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateVariant4 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateVariant5 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateVariant6 a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateVariants
    where parseJSON val = case (GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateVariant1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateVariant2 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateVariant3 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateVariant4 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateVariant5 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetSharedWalletResponseBody200OneOf2Payment_script_templateTemplateVariant6 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched"))))) of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}.GET.responses.200.content.application\/json.schema.oneOf.properties.state@ in the specification.
-- 
-- Whether a wallet is ready to use or still syncing
data GetSharedWalletResponseBody200OneOf2State = GetSharedWalletResponseBody200OneOf2State {
  -- | progress: \<span style=\"position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;\">
  -- \<strong>if:\<\/strong> status == syncing
  -- \<\/span>\<br\/>
  getSharedWalletResponseBody200OneOf2StateProgress :: (GHC.Maybe.Maybe GetSharedWalletResponseBody200OneOf2StateProgress)
  -- | status
  , getSharedWalletResponseBody200OneOf2StateStatus :: GetSharedWalletResponseBody200OneOf2StateStatus
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletResponseBody200OneOf2State
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("progress" Data.Aeson.Types.ToJSON..=)) (getSharedWalletResponseBody200OneOf2StateProgress obj) : ["status" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2StateStatus obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("progress" Data.Aeson.Types.ToJSON..=)) (getSharedWalletResponseBody200OneOf2StateProgress obj) : ["status" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2StateStatus obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletResponseBody200OneOf2State
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedWalletResponseBody200OneOf2State" (\obj -> (GHC.Base.pure GetSharedWalletResponseBody200OneOf2State GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "progress")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))
-- | Create a new 'GetSharedWalletResponseBody200OneOf2State' with all required fields.
mkGetSharedWalletResponseBody200OneOf2State :: GetSharedWalletResponseBody200OneOf2StateStatus -- ^ 'getSharedWalletResponseBody200OneOf2StateStatus'
  -> GetSharedWalletResponseBody200OneOf2State
mkGetSharedWalletResponseBody200OneOf2State getSharedWalletResponseBody200OneOf2StateStatus = GetSharedWalletResponseBody200OneOf2State{getSharedWalletResponseBody200OneOf2StateProgress = GHC.Maybe.Nothing,
                                                                                                                                        getSharedWalletResponseBody200OneOf2StateStatus = getSharedWalletResponseBody200OneOf2StateStatus}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}.GET.responses.200.content.application\/json.schema.oneOf.properties.state.properties.progress@ in the specification.
-- 
-- \<span style=\"position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;\">
-- \<strong>if:\<\/strong> status == syncing
-- \<\/span>\<br\/>
data GetSharedWalletResponseBody200OneOf2StateProgress = GetSharedWalletResponseBody200OneOf2StateProgress {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  -- * Minimum  of 0.0
  getSharedWalletResponseBody200OneOf2StateProgressQuantity :: GHC.Types.Double
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletResponseBody200OneOf2StateProgress
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2StateProgressQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "percent"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2StateProgressQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "percent"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletResponseBody200OneOf2StateProgress
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedWalletResponseBody200OneOf2StateProgress" (\obj -> GHC.Base.pure GetSharedWalletResponseBody200OneOf2StateProgress GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'GetSharedWalletResponseBody200OneOf2StateProgress' with all required fields.
mkGetSharedWalletResponseBody200OneOf2StateProgress :: GHC.Types.Double -- ^ 'getSharedWalletResponseBody200OneOf2StateProgressQuantity'
  -> GetSharedWalletResponseBody200OneOf2StateProgress
mkGetSharedWalletResponseBody200OneOf2StateProgress getSharedWalletResponseBody200OneOf2StateProgressQuantity = GetSharedWalletResponseBody200OneOf2StateProgress{getSharedWalletResponseBody200OneOf2StateProgressQuantity = getSharedWalletResponseBody200OneOf2StateProgressQuantity}
-- | Defines the enum schema located at @paths.\/shared-wallets\/{walletId}.GET.responses.200.content.application\/json.schema.oneOf.properties.state.properties.status@ in the specification.
-- 
-- 
data GetSharedWalletResponseBody200OneOf2StateStatus =
   GetSharedWalletResponseBody200OneOf2StateStatusOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetSharedWalletResponseBody200OneOf2StateStatusTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetSharedWalletResponseBody200OneOf2StateStatusEnumReady -- ^ Represents the JSON value @"ready"@
  | GetSharedWalletResponseBody200OneOf2StateStatusEnumSyncing -- ^ Represents the JSON value @"syncing"@
  | GetSharedWalletResponseBody200OneOf2StateStatusEnumNot_responding -- ^ Represents the JSON value @"not_responding"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletResponseBody200OneOf2StateStatus
    where toJSON (GetSharedWalletResponseBody200OneOf2StateStatusOther val) = val
          toJSON (GetSharedWalletResponseBody200OneOf2StateStatusTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetSharedWalletResponseBody200OneOf2StateStatusEnumReady) = "ready"
          toJSON (GetSharedWalletResponseBody200OneOf2StateStatusEnumSyncing) = "syncing"
          toJSON (GetSharedWalletResponseBody200OneOf2StateStatusEnumNot_responding) = "not_responding"
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletResponseBody200OneOf2StateStatus
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "ready" -> GetSharedWalletResponseBody200OneOf2StateStatusEnumReady
                                            | val GHC.Classes.== "syncing" -> GetSharedWalletResponseBody200OneOf2StateStatusEnumSyncing
                                            | val GHC.Classes.== "not_responding" -> GetSharedWalletResponseBody200OneOf2StateStatusEnumNot_responding
                                            | GHC.Base.otherwise -> GetSharedWalletResponseBody200OneOf2StateStatusOther val)
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}.GET.responses.200.content.application\/json.schema.oneOf.properties.tip@ in the specification.
-- 
-- A reference to a particular time slot, and the block height at that point.
data GetSharedWalletResponseBody200OneOf2Tip = GetSharedWalletResponseBody200OneOf2Tip {
  -- | absolute_slot_number: The 0-based slot index starting from genesis of the blockchain.
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  getSharedWalletResponseBody200OneOf2TipAbsolute_slot_number :: GHC.Types.Int
  -- | epoch_number: An epoch is a time period which is divided into slots.
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , getSharedWalletResponseBody200OneOf2TipEpoch_number :: GHC.Types.Int
  -- | height
  , getSharedWalletResponseBody200OneOf2TipHeight :: GetSharedWalletResponseBody200OneOf2TipHeight
  -- | slot_number: The zero-based slot index within an epoch.
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , getSharedWalletResponseBody200OneOf2TipSlot_number :: GHC.Types.Int
  -- | time
  , getSharedWalletResponseBody200OneOf2TipTime :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletResponseBody200OneOf2Tip
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["absolute_slot_number" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2TipAbsolute_slot_number obj] : ["epoch_number" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2TipEpoch_number obj] : ["height" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2TipHeight obj] : ["slot_number" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2TipSlot_number obj] : ["time" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2TipTime obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["absolute_slot_number" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2TipAbsolute_slot_number obj] : ["epoch_number" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2TipEpoch_number obj] : ["height" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2TipHeight obj] : ["slot_number" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2TipSlot_number obj] : ["time" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2TipTime obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletResponseBody200OneOf2Tip
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedWalletResponseBody200OneOf2Tip" (\obj -> ((((GHC.Base.pure GetSharedWalletResponseBody200OneOf2Tip GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "absolute_slot_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "epoch_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "height")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "slot_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "time"))
-- | Create a new 'GetSharedWalletResponseBody200OneOf2Tip' with all required fields.
mkGetSharedWalletResponseBody200OneOf2Tip :: GHC.Types.Int -- ^ 'getSharedWalletResponseBody200OneOf2TipAbsolute_slot_number'
  -> GHC.Types.Int -- ^ 'getSharedWalletResponseBody200OneOf2TipEpoch_number'
  -> GetSharedWalletResponseBody200OneOf2TipHeight -- ^ 'getSharedWalletResponseBody200OneOf2TipHeight'
  -> GHC.Types.Int -- ^ 'getSharedWalletResponseBody200OneOf2TipSlot_number'
  -> Data.Text.Internal.Text -- ^ 'getSharedWalletResponseBody200OneOf2TipTime'
  -> GetSharedWalletResponseBody200OneOf2Tip
mkGetSharedWalletResponseBody200OneOf2Tip getSharedWalletResponseBody200OneOf2TipAbsolute_slot_number getSharedWalletResponseBody200OneOf2TipEpoch_number getSharedWalletResponseBody200OneOf2TipHeight getSharedWalletResponseBody200OneOf2TipSlot_number getSharedWalletResponseBody200OneOf2TipTime = GetSharedWalletResponseBody200OneOf2Tip{getSharedWalletResponseBody200OneOf2TipAbsolute_slot_number = getSharedWalletResponseBody200OneOf2TipAbsolute_slot_number,
                                                                                                                                                                                                                                                                                                                                                 getSharedWalletResponseBody200OneOf2TipEpoch_number = getSharedWalletResponseBody200OneOf2TipEpoch_number,
                                                                                                                                                                                                                                                                                                                                                 getSharedWalletResponseBody200OneOf2TipHeight = getSharedWalletResponseBody200OneOf2TipHeight,
                                                                                                                                                                                                                                                                                                                                                 getSharedWalletResponseBody200OneOf2TipSlot_number = getSharedWalletResponseBody200OneOf2TipSlot_number,
                                                                                                                                                                                                                                                                                                                                                 getSharedWalletResponseBody200OneOf2TipTime = getSharedWalletResponseBody200OneOf2TipTime}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}.GET.responses.200.content.application\/json.schema.oneOf.properties.tip.properties.height@ in the specification.
-- 
-- 
data GetSharedWalletResponseBody200OneOf2TipHeight = GetSharedWalletResponseBody200OneOf2TipHeight {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  getSharedWalletResponseBody200OneOf2TipHeightQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletResponseBody200OneOf2TipHeight
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2TipHeightQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "block"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody200OneOf2TipHeightQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "block"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletResponseBody200OneOf2TipHeight
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedWalletResponseBody200OneOf2TipHeight" (\obj -> GHC.Base.pure GetSharedWalletResponseBody200OneOf2TipHeight GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'GetSharedWalletResponseBody200OneOf2TipHeight' with all required fields.
mkGetSharedWalletResponseBody200OneOf2TipHeight :: GHC.Types.Int -- ^ 'getSharedWalletResponseBody200OneOf2TipHeightQuantity'
  -> GetSharedWalletResponseBody200OneOf2TipHeight
mkGetSharedWalletResponseBody200OneOf2TipHeight getSharedWalletResponseBody200OneOf2TipHeightQuantity = GetSharedWalletResponseBody200OneOf2TipHeight{getSharedWalletResponseBody200OneOf2TipHeightQuantity = getSharedWalletResponseBody200OneOf2TipHeightQuantity}
-- | Defines the oneOf schema located at @paths.\/shared-wallets\/{walletId}.GET.responses.200.content.application\/json.schema.oneOf@ in the specification.
-- 
-- 
data GetSharedWalletResponseBody200Variants =
   GetSharedWalletResponseBody200Variant1 GetSharedWalletResponseBody200OneOf1
  | GetSharedWalletResponseBody200Variant2 GetSharedWalletResponseBody200OneOf2
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletResponseBody200Variants
    where toJSON (GetSharedWalletResponseBody200Variant1 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (GetSharedWalletResponseBody200Variant2 a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletResponseBody200Variants
    where parseJSON val = case (GetSharedWalletResponseBody200Variant1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetSharedWalletResponseBody200Variant2 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}.GET.responses.400.content.application\/json.schema@ in the specification.
-- 
-- 
data GetSharedWalletResponseBody400 = GetSharedWalletResponseBody400 {
  -- | message: May occur when a request is not well-formed; that is, it fails to parse
  -- successfully. This could be the case when some required parameters
  -- are missing or, when malformed values are provided.
  getSharedWalletResponseBody400Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody400Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "bad_request"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody400Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "bad_request"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedWalletResponseBody400" (\obj -> GHC.Base.pure GetSharedWalletResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'GetSharedWalletResponseBody400' with all required fields.
mkGetSharedWalletResponseBody400 :: Data.Text.Internal.Text -- ^ 'getSharedWalletResponseBody400Message'
  -> GetSharedWalletResponseBody400
mkGetSharedWalletResponseBody400 getSharedWalletResponseBody400Message = GetSharedWalletResponseBody400{getSharedWalletResponseBody400Message = getSharedWalletResponseBody400Message}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}.GET.responses.404.content.application\/json.schema@ in the specification.
-- 
-- 
data GetSharedWalletResponseBody404 = GetSharedWalletResponseBody404 {
  -- | message: May occur when a given walletId does not match with any known
  -- wallets (because it has been deleted, or has never existed).
  getSharedWalletResponseBody404Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody404Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "no_such_wallet"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody404Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "no_such_wallet"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedWalletResponseBody404" (\obj -> GHC.Base.pure GetSharedWalletResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'GetSharedWalletResponseBody404' with all required fields.
mkGetSharedWalletResponseBody404 :: Data.Text.Internal.Text -- ^ 'getSharedWalletResponseBody404Message'
  -> GetSharedWalletResponseBody404
mkGetSharedWalletResponseBody404 getSharedWalletResponseBody404Message = GetSharedWalletResponseBody404{getSharedWalletResponseBody404Message = getSharedWalletResponseBody404Message}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}.GET.responses.406.content.application\/json.schema@ in the specification.
-- 
-- 
data GetSharedWalletResponseBody406 = GetSharedWalletResponseBody406 {
  -- | message: May occur when providing an invalid \'Accept\' header.
  getSharedWalletResponseBody406Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletResponseBody406
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody406Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "not_acceptable"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= getSharedWalletResponseBody406Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "not_acceptable"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletResponseBody406
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedWalletResponseBody406" (\obj -> GHC.Base.pure GetSharedWalletResponseBody406 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'GetSharedWalletResponseBody406' with all required fields.
mkGetSharedWalletResponseBody406 :: Data.Text.Internal.Text -- ^ 'getSharedWalletResponseBody406Message'
  -> GetSharedWalletResponseBody406
mkGetSharedWalletResponseBody406 getSharedWalletResponseBody406Message = GetSharedWalletResponseBody406{getSharedWalletResponseBody406Message = getSharedWalletResponseBody406Message}
-- | > GET /shared-wallets/{walletId}
-- 
-- The same as 'getSharedWallet' but accepts an explicit configuration.
getSharedWalletWithConfiguration :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ walletId | Constraints: Maximum length of 40, Minimum length of 40
  -> m (Network.HTTP.Client.Types.Response GetSharedWalletResponse) -- ^ Monadic computation which returns the result of the operation
getSharedWalletWithConfiguration config
                                 walletId = GHC.Base.fmap (\response_5 -> GHC.Base.fmap (Data.Either.either GetSharedWalletResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetSharedWalletResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                     GetSharedWalletResponseBody200Variants)
                                                                                                                                                                                      | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetSharedWalletResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                     GetSharedWalletResponseBody400)
                                                                                                                                                                                      | (\status_8 -> Network.HTTP.Types.Status.statusCode status_8 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetSharedWalletResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                     GetSharedWalletResponseBody404)
                                                                                                                                                                                      | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 406) (Network.HTTP.Client.Types.responseStatus response) -> GetSharedWalletResponse406 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                     GetSharedWalletResponseBody406)
                                                                                                                                                                                      | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_5) response_5) (Wallet.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") ("/shared-wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel walletId)) GHC.Base.<> "")) GHC.Base.mempty)
-- | > GET /shared-wallets/{walletId}
-- 
-- The same as 'getSharedWallet' but returns the raw 'Data.ByteString.ByteString'.
getSharedWalletRaw :: forall m . Wallet.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ walletId | Constraints: Maximum length of 40, Minimum length of 40
  -> Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
getSharedWalletRaw walletId = GHC.Base.id (Wallet.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") ("/shared-wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel walletId)) GHC.Base.<> "")) GHC.Base.mempty)
-- | > GET /shared-wallets/{walletId}
-- 
-- The same as 'getSharedWallet' but accepts an explicit configuration and returns the raw 'Data.ByteString.ByteString'.
getSharedWalletWithConfigurationRaw :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ walletId | Constraints: Maximum length of 40, Minimum length of 40
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
getSharedWalletWithConfigurationRaw config
                                    walletId = GHC.Base.id (Wallet.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") ("/shared-wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel walletId)) GHC.Base.<> "")) GHC.Base.mempty)
