-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getSharedTransaction
module Wallet.Operations.GetSharedTransaction where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Wallet.Common
import Wallet.Types

-- | > GET /shared-wallets/{walletId}/transactions/{transactionId}
-- 
-- \<p align=\"right\">status: \<strong>stable\<\/strong>\<\/p>
-- 
-- Get transaction by id.
getSharedTransaction :: forall m . Wallet.Common.MonadHTTP m => GetSharedTransactionParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response GetSharedTransactionResponse) -- ^ Monadic computation which returns the result of the operation
getSharedTransaction parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetSharedTransactionResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetSharedTransactionResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                     GetSharedTransactionResponseBody200)
                                                                                                                                                                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetSharedTransactionResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                     GetSharedTransactionResponseBody404Variants)
                                                                                                                                                                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 406) (Network.HTTP.Client.Types.responseStatus response) -> GetSharedTransactionResponse406 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                     GetSharedTransactionResponseBody406)
                                                                                                                                                                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Wallet.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") ("/shared-wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (getSharedTransactionParametersPathWalletId parameters))) GHC.Base.<> ("/transactions/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (getSharedTransactionParametersPathTransactionId parameters))) GHC.Base.<> "")))) [Wallet.Common.QueryParameter (Data.Text.pack "simple-metadata") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSharedTransactionParametersQuerySimple_metadata parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.parameters@ in the specification.
-- 
-- 
data GetSharedTransactionParameters = GetSharedTransactionParameters {
  -- | pathTransactionId: Represents the parameter named \'transactionId\'
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  -- * Minimum length of 64
  getSharedTransactionParametersPathTransactionId :: Data.Text.Internal.Text
  -- | pathWalletId: Represents the parameter named \'walletId\'
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 40
  -- * Minimum length of 40
  , getSharedTransactionParametersPathWalletId :: Data.Text.Internal.Text
  -- | querySimple-metadata: Represents the parameter named \'simple-metadata\'
  -- 
  -- When present (or equal to true) in the query, the metadata format for the
  -- transaction(s) in the output will be untyped plain json as specified in
  -- [CIP 25](https:\/\/cips.cardano.org\/cips\/cip25\/)
  , getSharedTransactionParametersQuerySimple_metadata :: (GHC.Maybe.Maybe GHC.Types.Bool)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionParameters
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["pathTransactionId" Data.Aeson.Types.ToJSON..= getSharedTransactionParametersPathTransactionId obj] : ["pathWalletId" Data.Aeson.Types.ToJSON..= getSharedTransactionParametersPathWalletId obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySimple-metadata" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionParametersQuerySimple_metadata obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["pathTransactionId" Data.Aeson.Types.ToJSON..= getSharedTransactionParametersPathTransactionId obj] : ["pathWalletId" Data.Aeson.Types.ToJSON..= getSharedTransactionParametersPathWalletId obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySimple-metadata" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionParametersQuerySimple_metadata obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionParameters" (\obj -> ((GHC.Base.pure GetSharedTransactionParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathTransactionId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathWalletId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "querySimple-metadata"))
-- | Create a new 'GetSharedTransactionParameters' with all required fields.
mkGetSharedTransactionParameters :: Data.Text.Internal.Text -- ^ 'getSharedTransactionParametersPathTransactionId'
  -> Data.Text.Internal.Text -- ^ 'getSharedTransactionParametersPathWalletId'
  -> GetSharedTransactionParameters
mkGetSharedTransactionParameters getSharedTransactionParametersPathTransactionId getSharedTransactionParametersPathWalletId = GetSharedTransactionParameters{getSharedTransactionParametersPathTransactionId = getSharedTransactionParametersPathTransactionId,
                                                                                                                                                             getSharedTransactionParametersPathWalletId = getSharedTransactionParametersPathWalletId,
                                                                                                                                                             getSharedTransactionParametersQuerySimple_metadata = GHC.Maybe.Nothing}
-- | Represents a response of the operation 'getSharedTransaction'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetSharedTransactionResponseError' is used.
data GetSharedTransactionResponse =
   GetSharedTransactionResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetSharedTransactionResponse200 GetSharedTransactionResponseBody200 -- ^ OK
  | GetSharedTransactionResponse404 GetSharedTransactionResponseBody404Variants -- ^ Not Found
  | GetSharedTransactionResponse406 GetSharedTransactionResponseBody406 -- ^ Not Acceptable
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data GetSharedTransactionResponseBody200 = GetSharedTransactionResponseBody200 {
  -- | amount: An amount of Ada spent or received, from the perspective of the wallet.
  -- 
  -- That is, for outgoing transaction, it represents the amount of Ada consumed
  -- as inputs including the amount of Ada spent as fees or deposits.
  -- 
  -- For incoming transaction, it represents the total amount of Ada received to
  -- addresses that belong to the wallet.
  getSharedTransactionResponseBody200Amount :: GetSharedTransactionResponseBody200Amount
  -- | burn
  , getSharedTransactionResponseBody200Burn :: (GHC.Maybe.Maybe GetSharedTransactionResponseBody200Burn)
  -- | certificates
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 0 items
  , getSharedTransactionResponseBody200Certificates :: (GHC.Maybe.Maybe ([GetSharedTransactionResponseBody200CertificatesVariants]))
  -- | collateral: A list of transaction inputs used for collateral.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 0 items
  , getSharedTransactionResponseBody200Collateral :: (GHC.Maybe.Maybe ([GetSharedTransactionResponseBody200Collateral]))
  -- | collateral_outputs: A list of collateral return outputs with amounts specified.
  -- 
  -- Constraints:
  -- 
  -- * Must have a maximum of 1 items
  -- * Must have a minimum of 0 items
  , getSharedTransactionResponseBody200Collateral_outputs :: (GHC.Maybe.Maybe ([GetSharedTransactionResponseBody200Collateral_outputs]))
  -- | deposit_returned: Coins, in Lovelace. Only relates to \'Ada\'. Refer to \`assets\` for multi-assets wallets instead.
  , getSharedTransactionResponseBody200Deposit_returned :: GetSharedTransactionResponseBody200Deposit_returned
  -- | deposit_taken: Coins, in Lovelace. Only relates to \'Ada\'. Refer to \`assets\` for multi-assets wallets instead.
  , getSharedTransactionResponseBody200Deposit_taken :: GetSharedTransactionResponseBody200Deposit_taken
  -- | depth: \<span style=\"position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;\">
  -- \<strong>if:\<\/strong> status == in_ledger
  -- \<\/span>\<br\/>
  -- Current depth of the transaction in the local chain
  , getSharedTransactionResponseBody200Depth :: (GHC.Maybe.Maybe GetSharedTransactionResponseBody200Depth)
  -- | direction
  , getSharedTransactionResponseBody200Direction :: GetSharedTransactionResponseBody200Direction
  -- | expires_at: \<span style=\"position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;\">
  -- \<strong>if:\<\/strong> status == pending OR status == expired
  -- \<\/span>\<br\/>
  -- Absolute time and slot at which the pending transaction TTL (time to live) will lapse.
  , getSharedTransactionResponseBody200Expires_at :: (GHC.Maybe.Maybe GetSharedTransactionResponseBody200Expires_at)
  -- | extra_signatures
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 0 items
  , getSharedTransactionResponseBody200Extra_signatures :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text]))
  -- | fee: Coins, in Lovelace. Only relates to \'Ada\'. Refer to \`assets\` for multi-assets wallets instead.
  , getSharedTransactionResponseBody200Fee :: GetSharedTransactionResponseBody200Fee
  -- | id: A unique identifier for this transaction
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  -- * Minimum length of 64
  , getSharedTransactionResponseBody200Id :: Data.Text.Internal.Text
  -- | inputs: A list of transaction inputs.
  -- 
  -- \`assets\` and \`address\` are always present for \`outgoing\`
  -- transactions but generally absent for \`incoming\`
  -- transactions. This information is present on the Cardano explorer,
  -- but is not tracked by the wallet.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 0 items
  , getSharedTransactionResponseBody200Inputs :: ([GetSharedTransactionResponseBody200Inputs])
  -- | inserted_at: \<span style=\"position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;\">
  -- \<strong>if:\<\/strong> status == in_ledger
  -- \<\/span>\<br\/>
  -- Absolute time at which the transaction was inserted in a block.
  , getSharedTransactionResponseBody200Inserted_at :: (GHC.Maybe.Maybe GetSharedTransactionResponseBody200Inserted_at)
  -- | metadata: **⚠️ WARNING ⚠️**
  -- 
  -- _Please note that metadata provided in a transaction will be
  -- stored on the blockchain forever. Make sure not to include any sensitive data,
  -- in particular personally identifiable information (PII)._
  -- 
  -- Extra application data attached to the transaction.
  -- 
  -- Cardano allows users and developers to embed their own
  -- authenticated metadata when submitting transactions. Metadata can
  -- be expressed as a JSON object with some restrictions:
  -- 
  -- 1. All top-level keys must be integers between \`0\` and \`2^64 - 1\`.
  -- 
  -- 2. Each metadata value is tagged with its type.
  -- 
  -- 3. Strings must be at most 64 bytes when UTF-8 encoded.
  -- 
  -- 4. Bytestrings are hex-encoded, with a maximum length of 64 bytes.
  -- 
  -- Metadata aren\'t stored as JSON on the Cardano blockchain but are
  -- instead stored using a compact binary encoding (CBOR).
  -- 
  -- The binary encoding of metadata values supports three simple types:
  -- 
  -- * Integers in the range \`-(2^64 - 1)\` to \`2^64 - 1\`
  -- * Strings (UTF-8 encoded)
  -- * Bytestrings
  -- 
  -- And two compound types:
  -- 
  -- * Lists of metadata values
  -- * Mappings from metadata values to metadata values
  -- 
  -- It is possible to transform any JSON object into this schema.
  -- 
  -- However, if your application uses floating point values, they will
  -- need to be converted somehow, according to your
  -- requirements. Likewise for \`null\` or \`bool\` values. When reading
  -- metadata from chain, be aware that integers may exceed the
  -- javascript numeric range, and may need special \"bigint\" parsing.
  , getSharedTransactionResponseBody200Metadata :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object)
  -- | mint
  , getSharedTransactionResponseBody200Mint :: (GHC.Maybe.Maybe GetSharedTransactionResponseBody200Mint)
  -- | outputs: A list of target outputs with amounts specified.
  -- 
  -- When creating a new transaction, the wallet software ensures that all
  -- user-specified transaction outputs have ada amounts that satisfy the ledger
  -- minimum UTxO rule:
  -- 
  -- - If a user-specified transaction output has an ada \`amount\` that is
  --   **zero**, the wallet software will automatically assign a minimal amount
  --   of ada to the output so that it satisfies the ledger minimum UTxO rule.
  -- 
  -- - If a user-specified transaction output has an ada \`amount\` that is
  --   **non-zero**, the wallet software will verify that the specified amount
  --   is large enough to satisfy the ledger minimum UTxO rule. If the amount is
  --   not large enough, the wallet software will return a \`utxo_too_small\`
  --   error, together with a revised ada amount that does satisfy the minimum
  --   UTxO rule.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 0 items
  , getSharedTransactionResponseBody200Outputs :: ([GetSharedTransactionResponseBody200Outputs])
  -- | pending_since: \<span style=\"position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;\">
  -- \<strong>if:\<\/strong> status == pending
  -- \<\/span>\<br\/>
  -- The point in time at which a transaction became pending.
  , getSharedTransactionResponseBody200Pending_since :: (GHC.Maybe.Maybe GetSharedTransactionResponseBody200Pending_since)
  -- | script_integrity: A script data integrity hash - 32 bytes
  -- 
  -- Constraints:
  -- 
  -- * Must match pattern \'^(script_data)1[0-9a-z]*\$\'
  , getSharedTransactionResponseBody200Script_integrity :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | script_validity: Indicates whether the phase-2 monetary policy script (e.g. Plutus script)
  -- used in the transaction validated or not. Validity may be null if this
  -- transaction was from an era that doesn\'t support phase-2 monetary policy
  -- scripts, or is a pending transaction (we don\'t know if validation passed or
  -- failed until the transaction hits the ledger).
  , getSharedTransactionResponseBody200Script_validity :: (GHC.Maybe.Maybe (Wallet.Common.Nullable GetSharedTransactionResponseBody200Script_validityNonNullable))
  -- | status: Current transaction status.
  -- 
  --   \`\`\`
  --        *-----------*
  --   ---> |  PENDING  |----------------*
  --        *-----------*                |
  --              |                      |
  --              V                      V
  --        *-----------*          *-----------*
  --        |           |---------->  EXPIRED  |
  --        |           |  (ttl)   *-----------*
  --        | SUBMITTED |
  --        |           \<----------------*
  --        |           |                |
  --        *-----------*           (rollback)
  --               |                     |
  --          (in ledger)          *-----------*
  --               |               |           |
  --               *---------------> IN_LEDGER |
  --                               |           |
  --                               *-----------*
  --   \`\`\`
  , getSharedTransactionResponseBody200Status :: GetSharedTransactionResponseBody200Status
  -- | validity_interval
  , getSharedTransactionResponseBody200Validity_interval :: (GHC.Maybe.Maybe GetSharedTransactionResponseBody200Validity_interval)
  -- | withdrawals: A list of withdrawals from stake addresses.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 0 items
  , getSharedTransactionResponseBody200Withdrawals :: ([GetSharedTransactionResponseBody200Withdrawals])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Amount obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("burn" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200Burn obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("certificates" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200Certificates obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("collateral" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200Collateral obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("collateral_outputs" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200Collateral_outputs obj) : ["deposit_returned" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Deposit_returned obj] : ["deposit_taken" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Deposit_taken obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("depth" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200Depth obj) : ["direction" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Direction obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expires_at" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200Expires_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("extra_signatures" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200Extra_signatures obj) : ["fee" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Fee obj] : ["id" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Id obj] : ["inputs" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Inputs obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("inserted_at" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200Inserted_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("metadata" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200Metadata obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mint" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200Mint obj) : ["outputs" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Outputs obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pending_since" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200Pending_since obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("script_integrity" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200Script_integrity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("script_validity" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200Script_validity obj) : ["status" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Status obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("validity_interval" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200Validity_interval obj) : ["withdrawals" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Withdrawals obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Amount obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("burn" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200Burn obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("certificates" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200Certificates obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("collateral" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200Collateral obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("collateral_outputs" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200Collateral_outputs obj) : ["deposit_returned" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Deposit_returned obj] : ["deposit_taken" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Deposit_taken obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("depth" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200Depth obj) : ["direction" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Direction obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expires_at" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200Expires_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("extra_signatures" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200Extra_signatures obj) : ["fee" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Fee obj] : ["id" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Id obj] : ["inputs" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Inputs obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("inserted_at" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200Inserted_at obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("metadata" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200Metadata obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mint" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200Mint obj) : ["outputs" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Outputs obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pending_since" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200Pending_since obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("script_integrity" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200Script_integrity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("script_validity" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200Script_validity obj) : ["status" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Status obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("validity_interval" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200Validity_interval obj) : ["withdrawals" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Withdrawals obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200" (\obj -> (((((((((((((((((((((((GHC.Base.pure GetSharedTransactionResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "burn")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "certificates")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "collateral")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "collateral_outputs")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "deposit_returned")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "deposit_taken")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "depth")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "direction")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expires_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "extra_signatures")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "fee")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "inputs")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "inserted_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "mint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "outputs")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "pending_since")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "script_integrity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "script_validity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "validity_interval")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "withdrawals"))
-- | Create a new 'GetSharedTransactionResponseBody200' with all required fields.
mkGetSharedTransactionResponseBody200 :: GetSharedTransactionResponseBody200Amount -- ^ 'getSharedTransactionResponseBody200Amount'
  -> GetSharedTransactionResponseBody200Deposit_returned -- ^ 'getSharedTransactionResponseBody200Deposit_returned'
  -> GetSharedTransactionResponseBody200Deposit_taken -- ^ 'getSharedTransactionResponseBody200Deposit_taken'
  -> GetSharedTransactionResponseBody200Direction -- ^ 'getSharedTransactionResponseBody200Direction'
  -> GetSharedTransactionResponseBody200Fee -- ^ 'getSharedTransactionResponseBody200Fee'
  -> Data.Text.Internal.Text -- ^ 'getSharedTransactionResponseBody200Id'
  -> [GetSharedTransactionResponseBody200Inputs] -- ^ 'getSharedTransactionResponseBody200Inputs'
  -> [GetSharedTransactionResponseBody200Outputs] -- ^ 'getSharedTransactionResponseBody200Outputs'
  -> GetSharedTransactionResponseBody200Status -- ^ 'getSharedTransactionResponseBody200Status'
  -> [GetSharedTransactionResponseBody200Withdrawals] -- ^ 'getSharedTransactionResponseBody200Withdrawals'
  -> GetSharedTransactionResponseBody200
mkGetSharedTransactionResponseBody200 getSharedTransactionResponseBody200Amount getSharedTransactionResponseBody200Deposit_returned getSharedTransactionResponseBody200Deposit_taken getSharedTransactionResponseBody200Direction getSharedTransactionResponseBody200Fee getSharedTransactionResponseBody200Id getSharedTransactionResponseBody200Inputs getSharedTransactionResponseBody200Outputs getSharedTransactionResponseBody200Status getSharedTransactionResponseBody200Withdrawals = GetSharedTransactionResponseBody200{getSharedTransactionResponseBody200Amount = getSharedTransactionResponseBody200Amount,
getSharedTransactionResponseBody200Burn = GHC.Maybe.Nothing,
getSharedTransactionResponseBody200Certificates = GHC.Maybe.Nothing,
getSharedTransactionResponseBody200Collateral = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   getSharedTransactionResponseBody200Collateral_outputs = GHC.Maybe.Nothing,
getSharedTransactionResponseBody200Deposit_returned = getSharedTransactionResponseBody200Deposit_returned,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   getSharedTransactionResponseBody200Deposit_taken = getSharedTransactionResponseBody200Deposit_taken,
getSharedTransactionResponseBody200Depth = GHC.Maybe.Nothing,
getSharedTransactionResponseBody200Direction = getSharedTransactionResponseBody200Direction,
getSharedTransactionResponseBody200Expires_at = GHC.Maybe.Nothing,
getSharedTransactionResponseBody200Extra_signatures = GHC.Maybe.Nothing,
getSharedTransactionResponseBody200Fee = getSharedTransactionResponseBody200Fee,
getSharedTransactionResponseBody200Id = getSharedTransactionResponseBody200Id,
getSharedTransactionResponseBody200Inputs = getSharedTransactionResponseBody200Inputs,
getSharedTransactionResponseBody200Inserted_at = GHC.Maybe.Nothing,
getSharedTransactionResponseBody200Metadata = GHC.Maybe.Nothing,
getSharedTransactionResponseBody200Mint = GHC.Maybe.Nothing,
getSharedTransactionResponseBody200Outputs = getSharedTransactionResponseBody200Outputs,
getSharedTransactionResponseBody200Pending_since = GHC.Maybe.Nothing,
getSharedTransactionResponseBody200Script_integrity = GHC.Maybe.Nothing,
getSharedTransactionResponseBody200Script_validity = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   getSharedTransactionResponseBody200Status = getSharedTransactionResponseBody200Status,
getSharedTransactionResponseBody200Validity_interval = GHC.Maybe.Nothing,
getSharedTransactionResponseBody200Withdrawals = getSharedTransactionResponseBody200Withdrawals}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.amount@ in the specification.
-- 
-- An amount of Ada spent or received, from the perspective of the wallet.
-- 
-- That is, for outgoing transaction, it represents the amount of Ada consumed
-- as inputs including the amount of Ada spent as fees or deposits.
-- 
-- For incoming transaction, it represents the total amount of Ada received to
-- addresses that belong to the wallet.
data GetSharedTransactionResponseBody200Amount = GetSharedTransactionResponseBody200Amount {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  getSharedTransactionResponseBody200AmountQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200Amount
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200AmountQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200AmountQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200Amount
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200Amount" (\obj -> GHC.Base.pure GetSharedTransactionResponseBody200Amount GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'GetSharedTransactionResponseBody200Amount' with all required fields.
mkGetSharedTransactionResponseBody200Amount :: GHC.Types.Int -- ^ 'getSharedTransactionResponseBody200AmountQuantity'
  -> GetSharedTransactionResponseBody200Amount
mkGetSharedTransactionResponseBody200Amount getSharedTransactionResponseBody200AmountQuantity = GetSharedTransactionResponseBody200Amount{getSharedTransactionResponseBody200AmountQuantity = getSharedTransactionResponseBody200AmountQuantity}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.burn@ in the specification.
-- 
-- 
data GetSharedTransactionResponseBody200Burn = GetSharedTransactionResponseBody200Burn {
  -- | tokens
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 0 items
  getSharedTransactionResponseBody200BurnTokens :: ([GetSharedTransactionResponseBody200BurnTokens])
  -- | wallet_policy_key_hash
  -- 
  -- Constraints:
  -- 
  -- * Must match pattern \'^((policy_vk)|(policy_vkh))1[0-9a-z]*\$\'
  , getSharedTransactionResponseBody200BurnWallet_policy_key_hash :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | wallet_policy_key_index: An individual segment within a derivation path.
  -- 
  -- The \`H\` suffix indicates a _Hardened_ child private key, which
  -- means that children of this key cannot be derived from the public
  -- key. Indices without a \`H\` suffix are called _Soft_.
  , getSharedTransactionResponseBody200BurnWallet_policy_key_index :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200Burn
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["tokens" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200BurnTokens obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("wallet_policy_key_hash" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200BurnWallet_policy_key_hash obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("wallet_policy_key_index" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200BurnWallet_policy_key_index obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["tokens" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200BurnTokens obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("wallet_policy_key_hash" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200BurnWallet_policy_key_hash obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("wallet_policy_key_index" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200BurnWallet_policy_key_index obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200Burn
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200Burn" (\obj -> ((GHC.Base.pure GetSharedTransactionResponseBody200Burn GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "tokens")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "wallet_policy_key_hash")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "wallet_policy_key_index"))
-- | Create a new 'GetSharedTransactionResponseBody200Burn' with all required fields.
mkGetSharedTransactionResponseBody200Burn :: [GetSharedTransactionResponseBody200BurnTokens] -- ^ 'getSharedTransactionResponseBody200BurnTokens'
  -> GetSharedTransactionResponseBody200Burn
mkGetSharedTransactionResponseBody200Burn getSharedTransactionResponseBody200BurnTokens = GetSharedTransactionResponseBody200Burn{getSharedTransactionResponseBody200BurnTokens = getSharedTransactionResponseBody200BurnTokens,
                                                                                                                                  getSharedTransactionResponseBody200BurnWallet_policy_key_hash = GHC.Maybe.Nothing,
                                                                                                                                  getSharedTransactionResponseBody200BurnWallet_policy_key_index = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.burn.properties.tokens.items@ in the specification.
-- 
-- 
data GetSharedTransactionResponseBody200BurnTokens = GetSharedTransactionResponseBody200BurnTokens {
  -- | assets
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  getSharedTransactionResponseBody200BurnTokensAssets :: ([GetSharedTransactionResponseBody200BurnTokensAssets])
  -- | policy_id: A unique identifier of the asset\'s monetary policy. The policy
  -- controls how assets of this kind are created and destroyed.
  -- 
  -- The contents are the blake2b-224 hash of the monetary policy
  -- script, encoded in hexadecimal.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 56
  -- * Minimum length of 56
  , getSharedTransactionResponseBody200BurnTokensPolicy_id :: Data.Text.Internal.Text
  -- | policy_script
  , getSharedTransactionResponseBody200BurnTokensPolicy_script :: GetSharedTransactionResponseBody200BurnTokensPolicy_scriptVariants
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200BurnTokens
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["assets" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200BurnTokensAssets obj] : ["policy_id" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200BurnTokensPolicy_id obj] : ["policy_script" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200BurnTokensPolicy_script obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["assets" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200BurnTokensAssets obj] : ["policy_id" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200BurnTokensPolicy_id obj] : ["policy_script" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200BurnTokensPolicy_script obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200BurnTokens
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200BurnTokens" (\obj -> ((GHC.Base.pure GetSharedTransactionResponseBody200BurnTokens GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "assets")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "policy_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "policy_script"))
-- | Create a new 'GetSharedTransactionResponseBody200BurnTokens' with all required fields.
mkGetSharedTransactionResponseBody200BurnTokens :: [GetSharedTransactionResponseBody200BurnTokensAssets] -- ^ 'getSharedTransactionResponseBody200BurnTokensAssets'
  -> Data.Text.Internal.Text -- ^ 'getSharedTransactionResponseBody200BurnTokensPolicy_id'
  -> GetSharedTransactionResponseBody200BurnTokensPolicy_scriptVariants -- ^ 'getSharedTransactionResponseBody200BurnTokensPolicy_script'
  -> GetSharedTransactionResponseBody200BurnTokens
mkGetSharedTransactionResponseBody200BurnTokens getSharedTransactionResponseBody200BurnTokensAssets getSharedTransactionResponseBody200BurnTokensPolicy_id getSharedTransactionResponseBody200BurnTokensPolicy_script = GetSharedTransactionResponseBody200BurnTokens{getSharedTransactionResponseBody200BurnTokensAssets = getSharedTransactionResponseBody200BurnTokensAssets,
                                                                                                                                                                                                                                                                      getSharedTransactionResponseBody200BurnTokensPolicy_id = getSharedTransactionResponseBody200BurnTokensPolicy_id,
                                                                                                                                                                                                                                                                      getSharedTransactionResponseBody200BurnTokensPolicy_script = getSharedTransactionResponseBody200BurnTokensPolicy_script}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.burn.properties.tokens.items.properties.assets.items@ in the specification.
-- 
-- 
data GetSharedTransactionResponseBody200BurnTokensAssets = GetSharedTransactionResponseBody200BurnTokensAssets {
  -- | asset_name: The asset on-chain type which acts as a sub-identifier within a
  -- policy. Although we call it \"asset name\", the value needn\'t be
  -- text, and it could even be empty.
  -- 
  -- For policies with a single fungible asset item, asset name is
  -- typically an empty string.
  -- 
  -- This value can be up to 32 bytes of arbitrary data (which is 64
  -- hexadecimal digits).
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  getSharedTransactionResponseBody200BurnTokensAssetsAsset_name :: Data.Text.Internal.Text
  -- | fingerprint: A user-facing short fingerprint which combines the \`policy_id\` and \`asset_name\`
  -- to allow for an easier human comparison of assets. Note that it is generally
  -- **not okay** to use this fingerprint as a unique identifier for it is not collision
  -- resistant. Yet within the context of a single wallet, it makes for a (rather)
  -- short user-facing comparison mean.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 44
  -- * Minimum length of 44
  -- * Must match pattern \'^(asset)1[0-9a-z]*\$\'
  , getSharedTransactionResponseBody200BurnTokensAssetsFingerprint :: Data.Text.Internal.Text
  -- | quantity: Number of assets for the given \`policy_id\` and \`asset_name\`.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , getSharedTransactionResponseBody200BurnTokensAssetsQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200BurnTokensAssets
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["asset_name" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200BurnTokensAssetsAsset_name obj] : ["fingerprint" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200BurnTokensAssetsFingerprint obj] : ["quantity" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200BurnTokensAssetsQuantity obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["asset_name" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200BurnTokensAssetsAsset_name obj] : ["fingerprint" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200BurnTokensAssetsFingerprint obj] : ["quantity" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200BurnTokensAssetsQuantity obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200BurnTokensAssets
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200BurnTokensAssets" (\obj -> ((GHC.Base.pure GetSharedTransactionResponseBody200BurnTokensAssets GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "asset_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "fingerprint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'GetSharedTransactionResponseBody200BurnTokensAssets' with all required fields.
mkGetSharedTransactionResponseBody200BurnTokensAssets :: Data.Text.Internal.Text -- ^ 'getSharedTransactionResponseBody200BurnTokensAssetsAsset_name'
  -> Data.Text.Internal.Text -- ^ 'getSharedTransactionResponseBody200BurnTokensAssetsFingerprint'
  -> GHC.Types.Int -- ^ 'getSharedTransactionResponseBody200BurnTokensAssetsQuantity'
  -> GetSharedTransactionResponseBody200BurnTokensAssets
mkGetSharedTransactionResponseBody200BurnTokensAssets getSharedTransactionResponseBody200BurnTokensAssetsAsset_name getSharedTransactionResponseBody200BurnTokensAssetsFingerprint getSharedTransactionResponseBody200BurnTokensAssetsQuantity = GetSharedTransactionResponseBody200BurnTokensAssets{getSharedTransactionResponseBody200BurnTokensAssetsAsset_name = getSharedTransactionResponseBody200BurnTokensAssetsAsset_name,
                                                                                                                                                                                                                                                                                                     getSharedTransactionResponseBody200BurnTokensAssetsFingerprint = getSharedTransactionResponseBody200BurnTokensAssetsFingerprint,
                                                                                                                                                                                                                                                                                                     getSharedTransactionResponseBody200BurnTokensAssetsQuantity = getSharedTransactionResponseBody200BurnTokensAssetsQuantity}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.burn.properties.tokens.items.properties.policy_script.oneOf@ in the specification.
-- 
-- 
data GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1 = GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1 {
  -- | reference: A reference input.
  getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1Reference :: (GHC.Maybe.Maybe GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1Reference)
  -- | script
  , getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1Script :: GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptVariants
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reference" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1Reference obj) : ["script" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1Script obj] : ["script_type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "native"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reference" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1Reference obj) : ["script" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1Script obj] : ["script_type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "native"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1" (\obj -> (GHC.Base.pure GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "reference")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "script"))
-- | Create a new 'GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1' with all required fields.
mkGetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1 :: GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptVariants -- ^ 'getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1Script'
  -> GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1
mkGetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1 getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1Script = GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1{getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1Reference = GHC.Maybe.Nothing,
                                                                                                                                                                                                             getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1Script = getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1Script}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.burn.properties.tokens.items.properties.policy_script.oneOf.properties.reference@ in the specification.
-- 
-- A reference input.
data GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1Reference = GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1Reference {
  -- | id: A unique identifier for this transaction
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  -- * Minimum length of 64
  getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ReferenceId :: Data.Text.Internal.Text
  -- | index
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ReferenceIndex :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1Reference
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["id" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ReferenceId obj] : ["index" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ReferenceIndex obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["id" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ReferenceId obj] : ["index" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ReferenceIndex obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1Reference
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1Reference" (\obj -> (GHC.Base.pure GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1Reference GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "index"))
-- | Create a new 'GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1Reference' with all required fields.
mkGetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1Reference :: Data.Text.Internal.Text -- ^ 'getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ReferenceId'
  -> GHC.Types.Int -- ^ 'getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ReferenceIndex'
  -> GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1Reference
mkGetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1Reference getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ReferenceId getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ReferenceIndex = GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1Reference{getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ReferenceId = getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ReferenceId,
                                                                                                                                                                                                                                                                                                                   getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ReferenceIndex = getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ReferenceIndex}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.burn.properties.tokens.items.properties.policy_script.oneOf.properties.script.oneOf@ in the specification.
-- 
-- 
data GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf2 = GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf2 {
  -- | all: Script primitive for which all signing keys corresponding to all list elements\' verification keys are expected to make the script valid.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf2All :: ([ScriptValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf2
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["all" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf2All obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["all" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf2All obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf2
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf2" (\obj -> GHC.Base.pure GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf2 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "all"))
-- | Create a new 'GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf2' with all required fields.
mkGetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf2 :: [ScriptValue] -- ^ 'getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf2All'
  -> GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf2
mkGetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf2 getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf2All = GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf2{getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf2All = getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf2All}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.burn.properties.tokens.items.properties.policy_script.oneOf.properties.script.oneOf@ in the specification.
-- 
-- 
data GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf3 = GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf3 {
  -- | any: Script primitive for which a signing key corresponding to any of the list elements\' verification keys is expected to make the script valid. It is equivalent to \`some\` with \`\"at_least\"=1\`.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf3Any :: ([ScriptValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf3
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["any" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf3Any obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["any" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf3Any obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf3
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf3" (\obj -> GHC.Base.pure GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf3 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "any"))
-- | Create a new 'GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf3' with all required fields.
mkGetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf3 :: [ScriptValue] -- ^ 'getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf3Any'
  -> GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf3
mkGetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf3 getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf3Any = GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf3{getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf3Any = getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf3Any}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.burn.properties.tokens.items.properties.policy_script.oneOf.properties.script.oneOf@ in the specification.
-- 
-- 
data GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf4 = GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf4 {
  -- | some: Script primitive for which at least a given number of signing keys corresponding to the list elements\' verification keys are expected to make the script valid.
  getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf4Some :: GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf4Some
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf4
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["some" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf4Some obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["some" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf4Some obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf4
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf4" (\obj -> GHC.Base.pure GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf4 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "some"))
-- | Create a new 'GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf4' with all required fields.
mkGetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf4 :: GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf4Some -- ^ 'getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf4Some'
  -> GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf4
mkGetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf4 getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf4Some = GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf4{getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf4Some = getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf4Some}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.burn.properties.tokens.items.properties.policy_script.oneOf.properties.script.oneOf.properties.some@ in the specification.
-- 
-- Script primitive for which at least a given number of signing keys corresponding to the list elements\' verification keys are expected to make the script valid.
data GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf4Some = GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf4Some {
  -- | at_least
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 255.0
  -- * Minimum  of 1.0
  getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf4SomeAt_least :: GHC.Types.Int
  -- | from
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  , getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf4SomeFrom :: ([ScriptValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf4Some
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["at_least" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf4SomeAt_least obj] : ["from" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf4SomeFrom obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["at_least" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf4SomeAt_least obj] : ["from" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf4SomeFrom obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf4Some
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf4Some" (\obj -> (GHC.Base.pure GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf4Some GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "at_least")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "from"))
-- | Create a new 'GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf4Some' with all required fields.
mkGetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf4Some :: GHC.Types.Int -- ^ 'getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf4SomeAt_least'
  -> [ScriptValue] -- ^ 'getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf4SomeFrom'
  -> GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf4Some
mkGetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf4Some getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf4SomeAt_least getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf4SomeFrom = GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf4Some{getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf4SomeAt_least = getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf4SomeAt_least,
                                                                                                                                                                                                                                                                                                                                                    getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf4SomeFrom = getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf4SomeFrom}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.burn.properties.tokens.items.properties.policy_script.oneOf.properties.script.oneOf@ in the specification.
-- 
-- 
data GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf5 = GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf5 {
  -- | active_from: Transaction is only valid starting at the specified slot number (\`≥ active_from\`).
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf5Active_from :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf5
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["active_from" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf5Active_from obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["active_from" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf5Active_from obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf5
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf5" (\obj -> GHC.Base.pure GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf5 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active_from"))
-- | Create a new 'GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf5' with all required fields.
mkGetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf5 :: GHC.Types.Int -- ^ 'getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf5Active_from'
  -> GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf5
mkGetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf5 getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf5Active_from = GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf5{getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf5Active_from = getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf5Active_from}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.burn.properties.tokens.items.properties.policy_script.oneOf.properties.script.oneOf@ in the specification.
-- 
-- 
data GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf6 = GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf6 {
  -- | active_until: Transaction is only valid before the specified slot number (\`\< active_until\`).
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf6Active_until :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf6
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["active_until" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf6Active_until obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["active_until" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf6Active_until obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf6
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf6" (\obj -> GHC.Base.pure GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf6 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active_until"))
-- | Create a new 'GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf6' with all required fields.
mkGetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf6 :: GHC.Types.Int -- ^ 'getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf6Active_until'
  -> GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf6
mkGetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf6 getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf6Active_until = GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf6{getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf6Active_until = getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf6Active_until}
-- | Defines the oneOf schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.burn.properties.tokens.items.properties.policy_script.oneOf.properties.script.oneOf@ in the specification.
-- 
-- 
data GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptVariants =
   GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptVariant1 Data.Text.Internal.Text
  | GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptVariant2 GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf2
  | GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptVariant3 GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf3
  | GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptVariant4 GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf4
  | GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptVariant5 GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf5
  | GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptVariant6 GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptOneOf6
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptVariants
    where toJSON (GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptVariant1 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptVariant2 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptVariant3 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptVariant4 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptVariant5 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptVariant6 a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptVariants
    where parseJSON val = case (GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptVariant1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptVariant2 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptVariant3 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptVariant4 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptVariant5 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1ScriptVariant6 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched"))))) of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.burn.properties.tokens.items.properties.policy_script.oneOf@ in the specification.
-- 
-- 
data GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2 = GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2 {
  -- | reference: A reference input.
  getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Reference :: (GHC.Maybe.Maybe GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Reference)
  -- | script_info
  , getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Script_info :: GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Script_info
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reference" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Reference obj) : ["script_info" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Script_info obj] : ["script_type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "plutus"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reference" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Reference obj) : ["script_info" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Script_info obj] : ["script_type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "plutus"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2" (\obj -> (GHC.Base.pure GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "reference")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "script_info"))
-- | Create a new 'GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2' with all required fields.
mkGetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2 :: GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Script_info -- ^ 'getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Script_info'
  -> GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2
mkGetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2 getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Script_info = GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2{getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Reference = GHC.Maybe.Nothing,
                                                                                                                                                                                                                  getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Script_info = getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Script_info}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.burn.properties.tokens.items.properties.policy_script.oneOf.properties.reference@ in the specification.
-- 
-- A reference input.
data GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Reference = GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Reference {
  -- | id: A unique identifier for this transaction
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  -- * Minimum length of 64
  getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2ReferenceId :: Data.Text.Internal.Text
  -- | index
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2ReferenceIndex :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Reference
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["id" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2ReferenceId obj] : ["index" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2ReferenceIndex obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["id" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2ReferenceId obj] : ["index" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2ReferenceIndex obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Reference
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Reference" (\obj -> (GHC.Base.pure GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Reference GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "index"))
-- | Create a new 'GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Reference' with all required fields.
mkGetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Reference :: Data.Text.Internal.Text -- ^ 'getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2ReferenceId'
  -> GHC.Types.Int -- ^ 'getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2ReferenceIndex'
  -> GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Reference
mkGetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Reference getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2ReferenceId getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2ReferenceIndex = GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Reference{getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2ReferenceId = getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2ReferenceId,
                                                                                                                                                                                                                                                                                                                   getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2ReferenceIndex = getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2ReferenceIndex}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.burn.properties.tokens.items.properties.policy_script.oneOf.properties.script_info@ in the specification.
-- 
-- 
data GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Script_info = GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Script_info {
  -- | language_version
  getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Script_infoLanguage_version :: GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Script_infoLanguage_version
  -- | script_hash
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 56
  -- * Minimum length of 56
  , getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Script_infoScript_hash :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Script_info
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["language_version" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Script_infoLanguage_version obj] : ["script_hash" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Script_infoScript_hash obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["language_version" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Script_infoLanguage_version obj] : ["script_hash" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Script_infoScript_hash obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Script_info
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Script_info" (\obj -> (GHC.Base.pure GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Script_info GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "language_version")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "script_hash"))
-- | Create a new 'GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Script_info' with all required fields.
mkGetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Script_info :: GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Script_infoLanguage_version -- ^ 'getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Script_infoLanguage_version'
  -> Data.Text.Internal.Text -- ^ 'getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Script_infoScript_hash'
  -> GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Script_info
mkGetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Script_info getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Script_infoLanguage_version getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Script_infoScript_hash = GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Script_info{getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Script_infoLanguage_version = getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Script_infoLanguage_version,
                                                                                                                                                                                                                                                                                                                                               getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Script_infoScript_hash = getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Script_infoScript_hash}
-- | Defines the enum schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.burn.properties.tokens.items.properties.policy_script.oneOf.properties.script_info.properties.language_version@ in the specification.
-- 
-- 
data GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Script_infoLanguage_version =
   GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Script_infoLanguage_versionOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Script_infoLanguage_versionTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Script_infoLanguage_versionEnumV1 -- ^ Represents the JSON value @"v1"@
  | GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Script_infoLanguage_versionEnumV2 -- ^ Represents the JSON value @"v2"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Script_infoLanguage_version
    where toJSON (GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Script_infoLanguage_versionOther val) = val
          toJSON (GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Script_infoLanguage_versionTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Script_infoLanguage_versionEnumV1) = "v1"
          toJSON (GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Script_infoLanguage_versionEnumV2) = "v2"
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Script_infoLanguage_version
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "v1" -> GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Script_infoLanguage_versionEnumV1
                                            | val GHC.Classes.== "v2" -> GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Script_infoLanguage_versionEnumV2
                                            | GHC.Base.otherwise -> GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2Script_infoLanguage_versionOther val)
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.burn.properties.tokens.items.properties.policy_script.oneOf@ in the specification.
-- 
-- 
data GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf3 = GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf3 {
  -- | references
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf3References :: ([GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf3References])
  -- | script_hash
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 56
  -- * Minimum length of 56
  , getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf3Script_hash :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf3
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["references" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf3References obj] : ["script_hash" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf3Script_hash obj] : ["script_type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "reference script"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["references" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf3References obj] : ["script_hash" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf3Script_hash obj] : ["script_type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "reference script"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf3
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf3" (\obj -> (GHC.Base.pure GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf3 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "references")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "script_hash"))
-- | Create a new 'GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf3' with all required fields.
mkGetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf3 :: [GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf3References] -- ^ 'getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf3References'
  -> Data.Text.Internal.Text -- ^ 'getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf3Script_hash'
  -> GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf3
mkGetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf3 getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf3References getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf3Script_hash = GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf3{getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf3References = getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf3References,
                                                                                                                                                                                                                                                                                             getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf3Script_hash = getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf3Script_hash}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.burn.properties.tokens.items.properties.policy_script.oneOf.properties.references.items@ in the specification.
-- 
-- A reference input.
data GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf3References = GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf3References {
  -- | id: A unique identifier for this transaction
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  -- * Minimum length of 64
  getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf3ReferencesId :: Data.Text.Internal.Text
  -- | index
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf3ReferencesIndex :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf3References
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["id" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf3ReferencesId obj] : ["index" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf3ReferencesIndex obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["id" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf3ReferencesId obj] : ["index" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf3ReferencesIndex obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf3References
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf3References" (\obj -> (GHC.Base.pure GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf3References GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "index"))
-- | Create a new 'GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf3References' with all required fields.
mkGetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf3References :: Data.Text.Internal.Text -- ^ 'getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf3ReferencesId'
  -> GHC.Types.Int -- ^ 'getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf3ReferencesIndex'
  -> GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf3References
mkGetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf3References getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf3ReferencesId getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf3ReferencesIndex = GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf3References{getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf3ReferencesId = getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf3ReferencesId,
                                                                                                                                                                                                                                                                                                                       getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf3ReferencesIndex = getSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf3ReferencesIndex}
-- | Defines the oneOf schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.burn.properties.tokens.items.properties.policy_script.oneOf@ in the specification.
-- 
-- 
data GetSharedTransactionResponseBody200BurnTokensPolicy_scriptVariants =
   GetSharedTransactionResponseBody200BurnTokensPolicy_scriptVariant1 GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf1
  | GetSharedTransactionResponseBody200BurnTokensPolicy_scriptVariant2 GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf2
  | GetSharedTransactionResponseBody200BurnTokensPolicy_scriptVariant3 GetSharedTransactionResponseBody200BurnTokensPolicy_scriptOneOf3
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200BurnTokensPolicy_scriptVariants
    where toJSON (GetSharedTransactionResponseBody200BurnTokensPolicy_scriptVariant1 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (GetSharedTransactionResponseBody200BurnTokensPolicy_scriptVariant2 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (GetSharedTransactionResponseBody200BurnTokensPolicy_scriptVariant3 a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200BurnTokensPolicy_scriptVariants
    where parseJSON val = case (GetSharedTransactionResponseBody200BurnTokensPolicy_scriptVariant1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetSharedTransactionResponseBody200BurnTokensPolicy_scriptVariant2 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetSharedTransactionResponseBody200BurnTokensPolicy_scriptVariant3 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched")) of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.certificates.items.oneOf@ in the specification.
-- 
-- A delegation certificate belonging to wallet
-- 
-- Only for \'join_pool\' the \'pool\' property is required.
data GetSharedTransactionResponseBody200CertificatesOneOf1 = GetSharedTransactionResponseBody200CertificatesOneOf1 {
  -- | certificate_type
  getSharedTransactionResponseBody200CertificatesOneOf1Certificate_type :: GetSharedTransactionResponseBody200CertificatesOneOf1Certificate_type
  -- | pool: A unique identifier for the pool.
  , getSharedTransactionResponseBody200CertificatesOneOf1Pool :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | reward_account_path
  -- 
  -- Constraints:
  -- 
  -- * Must have a maximum of 5 items
  -- * Must have a minimum of 5 items
  , getSharedTransactionResponseBody200CertificatesOneOf1Reward_account_path :: ([Data.Text.Internal.Text])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200CertificatesOneOf1
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["certificate_type" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200CertificatesOneOf1Certificate_type obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pool" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200CertificatesOneOf1Pool obj) : ["reward_account_path" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200CertificatesOneOf1Reward_account_path obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["certificate_type" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200CertificatesOneOf1Certificate_type obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pool" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200CertificatesOneOf1Pool obj) : ["reward_account_path" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200CertificatesOneOf1Reward_account_path obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200CertificatesOneOf1
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200CertificatesOneOf1" (\obj -> ((GHC.Base.pure GetSharedTransactionResponseBody200CertificatesOneOf1 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "certificate_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "pool")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "reward_account_path"))
-- | Create a new 'GetSharedTransactionResponseBody200CertificatesOneOf1' with all required fields.
mkGetSharedTransactionResponseBody200CertificatesOneOf1 :: GetSharedTransactionResponseBody200CertificatesOneOf1Certificate_type -- ^ 'getSharedTransactionResponseBody200CertificatesOneOf1Certificate_type'
  -> [Data.Text.Internal.Text] -- ^ 'getSharedTransactionResponseBody200CertificatesOneOf1Reward_account_path'
  -> GetSharedTransactionResponseBody200CertificatesOneOf1
mkGetSharedTransactionResponseBody200CertificatesOneOf1 getSharedTransactionResponseBody200CertificatesOneOf1Certificate_type getSharedTransactionResponseBody200CertificatesOneOf1Reward_account_path = GetSharedTransactionResponseBody200CertificatesOneOf1{getSharedTransactionResponseBody200CertificatesOneOf1Certificate_type = getSharedTransactionResponseBody200CertificatesOneOf1Certificate_type,
                                                                                                                                                                                                                                                               getSharedTransactionResponseBody200CertificatesOneOf1Pool = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                               getSharedTransactionResponseBody200CertificatesOneOf1Reward_account_path = getSharedTransactionResponseBody200CertificatesOneOf1Reward_account_path}
-- | Defines the enum schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.certificates.items.oneOf.properties.certificate_type@ in the specification.
-- 
-- 
data GetSharedTransactionResponseBody200CertificatesOneOf1Certificate_type =
   GetSharedTransactionResponseBody200CertificatesOneOf1Certificate_typeOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetSharedTransactionResponseBody200CertificatesOneOf1Certificate_typeTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetSharedTransactionResponseBody200CertificatesOneOf1Certificate_typeEnumJoin_pool -- ^ Represents the JSON value @"join_pool"@
  | GetSharedTransactionResponseBody200CertificatesOneOf1Certificate_typeEnumQuit_pool -- ^ Represents the JSON value @"quit_pool"@
  | GetSharedTransactionResponseBody200CertificatesOneOf1Certificate_typeEnumRegister_reward_account -- ^ Represents the JSON value @"register_reward_account"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200CertificatesOneOf1Certificate_type
    where toJSON (GetSharedTransactionResponseBody200CertificatesOneOf1Certificate_typeOther val) = val
          toJSON (GetSharedTransactionResponseBody200CertificatesOneOf1Certificate_typeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetSharedTransactionResponseBody200CertificatesOneOf1Certificate_typeEnumJoin_pool) = "join_pool"
          toJSON (GetSharedTransactionResponseBody200CertificatesOneOf1Certificate_typeEnumQuit_pool) = "quit_pool"
          toJSON (GetSharedTransactionResponseBody200CertificatesOneOf1Certificate_typeEnumRegister_reward_account) = "register_reward_account"
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200CertificatesOneOf1Certificate_type
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "join_pool" -> GetSharedTransactionResponseBody200CertificatesOneOf1Certificate_typeEnumJoin_pool
                                            | val GHC.Classes.== "quit_pool" -> GetSharedTransactionResponseBody200CertificatesOneOf1Certificate_typeEnumQuit_pool
                                            | val GHC.Classes.== "register_reward_account" -> GetSharedTransactionResponseBody200CertificatesOneOf1Certificate_typeEnumRegister_reward_account
                                            | GHC.Base.otherwise -> GetSharedTransactionResponseBody200CertificatesOneOf1Certificate_typeOther val)
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.certificates.items.oneOf@ in the specification.
-- 
-- A delegation certificate not belonging to wallet
-- 
-- Only for \'join_pool\' the \'pool\' property is required.
data GetSharedTransactionResponseBody200CertificatesOneOf2 = GetSharedTransactionResponseBody200CertificatesOneOf2 {
  -- | certificate_type
  getSharedTransactionResponseBody200CertificatesOneOf2Certificate_type :: GetSharedTransactionResponseBody200CertificatesOneOf2Certificate_type
  -- | pool: A unique identifier for the pool.
  , getSharedTransactionResponseBody200CertificatesOneOf2Pool :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | reward_account
  , getSharedTransactionResponseBody200CertificatesOneOf2Reward_account :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200CertificatesOneOf2
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["certificate_type" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200CertificatesOneOf2Certificate_type obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pool" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200CertificatesOneOf2Pool obj) : ["reward_account" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200CertificatesOneOf2Reward_account obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["certificate_type" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200CertificatesOneOf2Certificate_type obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pool" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200CertificatesOneOf2Pool obj) : ["reward_account" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200CertificatesOneOf2Reward_account obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200CertificatesOneOf2
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200CertificatesOneOf2" (\obj -> ((GHC.Base.pure GetSharedTransactionResponseBody200CertificatesOneOf2 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "certificate_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "pool")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "reward_account"))
-- | Create a new 'GetSharedTransactionResponseBody200CertificatesOneOf2' with all required fields.
mkGetSharedTransactionResponseBody200CertificatesOneOf2 :: GetSharedTransactionResponseBody200CertificatesOneOf2Certificate_type -- ^ 'getSharedTransactionResponseBody200CertificatesOneOf2Certificate_type'
  -> Data.Text.Internal.Text -- ^ 'getSharedTransactionResponseBody200CertificatesOneOf2Reward_account'
  -> GetSharedTransactionResponseBody200CertificatesOneOf2
mkGetSharedTransactionResponseBody200CertificatesOneOf2 getSharedTransactionResponseBody200CertificatesOneOf2Certificate_type getSharedTransactionResponseBody200CertificatesOneOf2Reward_account = GetSharedTransactionResponseBody200CertificatesOneOf2{getSharedTransactionResponseBody200CertificatesOneOf2Certificate_type = getSharedTransactionResponseBody200CertificatesOneOf2Certificate_type,
                                                                                                                                                                                                                                                          getSharedTransactionResponseBody200CertificatesOneOf2Pool = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                          getSharedTransactionResponseBody200CertificatesOneOf2Reward_account = getSharedTransactionResponseBody200CertificatesOneOf2Reward_account}
-- | Defines the enum schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.certificates.items.oneOf.properties.certificate_type@ in the specification.
-- 
-- 
data GetSharedTransactionResponseBody200CertificatesOneOf2Certificate_type =
   GetSharedTransactionResponseBody200CertificatesOneOf2Certificate_typeOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetSharedTransactionResponseBody200CertificatesOneOf2Certificate_typeTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetSharedTransactionResponseBody200CertificatesOneOf2Certificate_typeEnumJoin_pool_external -- ^ Represents the JSON value @"join_pool_external"@
  | GetSharedTransactionResponseBody200CertificatesOneOf2Certificate_typeEnumQuit_pool_external -- ^ Represents the JSON value @"quit_pool_external"@
  | GetSharedTransactionResponseBody200CertificatesOneOf2Certificate_typeEnumRegister_reward_account_external -- ^ Represents the JSON value @"register_reward_account_external"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200CertificatesOneOf2Certificate_type
    where toJSON (GetSharedTransactionResponseBody200CertificatesOneOf2Certificate_typeOther val) = val
          toJSON (GetSharedTransactionResponseBody200CertificatesOneOf2Certificate_typeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetSharedTransactionResponseBody200CertificatesOneOf2Certificate_typeEnumJoin_pool_external) = "join_pool_external"
          toJSON (GetSharedTransactionResponseBody200CertificatesOneOf2Certificate_typeEnumQuit_pool_external) = "quit_pool_external"
          toJSON (GetSharedTransactionResponseBody200CertificatesOneOf2Certificate_typeEnumRegister_reward_account_external) = "register_reward_account_external"
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200CertificatesOneOf2Certificate_type
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "join_pool_external" -> GetSharedTransactionResponseBody200CertificatesOneOf2Certificate_typeEnumJoin_pool_external
                                            | val GHC.Classes.== "quit_pool_external" -> GetSharedTransactionResponseBody200CertificatesOneOf2Certificate_typeEnumQuit_pool_external
                                            | val GHC.Classes.== "register_reward_account_external" -> GetSharedTransactionResponseBody200CertificatesOneOf2Certificate_typeEnumRegister_reward_account_external
                                            | GHC.Base.otherwise -> GetSharedTransactionResponseBody200CertificatesOneOf2Certificate_typeOther val)
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.certificates.items.oneOf@ in the specification.
-- 
-- 
data GetSharedTransactionResponseBody200CertificatesOneOf3 = GetSharedTransactionResponseBody200CertificatesOneOf3 {
  -- | pool_cost: Estimated cost set by the pool operator when registering his pool.
  -- This fixed cost is taken from each reward earned by the pool before splitting rewards between stakeholders.
  -- 
  -- May be omitted if the wallet hasn\'t found the pool\'s registration cerificate yet.
  getSharedTransactionResponseBody200CertificatesOneOf3Pool_cost :: GetSharedTransactionResponseBody200CertificatesOneOf3Pool_cost
  -- | pool_id: A unique identifier for the pool.
  , getSharedTransactionResponseBody200CertificatesOneOf3Pool_id :: Data.Text.Internal.Text
  -- | pool_margin: Variable margin on the total reward given to an operator before splitting rewards between stakeholders.
  -- 
  -- May be omitted if the wallet hasn\'t found the pool\'s registration cerificate yet.
  , getSharedTransactionResponseBody200CertificatesOneOf3Pool_margin :: GetSharedTransactionResponseBody200CertificatesOneOf3Pool_margin
  -- | pool_metadata
  , getSharedTransactionResponseBody200CertificatesOneOf3Pool_metadata :: (GHC.Maybe.Maybe GetSharedTransactionResponseBody200CertificatesOneOf3Pool_metadata)
  -- | pool_owners
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 0 items
  , getSharedTransactionResponseBody200CertificatesOneOf3Pool_owners :: ([Data.Text.Internal.Text])
  -- | pool_pledge: Minimal stake amount that a stake pool is willing to honor.
  -- 
  -- May be omitted if the wallet hasn\'t found the pool\'s registration cerificate yet.
  , getSharedTransactionResponseBody200CertificatesOneOf3Pool_pledge :: GetSharedTransactionResponseBody200CertificatesOneOf3Pool_pledge
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200CertificatesOneOf3
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["pool_cost" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200CertificatesOneOf3Pool_cost obj] : ["pool_id" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200CertificatesOneOf3Pool_id obj] : ["pool_margin" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200CertificatesOneOf3Pool_margin obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pool_metadata" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200CertificatesOneOf3Pool_metadata obj) : ["pool_owners" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200CertificatesOneOf3Pool_owners obj] : ["pool_pledge" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200CertificatesOneOf3Pool_pledge obj] : ["certificate_type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "register_pool"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["pool_cost" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200CertificatesOneOf3Pool_cost obj] : ["pool_id" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200CertificatesOneOf3Pool_id obj] : ["pool_margin" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200CertificatesOneOf3Pool_margin obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pool_metadata" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200CertificatesOneOf3Pool_metadata obj) : ["pool_owners" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200CertificatesOneOf3Pool_owners obj] : ["pool_pledge" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200CertificatesOneOf3Pool_pledge obj] : ["certificate_type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "register_pool"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200CertificatesOneOf3
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200CertificatesOneOf3" (\obj -> (((((GHC.Base.pure GetSharedTransactionResponseBody200CertificatesOneOf3 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pool_cost")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pool_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pool_margin")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "pool_metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pool_owners")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pool_pledge"))
-- | Create a new 'GetSharedTransactionResponseBody200CertificatesOneOf3' with all required fields.
mkGetSharedTransactionResponseBody200CertificatesOneOf3 :: GetSharedTransactionResponseBody200CertificatesOneOf3Pool_cost -- ^ 'getSharedTransactionResponseBody200CertificatesOneOf3Pool_cost'
  -> Data.Text.Internal.Text -- ^ 'getSharedTransactionResponseBody200CertificatesOneOf3Pool_id'
  -> GetSharedTransactionResponseBody200CertificatesOneOf3Pool_margin -- ^ 'getSharedTransactionResponseBody200CertificatesOneOf3Pool_margin'
  -> [Data.Text.Internal.Text] -- ^ 'getSharedTransactionResponseBody200CertificatesOneOf3Pool_owners'
  -> GetSharedTransactionResponseBody200CertificatesOneOf3Pool_pledge -- ^ 'getSharedTransactionResponseBody200CertificatesOneOf3Pool_pledge'
  -> GetSharedTransactionResponseBody200CertificatesOneOf3
mkGetSharedTransactionResponseBody200CertificatesOneOf3 getSharedTransactionResponseBody200CertificatesOneOf3Pool_cost getSharedTransactionResponseBody200CertificatesOneOf3Pool_id getSharedTransactionResponseBody200CertificatesOneOf3Pool_margin getSharedTransactionResponseBody200CertificatesOneOf3Pool_owners getSharedTransactionResponseBody200CertificatesOneOf3Pool_pledge = GetSharedTransactionResponseBody200CertificatesOneOf3{getSharedTransactionResponseBody200CertificatesOneOf3Pool_cost = getSharedTransactionResponseBody200CertificatesOneOf3Pool_cost,
                                                                                                                                                                                                                                                                                                                                                                                                                                               getSharedTransactionResponseBody200CertificatesOneOf3Pool_id = getSharedTransactionResponseBody200CertificatesOneOf3Pool_id,
                                                                                                                                                                                                                                                                                                                                                                                                                                               getSharedTransactionResponseBody200CertificatesOneOf3Pool_margin = getSharedTransactionResponseBody200CertificatesOneOf3Pool_margin,
                                                                                                                                                                                                                                                                                                                                                                                                                                               getSharedTransactionResponseBody200CertificatesOneOf3Pool_metadata = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                                                                                                                                                                                               getSharedTransactionResponseBody200CertificatesOneOf3Pool_owners = getSharedTransactionResponseBody200CertificatesOneOf3Pool_owners,
                                                                                                                                                                                                                                                                                                                                                                                                                                               getSharedTransactionResponseBody200CertificatesOneOf3Pool_pledge = getSharedTransactionResponseBody200CertificatesOneOf3Pool_pledge}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.certificates.items.oneOf.properties.pool_cost@ in the specification.
-- 
-- Estimated cost set by the pool operator when registering his pool.
-- This fixed cost is taken from each reward earned by the pool before splitting rewards between stakeholders.
-- 
-- May be omitted if the wallet hasn\'t found the pool\'s registration cerificate yet.
data GetSharedTransactionResponseBody200CertificatesOneOf3Pool_cost = GetSharedTransactionResponseBody200CertificatesOneOf3Pool_cost {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  getSharedTransactionResponseBody200CertificatesOneOf3Pool_costQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200CertificatesOneOf3Pool_cost
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200CertificatesOneOf3Pool_costQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200CertificatesOneOf3Pool_costQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200CertificatesOneOf3Pool_cost
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200CertificatesOneOf3Pool_cost" (\obj -> GHC.Base.pure GetSharedTransactionResponseBody200CertificatesOneOf3Pool_cost GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'GetSharedTransactionResponseBody200CertificatesOneOf3Pool_cost' with all required fields.
mkGetSharedTransactionResponseBody200CertificatesOneOf3Pool_cost :: GHC.Types.Int -- ^ 'getSharedTransactionResponseBody200CertificatesOneOf3Pool_costQuantity'
  -> GetSharedTransactionResponseBody200CertificatesOneOf3Pool_cost
mkGetSharedTransactionResponseBody200CertificatesOneOf3Pool_cost getSharedTransactionResponseBody200CertificatesOneOf3Pool_costQuantity = GetSharedTransactionResponseBody200CertificatesOneOf3Pool_cost{getSharedTransactionResponseBody200CertificatesOneOf3Pool_costQuantity = getSharedTransactionResponseBody200CertificatesOneOf3Pool_costQuantity}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.certificates.items.oneOf.properties.pool_margin@ in the specification.
-- 
-- Variable margin on the total reward given to an operator before splitting rewards between stakeholders.
-- 
-- May be omitted if the wallet hasn\'t found the pool\'s registration cerificate yet.
data GetSharedTransactionResponseBody200CertificatesOneOf3Pool_margin = GetSharedTransactionResponseBody200CertificatesOneOf3Pool_margin {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  -- * Minimum  of 0.0
  getSharedTransactionResponseBody200CertificatesOneOf3Pool_marginQuantity :: GHC.Types.Double
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200CertificatesOneOf3Pool_margin
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200CertificatesOneOf3Pool_marginQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "percent"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200CertificatesOneOf3Pool_marginQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "percent"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200CertificatesOneOf3Pool_margin
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200CertificatesOneOf3Pool_margin" (\obj -> GHC.Base.pure GetSharedTransactionResponseBody200CertificatesOneOf3Pool_margin GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'GetSharedTransactionResponseBody200CertificatesOneOf3Pool_margin' with all required fields.
mkGetSharedTransactionResponseBody200CertificatesOneOf3Pool_margin :: GHC.Types.Double -- ^ 'getSharedTransactionResponseBody200CertificatesOneOf3Pool_marginQuantity'
  -> GetSharedTransactionResponseBody200CertificatesOneOf3Pool_margin
mkGetSharedTransactionResponseBody200CertificatesOneOf3Pool_margin getSharedTransactionResponseBody200CertificatesOneOf3Pool_marginQuantity = GetSharedTransactionResponseBody200CertificatesOneOf3Pool_margin{getSharedTransactionResponseBody200CertificatesOneOf3Pool_marginQuantity = getSharedTransactionResponseBody200CertificatesOneOf3Pool_marginQuantity}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.certificates.items.oneOf.properties.pool_metadata@ in the specification.
-- 
-- 
data GetSharedTransactionResponseBody200CertificatesOneOf3Pool_metadata = GetSharedTransactionResponseBody200CertificatesOneOf3Pool_metadata {
  -- | hash
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  -- * Minimum length of 64
  getSharedTransactionResponseBody200CertificatesOneOf3Pool_metadataHash :: Data.Text.Internal.Text
  -- | url: A URL to the stake pool\'s website.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 250
  -- * Must match pattern \'^https:\/\/.+\'
  , getSharedTransactionResponseBody200CertificatesOneOf3Pool_metadataUrl :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200CertificatesOneOf3Pool_metadata
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["hash" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200CertificatesOneOf3Pool_metadataHash obj] : ["url" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200CertificatesOneOf3Pool_metadataUrl obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["hash" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200CertificatesOneOf3Pool_metadataHash obj] : ["url" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200CertificatesOneOf3Pool_metadataUrl obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200CertificatesOneOf3Pool_metadata
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200CertificatesOneOf3Pool_metadata" (\obj -> (GHC.Base.pure GetSharedTransactionResponseBody200CertificatesOneOf3Pool_metadata GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "hash")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))
-- | Create a new 'GetSharedTransactionResponseBody200CertificatesOneOf3Pool_metadata' with all required fields.
mkGetSharedTransactionResponseBody200CertificatesOneOf3Pool_metadata :: Data.Text.Internal.Text -- ^ 'getSharedTransactionResponseBody200CertificatesOneOf3Pool_metadataHash'
  -> Data.Text.Internal.Text -- ^ 'getSharedTransactionResponseBody200CertificatesOneOf3Pool_metadataUrl'
  -> GetSharedTransactionResponseBody200CertificatesOneOf3Pool_metadata
mkGetSharedTransactionResponseBody200CertificatesOneOf3Pool_metadata getSharedTransactionResponseBody200CertificatesOneOf3Pool_metadataHash getSharedTransactionResponseBody200CertificatesOneOf3Pool_metadataUrl = GetSharedTransactionResponseBody200CertificatesOneOf3Pool_metadata{getSharedTransactionResponseBody200CertificatesOneOf3Pool_metadataHash = getSharedTransactionResponseBody200CertificatesOneOf3Pool_metadataHash,
                                                                                                                                                                                                                                                                                       getSharedTransactionResponseBody200CertificatesOneOf3Pool_metadataUrl = getSharedTransactionResponseBody200CertificatesOneOf3Pool_metadataUrl}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.certificates.items.oneOf.properties.pool_pledge@ in the specification.
-- 
-- Minimal stake amount that a stake pool is willing to honor.
-- 
-- May be omitted if the wallet hasn\'t found the pool\'s registration cerificate yet.
data GetSharedTransactionResponseBody200CertificatesOneOf3Pool_pledge = GetSharedTransactionResponseBody200CertificatesOneOf3Pool_pledge {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  getSharedTransactionResponseBody200CertificatesOneOf3Pool_pledgeQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200CertificatesOneOf3Pool_pledge
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200CertificatesOneOf3Pool_pledgeQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200CertificatesOneOf3Pool_pledgeQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200CertificatesOneOf3Pool_pledge
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200CertificatesOneOf3Pool_pledge" (\obj -> GHC.Base.pure GetSharedTransactionResponseBody200CertificatesOneOf3Pool_pledge GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'GetSharedTransactionResponseBody200CertificatesOneOf3Pool_pledge' with all required fields.
mkGetSharedTransactionResponseBody200CertificatesOneOf3Pool_pledge :: GHC.Types.Int -- ^ 'getSharedTransactionResponseBody200CertificatesOneOf3Pool_pledgeQuantity'
  -> GetSharedTransactionResponseBody200CertificatesOneOf3Pool_pledge
mkGetSharedTransactionResponseBody200CertificatesOneOf3Pool_pledge getSharedTransactionResponseBody200CertificatesOneOf3Pool_pledgeQuantity = GetSharedTransactionResponseBody200CertificatesOneOf3Pool_pledge{getSharedTransactionResponseBody200CertificatesOneOf3Pool_pledgeQuantity = getSharedTransactionResponseBody200CertificatesOneOf3Pool_pledgeQuantity}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.certificates.items.oneOf@ in the specification.
-- 
-- 
data GetSharedTransactionResponseBody200CertificatesOneOf4 = GetSharedTransactionResponseBody200CertificatesOneOf4 {
  -- | pool_id: A unique identifier for the pool.
  getSharedTransactionResponseBody200CertificatesOneOf4Pool_id :: Data.Text.Internal.Text
  -- | retirement_epoch: An epoch is a time period which is divided into slots.
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , getSharedTransactionResponseBody200CertificatesOneOf4Retirement_epoch :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200CertificatesOneOf4
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["pool_id" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200CertificatesOneOf4Pool_id obj] : ["retirement_epoch" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200CertificatesOneOf4Retirement_epoch obj] : ["certificate_type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "deregister_pool"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["pool_id" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200CertificatesOneOf4Pool_id obj] : ["retirement_epoch" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200CertificatesOneOf4Retirement_epoch obj] : ["certificate_type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "deregister_pool"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200CertificatesOneOf4
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200CertificatesOneOf4" (\obj -> (GHC.Base.pure GetSharedTransactionResponseBody200CertificatesOneOf4 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pool_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "retirement_epoch"))
-- | Create a new 'GetSharedTransactionResponseBody200CertificatesOneOf4' with all required fields.
mkGetSharedTransactionResponseBody200CertificatesOneOf4 :: Data.Text.Internal.Text -- ^ 'getSharedTransactionResponseBody200CertificatesOneOf4Pool_id'
  -> GHC.Types.Int -- ^ 'getSharedTransactionResponseBody200CertificatesOneOf4Retirement_epoch'
  -> GetSharedTransactionResponseBody200CertificatesOneOf4
mkGetSharedTransactionResponseBody200CertificatesOneOf4 getSharedTransactionResponseBody200CertificatesOneOf4Pool_id getSharedTransactionResponseBody200CertificatesOneOf4Retirement_epoch = GetSharedTransactionResponseBody200CertificatesOneOf4{getSharedTransactionResponseBody200CertificatesOneOf4Pool_id = getSharedTransactionResponseBody200CertificatesOneOf4Pool_id,
                                                                                                                                                                                                                                                   getSharedTransactionResponseBody200CertificatesOneOf4Retirement_epoch = getSharedTransactionResponseBody200CertificatesOneOf4Retirement_epoch}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.certificates.items.oneOf@ in the specification.
-- 
-- 
data GetSharedTransactionResponseBody200CertificatesOneOf5 = GetSharedTransactionResponseBody200CertificatesOneOf5 {
  -- | certificate_type
  getSharedTransactionResponseBody200CertificatesOneOf5Certificate_type :: GetSharedTransactionResponseBody200CertificatesOneOf5Certificate_type
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200CertificatesOneOf5
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["certificate_type" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200CertificatesOneOf5Certificate_type obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["certificate_type" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200CertificatesOneOf5Certificate_type obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200CertificatesOneOf5
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200CertificatesOneOf5" (\obj -> GHC.Base.pure GetSharedTransactionResponseBody200CertificatesOneOf5 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "certificate_type"))
-- | Create a new 'GetSharedTransactionResponseBody200CertificatesOneOf5' with all required fields.
mkGetSharedTransactionResponseBody200CertificatesOneOf5 :: GetSharedTransactionResponseBody200CertificatesOneOf5Certificate_type -- ^ 'getSharedTransactionResponseBody200CertificatesOneOf5Certificate_type'
  -> GetSharedTransactionResponseBody200CertificatesOneOf5
mkGetSharedTransactionResponseBody200CertificatesOneOf5 getSharedTransactionResponseBody200CertificatesOneOf5Certificate_type = GetSharedTransactionResponseBody200CertificatesOneOf5{getSharedTransactionResponseBody200CertificatesOneOf5Certificate_type = getSharedTransactionResponseBody200CertificatesOneOf5Certificate_type}
-- | Defines the enum schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.certificates.items.oneOf.properties.certificate_type@ in the specification.
-- 
-- 
data GetSharedTransactionResponseBody200CertificatesOneOf5Certificate_type =
   GetSharedTransactionResponseBody200CertificatesOneOf5Certificate_typeOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetSharedTransactionResponseBody200CertificatesOneOf5Certificate_typeTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetSharedTransactionResponseBody200CertificatesOneOf5Certificate_typeEnumMir -- ^ Represents the JSON value @"mir"@
  | GetSharedTransactionResponseBody200CertificatesOneOf5Certificate_typeEnumGenesis -- ^ Represents the JSON value @"genesis"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200CertificatesOneOf5Certificate_type
    where toJSON (GetSharedTransactionResponseBody200CertificatesOneOf5Certificate_typeOther val) = val
          toJSON (GetSharedTransactionResponseBody200CertificatesOneOf5Certificate_typeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetSharedTransactionResponseBody200CertificatesOneOf5Certificate_typeEnumMir) = "mir"
          toJSON (GetSharedTransactionResponseBody200CertificatesOneOf5Certificate_typeEnumGenesis) = "genesis"
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200CertificatesOneOf5Certificate_type
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "mir" -> GetSharedTransactionResponseBody200CertificatesOneOf5Certificate_typeEnumMir
                                            | val GHC.Classes.== "genesis" -> GetSharedTransactionResponseBody200CertificatesOneOf5Certificate_typeEnumGenesis
                                            | GHC.Base.otherwise -> GetSharedTransactionResponseBody200CertificatesOneOf5Certificate_typeOther val)
-- | Defines the oneOf schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.certificates.items.oneOf@ in the specification.
-- 
-- Any certificate that could occur in an arbitrary transaction:
-- might be related to delegation, pool activities, genesis or MIR.
data GetSharedTransactionResponseBody200CertificatesVariants =
   GetSharedTransactionResponseBody200CertificatesVariant1 GetSharedTransactionResponseBody200CertificatesOneOf1
  | GetSharedTransactionResponseBody200CertificatesVariant2 GetSharedTransactionResponseBody200CertificatesOneOf2
  | GetSharedTransactionResponseBody200CertificatesVariant3 GetSharedTransactionResponseBody200CertificatesOneOf3
  | GetSharedTransactionResponseBody200CertificatesVariant4 GetSharedTransactionResponseBody200CertificatesOneOf4
  | GetSharedTransactionResponseBody200CertificatesVariant5 GetSharedTransactionResponseBody200CertificatesOneOf5
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200CertificatesVariants
    where toJSON (GetSharedTransactionResponseBody200CertificatesVariant1 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (GetSharedTransactionResponseBody200CertificatesVariant2 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (GetSharedTransactionResponseBody200CertificatesVariant3 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (GetSharedTransactionResponseBody200CertificatesVariant4 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (GetSharedTransactionResponseBody200CertificatesVariant5 a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200CertificatesVariants
    where parseJSON val = case (GetSharedTransactionResponseBody200CertificatesVariant1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetSharedTransactionResponseBody200CertificatesVariant2 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetSharedTransactionResponseBody200CertificatesVariant3 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetSharedTransactionResponseBody200CertificatesVariant4 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetSharedTransactionResponseBody200CertificatesVariant5 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched")))) of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.collateral.items@ in the specification.
-- 
-- 
data GetSharedTransactionResponseBody200Collateral = GetSharedTransactionResponseBody200Collateral {
  -- | address: A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
  -- which represents an address on the Cardano blockchain.
  -- Sequences in Base58 encoding are expected to be legacy Byron addresses,
  -- whereas sequences in Bech32 encoding correspond to current Shelley addresses.
  -- 
  -- For more details, see
  -- [CIP-0019 — Cardano addresses](https:\/\/github.com\/cardano-foundation\/CIPs\/tree\/master\/CIP-0019)
  -- .
  getSharedTransactionResponseBody200CollateralAddress :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | amount: Coins, in Lovelace. Only relates to \'Ada\'. Refer to \`assets\` for multi-assets wallets instead.
  , getSharedTransactionResponseBody200CollateralAmount :: (GHC.Maybe.Maybe GetSharedTransactionResponseBody200CollateralAmount)
  -- | id: A unique identifier for this transaction
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  -- * Minimum length of 64
  , getSharedTransactionResponseBody200CollateralId :: Data.Text.Internal.Text
  -- | index
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , getSharedTransactionResponseBody200CollateralIndex :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200Collateral
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200CollateralAddress obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200CollateralAmount obj) : ["id" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200CollateralId obj] : ["index" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200CollateralIndex obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200CollateralAddress obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200CollateralAmount obj) : ["id" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200CollateralId obj] : ["index" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200CollateralIndex obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200Collateral
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200Collateral" (\obj -> (((GHC.Base.pure GetSharedTransactionResponseBody200Collateral GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "index"))
-- | Create a new 'GetSharedTransactionResponseBody200Collateral' with all required fields.
mkGetSharedTransactionResponseBody200Collateral :: Data.Text.Internal.Text -- ^ 'getSharedTransactionResponseBody200CollateralId'
  -> GHC.Types.Int -- ^ 'getSharedTransactionResponseBody200CollateralIndex'
  -> GetSharedTransactionResponseBody200Collateral
mkGetSharedTransactionResponseBody200Collateral getSharedTransactionResponseBody200CollateralId getSharedTransactionResponseBody200CollateralIndex = GetSharedTransactionResponseBody200Collateral{getSharedTransactionResponseBody200CollateralAddress = GHC.Maybe.Nothing,
                                                                                                                                                                                                   getSharedTransactionResponseBody200CollateralAmount = GHC.Maybe.Nothing,
                                                                                                                                                                                                   getSharedTransactionResponseBody200CollateralId = getSharedTransactionResponseBody200CollateralId,
                                                                                                                                                                                                   getSharedTransactionResponseBody200CollateralIndex = getSharedTransactionResponseBody200CollateralIndex}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.collateral.items.properties.amount@ in the specification.
-- 
-- Coins, in Lovelace. Only relates to \'Ada\'. Refer to \`assets\` for multi-assets wallets instead.
data GetSharedTransactionResponseBody200CollateralAmount = GetSharedTransactionResponseBody200CollateralAmount {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  getSharedTransactionResponseBody200CollateralAmountQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200CollateralAmount
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200CollateralAmountQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200CollateralAmountQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200CollateralAmount
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200CollateralAmount" (\obj -> GHC.Base.pure GetSharedTransactionResponseBody200CollateralAmount GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'GetSharedTransactionResponseBody200CollateralAmount' with all required fields.
mkGetSharedTransactionResponseBody200CollateralAmount :: GHC.Types.Int -- ^ 'getSharedTransactionResponseBody200CollateralAmountQuantity'
  -> GetSharedTransactionResponseBody200CollateralAmount
mkGetSharedTransactionResponseBody200CollateralAmount getSharedTransactionResponseBody200CollateralAmountQuantity = GetSharedTransactionResponseBody200CollateralAmount{getSharedTransactionResponseBody200CollateralAmountQuantity = getSharedTransactionResponseBody200CollateralAmountQuantity}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.collateral_outputs.items@ in the specification.
-- 
-- 
data GetSharedTransactionResponseBody200Collateral_outputs = GetSharedTransactionResponseBody200Collateral_outputs {
  -- | address: A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
  -- which represents an address on the Cardano blockchain.
  -- Sequences in Base58 encoding are expected to be legacy Byron addresses,
  -- whereas sequences in Bech32 encoding correspond to current Shelley addresses.
  -- 
  -- For more details, see
  -- [CIP-0019 — Cardano addresses](https:\/\/github.com\/cardano-foundation\/CIPs\/tree\/master\/CIP-0019)
  -- .
  getSharedTransactionResponseBody200Collateral_outputsAddress :: Data.Text.Internal.Text
  -- | amount: Coins, in Lovelace. Only relates to \'Ada\'. Refer to \`assets\` for multi-assets wallets instead.
  , getSharedTransactionResponseBody200Collateral_outputsAmount :: GetSharedTransactionResponseBody200Collateral_outputsAmount
  -- | assets: A flat list of assets (possibly empty).
  , getSharedTransactionResponseBody200Collateral_outputsAssets :: (GHC.Maybe.Maybe ([GetSharedTransactionResponseBody200Collateral_outputsAssets]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200Collateral_outputs
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["address" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Collateral_outputsAddress obj] : ["amount" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Collateral_outputsAmount obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("assets" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200Collateral_outputsAssets obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["address" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Collateral_outputsAddress obj] : ["amount" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Collateral_outputsAmount obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("assets" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200Collateral_outputsAssets obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200Collateral_outputs
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200Collateral_outputs" (\obj -> ((GHC.Base.pure GetSharedTransactionResponseBody200Collateral_outputs GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "assets"))
-- | Create a new 'GetSharedTransactionResponseBody200Collateral_outputs' with all required fields.
mkGetSharedTransactionResponseBody200Collateral_outputs :: Data.Text.Internal.Text -- ^ 'getSharedTransactionResponseBody200Collateral_outputsAddress'
  -> GetSharedTransactionResponseBody200Collateral_outputsAmount -- ^ 'getSharedTransactionResponseBody200Collateral_outputsAmount'
  -> GetSharedTransactionResponseBody200Collateral_outputs
mkGetSharedTransactionResponseBody200Collateral_outputs getSharedTransactionResponseBody200Collateral_outputsAddress getSharedTransactionResponseBody200Collateral_outputsAmount = GetSharedTransactionResponseBody200Collateral_outputs{getSharedTransactionResponseBody200Collateral_outputsAddress = getSharedTransactionResponseBody200Collateral_outputsAddress,
                                                                                                                                                                                                                                         getSharedTransactionResponseBody200Collateral_outputsAmount = getSharedTransactionResponseBody200Collateral_outputsAmount,
                                                                                                                                                                                                                                         getSharedTransactionResponseBody200Collateral_outputsAssets = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.collateral_outputs.items.properties.amount@ in the specification.
-- 
-- Coins, in Lovelace. Only relates to \'Ada\'. Refer to \`assets\` for multi-assets wallets instead.
data GetSharedTransactionResponseBody200Collateral_outputsAmount = GetSharedTransactionResponseBody200Collateral_outputsAmount {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  getSharedTransactionResponseBody200Collateral_outputsAmountQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200Collateral_outputsAmount
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Collateral_outputsAmountQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Collateral_outputsAmountQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200Collateral_outputsAmount
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200Collateral_outputsAmount" (\obj -> GHC.Base.pure GetSharedTransactionResponseBody200Collateral_outputsAmount GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'GetSharedTransactionResponseBody200Collateral_outputsAmount' with all required fields.
mkGetSharedTransactionResponseBody200Collateral_outputsAmount :: GHC.Types.Int -- ^ 'getSharedTransactionResponseBody200Collateral_outputsAmountQuantity'
  -> GetSharedTransactionResponseBody200Collateral_outputsAmount
mkGetSharedTransactionResponseBody200Collateral_outputsAmount getSharedTransactionResponseBody200Collateral_outputsAmountQuantity = GetSharedTransactionResponseBody200Collateral_outputsAmount{getSharedTransactionResponseBody200Collateral_outputsAmountQuantity = getSharedTransactionResponseBody200Collateral_outputsAmountQuantity}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.collateral_outputs.items.properties.assets.items@ in the specification.
-- 
-- An asset on the Cardano blockchain. An asset is uniquely identified by
-- its \`policy_id\` and \`asset_name\` (together, these form the _asset id_).
-- 
-- Two assets with the same \`asset_name\` and \`policy_id\` are
-- interchangeable. Yet, different assets with a same \`policy_id\` but
-- different \`asset_name\` are treated as separate assets, as are two
-- assets with the same \`asset_name\` but different \`policy_id\`.
data GetSharedTransactionResponseBody200Collateral_outputsAssets = GetSharedTransactionResponseBody200Collateral_outputsAssets {
  -- | asset_name: The asset on-chain type which acts as a sub-identifier within a
  -- policy. Although we call it \"asset name\", the value needn\'t be
  -- text, and it could even be empty.
  -- 
  -- For policies with a single fungible asset item, asset name is
  -- typically an empty string.
  -- 
  -- This value can be up to 32 bytes of arbitrary data (which is 64
  -- hexadecimal digits).
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  getSharedTransactionResponseBody200Collateral_outputsAssetsAsset_name :: Data.Text.Internal.Text
  -- | policy_id: A unique identifier of the asset\'s monetary policy. The policy
  -- controls how assets of this kind are created and destroyed.
  -- 
  -- The contents are the blake2b-224 hash of the monetary policy
  -- script, encoded in hexadecimal.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 56
  -- * Minimum length of 56
  , getSharedTransactionResponseBody200Collateral_outputsAssetsPolicy_id :: Data.Text.Internal.Text
  -- | quantity: Number of assets for the given \`policy_id\` and \`asset_name\`.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , getSharedTransactionResponseBody200Collateral_outputsAssetsQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200Collateral_outputsAssets
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["asset_name" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Collateral_outputsAssetsAsset_name obj] : ["policy_id" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Collateral_outputsAssetsPolicy_id obj] : ["quantity" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Collateral_outputsAssetsQuantity obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["asset_name" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Collateral_outputsAssetsAsset_name obj] : ["policy_id" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Collateral_outputsAssetsPolicy_id obj] : ["quantity" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Collateral_outputsAssetsQuantity obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200Collateral_outputsAssets
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200Collateral_outputsAssets" (\obj -> ((GHC.Base.pure GetSharedTransactionResponseBody200Collateral_outputsAssets GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "asset_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "policy_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'GetSharedTransactionResponseBody200Collateral_outputsAssets' with all required fields.
mkGetSharedTransactionResponseBody200Collateral_outputsAssets :: Data.Text.Internal.Text -- ^ 'getSharedTransactionResponseBody200Collateral_outputsAssetsAsset_name'
  -> Data.Text.Internal.Text -- ^ 'getSharedTransactionResponseBody200Collateral_outputsAssetsPolicy_id'
  -> GHC.Types.Int -- ^ 'getSharedTransactionResponseBody200Collateral_outputsAssetsQuantity'
  -> GetSharedTransactionResponseBody200Collateral_outputsAssets
mkGetSharedTransactionResponseBody200Collateral_outputsAssets getSharedTransactionResponseBody200Collateral_outputsAssetsAsset_name getSharedTransactionResponseBody200Collateral_outputsAssetsPolicy_id getSharedTransactionResponseBody200Collateral_outputsAssetsQuantity = GetSharedTransactionResponseBody200Collateral_outputsAssets{getSharedTransactionResponseBody200Collateral_outputsAssetsAsset_name = getSharedTransactionResponseBody200Collateral_outputsAssetsAsset_name,
                                                                                                                                                                                                                                                                                                                                           getSharedTransactionResponseBody200Collateral_outputsAssetsPolicy_id = getSharedTransactionResponseBody200Collateral_outputsAssetsPolicy_id,
                                                                                                                                                                                                                                                                                                                                           getSharedTransactionResponseBody200Collateral_outputsAssetsQuantity = getSharedTransactionResponseBody200Collateral_outputsAssetsQuantity}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.deposit_returned@ in the specification.
-- 
-- Coins, in Lovelace. Only relates to \'Ada\'. Refer to \`assets\` for multi-assets wallets instead.
data GetSharedTransactionResponseBody200Deposit_returned = GetSharedTransactionResponseBody200Deposit_returned {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  getSharedTransactionResponseBody200Deposit_returnedQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200Deposit_returned
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Deposit_returnedQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Deposit_returnedQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200Deposit_returned
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200Deposit_returned" (\obj -> GHC.Base.pure GetSharedTransactionResponseBody200Deposit_returned GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'GetSharedTransactionResponseBody200Deposit_returned' with all required fields.
mkGetSharedTransactionResponseBody200Deposit_returned :: GHC.Types.Int -- ^ 'getSharedTransactionResponseBody200Deposit_returnedQuantity'
  -> GetSharedTransactionResponseBody200Deposit_returned
mkGetSharedTransactionResponseBody200Deposit_returned getSharedTransactionResponseBody200Deposit_returnedQuantity = GetSharedTransactionResponseBody200Deposit_returned{getSharedTransactionResponseBody200Deposit_returnedQuantity = getSharedTransactionResponseBody200Deposit_returnedQuantity}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.deposit_taken@ in the specification.
-- 
-- Coins, in Lovelace. Only relates to \'Ada\'. Refer to \`assets\` for multi-assets wallets instead.
data GetSharedTransactionResponseBody200Deposit_taken = GetSharedTransactionResponseBody200Deposit_taken {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  getSharedTransactionResponseBody200Deposit_takenQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200Deposit_taken
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Deposit_takenQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Deposit_takenQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200Deposit_taken
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200Deposit_taken" (\obj -> GHC.Base.pure GetSharedTransactionResponseBody200Deposit_taken GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'GetSharedTransactionResponseBody200Deposit_taken' with all required fields.
mkGetSharedTransactionResponseBody200Deposit_taken :: GHC.Types.Int -- ^ 'getSharedTransactionResponseBody200Deposit_takenQuantity'
  -> GetSharedTransactionResponseBody200Deposit_taken
mkGetSharedTransactionResponseBody200Deposit_taken getSharedTransactionResponseBody200Deposit_takenQuantity = GetSharedTransactionResponseBody200Deposit_taken{getSharedTransactionResponseBody200Deposit_takenQuantity = getSharedTransactionResponseBody200Deposit_takenQuantity}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.depth@ in the specification.
-- 
-- \<span style=\"position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;\">
-- \<strong>if:\<\/strong> status == in_ledger
-- \<\/span>\<br\/>
-- Current depth of the transaction in the local chain
data GetSharedTransactionResponseBody200Depth = GetSharedTransactionResponseBody200Depth {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  getSharedTransactionResponseBody200DepthQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200Depth
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200DepthQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "block"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200DepthQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "block"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200Depth
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200Depth" (\obj -> GHC.Base.pure GetSharedTransactionResponseBody200Depth GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'GetSharedTransactionResponseBody200Depth' with all required fields.
mkGetSharedTransactionResponseBody200Depth :: GHC.Types.Int -- ^ 'getSharedTransactionResponseBody200DepthQuantity'
  -> GetSharedTransactionResponseBody200Depth
mkGetSharedTransactionResponseBody200Depth getSharedTransactionResponseBody200DepthQuantity = GetSharedTransactionResponseBody200Depth{getSharedTransactionResponseBody200DepthQuantity = getSharedTransactionResponseBody200DepthQuantity}
-- | Defines the enum schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.direction@ in the specification.
-- 
-- 
data GetSharedTransactionResponseBody200Direction =
   GetSharedTransactionResponseBody200DirectionOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetSharedTransactionResponseBody200DirectionTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetSharedTransactionResponseBody200DirectionEnumOutgoing -- ^ Represents the JSON value @"outgoing"@
  | GetSharedTransactionResponseBody200DirectionEnumIncoming -- ^ Represents the JSON value @"incoming"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200Direction
    where toJSON (GetSharedTransactionResponseBody200DirectionOther val) = val
          toJSON (GetSharedTransactionResponseBody200DirectionTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetSharedTransactionResponseBody200DirectionEnumOutgoing) = "outgoing"
          toJSON (GetSharedTransactionResponseBody200DirectionEnumIncoming) = "incoming"
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200Direction
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "outgoing" -> GetSharedTransactionResponseBody200DirectionEnumOutgoing
                                            | val GHC.Classes.== "incoming" -> GetSharedTransactionResponseBody200DirectionEnumIncoming
                                            | GHC.Base.otherwise -> GetSharedTransactionResponseBody200DirectionOther val)
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.expires_at@ in the specification.
-- 
-- \<span style=\"position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;\">
-- \<strong>if:\<\/strong> status == pending OR status == expired
-- \<\/span>\<br\/>
-- Absolute time and slot at which the pending transaction TTL (time to live) will lapse.
data GetSharedTransactionResponseBody200Expires_at = GetSharedTransactionResponseBody200Expires_at {
  -- | absolute_slot_number: The 0-based slot index starting from genesis of the blockchain.
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  getSharedTransactionResponseBody200Expires_atAbsolute_slot_number :: GHC.Types.Int
  -- | epoch_number: An epoch is a time period which is divided into slots.
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , getSharedTransactionResponseBody200Expires_atEpoch_number :: GHC.Types.Int
  -- | slot_number: The zero-based slot index within an epoch.
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , getSharedTransactionResponseBody200Expires_atSlot_number :: GHC.Types.Int
  -- | time
  , getSharedTransactionResponseBody200Expires_atTime :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200Expires_at
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["absolute_slot_number" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Expires_atAbsolute_slot_number obj] : ["epoch_number" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Expires_atEpoch_number obj] : ["slot_number" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Expires_atSlot_number obj] : ["time" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Expires_atTime obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["absolute_slot_number" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Expires_atAbsolute_slot_number obj] : ["epoch_number" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Expires_atEpoch_number obj] : ["slot_number" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Expires_atSlot_number obj] : ["time" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Expires_atTime obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200Expires_at
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200Expires_at" (\obj -> (((GHC.Base.pure GetSharedTransactionResponseBody200Expires_at GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "absolute_slot_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "epoch_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "slot_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "time"))
-- | Create a new 'GetSharedTransactionResponseBody200Expires_at' with all required fields.
mkGetSharedTransactionResponseBody200Expires_at :: GHC.Types.Int -- ^ 'getSharedTransactionResponseBody200Expires_atAbsolute_slot_number'
  -> GHC.Types.Int -- ^ 'getSharedTransactionResponseBody200Expires_atEpoch_number'
  -> GHC.Types.Int -- ^ 'getSharedTransactionResponseBody200Expires_atSlot_number'
  -> Data.Text.Internal.Text -- ^ 'getSharedTransactionResponseBody200Expires_atTime'
  -> GetSharedTransactionResponseBody200Expires_at
mkGetSharedTransactionResponseBody200Expires_at getSharedTransactionResponseBody200Expires_atAbsolute_slot_number getSharedTransactionResponseBody200Expires_atEpoch_number getSharedTransactionResponseBody200Expires_atSlot_number getSharedTransactionResponseBody200Expires_atTime = GetSharedTransactionResponseBody200Expires_at{getSharedTransactionResponseBody200Expires_atAbsolute_slot_number = getSharedTransactionResponseBody200Expires_atAbsolute_slot_number,
                                                                                                                                                                                                                                                                                                                                       getSharedTransactionResponseBody200Expires_atEpoch_number = getSharedTransactionResponseBody200Expires_atEpoch_number,
                                                                                                                                                                                                                                                                                                                                       getSharedTransactionResponseBody200Expires_atSlot_number = getSharedTransactionResponseBody200Expires_atSlot_number,
                                                                                                                                                                                                                                                                                                                                       getSharedTransactionResponseBody200Expires_atTime = getSharedTransactionResponseBody200Expires_atTime}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.fee@ in the specification.
-- 
-- Coins, in Lovelace. Only relates to \'Ada\'. Refer to \`assets\` for multi-assets wallets instead.
data GetSharedTransactionResponseBody200Fee = GetSharedTransactionResponseBody200Fee {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  getSharedTransactionResponseBody200FeeQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200Fee
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200FeeQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200FeeQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200Fee
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200Fee" (\obj -> GHC.Base.pure GetSharedTransactionResponseBody200Fee GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'GetSharedTransactionResponseBody200Fee' with all required fields.
mkGetSharedTransactionResponseBody200Fee :: GHC.Types.Int -- ^ 'getSharedTransactionResponseBody200FeeQuantity'
  -> GetSharedTransactionResponseBody200Fee
mkGetSharedTransactionResponseBody200Fee getSharedTransactionResponseBody200FeeQuantity = GetSharedTransactionResponseBody200Fee{getSharedTransactionResponseBody200FeeQuantity = getSharedTransactionResponseBody200FeeQuantity}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.inputs.items@ in the specification.
-- 
-- 
data GetSharedTransactionResponseBody200Inputs = GetSharedTransactionResponseBody200Inputs {
  -- | address: A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
  -- which represents an address on the Cardano blockchain.
  -- Sequences in Base58 encoding are expected to be legacy Byron addresses,
  -- whereas sequences in Bech32 encoding correspond to current Shelley addresses.
  -- 
  -- For more details, see
  -- [CIP-0019 — Cardano addresses](https:\/\/github.com\/cardano-foundation\/CIPs\/tree\/master\/CIP-0019)
  -- .
  getSharedTransactionResponseBody200InputsAddress :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | amount: Coins, in Lovelace. Only relates to \'Ada\'. Refer to \`assets\` for multi-assets wallets instead.
  , getSharedTransactionResponseBody200InputsAmount :: (GHC.Maybe.Maybe GetSharedTransactionResponseBody200InputsAmount)
  -- | assets: A flat list of assets (possibly empty).
  , getSharedTransactionResponseBody200InputsAssets :: (GHC.Maybe.Maybe ([GetSharedTransactionResponseBody200InputsAssets]))
  -- | id: A unique identifier for this transaction
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  -- * Minimum length of 64
  , getSharedTransactionResponseBody200InputsId :: Data.Text.Internal.Text
  -- | index
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , getSharedTransactionResponseBody200InputsIndex :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200Inputs
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200InputsAddress obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200InputsAmount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("assets" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200InputsAssets obj) : ["id" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200InputsId obj] : ["index" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200InputsIndex obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200InputsAddress obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200InputsAmount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("assets" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200InputsAssets obj) : ["id" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200InputsId obj] : ["index" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200InputsIndex obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200Inputs
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200Inputs" (\obj -> ((((GHC.Base.pure GetSharedTransactionResponseBody200Inputs GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "assets")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "index"))
-- | Create a new 'GetSharedTransactionResponseBody200Inputs' with all required fields.
mkGetSharedTransactionResponseBody200Inputs :: Data.Text.Internal.Text -- ^ 'getSharedTransactionResponseBody200InputsId'
  -> GHC.Types.Int -- ^ 'getSharedTransactionResponseBody200InputsIndex'
  -> GetSharedTransactionResponseBody200Inputs
mkGetSharedTransactionResponseBody200Inputs getSharedTransactionResponseBody200InputsId getSharedTransactionResponseBody200InputsIndex = GetSharedTransactionResponseBody200Inputs{getSharedTransactionResponseBody200InputsAddress = GHC.Maybe.Nothing,
                                                                                                                                                                                   getSharedTransactionResponseBody200InputsAmount = GHC.Maybe.Nothing,
                                                                                                                                                                                   getSharedTransactionResponseBody200InputsAssets = GHC.Maybe.Nothing,
                                                                                                                                                                                   getSharedTransactionResponseBody200InputsId = getSharedTransactionResponseBody200InputsId,
                                                                                                                                                                                   getSharedTransactionResponseBody200InputsIndex = getSharedTransactionResponseBody200InputsIndex}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.inputs.items.properties.amount@ in the specification.
-- 
-- Coins, in Lovelace. Only relates to \'Ada\'. Refer to \`assets\` for multi-assets wallets instead.
data GetSharedTransactionResponseBody200InputsAmount = GetSharedTransactionResponseBody200InputsAmount {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  getSharedTransactionResponseBody200InputsAmountQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200InputsAmount
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200InputsAmountQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200InputsAmountQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200InputsAmount
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200InputsAmount" (\obj -> GHC.Base.pure GetSharedTransactionResponseBody200InputsAmount GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'GetSharedTransactionResponseBody200InputsAmount' with all required fields.
mkGetSharedTransactionResponseBody200InputsAmount :: GHC.Types.Int -- ^ 'getSharedTransactionResponseBody200InputsAmountQuantity'
  -> GetSharedTransactionResponseBody200InputsAmount
mkGetSharedTransactionResponseBody200InputsAmount getSharedTransactionResponseBody200InputsAmountQuantity = GetSharedTransactionResponseBody200InputsAmount{getSharedTransactionResponseBody200InputsAmountQuantity = getSharedTransactionResponseBody200InputsAmountQuantity}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.inputs.items.properties.assets.items@ in the specification.
-- 
-- An asset on the Cardano blockchain. An asset is uniquely identified by
-- its \`policy_id\` and \`asset_name\` (together, these form the _asset id_).
-- 
-- Two assets with the same \`asset_name\` and \`policy_id\` are
-- interchangeable. Yet, different assets with a same \`policy_id\` but
-- different \`asset_name\` are treated as separate assets, as are two
-- assets with the same \`asset_name\` but different \`policy_id\`.
data GetSharedTransactionResponseBody200InputsAssets = GetSharedTransactionResponseBody200InputsAssets {
  -- | asset_name: The asset on-chain type which acts as a sub-identifier within a
  -- policy. Although we call it \"asset name\", the value needn\'t be
  -- text, and it could even be empty.
  -- 
  -- For policies with a single fungible asset item, asset name is
  -- typically an empty string.
  -- 
  -- This value can be up to 32 bytes of arbitrary data (which is 64
  -- hexadecimal digits).
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  getSharedTransactionResponseBody200InputsAssetsAsset_name :: Data.Text.Internal.Text
  -- | policy_id: A unique identifier of the asset\'s monetary policy. The policy
  -- controls how assets of this kind are created and destroyed.
  -- 
  -- The contents are the blake2b-224 hash of the monetary policy
  -- script, encoded in hexadecimal.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 56
  -- * Minimum length of 56
  , getSharedTransactionResponseBody200InputsAssetsPolicy_id :: Data.Text.Internal.Text
  -- | quantity: Number of assets for the given \`policy_id\` and \`asset_name\`.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , getSharedTransactionResponseBody200InputsAssetsQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200InputsAssets
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["asset_name" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200InputsAssetsAsset_name obj] : ["policy_id" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200InputsAssetsPolicy_id obj] : ["quantity" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200InputsAssetsQuantity obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["asset_name" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200InputsAssetsAsset_name obj] : ["policy_id" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200InputsAssetsPolicy_id obj] : ["quantity" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200InputsAssetsQuantity obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200InputsAssets
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200InputsAssets" (\obj -> ((GHC.Base.pure GetSharedTransactionResponseBody200InputsAssets GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "asset_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "policy_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'GetSharedTransactionResponseBody200InputsAssets' with all required fields.
mkGetSharedTransactionResponseBody200InputsAssets :: Data.Text.Internal.Text -- ^ 'getSharedTransactionResponseBody200InputsAssetsAsset_name'
  -> Data.Text.Internal.Text -- ^ 'getSharedTransactionResponseBody200InputsAssetsPolicy_id'
  -> GHC.Types.Int -- ^ 'getSharedTransactionResponseBody200InputsAssetsQuantity'
  -> GetSharedTransactionResponseBody200InputsAssets
mkGetSharedTransactionResponseBody200InputsAssets getSharedTransactionResponseBody200InputsAssetsAsset_name getSharedTransactionResponseBody200InputsAssetsPolicy_id getSharedTransactionResponseBody200InputsAssetsQuantity = GetSharedTransactionResponseBody200InputsAssets{getSharedTransactionResponseBody200InputsAssetsAsset_name = getSharedTransactionResponseBody200InputsAssetsAsset_name,
                                                                                                                                                                                                                                                                               getSharedTransactionResponseBody200InputsAssetsPolicy_id = getSharedTransactionResponseBody200InputsAssetsPolicy_id,
                                                                                                                                                                                                                                                                               getSharedTransactionResponseBody200InputsAssetsQuantity = getSharedTransactionResponseBody200InputsAssetsQuantity}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.inserted_at@ in the specification.
-- 
-- \<span style=\"position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;\">
-- \<strong>if:\<\/strong> status == in_ledger
-- \<\/span>\<br\/>
-- Absolute time at which the transaction was inserted in a block.
data GetSharedTransactionResponseBody200Inserted_at = GetSharedTransactionResponseBody200Inserted_at {
  -- | absolute_slot_number: The 0-based slot index starting from genesis of the blockchain.
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  getSharedTransactionResponseBody200Inserted_atAbsolute_slot_number :: GHC.Types.Int
  -- | epoch_number: An epoch is a time period which is divided into slots.
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , getSharedTransactionResponseBody200Inserted_atEpoch_number :: GHC.Types.Int
  -- | height
  , getSharedTransactionResponseBody200Inserted_atHeight :: GetSharedTransactionResponseBody200Inserted_atHeight
  -- | slot_number: The zero-based slot index within an epoch.
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , getSharedTransactionResponseBody200Inserted_atSlot_number :: GHC.Types.Int
  -- | time
  , getSharedTransactionResponseBody200Inserted_atTime :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200Inserted_at
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["absolute_slot_number" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Inserted_atAbsolute_slot_number obj] : ["epoch_number" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Inserted_atEpoch_number obj] : ["height" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Inserted_atHeight obj] : ["slot_number" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Inserted_atSlot_number obj] : ["time" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Inserted_atTime obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["absolute_slot_number" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Inserted_atAbsolute_slot_number obj] : ["epoch_number" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Inserted_atEpoch_number obj] : ["height" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Inserted_atHeight obj] : ["slot_number" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Inserted_atSlot_number obj] : ["time" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Inserted_atTime obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200Inserted_at
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200Inserted_at" (\obj -> ((((GHC.Base.pure GetSharedTransactionResponseBody200Inserted_at GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "absolute_slot_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "epoch_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "height")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "slot_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "time"))
-- | Create a new 'GetSharedTransactionResponseBody200Inserted_at' with all required fields.
mkGetSharedTransactionResponseBody200Inserted_at :: GHC.Types.Int -- ^ 'getSharedTransactionResponseBody200Inserted_atAbsolute_slot_number'
  -> GHC.Types.Int -- ^ 'getSharedTransactionResponseBody200Inserted_atEpoch_number'
  -> GetSharedTransactionResponseBody200Inserted_atHeight -- ^ 'getSharedTransactionResponseBody200Inserted_atHeight'
  -> GHC.Types.Int -- ^ 'getSharedTransactionResponseBody200Inserted_atSlot_number'
  -> Data.Text.Internal.Text -- ^ 'getSharedTransactionResponseBody200Inserted_atTime'
  -> GetSharedTransactionResponseBody200Inserted_at
mkGetSharedTransactionResponseBody200Inserted_at getSharedTransactionResponseBody200Inserted_atAbsolute_slot_number getSharedTransactionResponseBody200Inserted_atEpoch_number getSharedTransactionResponseBody200Inserted_atHeight getSharedTransactionResponseBody200Inserted_atSlot_number getSharedTransactionResponseBody200Inserted_atTime = GetSharedTransactionResponseBody200Inserted_at{getSharedTransactionResponseBody200Inserted_atAbsolute_slot_number = getSharedTransactionResponseBody200Inserted_atAbsolute_slot_number,
                                                                                                                                                                                                                                                                                                                                                                                                  getSharedTransactionResponseBody200Inserted_atEpoch_number = getSharedTransactionResponseBody200Inserted_atEpoch_number,
                                                                                                                                                                                                                                                                                                                                                                                                  getSharedTransactionResponseBody200Inserted_atHeight = getSharedTransactionResponseBody200Inserted_atHeight,
                                                                                                                                                                                                                                                                                                                                                                                                  getSharedTransactionResponseBody200Inserted_atSlot_number = getSharedTransactionResponseBody200Inserted_atSlot_number,
                                                                                                                                                                                                                                                                                                                                                                                                  getSharedTransactionResponseBody200Inserted_atTime = getSharedTransactionResponseBody200Inserted_atTime}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.inserted_at.properties.height@ in the specification.
-- 
-- 
data GetSharedTransactionResponseBody200Inserted_atHeight = GetSharedTransactionResponseBody200Inserted_atHeight {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  getSharedTransactionResponseBody200Inserted_atHeightQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200Inserted_atHeight
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Inserted_atHeightQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "block"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Inserted_atHeightQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "block"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200Inserted_atHeight
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200Inserted_atHeight" (\obj -> GHC.Base.pure GetSharedTransactionResponseBody200Inserted_atHeight GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'GetSharedTransactionResponseBody200Inserted_atHeight' with all required fields.
mkGetSharedTransactionResponseBody200Inserted_atHeight :: GHC.Types.Int -- ^ 'getSharedTransactionResponseBody200Inserted_atHeightQuantity'
  -> GetSharedTransactionResponseBody200Inserted_atHeight
mkGetSharedTransactionResponseBody200Inserted_atHeight getSharedTransactionResponseBody200Inserted_atHeightQuantity = GetSharedTransactionResponseBody200Inserted_atHeight{getSharedTransactionResponseBody200Inserted_atHeightQuantity = getSharedTransactionResponseBody200Inserted_atHeightQuantity}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.mint@ in the specification.
-- 
-- 
data GetSharedTransactionResponseBody200Mint = GetSharedTransactionResponseBody200Mint {
  -- | tokens
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 0 items
  getSharedTransactionResponseBody200MintTokens :: ([GetSharedTransactionResponseBody200MintTokens])
  -- | wallet_policy_key_hash
  -- 
  -- Constraints:
  -- 
  -- * Must match pattern \'^((policy_vk)|(policy_vkh))1[0-9a-z]*\$\'
  , getSharedTransactionResponseBody200MintWallet_policy_key_hash :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | wallet_policy_key_index: An individual segment within a derivation path.
  -- 
  -- The \`H\` suffix indicates a _Hardened_ child private key, which
  -- means that children of this key cannot be derived from the public
  -- key. Indices without a \`H\` suffix are called _Soft_.
  , getSharedTransactionResponseBody200MintWallet_policy_key_index :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200Mint
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["tokens" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200MintTokens obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("wallet_policy_key_hash" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200MintWallet_policy_key_hash obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("wallet_policy_key_index" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200MintWallet_policy_key_index obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["tokens" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200MintTokens obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("wallet_policy_key_hash" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200MintWallet_policy_key_hash obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("wallet_policy_key_index" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200MintWallet_policy_key_index obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200Mint
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200Mint" (\obj -> ((GHC.Base.pure GetSharedTransactionResponseBody200Mint GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "tokens")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "wallet_policy_key_hash")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "wallet_policy_key_index"))
-- | Create a new 'GetSharedTransactionResponseBody200Mint' with all required fields.
mkGetSharedTransactionResponseBody200Mint :: [GetSharedTransactionResponseBody200MintTokens] -- ^ 'getSharedTransactionResponseBody200MintTokens'
  -> GetSharedTransactionResponseBody200Mint
mkGetSharedTransactionResponseBody200Mint getSharedTransactionResponseBody200MintTokens = GetSharedTransactionResponseBody200Mint{getSharedTransactionResponseBody200MintTokens = getSharedTransactionResponseBody200MintTokens,
                                                                                                                                  getSharedTransactionResponseBody200MintWallet_policy_key_hash = GHC.Maybe.Nothing,
                                                                                                                                  getSharedTransactionResponseBody200MintWallet_policy_key_index = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.mint.properties.tokens.items@ in the specification.
-- 
-- 
data GetSharedTransactionResponseBody200MintTokens = GetSharedTransactionResponseBody200MintTokens {
  -- | assets
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  getSharedTransactionResponseBody200MintTokensAssets :: ([GetSharedTransactionResponseBody200MintTokensAssets])
  -- | policy_id: A unique identifier of the asset\'s monetary policy. The policy
  -- controls how assets of this kind are created and destroyed.
  -- 
  -- The contents are the blake2b-224 hash of the monetary policy
  -- script, encoded in hexadecimal.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 56
  -- * Minimum length of 56
  , getSharedTransactionResponseBody200MintTokensPolicy_id :: Data.Text.Internal.Text
  -- | policy_script
  , getSharedTransactionResponseBody200MintTokensPolicy_script :: GetSharedTransactionResponseBody200MintTokensPolicy_scriptVariants
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200MintTokens
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["assets" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200MintTokensAssets obj] : ["policy_id" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200MintTokensPolicy_id obj] : ["policy_script" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200MintTokensPolicy_script obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["assets" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200MintTokensAssets obj] : ["policy_id" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200MintTokensPolicy_id obj] : ["policy_script" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200MintTokensPolicy_script obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200MintTokens
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200MintTokens" (\obj -> ((GHC.Base.pure GetSharedTransactionResponseBody200MintTokens GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "assets")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "policy_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "policy_script"))
-- | Create a new 'GetSharedTransactionResponseBody200MintTokens' with all required fields.
mkGetSharedTransactionResponseBody200MintTokens :: [GetSharedTransactionResponseBody200MintTokensAssets] -- ^ 'getSharedTransactionResponseBody200MintTokensAssets'
  -> Data.Text.Internal.Text -- ^ 'getSharedTransactionResponseBody200MintTokensPolicy_id'
  -> GetSharedTransactionResponseBody200MintTokensPolicy_scriptVariants -- ^ 'getSharedTransactionResponseBody200MintTokensPolicy_script'
  -> GetSharedTransactionResponseBody200MintTokens
mkGetSharedTransactionResponseBody200MintTokens getSharedTransactionResponseBody200MintTokensAssets getSharedTransactionResponseBody200MintTokensPolicy_id getSharedTransactionResponseBody200MintTokensPolicy_script = GetSharedTransactionResponseBody200MintTokens{getSharedTransactionResponseBody200MintTokensAssets = getSharedTransactionResponseBody200MintTokensAssets,
                                                                                                                                                                                                                                                                      getSharedTransactionResponseBody200MintTokensPolicy_id = getSharedTransactionResponseBody200MintTokensPolicy_id,
                                                                                                                                                                                                                                                                      getSharedTransactionResponseBody200MintTokensPolicy_script = getSharedTransactionResponseBody200MintTokensPolicy_script}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.mint.properties.tokens.items.properties.assets.items@ in the specification.
-- 
-- 
data GetSharedTransactionResponseBody200MintTokensAssets = GetSharedTransactionResponseBody200MintTokensAssets {
  -- | asset_name: The asset on-chain type which acts as a sub-identifier within a
  -- policy. Although we call it \"asset name\", the value needn\'t be
  -- text, and it could even be empty.
  -- 
  -- For policies with a single fungible asset item, asset name is
  -- typically an empty string.
  -- 
  -- This value can be up to 32 bytes of arbitrary data (which is 64
  -- hexadecimal digits).
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  getSharedTransactionResponseBody200MintTokensAssetsAsset_name :: Data.Text.Internal.Text
  -- | fingerprint: A user-facing short fingerprint which combines the \`policy_id\` and \`asset_name\`
  -- to allow for an easier human comparison of assets. Note that it is generally
  -- **not okay** to use this fingerprint as a unique identifier for it is not collision
  -- resistant. Yet within the context of a single wallet, it makes for a (rather)
  -- short user-facing comparison mean.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 44
  -- * Minimum length of 44
  -- * Must match pattern \'^(asset)1[0-9a-z]*\$\'
  , getSharedTransactionResponseBody200MintTokensAssetsFingerprint :: Data.Text.Internal.Text
  -- | quantity: Number of assets for the given \`policy_id\` and \`asset_name\`.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , getSharedTransactionResponseBody200MintTokensAssetsQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200MintTokensAssets
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["asset_name" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200MintTokensAssetsAsset_name obj] : ["fingerprint" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200MintTokensAssetsFingerprint obj] : ["quantity" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200MintTokensAssetsQuantity obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["asset_name" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200MintTokensAssetsAsset_name obj] : ["fingerprint" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200MintTokensAssetsFingerprint obj] : ["quantity" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200MintTokensAssetsQuantity obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200MintTokensAssets
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200MintTokensAssets" (\obj -> ((GHC.Base.pure GetSharedTransactionResponseBody200MintTokensAssets GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "asset_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "fingerprint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'GetSharedTransactionResponseBody200MintTokensAssets' with all required fields.
mkGetSharedTransactionResponseBody200MintTokensAssets :: Data.Text.Internal.Text -- ^ 'getSharedTransactionResponseBody200MintTokensAssetsAsset_name'
  -> Data.Text.Internal.Text -- ^ 'getSharedTransactionResponseBody200MintTokensAssetsFingerprint'
  -> GHC.Types.Int -- ^ 'getSharedTransactionResponseBody200MintTokensAssetsQuantity'
  -> GetSharedTransactionResponseBody200MintTokensAssets
mkGetSharedTransactionResponseBody200MintTokensAssets getSharedTransactionResponseBody200MintTokensAssetsAsset_name getSharedTransactionResponseBody200MintTokensAssetsFingerprint getSharedTransactionResponseBody200MintTokensAssetsQuantity = GetSharedTransactionResponseBody200MintTokensAssets{getSharedTransactionResponseBody200MintTokensAssetsAsset_name = getSharedTransactionResponseBody200MintTokensAssetsAsset_name,
                                                                                                                                                                                                                                                                                                     getSharedTransactionResponseBody200MintTokensAssetsFingerprint = getSharedTransactionResponseBody200MintTokensAssetsFingerprint,
                                                                                                                                                                                                                                                                                                     getSharedTransactionResponseBody200MintTokensAssetsQuantity = getSharedTransactionResponseBody200MintTokensAssetsQuantity}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.mint.properties.tokens.items.properties.policy_script.oneOf@ in the specification.
-- 
-- 
data GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1 = GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1 {
  -- | reference: A reference input.
  getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1Reference :: (GHC.Maybe.Maybe GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1Reference)
  -- | script
  , getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1Script :: GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptVariants
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reference" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1Reference obj) : ["script" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1Script obj] : ["script_type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "native"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reference" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1Reference obj) : ["script" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1Script obj] : ["script_type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "native"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1" (\obj -> (GHC.Base.pure GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "reference")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "script"))
-- | Create a new 'GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1' with all required fields.
mkGetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1 :: GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptVariants -- ^ 'getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1Script'
  -> GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1
mkGetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1 getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1Script = GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1{getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1Reference = GHC.Maybe.Nothing,
                                                                                                                                                                                                             getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1Script = getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1Script}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.mint.properties.tokens.items.properties.policy_script.oneOf.properties.reference@ in the specification.
-- 
-- A reference input.
data GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1Reference = GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1Reference {
  -- | id: A unique identifier for this transaction
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  -- * Minimum length of 64
  getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ReferenceId :: Data.Text.Internal.Text
  -- | index
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ReferenceIndex :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1Reference
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["id" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ReferenceId obj] : ["index" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ReferenceIndex obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["id" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ReferenceId obj] : ["index" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ReferenceIndex obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1Reference
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1Reference" (\obj -> (GHC.Base.pure GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1Reference GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "index"))
-- | Create a new 'GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1Reference' with all required fields.
mkGetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1Reference :: Data.Text.Internal.Text -- ^ 'getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ReferenceId'
  -> GHC.Types.Int -- ^ 'getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ReferenceIndex'
  -> GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1Reference
mkGetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1Reference getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ReferenceId getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ReferenceIndex = GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1Reference{getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ReferenceId = getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ReferenceId,
                                                                                                                                                                                                                                                                                                                   getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ReferenceIndex = getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ReferenceIndex}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.mint.properties.tokens.items.properties.policy_script.oneOf.properties.script.oneOf@ in the specification.
-- 
-- 
data GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf2 = GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf2 {
  -- | all: Script primitive for which all signing keys corresponding to all list elements\' verification keys are expected to make the script valid.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf2All :: ([ScriptValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf2
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["all" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf2All obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["all" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf2All obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf2
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf2" (\obj -> GHC.Base.pure GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf2 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "all"))
-- | Create a new 'GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf2' with all required fields.
mkGetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf2 :: [ScriptValue] -- ^ 'getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf2All'
  -> GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf2
mkGetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf2 getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf2All = GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf2{getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf2All = getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf2All}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.mint.properties.tokens.items.properties.policy_script.oneOf.properties.script.oneOf@ in the specification.
-- 
-- 
data GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf3 = GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf3 {
  -- | any: Script primitive for which a signing key corresponding to any of the list elements\' verification keys is expected to make the script valid. It is equivalent to \`some\` with \`\"at_least\"=1\`.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf3Any :: ([ScriptValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf3
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["any" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf3Any obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["any" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf3Any obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf3
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf3" (\obj -> GHC.Base.pure GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf3 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "any"))
-- | Create a new 'GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf3' with all required fields.
mkGetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf3 :: [ScriptValue] -- ^ 'getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf3Any'
  -> GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf3
mkGetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf3 getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf3Any = GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf3{getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf3Any = getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf3Any}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.mint.properties.tokens.items.properties.policy_script.oneOf.properties.script.oneOf@ in the specification.
-- 
-- 
data GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf4 = GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf4 {
  -- | some: Script primitive for which at least a given number of signing keys corresponding to the list elements\' verification keys are expected to make the script valid.
  getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf4Some :: GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf4Some
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf4
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["some" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf4Some obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["some" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf4Some obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf4
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf4" (\obj -> GHC.Base.pure GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf4 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "some"))
-- | Create a new 'GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf4' with all required fields.
mkGetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf4 :: GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf4Some -- ^ 'getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf4Some'
  -> GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf4
mkGetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf4 getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf4Some = GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf4{getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf4Some = getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf4Some}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.mint.properties.tokens.items.properties.policy_script.oneOf.properties.script.oneOf.properties.some@ in the specification.
-- 
-- Script primitive for which at least a given number of signing keys corresponding to the list elements\' verification keys are expected to make the script valid.
data GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf4Some = GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf4Some {
  -- | at_least
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 255.0
  -- * Minimum  of 1.0
  getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf4SomeAt_least :: GHC.Types.Int
  -- | from
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  , getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf4SomeFrom :: ([ScriptValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf4Some
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["at_least" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf4SomeAt_least obj] : ["from" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf4SomeFrom obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["at_least" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf4SomeAt_least obj] : ["from" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf4SomeFrom obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf4Some
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf4Some" (\obj -> (GHC.Base.pure GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf4Some GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "at_least")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "from"))
-- | Create a new 'GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf4Some' with all required fields.
mkGetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf4Some :: GHC.Types.Int -- ^ 'getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf4SomeAt_least'
  -> [ScriptValue] -- ^ 'getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf4SomeFrom'
  -> GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf4Some
mkGetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf4Some getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf4SomeAt_least getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf4SomeFrom = GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf4Some{getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf4SomeAt_least = getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf4SomeAt_least,
                                                                                                                                                                                                                                                                                                                                                    getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf4SomeFrom = getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf4SomeFrom}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.mint.properties.tokens.items.properties.policy_script.oneOf.properties.script.oneOf@ in the specification.
-- 
-- 
data GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf5 = GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf5 {
  -- | active_from: Transaction is only valid starting at the specified slot number (\`≥ active_from\`).
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf5Active_from :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf5
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["active_from" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf5Active_from obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["active_from" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf5Active_from obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf5
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf5" (\obj -> GHC.Base.pure GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf5 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active_from"))
-- | Create a new 'GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf5' with all required fields.
mkGetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf5 :: GHC.Types.Int -- ^ 'getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf5Active_from'
  -> GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf5
mkGetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf5 getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf5Active_from = GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf5{getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf5Active_from = getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf5Active_from}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.mint.properties.tokens.items.properties.policy_script.oneOf.properties.script.oneOf@ in the specification.
-- 
-- 
data GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf6 = GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf6 {
  -- | active_until: Transaction is only valid before the specified slot number (\`\< active_until\`).
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf6Active_until :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf6
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["active_until" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf6Active_until obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["active_until" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf6Active_until obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf6
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf6" (\obj -> GHC.Base.pure GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf6 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active_until"))
-- | Create a new 'GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf6' with all required fields.
mkGetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf6 :: GHC.Types.Int -- ^ 'getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf6Active_until'
  -> GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf6
mkGetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf6 getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf6Active_until = GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf6{getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf6Active_until = getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf6Active_until}
-- | Defines the oneOf schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.mint.properties.tokens.items.properties.policy_script.oneOf.properties.script.oneOf@ in the specification.
-- 
-- 
data GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptVariants =
   GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptVariant1 Data.Text.Internal.Text
  | GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptVariant2 GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf2
  | GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptVariant3 GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf3
  | GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptVariant4 GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf4
  | GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptVariant5 GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf5
  | GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptVariant6 GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptOneOf6
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptVariants
    where toJSON (GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptVariant1 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptVariant2 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptVariant3 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptVariant4 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptVariant5 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptVariant6 a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptVariants
    where parseJSON val = case (GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptVariant1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptVariant2 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptVariant3 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptVariant4 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptVariant5 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1ScriptVariant6 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched"))))) of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.mint.properties.tokens.items.properties.policy_script.oneOf@ in the specification.
-- 
-- 
data GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2 = GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2 {
  -- | reference: A reference input.
  getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Reference :: (GHC.Maybe.Maybe GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Reference)
  -- | script_info
  , getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Script_info :: GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Script_info
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reference" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Reference obj) : ["script_info" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Script_info obj] : ["script_type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "plutus"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reference" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Reference obj) : ["script_info" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Script_info obj] : ["script_type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "plutus"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2" (\obj -> (GHC.Base.pure GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "reference")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "script_info"))
-- | Create a new 'GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2' with all required fields.
mkGetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2 :: GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Script_info -- ^ 'getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Script_info'
  -> GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2
mkGetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2 getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Script_info = GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2{getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Reference = GHC.Maybe.Nothing,
                                                                                                                                                                                                                  getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Script_info = getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Script_info}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.mint.properties.tokens.items.properties.policy_script.oneOf.properties.reference@ in the specification.
-- 
-- A reference input.
data GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Reference = GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Reference {
  -- | id: A unique identifier for this transaction
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  -- * Minimum length of 64
  getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2ReferenceId :: Data.Text.Internal.Text
  -- | index
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2ReferenceIndex :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Reference
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["id" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2ReferenceId obj] : ["index" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2ReferenceIndex obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["id" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2ReferenceId obj] : ["index" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2ReferenceIndex obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Reference
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Reference" (\obj -> (GHC.Base.pure GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Reference GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "index"))
-- | Create a new 'GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Reference' with all required fields.
mkGetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Reference :: Data.Text.Internal.Text -- ^ 'getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2ReferenceId'
  -> GHC.Types.Int -- ^ 'getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2ReferenceIndex'
  -> GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Reference
mkGetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Reference getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2ReferenceId getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2ReferenceIndex = GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Reference{getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2ReferenceId = getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2ReferenceId,
                                                                                                                                                                                                                                                                                                                   getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2ReferenceIndex = getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2ReferenceIndex}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.mint.properties.tokens.items.properties.policy_script.oneOf.properties.script_info@ in the specification.
-- 
-- 
data GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Script_info = GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Script_info {
  -- | language_version
  getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Script_infoLanguage_version :: GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Script_infoLanguage_version
  -- | script_hash
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 56
  -- * Minimum length of 56
  , getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Script_infoScript_hash :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Script_info
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["language_version" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Script_infoLanguage_version obj] : ["script_hash" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Script_infoScript_hash obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["language_version" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Script_infoLanguage_version obj] : ["script_hash" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Script_infoScript_hash obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Script_info
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Script_info" (\obj -> (GHC.Base.pure GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Script_info GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "language_version")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "script_hash"))
-- | Create a new 'GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Script_info' with all required fields.
mkGetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Script_info :: GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Script_infoLanguage_version -- ^ 'getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Script_infoLanguage_version'
  -> Data.Text.Internal.Text -- ^ 'getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Script_infoScript_hash'
  -> GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Script_info
mkGetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Script_info getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Script_infoLanguage_version getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Script_infoScript_hash = GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Script_info{getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Script_infoLanguage_version = getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Script_infoLanguage_version,
                                                                                                                                                                                                                                                                                                                                               getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Script_infoScript_hash = getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Script_infoScript_hash}
-- | Defines the enum schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.mint.properties.tokens.items.properties.policy_script.oneOf.properties.script_info.properties.language_version@ in the specification.
-- 
-- 
data GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Script_infoLanguage_version =
   GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Script_infoLanguage_versionOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Script_infoLanguage_versionTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Script_infoLanguage_versionEnumV1 -- ^ Represents the JSON value @"v1"@
  | GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Script_infoLanguage_versionEnumV2 -- ^ Represents the JSON value @"v2"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Script_infoLanguage_version
    where toJSON (GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Script_infoLanguage_versionOther val) = val
          toJSON (GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Script_infoLanguage_versionTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Script_infoLanguage_versionEnumV1) = "v1"
          toJSON (GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Script_infoLanguage_versionEnumV2) = "v2"
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Script_infoLanguage_version
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "v1" -> GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Script_infoLanguage_versionEnumV1
                                            | val GHC.Classes.== "v2" -> GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Script_infoLanguage_versionEnumV2
                                            | GHC.Base.otherwise -> GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2Script_infoLanguage_versionOther val)
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.mint.properties.tokens.items.properties.policy_script.oneOf@ in the specification.
-- 
-- 
data GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf3 = GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf3 {
  -- | references
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf3References :: ([GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf3References])
  -- | script_hash
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 56
  -- * Minimum length of 56
  , getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf3Script_hash :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf3
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["references" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf3References obj] : ["script_hash" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf3Script_hash obj] : ["script_type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "reference script"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["references" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf3References obj] : ["script_hash" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf3Script_hash obj] : ["script_type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "reference script"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf3
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf3" (\obj -> (GHC.Base.pure GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf3 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "references")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "script_hash"))
-- | Create a new 'GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf3' with all required fields.
mkGetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf3 :: [GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf3References] -- ^ 'getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf3References'
  -> Data.Text.Internal.Text -- ^ 'getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf3Script_hash'
  -> GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf3
mkGetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf3 getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf3References getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf3Script_hash = GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf3{getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf3References = getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf3References,
                                                                                                                                                                                                                                                                                             getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf3Script_hash = getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf3Script_hash}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.mint.properties.tokens.items.properties.policy_script.oneOf.properties.references.items@ in the specification.
-- 
-- A reference input.
data GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf3References = GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf3References {
  -- | id: A unique identifier for this transaction
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  -- * Minimum length of 64
  getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf3ReferencesId :: Data.Text.Internal.Text
  -- | index
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf3ReferencesIndex :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf3References
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["id" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf3ReferencesId obj] : ["index" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf3ReferencesIndex obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["id" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf3ReferencesId obj] : ["index" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf3ReferencesIndex obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf3References
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf3References" (\obj -> (GHC.Base.pure GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf3References GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "index"))
-- | Create a new 'GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf3References' with all required fields.
mkGetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf3References :: Data.Text.Internal.Text -- ^ 'getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf3ReferencesId'
  -> GHC.Types.Int -- ^ 'getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf3ReferencesIndex'
  -> GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf3References
mkGetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf3References getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf3ReferencesId getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf3ReferencesIndex = GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf3References{getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf3ReferencesId = getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf3ReferencesId,
                                                                                                                                                                                                                                                                                                                       getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf3ReferencesIndex = getSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf3ReferencesIndex}
-- | Defines the oneOf schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.mint.properties.tokens.items.properties.policy_script.oneOf@ in the specification.
-- 
-- 
data GetSharedTransactionResponseBody200MintTokensPolicy_scriptVariants =
   GetSharedTransactionResponseBody200MintTokensPolicy_scriptVariant1 GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf1
  | GetSharedTransactionResponseBody200MintTokensPolicy_scriptVariant2 GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf2
  | GetSharedTransactionResponseBody200MintTokensPolicy_scriptVariant3 GetSharedTransactionResponseBody200MintTokensPolicy_scriptOneOf3
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200MintTokensPolicy_scriptVariants
    where toJSON (GetSharedTransactionResponseBody200MintTokensPolicy_scriptVariant1 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (GetSharedTransactionResponseBody200MintTokensPolicy_scriptVariant2 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (GetSharedTransactionResponseBody200MintTokensPolicy_scriptVariant3 a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200MintTokensPolicy_scriptVariants
    where parseJSON val = case (GetSharedTransactionResponseBody200MintTokensPolicy_scriptVariant1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetSharedTransactionResponseBody200MintTokensPolicy_scriptVariant2 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetSharedTransactionResponseBody200MintTokensPolicy_scriptVariant3 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched")) of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.outputs.items@ in the specification.
-- 
-- 
data GetSharedTransactionResponseBody200Outputs = GetSharedTransactionResponseBody200Outputs {
  -- | address: A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
  -- which represents an address on the Cardano blockchain.
  -- Sequences in Base58 encoding are expected to be legacy Byron addresses,
  -- whereas sequences in Bech32 encoding correspond to current Shelley addresses.
  -- 
  -- For more details, see
  -- [CIP-0019 — Cardano addresses](https:\/\/github.com\/cardano-foundation\/CIPs\/tree\/master\/CIP-0019)
  -- .
  getSharedTransactionResponseBody200OutputsAddress :: Data.Text.Internal.Text
  -- | amount: Coins, in Lovelace. Only relates to \'Ada\'. Refer to \`assets\` for multi-assets wallets instead.
  , getSharedTransactionResponseBody200OutputsAmount :: GetSharedTransactionResponseBody200OutputsAmount
  -- | assets: A flat list of assets (possibly empty).
  , getSharedTransactionResponseBody200OutputsAssets :: (GHC.Maybe.Maybe ([GetSharedTransactionResponseBody200OutputsAssets]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200Outputs
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["address" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200OutputsAddress obj] : ["amount" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200OutputsAmount obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("assets" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200OutputsAssets obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["address" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200OutputsAddress obj] : ["amount" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200OutputsAmount obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("assets" Data.Aeson.Types.ToJSON..=)) (getSharedTransactionResponseBody200OutputsAssets obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200Outputs
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200Outputs" (\obj -> ((GHC.Base.pure GetSharedTransactionResponseBody200Outputs GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "assets"))
-- | Create a new 'GetSharedTransactionResponseBody200Outputs' with all required fields.
mkGetSharedTransactionResponseBody200Outputs :: Data.Text.Internal.Text -- ^ 'getSharedTransactionResponseBody200OutputsAddress'
  -> GetSharedTransactionResponseBody200OutputsAmount -- ^ 'getSharedTransactionResponseBody200OutputsAmount'
  -> GetSharedTransactionResponseBody200Outputs
mkGetSharedTransactionResponseBody200Outputs getSharedTransactionResponseBody200OutputsAddress getSharedTransactionResponseBody200OutputsAmount = GetSharedTransactionResponseBody200Outputs{getSharedTransactionResponseBody200OutputsAddress = getSharedTransactionResponseBody200OutputsAddress,
                                                                                                                                                                                             getSharedTransactionResponseBody200OutputsAmount = getSharedTransactionResponseBody200OutputsAmount,
                                                                                                                                                                                             getSharedTransactionResponseBody200OutputsAssets = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.outputs.items.properties.amount@ in the specification.
-- 
-- Coins, in Lovelace. Only relates to \'Ada\'. Refer to \`assets\` for multi-assets wallets instead.
data GetSharedTransactionResponseBody200OutputsAmount = GetSharedTransactionResponseBody200OutputsAmount {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  getSharedTransactionResponseBody200OutputsAmountQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200OutputsAmount
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200OutputsAmountQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200OutputsAmountQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200OutputsAmount
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200OutputsAmount" (\obj -> GHC.Base.pure GetSharedTransactionResponseBody200OutputsAmount GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'GetSharedTransactionResponseBody200OutputsAmount' with all required fields.
mkGetSharedTransactionResponseBody200OutputsAmount :: GHC.Types.Int -- ^ 'getSharedTransactionResponseBody200OutputsAmountQuantity'
  -> GetSharedTransactionResponseBody200OutputsAmount
mkGetSharedTransactionResponseBody200OutputsAmount getSharedTransactionResponseBody200OutputsAmountQuantity = GetSharedTransactionResponseBody200OutputsAmount{getSharedTransactionResponseBody200OutputsAmountQuantity = getSharedTransactionResponseBody200OutputsAmountQuantity}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.outputs.items.properties.assets.items@ in the specification.
-- 
-- An asset on the Cardano blockchain. An asset is uniquely identified by
-- its \`policy_id\` and \`asset_name\` (together, these form the _asset id_).
-- 
-- Two assets with the same \`asset_name\` and \`policy_id\` are
-- interchangeable. Yet, different assets with a same \`policy_id\` but
-- different \`asset_name\` are treated as separate assets, as are two
-- assets with the same \`asset_name\` but different \`policy_id\`.
data GetSharedTransactionResponseBody200OutputsAssets = GetSharedTransactionResponseBody200OutputsAssets {
  -- | asset_name: The asset on-chain type which acts as a sub-identifier within a
  -- policy. Although we call it \"asset name\", the value needn\'t be
  -- text, and it could even be empty.
  -- 
  -- For policies with a single fungible asset item, asset name is
  -- typically an empty string.
  -- 
  -- This value can be up to 32 bytes of arbitrary data (which is 64
  -- hexadecimal digits).
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  getSharedTransactionResponseBody200OutputsAssetsAsset_name :: Data.Text.Internal.Text
  -- | policy_id: A unique identifier of the asset\'s monetary policy. The policy
  -- controls how assets of this kind are created and destroyed.
  -- 
  -- The contents are the blake2b-224 hash of the monetary policy
  -- script, encoded in hexadecimal.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 56
  -- * Minimum length of 56
  , getSharedTransactionResponseBody200OutputsAssetsPolicy_id :: Data.Text.Internal.Text
  -- | quantity: Number of assets for the given \`policy_id\` and \`asset_name\`.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , getSharedTransactionResponseBody200OutputsAssetsQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200OutputsAssets
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["asset_name" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200OutputsAssetsAsset_name obj] : ["policy_id" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200OutputsAssetsPolicy_id obj] : ["quantity" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200OutputsAssetsQuantity obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["asset_name" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200OutputsAssetsAsset_name obj] : ["policy_id" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200OutputsAssetsPolicy_id obj] : ["quantity" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200OutputsAssetsQuantity obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200OutputsAssets
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200OutputsAssets" (\obj -> ((GHC.Base.pure GetSharedTransactionResponseBody200OutputsAssets GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "asset_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "policy_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'GetSharedTransactionResponseBody200OutputsAssets' with all required fields.
mkGetSharedTransactionResponseBody200OutputsAssets :: Data.Text.Internal.Text -- ^ 'getSharedTransactionResponseBody200OutputsAssetsAsset_name'
  -> Data.Text.Internal.Text -- ^ 'getSharedTransactionResponseBody200OutputsAssetsPolicy_id'
  -> GHC.Types.Int -- ^ 'getSharedTransactionResponseBody200OutputsAssetsQuantity'
  -> GetSharedTransactionResponseBody200OutputsAssets
mkGetSharedTransactionResponseBody200OutputsAssets getSharedTransactionResponseBody200OutputsAssetsAsset_name getSharedTransactionResponseBody200OutputsAssetsPolicy_id getSharedTransactionResponseBody200OutputsAssetsQuantity = GetSharedTransactionResponseBody200OutputsAssets{getSharedTransactionResponseBody200OutputsAssetsAsset_name = getSharedTransactionResponseBody200OutputsAssetsAsset_name,
                                                                                                                                                                                                                                                                                    getSharedTransactionResponseBody200OutputsAssetsPolicy_id = getSharedTransactionResponseBody200OutputsAssetsPolicy_id,
                                                                                                                                                                                                                                                                                    getSharedTransactionResponseBody200OutputsAssetsQuantity = getSharedTransactionResponseBody200OutputsAssetsQuantity}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.pending_since@ in the specification.
-- 
-- \<span style=\"position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;\">
-- \<strong>if:\<\/strong> status == pending
-- \<\/span>\<br\/>
-- The point in time at which a transaction became pending.
data GetSharedTransactionResponseBody200Pending_since = GetSharedTransactionResponseBody200Pending_since {
  -- | absolute_slot_number: The 0-based slot index starting from genesis of the blockchain.
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  getSharedTransactionResponseBody200Pending_sinceAbsolute_slot_number :: GHC.Types.Int
  -- | epoch_number: An epoch is a time period which is divided into slots.
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , getSharedTransactionResponseBody200Pending_sinceEpoch_number :: GHC.Types.Int
  -- | height
  , getSharedTransactionResponseBody200Pending_sinceHeight :: GetSharedTransactionResponseBody200Pending_sinceHeight
  -- | slot_number: The zero-based slot index within an epoch.
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , getSharedTransactionResponseBody200Pending_sinceSlot_number :: GHC.Types.Int
  -- | time
  , getSharedTransactionResponseBody200Pending_sinceTime :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200Pending_since
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["absolute_slot_number" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Pending_sinceAbsolute_slot_number obj] : ["epoch_number" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Pending_sinceEpoch_number obj] : ["height" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Pending_sinceHeight obj] : ["slot_number" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Pending_sinceSlot_number obj] : ["time" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Pending_sinceTime obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["absolute_slot_number" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Pending_sinceAbsolute_slot_number obj] : ["epoch_number" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Pending_sinceEpoch_number obj] : ["height" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Pending_sinceHeight obj] : ["slot_number" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Pending_sinceSlot_number obj] : ["time" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Pending_sinceTime obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200Pending_since
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200Pending_since" (\obj -> ((((GHC.Base.pure GetSharedTransactionResponseBody200Pending_since GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "absolute_slot_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "epoch_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "height")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "slot_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "time"))
-- | Create a new 'GetSharedTransactionResponseBody200Pending_since' with all required fields.
mkGetSharedTransactionResponseBody200Pending_since :: GHC.Types.Int -- ^ 'getSharedTransactionResponseBody200Pending_sinceAbsolute_slot_number'
  -> GHC.Types.Int -- ^ 'getSharedTransactionResponseBody200Pending_sinceEpoch_number'
  -> GetSharedTransactionResponseBody200Pending_sinceHeight -- ^ 'getSharedTransactionResponseBody200Pending_sinceHeight'
  -> GHC.Types.Int -- ^ 'getSharedTransactionResponseBody200Pending_sinceSlot_number'
  -> Data.Text.Internal.Text -- ^ 'getSharedTransactionResponseBody200Pending_sinceTime'
  -> GetSharedTransactionResponseBody200Pending_since
mkGetSharedTransactionResponseBody200Pending_since getSharedTransactionResponseBody200Pending_sinceAbsolute_slot_number getSharedTransactionResponseBody200Pending_sinceEpoch_number getSharedTransactionResponseBody200Pending_sinceHeight getSharedTransactionResponseBody200Pending_sinceSlot_number getSharedTransactionResponseBody200Pending_sinceTime = GetSharedTransactionResponseBody200Pending_since{getSharedTransactionResponseBody200Pending_sinceAbsolute_slot_number = getSharedTransactionResponseBody200Pending_sinceAbsolute_slot_number,
                                                                                                                                                                                                                                                                                                                                                                                                                getSharedTransactionResponseBody200Pending_sinceEpoch_number = getSharedTransactionResponseBody200Pending_sinceEpoch_number,
                                                                                                                                                                                                                                                                                                                                                                                                                getSharedTransactionResponseBody200Pending_sinceHeight = getSharedTransactionResponseBody200Pending_sinceHeight,
                                                                                                                                                                                                                                                                                                                                                                                                                getSharedTransactionResponseBody200Pending_sinceSlot_number = getSharedTransactionResponseBody200Pending_sinceSlot_number,
                                                                                                                                                                                                                                                                                                                                                                                                                getSharedTransactionResponseBody200Pending_sinceTime = getSharedTransactionResponseBody200Pending_sinceTime}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.pending_since.properties.height@ in the specification.
-- 
-- 
data GetSharedTransactionResponseBody200Pending_sinceHeight = GetSharedTransactionResponseBody200Pending_sinceHeight {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  getSharedTransactionResponseBody200Pending_sinceHeightQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200Pending_sinceHeight
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Pending_sinceHeightQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "block"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Pending_sinceHeightQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "block"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200Pending_sinceHeight
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200Pending_sinceHeight" (\obj -> GHC.Base.pure GetSharedTransactionResponseBody200Pending_sinceHeight GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'GetSharedTransactionResponseBody200Pending_sinceHeight' with all required fields.
mkGetSharedTransactionResponseBody200Pending_sinceHeight :: GHC.Types.Int -- ^ 'getSharedTransactionResponseBody200Pending_sinceHeightQuantity'
  -> GetSharedTransactionResponseBody200Pending_sinceHeight
mkGetSharedTransactionResponseBody200Pending_sinceHeight getSharedTransactionResponseBody200Pending_sinceHeightQuantity = GetSharedTransactionResponseBody200Pending_sinceHeight{getSharedTransactionResponseBody200Pending_sinceHeightQuantity = getSharedTransactionResponseBody200Pending_sinceHeightQuantity}
-- | Defines the enum schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.script_validity@ in the specification.
-- 
-- Indicates whether the phase-2 monetary policy script (e.g. Plutus script)
-- used in the transaction validated or not. Validity may be null if this
-- transaction was from an era that doesn\'t support phase-2 monetary policy
-- scripts, or is a pending transaction (we don\'t know if validation passed or
-- failed until the transaction hits the ledger).
data GetSharedTransactionResponseBody200Script_validityNonNullable =
   GetSharedTransactionResponseBody200Script_validityNonNullableOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetSharedTransactionResponseBody200Script_validityNonNullableTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetSharedTransactionResponseBody200Script_validityNonNullableEnumValid -- ^ Represents the JSON value @"valid"@
  | GetSharedTransactionResponseBody200Script_validityNonNullableEnumInvalid -- ^ Represents the JSON value @"invalid"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200Script_validityNonNullable
    where toJSON (GetSharedTransactionResponseBody200Script_validityNonNullableOther val) = val
          toJSON (GetSharedTransactionResponseBody200Script_validityNonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetSharedTransactionResponseBody200Script_validityNonNullableEnumValid) = "valid"
          toJSON (GetSharedTransactionResponseBody200Script_validityNonNullableEnumInvalid) = "invalid"
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200Script_validityNonNullable
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "valid" -> GetSharedTransactionResponseBody200Script_validityNonNullableEnumValid
                                            | val GHC.Classes.== "invalid" -> GetSharedTransactionResponseBody200Script_validityNonNullableEnumInvalid
                                            | GHC.Base.otherwise -> GetSharedTransactionResponseBody200Script_validityNonNullableOther val)
-- | Defines the enum schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.status@ in the specification.
-- 
-- Current transaction status.
-- 
--   \`\`\`
--        *-----------*
--   ---> |  PENDING  |----------------*
--        *-----------*                |
--              |                      |
--              V                      V
--        *-----------*          *-----------*
--        |           |---------->  EXPIRED  |
--        |           |  (ttl)   *-----------*
--        | SUBMITTED |
--        |           \<----------------*
--        |           |                |
--        *-----------*           (rollback)
--               |                     |
--          (in ledger)          *-----------*
--               |               |           |
--               *---------------> IN_LEDGER |
--                               |           |
--                               *-----------*
--   \`\`\`
data GetSharedTransactionResponseBody200Status =
   GetSharedTransactionResponseBody200StatusOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetSharedTransactionResponseBody200StatusTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetSharedTransactionResponseBody200StatusEnumPending -- ^ Represents the JSON value @"pending"@
  | GetSharedTransactionResponseBody200StatusEnumSubmitted -- ^ Represents the JSON value @"submitted"@
  | GetSharedTransactionResponseBody200StatusEnumIn_ledger -- ^ Represents the JSON value @"in_ledger"@
  | GetSharedTransactionResponseBody200StatusEnumExpired -- ^ Represents the JSON value @"expired"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200Status
    where toJSON (GetSharedTransactionResponseBody200StatusOther val) = val
          toJSON (GetSharedTransactionResponseBody200StatusTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetSharedTransactionResponseBody200StatusEnumPending) = "pending"
          toJSON (GetSharedTransactionResponseBody200StatusEnumSubmitted) = "submitted"
          toJSON (GetSharedTransactionResponseBody200StatusEnumIn_ledger) = "in_ledger"
          toJSON (GetSharedTransactionResponseBody200StatusEnumExpired) = "expired"
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200Status
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "pending" -> GetSharedTransactionResponseBody200StatusEnumPending
                                            | val GHC.Classes.== "submitted" -> GetSharedTransactionResponseBody200StatusEnumSubmitted
                                            | val GHC.Classes.== "in_ledger" -> GetSharedTransactionResponseBody200StatusEnumIn_ledger
                                            | val GHC.Classes.== "expired" -> GetSharedTransactionResponseBody200StatusEnumExpired
                                            | GHC.Base.otherwise -> GetSharedTransactionResponseBody200StatusOther val)
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.validity_interval@ in the specification.
-- 
-- 
data GetSharedTransactionResponseBody200Validity_interval = GetSharedTransactionResponseBody200Validity_interval {
  -- | invalid_before
  getSharedTransactionResponseBody200Validity_intervalInvalid_before :: GetSharedTransactionResponseBody200Validity_intervalInvalid_before
  -- | invalid_hereafter
  , getSharedTransactionResponseBody200Validity_intervalInvalid_hereafter :: GetSharedTransactionResponseBody200Validity_intervalInvalid_hereafter
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200Validity_interval
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["invalid_before" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Validity_intervalInvalid_before obj] : ["invalid_hereafter" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Validity_intervalInvalid_hereafter obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["invalid_before" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Validity_intervalInvalid_before obj] : ["invalid_hereafter" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Validity_intervalInvalid_hereafter obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200Validity_interval
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200Validity_interval" (\obj -> (GHC.Base.pure GetSharedTransactionResponseBody200Validity_interval GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "invalid_before")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "invalid_hereafter"))
-- | Create a new 'GetSharedTransactionResponseBody200Validity_interval' with all required fields.
mkGetSharedTransactionResponseBody200Validity_interval :: GetSharedTransactionResponseBody200Validity_intervalInvalid_before -- ^ 'getSharedTransactionResponseBody200Validity_intervalInvalid_before'
  -> GetSharedTransactionResponseBody200Validity_intervalInvalid_hereafter -- ^ 'getSharedTransactionResponseBody200Validity_intervalInvalid_hereafter'
  -> GetSharedTransactionResponseBody200Validity_interval
mkGetSharedTransactionResponseBody200Validity_interval getSharedTransactionResponseBody200Validity_intervalInvalid_before getSharedTransactionResponseBody200Validity_intervalInvalid_hereafter = GetSharedTransactionResponseBody200Validity_interval{getSharedTransactionResponseBody200Validity_intervalInvalid_before = getSharedTransactionResponseBody200Validity_intervalInvalid_before,
                                                                                                                                                                                                                                                       getSharedTransactionResponseBody200Validity_intervalInvalid_hereafter = getSharedTransactionResponseBody200Validity_intervalInvalid_hereafter}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.validity_interval.properties.invalid_before@ in the specification.
-- 
-- 
data GetSharedTransactionResponseBody200Validity_intervalInvalid_before = GetSharedTransactionResponseBody200Validity_intervalInvalid_before {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  getSharedTransactionResponseBody200Validity_intervalInvalid_beforeQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200Validity_intervalInvalid_before
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Validity_intervalInvalid_beforeQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "slot"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Validity_intervalInvalid_beforeQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "slot"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200Validity_intervalInvalid_before
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200Validity_intervalInvalid_before" (\obj -> GHC.Base.pure GetSharedTransactionResponseBody200Validity_intervalInvalid_before GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'GetSharedTransactionResponseBody200Validity_intervalInvalid_before' with all required fields.
mkGetSharedTransactionResponseBody200Validity_intervalInvalid_before :: GHC.Types.Int -- ^ 'getSharedTransactionResponseBody200Validity_intervalInvalid_beforeQuantity'
  -> GetSharedTransactionResponseBody200Validity_intervalInvalid_before
mkGetSharedTransactionResponseBody200Validity_intervalInvalid_before getSharedTransactionResponseBody200Validity_intervalInvalid_beforeQuantity = GetSharedTransactionResponseBody200Validity_intervalInvalid_before{getSharedTransactionResponseBody200Validity_intervalInvalid_beforeQuantity = getSharedTransactionResponseBody200Validity_intervalInvalid_beforeQuantity}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.validity_interval.properties.invalid_hereafter@ in the specification.
-- 
-- 
data GetSharedTransactionResponseBody200Validity_intervalInvalid_hereafter = GetSharedTransactionResponseBody200Validity_intervalInvalid_hereafter {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  getSharedTransactionResponseBody200Validity_intervalInvalid_hereafterQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200Validity_intervalInvalid_hereafter
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Validity_intervalInvalid_hereafterQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "slot"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200Validity_intervalInvalid_hereafterQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "slot"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200Validity_intervalInvalid_hereafter
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200Validity_intervalInvalid_hereafter" (\obj -> GHC.Base.pure GetSharedTransactionResponseBody200Validity_intervalInvalid_hereafter GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'GetSharedTransactionResponseBody200Validity_intervalInvalid_hereafter' with all required fields.
mkGetSharedTransactionResponseBody200Validity_intervalInvalid_hereafter :: GHC.Types.Int -- ^ 'getSharedTransactionResponseBody200Validity_intervalInvalid_hereafterQuantity'
  -> GetSharedTransactionResponseBody200Validity_intervalInvalid_hereafter
mkGetSharedTransactionResponseBody200Validity_intervalInvalid_hereafter getSharedTransactionResponseBody200Validity_intervalInvalid_hereafterQuantity = GetSharedTransactionResponseBody200Validity_intervalInvalid_hereafter{getSharedTransactionResponseBody200Validity_intervalInvalid_hereafterQuantity = getSharedTransactionResponseBody200Validity_intervalInvalid_hereafterQuantity}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.withdrawals.items@ in the specification.
-- 
-- 
data GetSharedTransactionResponseBody200Withdrawals = GetSharedTransactionResponseBody200Withdrawals {
  -- | amount: Coins, in Lovelace. Only relates to \'Ada\'. Refer to \`assets\` for multi-assets wallets instead.
  getSharedTransactionResponseBody200WithdrawalsAmount :: GetSharedTransactionResponseBody200WithdrawalsAmount
  -- | stake_address
  , getSharedTransactionResponseBody200WithdrawalsStake_address :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200Withdrawals
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200WithdrawalsAmount obj] : ["stake_address" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200WithdrawalsStake_address obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200WithdrawalsAmount obj] : ["stake_address" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200WithdrawalsStake_address obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200Withdrawals
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200Withdrawals" (\obj -> (GHC.Base.pure GetSharedTransactionResponseBody200Withdrawals GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "stake_address"))
-- | Create a new 'GetSharedTransactionResponseBody200Withdrawals' with all required fields.
mkGetSharedTransactionResponseBody200Withdrawals :: GetSharedTransactionResponseBody200WithdrawalsAmount -- ^ 'getSharedTransactionResponseBody200WithdrawalsAmount'
  -> Data.Text.Internal.Text -- ^ 'getSharedTransactionResponseBody200WithdrawalsStake_address'
  -> GetSharedTransactionResponseBody200Withdrawals
mkGetSharedTransactionResponseBody200Withdrawals getSharedTransactionResponseBody200WithdrawalsAmount getSharedTransactionResponseBody200WithdrawalsStake_address = GetSharedTransactionResponseBody200Withdrawals{getSharedTransactionResponseBody200WithdrawalsAmount = getSharedTransactionResponseBody200WithdrawalsAmount,
                                                                                                                                                                                                                   getSharedTransactionResponseBody200WithdrawalsStake_address = getSharedTransactionResponseBody200WithdrawalsStake_address}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.200.content.application\/json.schema.properties.withdrawals.items.properties.amount@ in the specification.
-- 
-- Coins, in Lovelace. Only relates to \'Ada\'. Refer to \`assets\` for multi-assets wallets instead.
data GetSharedTransactionResponseBody200WithdrawalsAmount = GetSharedTransactionResponseBody200WithdrawalsAmount {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  getSharedTransactionResponseBody200WithdrawalsAmountQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody200WithdrawalsAmount
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200WithdrawalsAmountQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody200WithdrawalsAmountQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody200WithdrawalsAmount
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody200WithdrawalsAmount" (\obj -> GHC.Base.pure GetSharedTransactionResponseBody200WithdrawalsAmount GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'GetSharedTransactionResponseBody200WithdrawalsAmount' with all required fields.
mkGetSharedTransactionResponseBody200WithdrawalsAmount :: GHC.Types.Int -- ^ 'getSharedTransactionResponseBody200WithdrawalsAmountQuantity'
  -> GetSharedTransactionResponseBody200WithdrawalsAmount
mkGetSharedTransactionResponseBody200WithdrawalsAmount getSharedTransactionResponseBody200WithdrawalsAmountQuantity = GetSharedTransactionResponseBody200WithdrawalsAmount{getSharedTransactionResponseBody200WithdrawalsAmountQuantity = getSharedTransactionResponseBody200WithdrawalsAmountQuantity}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.404.content.application\/json.schema.oneOf@ in the specification.
-- 
-- 
data GetSharedTransactionResponseBody404OneOf1 = GetSharedTransactionResponseBody404OneOf1 {
  -- | message: May occur when a given walletId does not match with any known
  -- wallets (because it has been deleted, or has never existed).
  getSharedTransactionResponseBody404OneOf1Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody404OneOf1
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody404OneOf1Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "no_such_wallet"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody404OneOf1Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "no_such_wallet"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody404OneOf1
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody404OneOf1" (\obj -> GHC.Base.pure GetSharedTransactionResponseBody404OneOf1 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'GetSharedTransactionResponseBody404OneOf1' with all required fields.
mkGetSharedTransactionResponseBody404OneOf1 :: Data.Text.Internal.Text -- ^ 'getSharedTransactionResponseBody404OneOf1Message'
  -> GetSharedTransactionResponseBody404OneOf1
mkGetSharedTransactionResponseBody404OneOf1 getSharedTransactionResponseBody404OneOf1Message = GetSharedTransactionResponseBody404OneOf1{getSharedTransactionResponseBody404OneOf1Message = getSharedTransactionResponseBody404OneOf1Message}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.404.content.application\/json.schema.oneOf@ in the specification.
-- 
-- 
data GetSharedTransactionResponseBody404OneOf2 = GetSharedTransactionResponseBody404OneOf2 {
  -- | message: May occur when a given transactionId does not match with any known transactions.
  getSharedTransactionResponseBody404OneOf2Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody404OneOf2
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody404OneOf2Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "no_such_transaction"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody404OneOf2Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "no_such_transaction"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody404OneOf2
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody404OneOf2" (\obj -> GHC.Base.pure GetSharedTransactionResponseBody404OneOf2 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'GetSharedTransactionResponseBody404OneOf2' with all required fields.
mkGetSharedTransactionResponseBody404OneOf2 :: Data.Text.Internal.Text -- ^ 'getSharedTransactionResponseBody404OneOf2Message'
  -> GetSharedTransactionResponseBody404OneOf2
mkGetSharedTransactionResponseBody404OneOf2 getSharedTransactionResponseBody404OneOf2Message = GetSharedTransactionResponseBody404OneOf2{getSharedTransactionResponseBody404OneOf2Message = getSharedTransactionResponseBody404OneOf2Message}
-- | Defines the oneOf schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.404.content.application\/json.schema.oneOf@ in the specification.
-- 
-- 
data GetSharedTransactionResponseBody404Variants =
   GetSharedTransactionResponseBody404Variant1 GetSharedTransactionResponseBody404OneOf1
  | GetSharedTransactionResponseBody404Variant2 GetSharedTransactionResponseBody404OneOf2
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody404Variants
    where toJSON (GetSharedTransactionResponseBody404Variant1 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (GetSharedTransactionResponseBody404Variant2 a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody404Variants
    where parseJSON val = case (GetSharedTransactionResponseBody404Variant1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetSharedTransactionResponseBody404Variant2 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions\/{transactionId}.GET.responses.406.content.application\/json.schema@ in the specification.
-- 
-- 
data GetSharedTransactionResponseBody406 = GetSharedTransactionResponseBody406 {
  -- | message: May occur when providing an invalid \'Accept\' header.
  getSharedTransactionResponseBody406Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedTransactionResponseBody406
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody406Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "not_acceptable"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= getSharedTransactionResponseBody406Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "not_acceptable"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedTransactionResponseBody406
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedTransactionResponseBody406" (\obj -> GHC.Base.pure GetSharedTransactionResponseBody406 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'GetSharedTransactionResponseBody406' with all required fields.
mkGetSharedTransactionResponseBody406 :: Data.Text.Internal.Text -- ^ 'getSharedTransactionResponseBody406Message'
  -> GetSharedTransactionResponseBody406
mkGetSharedTransactionResponseBody406 getSharedTransactionResponseBody406Message = GetSharedTransactionResponseBody406{getSharedTransactionResponseBody406Message = getSharedTransactionResponseBody406Message}
-- | > GET /shared-wallets/{walletId}/transactions/{transactionId}
-- 
-- The same as 'getSharedTransaction' but accepts an explicit configuration.
getSharedTransactionWithConfiguration :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> GetSharedTransactionParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response GetSharedTransactionResponse) -- ^ Monadic computation which returns the result of the operation
getSharedTransactionWithConfiguration config
                                      parameters = GHC.Base.fmap (\response_4 -> GHC.Base.fmap (Data.Either.either GetSharedTransactionResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetSharedTransactionResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                      GetSharedTransactionResponseBody200)
                                                                                                                                                                                                  | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetSharedTransactionResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                      GetSharedTransactionResponseBody404Variants)
                                                                                                                                                                                                  | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 406) (Network.HTTP.Client.Types.responseStatus response) -> GetSharedTransactionResponse406 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                      GetSharedTransactionResponseBody406)
                                                                                                                                                                                                  | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_4) response_4) (Wallet.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") ("/shared-wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (getSharedTransactionParametersPathWalletId parameters))) GHC.Base.<> ("/transactions/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (getSharedTransactionParametersPathTransactionId parameters))) GHC.Base.<> "")))) [Wallet.Common.QueryParameter (Data.Text.pack "simple-metadata") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSharedTransactionParametersQuerySimple_metadata parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /shared-wallets/{walletId}/transactions/{transactionId}
-- 
-- The same as 'getSharedTransaction' but returns the raw 'Data.ByteString.ByteString'.
getSharedTransactionRaw :: forall m . Wallet.Common.MonadHTTP m => GetSharedTransactionParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
getSharedTransactionRaw parameters = GHC.Base.id (Wallet.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") ("/shared-wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (getSharedTransactionParametersPathWalletId parameters))) GHC.Base.<> ("/transactions/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (getSharedTransactionParametersPathTransactionId parameters))) GHC.Base.<> "")))) [Wallet.Common.QueryParameter (Data.Text.pack "simple-metadata") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSharedTransactionParametersQuerySimple_metadata parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /shared-wallets/{walletId}/transactions/{transactionId}
-- 
-- The same as 'getSharedTransaction' but accepts an explicit configuration and returns the raw 'Data.ByteString.ByteString'.
getSharedTransactionWithConfigurationRaw :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> GetSharedTransactionParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
getSharedTransactionWithConfigurationRaw config
                                         parameters = GHC.Base.id (Wallet.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") ("/shared-wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (getSharedTransactionParametersPathWalletId parameters))) GHC.Base.<> ("/transactions/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (getSharedTransactionParametersPathTransactionId parameters))) GHC.Base.<> "")))) [Wallet.Common.QueryParameter (Data.Text.pack "simple-metadata") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSharedTransactionParametersQuerySimple_metadata parameters) (Data.Text.pack "form") GHC.Types.False])
