-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation patchSharedWalletInDelegation
module Wallet.Operations.PatchSharedWalletInDelegation where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Wallet.Common
import Wallet.Types

-- | > PATCH /shared-wallets/{walletId}/delegation-script-template
-- 
-- \<p align=\"right\">status: \<strong>âš  under development\<\/strong>\<\/p>
-- Update delegation script template for a given shared wallet by
-- updating\/adding account public key for cosigner. Updating the
-- shared wallet account key results in an error. Also updating is
-- enabled only for incomplete shared wallet, ie., the wallet that has
-- a missing account public key for any cosigner.
patchSharedWalletInDelegation :: forall m . Wallet.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ walletId | Constraints: Maximum length of 40, Minimum length of 40
  -> Data.Aeson.Types.Internal.Object -- ^ The request body to send
  -> Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response PatchSharedWalletInDelegationResponse) -- ^ Monadic computation which returns the result of the operation
patchSharedWalletInDelegation walletId
                              body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PatchSharedWalletInDelegationResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PatchSharedWalletInDelegationResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                          PatchSharedWalletInDelegationResponseBody200Variants)
                                                                                                                                                                                             | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> PatchSharedWalletInDelegationResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                          PatchSharedWalletInDelegationResponseBody400)
                                                                                                                                                                                             | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> PatchSharedWalletInDelegationResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                          PatchSharedWalletInDelegationResponseBody403Variants)
                                                                                                                                                                                             | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> PatchSharedWalletInDelegationResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                          PatchSharedWalletInDelegationResponseBody404)
                                                                                                                                                                                             | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 406) (Network.HTTP.Client.Types.responseStatus response) -> PatchSharedWalletInDelegationResponse406 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                          PatchSharedWalletInDelegationResponseBody406)
                                                                                                                                                                                             | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 503) (Network.HTTP.Client.Types.responseStatus response) -> PatchSharedWalletInDelegationResponse503 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                          PatchSharedWalletInDelegationResponseBody503)
                                                                                                                                                                                             | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Wallet.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "PATCH") ("/shared-wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel walletId)) GHC.Base.<> "/delegation-script-template")) GHC.Base.mempty (GHC.Maybe.Just body) Wallet.Common.RequestBodyEncodingJSON)
-- | Represents a response of the operation 'patchSharedWalletInDelegation'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PatchSharedWalletInDelegationResponseError' is used.
data PatchSharedWalletInDelegationResponse =
   PatchSharedWalletInDelegationResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | PatchSharedWalletInDelegationResponse200 PatchSharedWalletInDelegationResponseBody200Variants -- ^ Ok
  | PatchSharedWalletInDelegationResponse400 PatchSharedWalletInDelegationResponseBody400 -- ^ Bad Request
  | PatchSharedWalletInDelegationResponse403 PatchSharedWalletInDelegationResponseBody403Variants -- ^ Forbidden
  | PatchSharedWalletInDelegationResponse404 PatchSharedWalletInDelegationResponseBody404 -- ^ Not Found
  | PatchSharedWalletInDelegationResponse406 PatchSharedWalletInDelegationResponseBody406 -- ^ Not Acceptable
  | PatchSharedWalletInDelegationResponse503 PatchSharedWalletInDelegationResponseBody503 -- ^ No meta
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.200.content.application\/json.schema.oneOf@ in the specification.
-- 
-- 
data PatchSharedWalletInDelegationResponseBody200OneOf1 = PatchSharedWalletInDelegationResponseBody200OneOf1 {
  -- | account_index: An individual segment within a derivation path.
  -- 
  -- The \`H\` suffix indicates a _Hardened_ child private key, which
  -- means that children of this key cannot be derived from the public
  -- key. Indices without a \`H\` suffix are called _Soft_.
  patchSharedWalletInDelegationResponseBody200OneOf1Account_index :: Data.Text.Internal.Text
  -- | address_pool_gap: Number of consecutive unused addresses allowed.
  -- 
  -- **IMPORTANT DISCLAIMER:** Using values other than \`20\` automatically makes your wallet invalid with regards to BIP-44 address discovery. It means that you **will not** be able to fully restore
  -- your wallet in a different software which is strictly following BIP-44.
  -- 
  -- Beside, using large gaps is **not recommended** as it may induce important performance degradations. Use at your own risks.
  -- 
  -- **IMPORTANT DISCLAIMER 2:** There is no way to \`import\` addresses generated outside (e.g. using cardano-addresses) into the wallet.
  -- Wallet only discovers transactions on its used and unused addresses that are within its currently seen \`address_pool_gap\`.
  -- Transactions on addresses that \"belong\" to the wallet but happen to be beyond its \`address_pool_gap\` will not be visible to the wallet.
  -- This is a technical limitation of the industry standard [BIP-44](https:\/\/github.com\/bitcoin\/bips\/blob\/master\/bip-0044.mediawiki). See also [CIP-1852](https:\/\/github.com\/cardano-foundation\/CIPs\/blob\/master\/CIP-1852\/CIP-1852.md).
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100000.0
  -- * Minimum  of 10.0
  , patchSharedWalletInDelegationResponseBody200OneOf1Address_pool_gap :: GHC.Types.Int
  -- | delegation_script_template
  , patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_template :: (GHC.Maybe.Maybe PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_template)
  -- | id: A unique identifier for the wallet
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 40
  -- * Minimum length of 40
  , patchSharedWalletInDelegationResponseBody200OneOf1Id :: Data.Text.Internal.Text
  -- | name
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 255
  -- * Minimum length of 1
  , patchSharedWalletInDelegationResponseBody200OneOf1Name :: Data.Text.Internal.Text
  -- | payment_script_template
  , patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_template :: PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_template
  -- | state
  , patchSharedWalletInDelegationResponseBody200OneOf1State :: PatchSharedWalletInDelegationResponseBody200OneOf1State
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody200OneOf1
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["account_index" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf1Account_index obj] : ["address_pool_gap" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf1Address_pool_gap obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("delegation_script_template" Data.Aeson.Types.ToJSON..=)) (patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_template obj) : ["id" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf1Id obj] : ["name" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf1Name obj] : ["payment_script_template" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_template obj] : ["state" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf1State obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["account_index" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf1Account_index obj] : ["address_pool_gap" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf1Address_pool_gap obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("delegation_script_template" Data.Aeson.Types.ToJSON..=)) (patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_template obj) : ["id" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf1Id obj] : ["name" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf1Name obj] : ["payment_script_template" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_template obj] : ["state" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf1State obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody200OneOf1
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchSharedWalletInDelegationResponseBody200OneOf1" (\obj -> ((((((GHC.Base.pure PatchSharedWalletInDelegationResponseBody200OneOf1 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "account_index")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "address_pool_gap")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "delegation_script_template")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "payment_script_template")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "state"))
-- | Create a new 'PatchSharedWalletInDelegationResponseBody200OneOf1' with all required fields.
mkPatchSharedWalletInDelegationResponseBody200OneOf1 :: Data.Text.Internal.Text -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf1Account_index'
  -> GHC.Types.Int -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf1Address_pool_gap'
  -> Data.Text.Internal.Text -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf1Id'
  -> Data.Text.Internal.Text -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf1Name'
  -> PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_template -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_template'
  -> PatchSharedWalletInDelegationResponseBody200OneOf1State -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf1State'
  -> PatchSharedWalletInDelegationResponseBody200OneOf1
mkPatchSharedWalletInDelegationResponseBody200OneOf1 patchSharedWalletInDelegationResponseBody200OneOf1Account_index patchSharedWalletInDelegationResponseBody200OneOf1Address_pool_gap patchSharedWalletInDelegationResponseBody200OneOf1Id patchSharedWalletInDelegationResponseBody200OneOf1Name patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_template patchSharedWalletInDelegationResponseBody200OneOf1State = PatchSharedWalletInDelegationResponseBody200OneOf1{patchSharedWalletInDelegationResponseBody200OneOf1Account_index = patchSharedWalletInDelegationResponseBody200OneOf1Account_index,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           patchSharedWalletInDelegationResponseBody200OneOf1Address_pool_gap = patchSharedWalletInDelegationResponseBody200OneOf1Address_pool_gap,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_template = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           patchSharedWalletInDelegationResponseBody200OneOf1Id = patchSharedWalletInDelegationResponseBody200OneOf1Id,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           patchSharedWalletInDelegationResponseBody200OneOf1Name = patchSharedWalletInDelegationResponseBody200OneOf1Name,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_template = patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_template,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           patchSharedWalletInDelegationResponseBody200OneOf1State = patchSharedWalletInDelegationResponseBody200OneOf1State}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.200.content.application\/json.schema.oneOf.properties.delegation_script_template@ in the specification.
-- 
-- 
data PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_template = PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_template {
  -- | cosigners: Map of cosigners and their account public keys. Use key as in &cosigner, eg. \"cosigner\#\"
  patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateCosigners :: Data.Aeson.Types.Internal.Object
  -- | template
  , patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplate :: PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateVariants
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_template
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["cosigners" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateCosigners obj] : ["template" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplate obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["cosigners" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateCosigners obj] : ["template" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplate obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_template
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_template" (\obj -> (GHC.Base.pure PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_template GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cosigners")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "template"))
-- | Create a new 'PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_template' with all required fields.
mkPatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_template :: Data.Aeson.Types.Internal.Object -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateCosigners'
  -> PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateVariants -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplate'
  -> PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_template
mkPatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_template patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateCosigners patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplate = PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_template{patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateCosigners = patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateCosigners,
                                                                                                                                                                                                                                                                                                                                         patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplate = patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplate}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.200.content.application\/json.schema.oneOf.properties.delegation_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf2 = PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf2 {
  -- | all: Script primitive for which all signing keys corresponding to all list cosigners\' verification keys are expected to make the script valid.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf2All :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf2
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["all" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf2All obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["all" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf2All obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf2
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf2" (\obj -> GHC.Base.pure PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf2 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "all"))
-- | Create a new 'PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf2' with all required fields.
mkPatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf2 :: [ScriptTemplateValue] -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf2All'
  -> PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf2
mkPatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf2 patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf2All = PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf2{patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf2All = patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf2All}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.200.content.application\/json.schema.oneOf.properties.delegation_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf3 = PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf3 {
  -- | any: Script primitive for which a signing key corresponding to any of the list cosigners\' verification keys is expected to make the script valid. It is equivalent to \`some\` with \`\"at_least\"=1\`.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf3Any :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf3
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["any" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf3Any obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["any" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf3Any obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf3
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf3" (\obj -> GHC.Base.pure PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf3 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "any"))
-- | Create a new 'PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf3' with all required fields.
mkPatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf3 :: [ScriptTemplateValue] -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf3Any'
  -> PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf3
mkPatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf3 patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf3Any = PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf3{patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf3Any = patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf3Any}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.200.content.application\/json.schema.oneOf.properties.delegation_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf4 = PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf4 {
  -- | some: Script primitive for which at least a given number of signing keys corresponding to the list cosigners\' verification keys are expected to make the script valid.
  patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf4Some :: PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf4Some
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf4
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["some" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf4Some obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["some" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf4Some obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf4
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf4" (\obj -> GHC.Base.pure PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf4 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "some"))
-- | Create a new 'PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf4' with all required fields.
mkPatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf4 :: PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf4Some -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf4Some'
  -> PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf4
mkPatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf4 patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf4Some = PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf4{patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf4Some = patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf4Some}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.200.content.application\/json.schema.oneOf.properties.delegation_script_template.properties.template.oneOf.properties.some@ in the specification.
-- 
-- Script primitive for which at least a given number of signing keys corresponding to the list cosigners\' verification keys are expected to make the script valid.
data PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf4Some = PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf4Some {
  -- | at_least
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 255.0
  -- * Minimum  of 1.0
  patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf4SomeAt_least :: GHC.Types.Int
  -- | from
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  , patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf4SomeFrom :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf4Some
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["at_least" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf4SomeAt_least obj] : ["from" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf4SomeFrom obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["at_least" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf4SomeAt_least obj] : ["from" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf4SomeFrom obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf4Some
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf4Some" (\obj -> (GHC.Base.pure PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf4Some GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "at_least")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "from"))
-- | Create a new 'PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf4Some' with all required fields.
mkPatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf4Some :: GHC.Types.Int -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf4SomeAt_least'
  -> [ScriptTemplateValue] -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf4SomeFrom'
  -> PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf4Some
mkPatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf4Some patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf4SomeAt_least patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf4SomeFrom = PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf4Some{patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf4SomeAt_least = patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf4SomeAt_least,
                                                                                                                                                                                                                                                                                                                                                                                                            patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf4SomeFrom = patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf4SomeFrom}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.200.content.application\/json.schema.oneOf.properties.delegation_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf5 = PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf5 {
  -- | active_from: Transaction is only valid starting at the specified slot number (\`â‰¥ active_from\`).
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf5Active_from :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf5
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["active_from" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf5Active_from obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["active_from" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf5Active_from obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf5
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf5" (\obj -> GHC.Base.pure PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf5 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active_from"))
-- | Create a new 'PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf5' with all required fields.
mkPatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf5 :: GHC.Types.Int -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf5Active_from'
  -> PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf5
mkPatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf5 patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf5Active_from = PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf5{patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf5Active_from = patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf5Active_from}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.200.content.application\/json.schema.oneOf.properties.delegation_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf6 = PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf6 {
  -- | active_until: Transaction is only valid before the specified slot number (\`\< active_until\`).
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf6Active_until :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf6
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["active_until" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf6Active_until obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["active_until" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf6Active_until obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf6
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf6" (\obj -> GHC.Base.pure PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf6 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active_until"))
-- | Create a new 'PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf6' with all required fields.
mkPatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf6 :: GHC.Types.Int -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf6Active_until'
  -> PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf6
mkPatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf6 patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf6Active_until = PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf6{patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf6Active_until = patchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf6Active_until}
-- | Defines the oneOf schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.200.content.application\/json.schema.oneOf.properties.delegation_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateVariants =
   PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateVariant1 Data.Text.Internal.Text
  | PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateVariant2 PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf2
  | PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateVariant3 PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf3
  | PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateVariant4 PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf4
  | PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateVariant5 PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf5
  | PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateVariant6 PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateOneOf6
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateVariants
    where toJSON (PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateVariant1 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateVariant2 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateVariant3 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateVariant4 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateVariant5 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateVariant6 a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateVariants
    where parseJSON val = case (PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateVariant1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateVariant2 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateVariant3 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateVariant4 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateVariant5 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PatchSharedWalletInDelegationResponseBody200OneOf1Delegation_script_templateTemplateVariant6 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched"))))) of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.200.content.application\/json.schema.oneOf.properties.payment_script_template@ in the specification.
-- 
-- 
data PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_template = PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_template {
  -- | cosigners: Map of cosigners and their account public keys. Use key as in &cosigner, eg. \"cosigner\#\"
  patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateCosigners :: Data.Aeson.Types.Internal.Object
  -- | template
  , patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplate :: PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateVariants
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_template
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["cosigners" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateCosigners obj] : ["template" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplate obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["cosigners" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateCosigners obj] : ["template" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplate obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_template
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_template" (\obj -> (GHC.Base.pure PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_template GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cosigners")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "template"))
-- | Create a new 'PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_template' with all required fields.
mkPatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_template :: Data.Aeson.Types.Internal.Object -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateCosigners'
  -> PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateVariants -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplate'
  -> PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_template
mkPatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_template patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateCosigners patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplate = PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_template{patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateCosigners = patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateCosigners,
                                                                                                                                                                                                                                                                                                                             patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplate = patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplate}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.200.content.application\/json.schema.oneOf.properties.payment_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf2 = PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf2 {
  -- | all: Script primitive for which all signing keys corresponding to all list cosigners\' verification keys are expected to make the script valid.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf2All :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf2
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["all" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf2All obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["all" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf2All obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf2
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf2" (\obj -> GHC.Base.pure PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf2 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "all"))
-- | Create a new 'PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf2' with all required fields.
mkPatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf2 :: [ScriptTemplateValue] -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf2All'
  -> PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf2
mkPatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf2 patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf2All = PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf2{patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf2All = patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf2All}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.200.content.application\/json.schema.oneOf.properties.payment_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf3 = PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf3 {
  -- | any: Script primitive for which a signing key corresponding to any of the list cosigners\' verification keys is expected to make the script valid. It is equivalent to \`some\` with \`\"at_least\"=1\`.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf3Any :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf3
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["any" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf3Any obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["any" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf3Any obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf3
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf3" (\obj -> GHC.Base.pure PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf3 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "any"))
-- | Create a new 'PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf3' with all required fields.
mkPatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf3 :: [ScriptTemplateValue] -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf3Any'
  -> PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf3
mkPatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf3 patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf3Any = PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf3{patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf3Any = patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf3Any}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.200.content.application\/json.schema.oneOf.properties.payment_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf4 = PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf4 {
  -- | some: Script primitive for which at least a given number of signing keys corresponding to the list cosigners\' verification keys are expected to make the script valid.
  patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf4Some :: PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf4Some
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf4
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["some" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf4Some obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["some" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf4Some obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf4
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf4" (\obj -> GHC.Base.pure PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf4 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "some"))
-- | Create a new 'PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf4' with all required fields.
mkPatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf4 :: PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf4Some -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf4Some'
  -> PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf4
mkPatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf4 patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf4Some = PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf4{patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf4Some = patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf4Some}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.200.content.application\/json.schema.oneOf.properties.payment_script_template.properties.template.oneOf.properties.some@ in the specification.
-- 
-- Script primitive for which at least a given number of signing keys corresponding to the list cosigners\' verification keys are expected to make the script valid.
data PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf4Some = PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf4Some {
  -- | at_least
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 255.0
  -- * Minimum  of 1.0
  patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf4SomeAt_least :: GHC.Types.Int
  -- | from
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  , patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf4SomeFrom :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf4Some
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["at_least" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf4SomeAt_least obj] : ["from" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf4SomeFrom obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["at_least" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf4SomeAt_least obj] : ["from" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf4SomeFrom obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf4Some
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf4Some" (\obj -> (GHC.Base.pure PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf4Some GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "at_least")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "from"))
-- | Create a new 'PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf4Some' with all required fields.
mkPatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf4Some :: GHC.Types.Int -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf4SomeAt_least'
  -> [ScriptTemplateValue] -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf4SomeFrom'
  -> PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf4Some
mkPatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf4Some patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf4SomeAt_least patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf4SomeFrom = PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf4Some{patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf4SomeAt_least = patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf4SomeAt_least,
                                                                                                                                                                                                                                                                                                                                                                                                patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf4SomeFrom = patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf4SomeFrom}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.200.content.application\/json.schema.oneOf.properties.payment_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf5 = PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf5 {
  -- | active_from: Transaction is only valid starting at the specified slot number (\`â‰¥ active_from\`).
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf5Active_from :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf5
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["active_from" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf5Active_from obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["active_from" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf5Active_from obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf5
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf5" (\obj -> GHC.Base.pure PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf5 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active_from"))
-- | Create a new 'PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf5' with all required fields.
mkPatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf5 :: GHC.Types.Int -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf5Active_from'
  -> PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf5
mkPatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf5 patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf5Active_from = PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf5{patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf5Active_from = patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf5Active_from}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.200.content.application\/json.schema.oneOf.properties.payment_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf6 = PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf6 {
  -- | active_until: Transaction is only valid before the specified slot number (\`\< active_until\`).
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf6Active_until :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf6
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["active_until" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf6Active_until obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["active_until" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf6Active_until obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf6
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf6" (\obj -> GHC.Base.pure PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf6 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active_until"))
-- | Create a new 'PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf6' with all required fields.
mkPatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf6 :: GHC.Types.Int -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf6Active_until'
  -> PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf6
mkPatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf6 patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf6Active_until = PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf6{patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf6Active_until = patchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf6Active_until}
-- | Defines the oneOf schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.200.content.application\/json.schema.oneOf.properties.payment_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateVariants =
   PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateVariant1 Data.Text.Internal.Text
  | PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateVariant2 PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf2
  | PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateVariant3 PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf3
  | PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateVariant4 PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf4
  | PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateVariant5 PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf5
  | PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateVariant6 PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateOneOf6
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateVariants
    where toJSON (PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateVariant1 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateVariant2 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateVariant3 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateVariant4 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateVariant5 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateVariant6 a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateVariants
    where parseJSON val = case (PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateVariant1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateVariant2 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateVariant3 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateVariant4 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateVariant5 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PatchSharedWalletInDelegationResponseBody200OneOf1Payment_script_templateTemplateVariant6 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched"))))) of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.200.content.application\/json.schema.oneOf.properties.state@ in the specification.
-- 
-- 
data PatchSharedWalletInDelegationResponseBody200OneOf1State = PatchSharedWalletInDelegationResponseBody200OneOf1State {

  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody200OneOf1State
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["status" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "incomplete"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["status" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "incomplete"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody200OneOf1State
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchSharedWalletInDelegationResponseBody200OneOf1State" (\obj -> GHC.Base.pure PatchSharedWalletInDelegationResponseBody200OneOf1State)
-- | Create a new 'PatchSharedWalletInDelegationResponseBody200OneOf1State' with all required fields.
mkPatchSharedWalletInDelegationResponseBody200OneOf1State :: PatchSharedWalletInDelegationResponseBody200OneOf1State
mkPatchSharedWalletInDelegationResponseBody200OneOf1State = PatchSharedWalletInDelegationResponseBody200OneOf1State{}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.200.content.application\/json.schema.oneOf@ in the specification.
-- 
-- 
data PatchSharedWalletInDelegationResponseBody200OneOf2 = PatchSharedWalletInDelegationResponseBody200OneOf2 {
  -- | account_index: An individual segment within a derivation path.
  -- 
  -- The \`H\` suffix indicates a _Hardened_ child private key, which
  -- means that children of this key cannot be derived from the public
  -- key. Indices without a \`H\` suffix are called _Soft_.
  patchSharedWalletInDelegationResponseBody200OneOf2Account_index :: Data.Text.Internal.Text
  -- | address_pool_gap: Number of consecutive unused addresses allowed.
  -- 
  -- **IMPORTANT DISCLAIMER:** Using values other than \`20\` automatically makes your wallet invalid with regards to BIP-44 address discovery. It means that you **will not** be able to fully restore
  -- your wallet in a different software which is strictly following BIP-44.
  -- 
  -- Beside, using large gaps is **not recommended** as it may induce important performance degradations. Use at your own risks.
  -- 
  -- **IMPORTANT DISCLAIMER 2:** There is no way to \`import\` addresses generated outside (e.g. using cardano-addresses) into the wallet.
  -- Wallet only discovers transactions on its used and unused addresses that are within its currently seen \`address_pool_gap\`.
  -- Transactions on addresses that \"belong\" to the wallet but happen to be beyond its \`address_pool_gap\` will not be visible to the wallet.
  -- This is a technical limitation of the industry standard [BIP-44](https:\/\/github.com\/bitcoin\/bips\/blob\/master\/bip-0044.mediawiki). See also [CIP-1852](https:\/\/github.com\/cardano-foundation\/CIPs\/blob\/master\/CIP-1852\/CIP-1852.md).
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100000.0
  -- * Minimum  of 10.0
  , patchSharedWalletInDelegationResponseBody200OneOf2Address_pool_gap :: GHC.Types.Int
  -- | assets: Current non-Ada asset holdings of the wallet.
  -- 
  -- The amount of assets available to spend may be less than the total
  -- unspent assets due to transaction change amounts which are yet to
  -- be fully confirmed (pending).
  , patchSharedWalletInDelegationResponseBody200OneOf2Assets :: PatchSharedWalletInDelegationResponseBody200OneOf2Assets
  -- | balance: Wallet current Ada balance(s).
  , patchSharedWalletInDelegationResponseBody200OneOf2Balance :: PatchSharedWalletInDelegationResponseBody200OneOf2Balance
  -- | delegation: Delegation settings
  , patchSharedWalletInDelegationResponseBody200OneOf2Delegation :: PatchSharedWalletInDelegationResponseBody200OneOf2Delegation
  -- | delegation_script_template
  , patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_template :: (GHC.Maybe.Maybe PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_template)
  -- | id: A unique identifier for the wallet
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 40
  -- * Minimum length of 40
  , patchSharedWalletInDelegationResponseBody200OneOf2Id :: Data.Text.Internal.Text
  -- | name
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 255
  -- * Minimum length of 1
  , patchSharedWalletInDelegationResponseBody200OneOf2Name :: Data.Text.Internal.Text
  -- | passphrase: Information about the wallet\'s passphrase
  , patchSharedWalletInDelegationResponseBody200OneOf2Passphrase :: (GHC.Maybe.Maybe PatchSharedWalletInDelegationResponseBody200OneOf2Passphrase)
  -- | payment_script_template
  , patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_template :: PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_template
  -- | state: Whether a wallet is ready to use or still syncing
  , patchSharedWalletInDelegationResponseBody200OneOf2State :: PatchSharedWalletInDelegationResponseBody200OneOf2State
  -- | tip: A reference to a particular time slot, and the block height at that point.
  , patchSharedWalletInDelegationResponseBody200OneOf2Tip :: PatchSharedWalletInDelegationResponseBody200OneOf2Tip
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody200OneOf2
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["account_index" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2Account_index obj] : ["address_pool_gap" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2Address_pool_gap obj] : ["assets" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2Assets obj] : ["balance" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2Balance obj] : ["delegation" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2Delegation obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("delegation_script_template" Data.Aeson.Types.ToJSON..=)) (patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_template obj) : ["id" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2Id obj] : ["name" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2Name obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("passphrase" Data.Aeson.Types.ToJSON..=)) (patchSharedWalletInDelegationResponseBody200OneOf2Passphrase obj) : ["payment_script_template" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_template obj] : ["state" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2State obj] : ["tip" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2Tip obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["account_index" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2Account_index obj] : ["address_pool_gap" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2Address_pool_gap obj] : ["assets" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2Assets obj] : ["balance" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2Balance obj] : ["delegation" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2Delegation obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("delegation_script_template" Data.Aeson.Types.ToJSON..=)) (patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_template obj) : ["id" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2Id obj] : ["name" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2Name obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("passphrase" Data.Aeson.Types.ToJSON..=)) (patchSharedWalletInDelegationResponseBody200OneOf2Passphrase obj) : ["payment_script_template" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_template obj] : ["state" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2State obj] : ["tip" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2Tip obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody200OneOf2
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchSharedWalletInDelegationResponseBody200OneOf2" (\obj -> (((((((((((GHC.Base.pure PatchSharedWalletInDelegationResponseBody200OneOf2 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "account_index")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "address_pool_gap")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "assets")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "balance")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "delegation")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "delegation_script_template")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "passphrase")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "payment_script_template")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "state")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "tip"))
-- | Create a new 'PatchSharedWalletInDelegationResponseBody200OneOf2' with all required fields.
mkPatchSharedWalletInDelegationResponseBody200OneOf2 :: Data.Text.Internal.Text -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf2Account_index'
  -> GHC.Types.Int -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf2Address_pool_gap'
  -> PatchSharedWalletInDelegationResponseBody200OneOf2Assets -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf2Assets'
  -> PatchSharedWalletInDelegationResponseBody200OneOf2Balance -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf2Balance'
  -> PatchSharedWalletInDelegationResponseBody200OneOf2Delegation -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf2Delegation'
  -> Data.Text.Internal.Text -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf2Id'
  -> Data.Text.Internal.Text -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf2Name'
  -> PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_template -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_template'
  -> PatchSharedWalletInDelegationResponseBody200OneOf2State -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf2State'
  -> PatchSharedWalletInDelegationResponseBody200OneOf2Tip -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf2Tip'
  -> PatchSharedWalletInDelegationResponseBody200OneOf2
mkPatchSharedWalletInDelegationResponseBody200OneOf2 patchSharedWalletInDelegationResponseBody200OneOf2Account_index patchSharedWalletInDelegationResponseBody200OneOf2Address_pool_gap patchSharedWalletInDelegationResponseBody200OneOf2Assets patchSharedWalletInDelegationResponseBody200OneOf2Balance patchSharedWalletInDelegationResponseBody200OneOf2Delegation patchSharedWalletInDelegationResponseBody200OneOf2Id patchSharedWalletInDelegationResponseBody200OneOf2Name patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_template patchSharedWalletInDelegationResponseBody200OneOf2State patchSharedWalletInDelegationResponseBody200OneOf2Tip = PatchSharedWalletInDelegationResponseBody200OneOf2{patchSharedWalletInDelegationResponseBody200OneOf2Account_index = patchSharedWalletInDelegationResponseBody200OneOf2Account_index,
patchSharedWalletInDelegationResponseBody200OneOf2Address_pool_gap = patchSharedWalletInDelegationResponseBody200OneOf2Address_pool_gap,
patchSharedWalletInDelegationResponseBody200OneOf2Assets = patchSharedWalletInDelegationResponseBody200OneOf2Assets,
patchSharedWalletInDelegationResponseBody200OneOf2Balance = patchSharedWalletInDelegationResponseBody200OneOf2Balance,
patchSharedWalletInDelegationResponseBody200OneOf2Delegation = patchSharedWalletInDelegationResponseBody200OneOf2Delegation,
patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_template = GHC.Maybe.Nothing,
patchSharedWalletInDelegationResponseBody200OneOf2Id = patchSharedWalletInDelegationResponseBody200OneOf2Id,
patchSharedWalletInDelegationResponseBody200OneOf2Name = patchSharedWalletInDelegationResponseBody200OneOf2Name,
patchSharedWalletInDelegationResponseBody200OneOf2Passphrase = GHC.Maybe.Nothing,
patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_template = patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_template,
patchSharedWalletInDelegationResponseBody200OneOf2State = patchSharedWalletInDelegationResponseBody200OneOf2State,
patchSharedWalletInDelegationResponseBody200OneOf2Tip = patchSharedWalletInDelegationResponseBody200OneOf2Tip}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.200.content.application\/json.schema.oneOf.properties.assets@ in the specification.
-- 
-- Current non-Ada asset holdings of the wallet.
-- 
-- The amount of assets available to spend may be less than the total
-- unspent assets due to transaction change amounts which are yet to
-- be fully confirmed (pending).
data PatchSharedWalletInDelegationResponseBody200OneOf2Assets = PatchSharedWalletInDelegationResponseBody200OneOf2Assets {
  -- | available: Available UTxO asset balances (funds that can be spent without
  -- condition).
  patchSharedWalletInDelegationResponseBody200OneOf2AssetsAvailable :: ([PatchSharedWalletInDelegationResponseBody200OneOf2AssetsAvailable])
  -- | total: Total asset balances (available balances plus pending change balances).
  , patchSharedWalletInDelegationResponseBody200OneOf2AssetsTotal :: ([PatchSharedWalletInDelegationResponseBody200OneOf2AssetsTotal])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody200OneOf2Assets
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["available" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2AssetsAvailable obj] : ["total" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2AssetsTotal obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["available" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2AssetsAvailable obj] : ["total" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2AssetsTotal obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody200OneOf2Assets
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchSharedWalletInDelegationResponseBody200OneOf2Assets" (\obj -> (GHC.Base.pure PatchSharedWalletInDelegationResponseBody200OneOf2Assets GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "available")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "total"))
-- | Create a new 'PatchSharedWalletInDelegationResponseBody200OneOf2Assets' with all required fields.
mkPatchSharedWalletInDelegationResponseBody200OneOf2Assets :: [PatchSharedWalletInDelegationResponseBody200OneOf2AssetsAvailable] -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf2AssetsAvailable'
  -> [PatchSharedWalletInDelegationResponseBody200OneOf2AssetsTotal] -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf2AssetsTotal'
  -> PatchSharedWalletInDelegationResponseBody200OneOf2Assets
mkPatchSharedWalletInDelegationResponseBody200OneOf2Assets patchSharedWalletInDelegationResponseBody200OneOf2AssetsAvailable patchSharedWalletInDelegationResponseBody200OneOf2AssetsTotal = PatchSharedWalletInDelegationResponseBody200OneOf2Assets{patchSharedWalletInDelegationResponseBody200OneOf2AssetsAvailable = patchSharedWalletInDelegationResponseBody200OneOf2AssetsAvailable,
                                                                                                                                                                                                                                                      patchSharedWalletInDelegationResponseBody200OneOf2AssetsTotal = patchSharedWalletInDelegationResponseBody200OneOf2AssetsTotal}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.200.content.application\/json.schema.oneOf.properties.assets.properties.available.items@ in the specification.
-- 
-- An asset on the Cardano blockchain. An asset is uniquely identified by
-- its \`policy_id\` and \`asset_name\` (together, these form the _asset id_).
-- 
-- Two assets with the same \`asset_name\` and \`policy_id\` are
-- interchangeable. Yet, different assets with a same \`policy_id\` but
-- different \`asset_name\` are treated as separate assets, as are two
-- assets with the same \`asset_name\` but different \`policy_id\`.
data PatchSharedWalletInDelegationResponseBody200OneOf2AssetsAvailable = PatchSharedWalletInDelegationResponseBody200OneOf2AssetsAvailable {
  -- | asset_name: The asset on-chain type which acts as a sub-identifier within a
  -- policy. Although we call it \"asset name\", the value needn\'t be
  -- text, and it could even be empty.
  -- 
  -- For policies with a single fungible asset item, asset name is
  -- typically an empty string.
  -- 
  -- This value can be up to 32 bytes of arbitrary data (which is 64
  -- hexadecimal digits).
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  patchSharedWalletInDelegationResponseBody200OneOf2AssetsAvailableAsset_name :: Data.Text.Internal.Text
  -- | policy_id: A unique identifier of the asset\'s monetary policy. The policy
  -- controls how assets of this kind are created and destroyed.
  -- 
  -- The contents are the blake2b-224 hash of the monetary policy
  -- script, encoded in hexadecimal.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 56
  -- * Minimum length of 56
  , patchSharedWalletInDelegationResponseBody200OneOf2AssetsAvailablePolicy_id :: Data.Text.Internal.Text
  -- | quantity: Number of assets for the given \`policy_id\` and \`asset_name\`.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , patchSharedWalletInDelegationResponseBody200OneOf2AssetsAvailableQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody200OneOf2AssetsAvailable
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["asset_name" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2AssetsAvailableAsset_name obj] : ["policy_id" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2AssetsAvailablePolicy_id obj] : ["quantity" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2AssetsAvailableQuantity obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["asset_name" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2AssetsAvailableAsset_name obj] : ["policy_id" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2AssetsAvailablePolicy_id obj] : ["quantity" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2AssetsAvailableQuantity obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody200OneOf2AssetsAvailable
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchSharedWalletInDelegationResponseBody200OneOf2AssetsAvailable" (\obj -> ((GHC.Base.pure PatchSharedWalletInDelegationResponseBody200OneOf2AssetsAvailable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "asset_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "policy_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'PatchSharedWalletInDelegationResponseBody200OneOf2AssetsAvailable' with all required fields.
mkPatchSharedWalletInDelegationResponseBody200OneOf2AssetsAvailable :: Data.Text.Internal.Text -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf2AssetsAvailableAsset_name'
  -> Data.Text.Internal.Text -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf2AssetsAvailablePolicy_id'
  -> GHC.Types.Int -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf2AssetsAvailableQuantity'
  -> PatchSharedWalletInDelegationResponseBody200OneOf2AssetsAvailable
mkPatchSharedWalletInDelegationResponseBody200OneOf2AssetsAvailable patchSharedWalletInDelegationResponseBody200OneOf2AssetsAvailableAsset_name patchSharedWalletInDelegationResponseBody200OneOf2AssetsAvailablePolicy_id patchSharedWalletInDelegationResponseBody200OneOf2AssetsAvailableQuantity = PatchSharedWalletInDelegationResponseBody200OneOf2AssetsAvailable{patchSharedWalletInDelegationResponseBody200OneOf2AssetsAvailableAsset_name = patchSharedWalletInDelegationResponseBody200OneOf2AssetsAvailableAsset_name,
                                                                                                                                                                                                                                                                                                                                                                         patchSharedWalletInDelegationResponseBody200OneOf2AssetsAvailablePolicy_id = patchSharedWalletInDelegationResponseBody200OneOf2AssetsAvailablePolicy_id,
                                                                                                                                                                                                                                                                                                                                                                         patchSharedWalletInDelegationResponseBody200OneOf2AssetsAvailableQuantity = patchSharedWalletInDelegationResponseBody200OneOf2AssetsAvailableQuantity}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.200.content.application\/json.schema.oneOf.properties.assets.properties.total.items@ in the specification.
-- 
-- An asset on the Cardano blockchain. An asset is uniquely identified by
-- its \`policy_id\` and \`asset_name\` (together, these form the _asset id_).
-- 
-- Two assets with the same \`asset_name\` and \`policy_id\` are
-- interchangeable. Yet, different assets with a same \`policy_id\` but
-- different \`asset_name\` are treated as separate assets, as are two
-- assets with the same \`asset_name\` but different \`policy_id\`.
data PatchSharedWalletInDelegationResponseBody200OneOf2AssetsTotal = PatchSharedWalletInDelegationResponseBody200OneOf2AssetsTotal {
  -- | asset_name: The asset on-chain type which acts as a sub-identifier within a
  -- policy. Although we call it \"asset name\", the value needn\'t be
  -- text, and it could even be empty.
  -- 
  -- For policies with a single fungible asset item, asset name is
  -- typically an empty string.
  -- 
  -- This value can be up to 32 bytes of arbitrary data (which is 64
  -- hexadecimal digits).
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  patchSharedWalletInDelegationResponseBody200OneOf2AssetsTotalAsset_name :: Data.Text.Internal.Text
  -- | policy_id: A unique identifier of the asset\'s monetary policy. The policy
  -- controls how assets of this kind are created and destroyed.
  -- 
  -- The contents are the blake2b-224 hash of the monetary policy
  -- script, encoded in hexadecimal.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 56
  -- * Minimum length of 56
  , patchSharedWalletInDelegationResponseBody200OneOf2AssetsTotalPolicy_id :: Data.Text.Internal.Text
  -- | quantity: Number of assets for the given \`policy_id\` and \`asset_name\`.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , patchSharedWalletInDelegationResponseBody200OneOf2AssetsTotalQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody200OneOf2AssetsTotal
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["asset_name" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2AssetsTotalAsset_name obj] : ["policy_id" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2AssetsTotalPolicy_id obj] : ["quantity" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2AssetsTotalQuantity obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["asset_name" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2AssetsTotalAsset_name obj] : ["policy_id" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2AssetsTotalPolicy_id obj] : ["quantity" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2AssetsTotalQuantity obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody200OneOf2AssetsTotal
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchSharedWalletInDelegationResponseBody200OneOf2AssetsTotal" (\obj -> ((GHC.Base.pure PatchSharedWalletInDelegationResponseBody200OneOf2AssetsTotal GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "asset_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "policy_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'PatchSharedWalletInDelegationResponseBody200OneOf2AssetsTotal' with all required fields.
mkPatchSharedWalletInDelegationResponseBody200OneOf2AssetsTotal :: Data.Text.Internal.Text -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf2AssetsTotalAsset_name'
  -> Data.Text.Internal.Text -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf2AssetsTotalPolicy_id'
  -> GHC.Types.Int -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf2AssetsTotalQuantity'
  -> PatchSharedWalletInDelegationResponseBody200OneOf2AssetsTotal
mkPatchSharedWalletInDelegationResponseBody200OneOf2AssetsTotal patchSharedWalletInDelegationResponseBody200OneOf2AssetsTotalAsset_name patchSharedWalletInDelegationResponseBody200OneOf2AssetsTotalPolicy_id patchSharedWalletInDelegationResponseBody200OneOf2AssetsTotalQuantity = PatchSharedWalletInDelegationResponseBody200OneOf2AssetsTotal{patchSharedWalletInDelegationResponseBody200OneOf2AssetsTotalAsset_name = patchSharedWalletInDelegationResponseBody200OneOf2AssetsTotalAsset_name,
                                                                                                                                                                                                                                                                                                                                                     patchSharedWalletInDelegationResponseBody200OneOf2AssetsTotalPolicy_id = patchSharedWalletInDelegationResponseBody200OneOf2AssetsTotalPolicy_id,
                                                                                                                                                                                                                                                                                                                                                     patchSharedWalletInDelegationResponseBody200OneOf2AssetsTotalQuantity = patchSharedWalletInDelegationResponseBody200OneOf2AssetsTotalQuantity}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.200.content.application\/json.schema.oneOf.properties.balance@ in the specification.
-- 
-- Wallet current Ada balance(s).
data PatchSharedWalletInDelegationResponseBody200OneOf2Balance = PatchSharedWalletInDelegationResponseBody200OneOf2Balance {
  -- | available: Available Ada UTxO balance (funds that can be spent without condition).
  patchSharedWalletInDelegationResponseBody200OneOf2BalanceAvailable :: PatchSharedWalletInDelegationResponseBody200OneOf2BalanceAvailable
  -- | reward: The Ada balance of the reward account for this wallet.
  , patchSharedWalletInDelegationResponseBody200OneOf2BalanceReward :: PatchSharedWalletInDelegationResponseBody200OneOf2BalanceReward
  -- | total: Total Ada balance (available balance plus pending change and reward balance).
  , patchSharedWalletInDelegationResponseBody200OneOf2BalanceTotal :: PatchSharedWalletInDelegationResponseBody200OneOf2BalanceTotal
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody200OneOf2Balance
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["available" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2BalanceAvailable obj] : ["reward" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2BalanceReward obj] : ["total" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2BalanceTotal obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["available" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2BalanceAvailable obj] : ["reward" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2BalanceReward obj] : ["total" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2BalanceTotal obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody200OneOf2Balance
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchSharedWalletInDelegationResponseBody200OneOf2Balance" (\obj -> ((GHC.Base.pure PatchSharedWalletInDelegationResponseBody200OneOf2Balance GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "available")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "reward")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "total"))
-- | Create a new 'PatchSharedWalletInDelegationResponseBody200OneOf2Balance' with all required fields.
mkPatchSharedWalletInDelegationResponseBody200OneOf2Balance :: PatchSharedWalletInDelegationResponseBody200OneOf2BalanceAvailable -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf2BalanceAvailable'
  -> PatchSharedWalletInDelegationResponseBody200OneOf2BalanceReward -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf2BalanceReward'
  -> PatchSharedWalletInDelegationResponseBody200OneOf2BalanceTotal -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf2BalanceTotal'
  -> PatchSharedWalletInDelegationResponseBody200OneOf2Balance
mkPatchSharedWalletInDelegationResponseBody200OneOf2Balance patchSharedWalletInDelegationResponseBody200OneOf2BalanceAvailable patchSharedWalletInDelegationResponseBody200OneOf2BalanceReward patchSharedWalletInDelegationResponseBody200OneOf2BalanceTotal = PatchSharedWalletInDelegationResponseBody200OneOf2Balance{patchSharedWalletInDelegationResponseBody200OneOf2BalanceAvailable = patchSharedWalletInDelegationResponseBody200OneOf2BalanceAvailable,
                                                                                                                                                                                                                                                                                                                          patchSharedWalletInDelegationResponseBody200OneOf2BalanceReward = patchSharedWalletInDelegationResponseBody200OneOf2BalanceReward,
                                                                                                                                                                                                                                                                                                                          patchSharedWalletInDelegationResponseBody200OneOf2BalanceTotal = patchSharedWalletInDelegationResponseBody200OneOf2BalanceTotal}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.200.content.application\/json.schema.oneOf.properties.balance.properties.available@ in the specification.
-- 
-- Available Ada UTxO balance (funds that can be spent without condition).
data PatchSharedWalletInDelegationResponseBody200OneOf2BalanceAvailable = PatchSharedWalletInDelegationResponseBody200OneOf2BalanceAvailable {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  patchSharedWalletInDelegationResponseBody200OneOf2BalanceAvailableQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody200OneOf2BalanceAvailable
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2BalanceAvailableQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2BalanceAvailableQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody200OneOf2BalanceAvailable
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchSharedWalletInDelegationResponseBody200OneOf2BalanceAvailable" (\obj -> GHC.Base.pure PatchSharedWalletInDelegationResponseBody200OneOf2BalanceAvailable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'PatchSharedWalletInDelegationResponseBody200OneOf2BalanceAvailable' with all required fields.
mkPatchSharedWalletInDelegationResponseBody200OneOf2BalanceAvailable :: GHC.Types.Int -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf2BalanceAvailableQuantity'
  -> PatchSharedWalletInDelegationResponseBody200OneOf2BalanceAvailable
mkPatchSharedWalletInDelegationResponseBody200OneOf2BalanceAvailable patchSharedWalletInDelegationResponseBody200OneOf2BalanceAvailableQuantity = PatchSharedWalletInDelegationResponseBody200OneOf2BalanceAvailable{patchSharedWalletInDelegationResponseBody200OneOf2BalanceAvailableQuantity = patchSharedWalletInDelegationResponseBody200OneOf2BalanceAvailableQuantity}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.200.content.application\/json.schema.oneOf.properties.balance.properties.reward@ in the specification.
-- 
-- The Ada balance of the reward account for this wallet.
data PatchSharedWalletInDelegationResponseBody200OneOf2BalanceReward = PatchSharedWalletInDelegationResponseBody200OneOf2BalanceReward {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  patchSharedWalletInDelegationResponseBody200OneOf2BalanceRewardQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody200OneOf2BalanceReward
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2BalanceRewardQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2BalanceRewardQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody200OneOf2BalanceReward
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchSharedWalletInDelegationResponseBody200OneOf2BalanceReward" (\obj -> GHC.Base.pure PatchSharedWalletInDelegationResponseBody200OneOf2BalanceReward GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'PatchSharedWalletInDelegationResponseBody200OneOf2BalanceReward' with all required fields.
mkPatchSharedWalletInDelegationResponseBody200OneOf2BalanceReward :: GHC.Types.Int -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf2BalanceRewardQuantity'
  -> PatchSharedWalletInDelegationResponseBody200OneOf2BalanceReward
mkPatchSharedWalletInDelegationResponseBody200OneOf2BalanceReward patchSharedWalletInDelegationResponseBody200OneOf2BalanceRewardQuantity = PatchSharedWalletInDelegationResponseBody200OneOf2BalanceReward{patchSharedWalletInDelegationResponseBody200OneOf2BalanceRewardQuantity = patchSharedWalletInDelegationResponseBody200OneOf2BalanceRewardQuantity}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.200.content.application\/json.schema.oneOf.properties.balance.properties.total@ in the specification.
-- 
-- Total Ada balance (available balance plus pending change and reward balance).
data PatchSharedWalletInDelegationResponseBody200OneOf2BalanceTotal = PatchSharedWalletInDelegationResponseBody200OneOf2BalanceTotal {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  patchSharedWalletInDelegationResponseBody200OneOf2BalanceTotalQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody200OneOf2BalanceTotal
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2BalanceTotalQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2BalanceTotalQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody200OneOf2BalanceTotal
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchSharedWalletInDelegationResponseBody200OneOf2BalanceTotal" (\obj -> GHC.Base.pure PatchSharedWalletInDelegationResponseBody200OneOf2BalanceTotal GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'PatchSharedWalletInDelegationResponseBody200OneOf2BalanceTotal' with all required fields.
mkPatchSharedWalletInDelegationResponseBody200OneOf2BalanceTotal :: GHC.Types.Int -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf2BalanceTotalQuantity'
  -> PatchSharedWalletInDelegationResponseBody200OneOf2BalanceTotal
mkPatchSharedWalletInDelegationResponseBody200OneOf2BalanceTotal patchSharedWalletInDelegationResponseBody200OneOf2BalanceTotalQuantity = PatchSharedWalletInDelegationResponseBody200OneOf2BalanceTotal{patchSharedWalletInDelegationResponseBody200OneOf2BalanceTotalQuantity = patchSharedWalletInDelegationResponseBody200OneOf2BalanceTotalQuantity}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.200.content.application\/json.schema.oneOf.properties.delegation@ in the specification.
-- 
-- Delegation settings
data PatchSharedWalletInDelegationResponseBody200OneOf2Delegation = PatchSharedWalletInDelegationResponseBody200OneOf2Delegation {
  -- | active: Currently active delegation status.
  patchSharedWalletInDelegationResponseBody200OneOf2DelegationActive :: PatchSharedWalletInDelegationResponseBody200OneOf2DelegationActive
  -- | next
  , patchSharedWalletInDelegationResponseBody200OneOf2DelegationNext :: ([PatchSharedWalletInDelegationResponseBody200OneOf2DelegationNext])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody200OneOf2Delegation
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["active" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2DelegationActive obj] : ["next" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2DelegationNext obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["active" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2DelegationActive obj] : ["next" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2DelegationNext obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody200OneOf2Delegation
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchSharedWalletInDelegationResponseBody200OneOf2Delegation" (\obj -> (GHC.Base.pure PatchSharedWalletInDelegationResponseBody200OneOf2Delegation GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "next"))
-- | Create a new 'PatchSharedWalletInDelegationResponseBody200OneOf2Delegation' with all required fields.
mkPatchSharedWalletInDelegationResponseBody200OneOf2Delegation :: PatchSharedWalletInDelegationResponseBody200OneOf2DelegationActive -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf2DelegationActive'
  -> [PatchSharedWalletInDelegationResponseBody200OneOf2DelegationNext] -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf2DelegationNext'
  -> PatchSharedWalletInDelegationResponseBody200OneOf2Delegation
mkPatchSharedWalletInDelegationResponseBody200OneOf2Delegation patchSharedWalletInDelegationResponseBody200OneOf2DelegationActive patchSharedWalletInDelegationResponseBody200OneOf2DelegationNext = PatchSharedWalletInDelegationResponseBody200OneOf2Delegation{patchSharedWalletInDelegationResponseBody200OneOf2DelegationActive = patchSharedWalletInDelegationResponseBody200OneOf2DelegationActive,
                                                                                                                                                                                                                                                                  patchSharedWalletInDelegationResponseBody200OneOf2DelegationNext = patchSharedWalletInDelegationResponseBody200OneOf2DelegationNext}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.200.content.application\/json.schema.oneOf.properties.delegation.properties.active@ in the specification.
-- 
-- Currently active delegation status.
data PatchSharedWalletInDelegationResponseBody200OneOf2DelegationActive = PatchSharedWalletInDelegationResponseBody200OneOf2DelegationActive {
  -- | status
  patchSharedWalletInDelegationResponseBody200OneOf2DelegationActiveStatus :: PatchSharedWalletInDelegationResponseBody200OneOf2DelegationActiveStatus
  -- | target: A unique Stake-Pool identifier (present only if status = \`delegating\`)
  , patchSharedWalletInDelegationResponseBody200OneOf2DelegationActiveTarget :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody200OneOf2DelegationActive
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["status" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2DelegationActiveStatus obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("target" Data.Aeson.Types.ToJSON..=)) (patchSharedWalletInDelegationResponseBody200OneOf2DelegationActiveTarget obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["status" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2DelegationActiveStatus obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("target" Data.Aeson.Types.ToJSON..=)) (patchSharedWalletInDelegationResponseBody200OneOf2DelegationActiveTarget obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody200OneOf2DelegationActive
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchSharedWalletInDelegationResponseBody200OneOf2DelegationActive" (\obj -> (GHC.Base.pure PatchSharedWalletInDelegationResponseBody200OneOf2DelegationActive GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "target"))
-- | Create a new 'PatchSharedWalletInDelegationResponseBody200OneOf2DelegationActive' with all required fields.
mkPatchSharedWalletInDelegationResponseBody200OneOf2DelegationActive :: PatchSharedWalletInDelegationResponseBody200OneOf2DelegationActiveStatus -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf2DelegationActiveStatus'
  -> PatchSharedWalletInDelegationResponseBody200OneOf2DelegationActive
mkPatchSharedWalletInDelegationResponseBody200OneOf2DelegationActive patchSharedWalletInDelegationResponseBody200OneOf2DelegationActiveStatus = PatchSharedWalletInDelegationResponseBody200OneOf2DelegationActive{patchSharedWalletInDelegationResponseBody200OneOf2DelegationActiveStatus = patchSharedWalletInDelegationResponseBody200OneOf2DelegationActiveStatus,
                                                                                                                                                                                                                   patchSharedWalletInDelegationResponseBody200OneOf2DelegationActiveTarget = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.200.content.application\/json.schema.oneOf.properties.delegation.properties.active.properties.status@ in the specification.
-- 
-- 
data PatchSharedWalletInDelegationResponseBody200OneOf2DelegationActiveStatus =
   PatchSharedWalletInDelegationResponseBody200OneOf2DelegationActiveStatusOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PatchSharedWalletInDelegationResponseBody200OneOf2DelegationActiveStatusTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PatchSharedWalletInDelegationResponseBody200OneOf2DelegationActiveStatusEnumNot_delegating -- ^ Represents the JSON value @"not_delegating"@
  | PatchSharedWalletInDelegationResponseBody200OneOf2DelegationActiveStatusEnumDelegating -- ^ Represents the JSON value @"delegating"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody200OneOf2DelegationActiveStatus
    where toJSON (PatchSharedWalletInDelegationResponseBody200OneOf2DelegationActiveStatusOther val) = val
          toJSON (PatchSharedWalletInDelegationResponseBody200OneOf2DelegationActiveStatusTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (PatchSharedWalletInDelegationResponseBody200OneOf2DelegationActiveStatusEnumNot_delegating) = "not_delegating"
          toJSON (PatchSharedWalletInDelegationResponseBody200OneOf2DelegationActiveStatusEnumDelegating) = "delegating"
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody200OneOf2DelegationActiveStatus
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "not_delegating" -> PatchSharedWalletInDelegationResponseBody200OneOf2DelegationActiveStatusEnumNot_delegating
                                            | val GHC.Classes.== "delegating" -> PatchSharedWalletInDelegationResponseBody200OneOf2DelegationActiveStatusEnumDelegating
                                            | GHC.Base.otherwise -> PatchSharedWalletInDelegationResponseBody200OneOf2DelegationActiveStatusOther val)
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.200.content.application\/json.schema.oneOf.properties.delegation.properties.next.items@ in the specification.
-- 
-- Next delegation status becomes active at the start of the second epoch after the corresponding delegation certificate was discovered. The exact moment is specified by changes_at
data PatchSharedWalletInDelegationResponseBody200OneOf2DelegationNext = PatchSharedWalletInDelegationResponseBody200OneOf2DelegationNext {
  -- | changes_at
  patchSharedWalletInDelegationResponseBody200OneOf2DelegationNextChanges_at :: PatchSharedWalletInDelegationResponseBody200OneOf2DelegationNextChanges_at
  -- | status
  , patchSharedWalletInDelegationResponseBody200OneOf2DelegationNextStatus :: PatchSharedWalletInDelegationResponseBody200OneOf2DelegationNextStatus
  -- | target: A unique Stake-Pool identifier (present only if status = \`delegating\`)
  , patchSharedWalletInDelegationResponseBody200OneOf2DelegationNextTarget :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody200OneOf2DelegationNext
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["changes_at" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2DelegationNextChanges_at obj] : ["status" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2DelegationNextStatus obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("target" Data.Aeson.Types.ToJSON..=)) (patchSharedWalletInDelegationResponseBody200OneOf2DelegationNextTarget obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["changes_at" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2DelegationNextChanges_at obj] : ["status" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2DelegationNextStatus obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("target" Data.Aeson.Types.ToJSON..=)) (patchSharedWalletInDelegationResponseBody200OneOf2DelegationNextTarget obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody200OneOf2DelegationNext
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchSharedWalletInDelegationResponseBody200OneOf2DelegationNext" (\obj -> ((GHC.Base.pure PatchSharedWalletInDelegationResponseBody200OneOf2DelegationNext GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "changes_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "target"))
-- | Create a new 'PatchSharedWalletInDelegationResponseBody200OneOf2DelegationNext' with all required fields.
mkPatchSharedWalletInDelegationResponseBody200OneOf2DelegationNext :: PatchSharedWalletInDelegationResponseBody200OneOf2DelegationNextChanges_at -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf2DelegationNextChanges_at'
  -> PatchSharedWalletInDelegationResponseBody200OneOf2DelegationNextStatus -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf2DelegationNextStatus'
  -> PatchSharedWalletInDelegationResponseBody200OneOf2DelegationNext
mkPatchSharedWalletInDelegationResponseBody200OneOf2DelegationNext patchSharedWalletInDelegationResponseBody200OneOf2DelegationNextChanges_at patchSharedWalletInDelegationResponseBody200OneOf2DelegationNextStatus = PatchSharedWalletInDelegationResponseBody200OneOf2DelegationNext{patchSharedWalletInDelegationResponseBody200OneOf2DelegationNextChanges_at = patchSharedWalletInDelegationResponseBody200OneOf2DelegationNextChanges_at,
                                                                                                                                                                                                                                                                                        patchSharedWalletInDelegationResponseBody200OneOf2DelegationNextStatus = patchSharedWalletInDelegationResponseBody200OneOf2DelegationNextStatus,
                                                                                                                                                                                                                                                                                        patchSharedWalletInDelegationResponseBody200OneOf2DelegationNextTarget = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.200.content.application\/json.schema.oneOf.properties.delegation.properties.next.items.properties.changes_at@ in the specification.
-- 
-- 
data PatchSharedWalletInDelegationResponseBody200OneOf2DelegationNextChanges_at = PatchSharedWalletInDelegationResponseBody200OneOf2DelegationNextChanges_at {
  -- | epoch_number: An epoch is a time period which is divided into slots.
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  patchSharedWalletInDelegationResponseBody200OneOf2DelegationNextChanges_atEpoch_number :: GHC.Types.Int
  -- | epoch_start_time
  , patchSharedWalletInDelegationResponseBody200OneOf2DelegationNextChanges_atEpoch_start_time :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody200OneOf2DelegationNextChanges_at
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["epoch_number" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2DelegationNextChanges_atEpoch_number obj] : ["epoch_start_time" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2DelegationNextChanges_atEpoch_start_time obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["epoch_number" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2DelegationNextChanges_atEpoch_number obj] : ["epoch_start_time" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2DelegationNextChanges_atEpoch_start_time obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody200OneOf2DelegationNextChanges_at
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchSharedWalletInDelegationResponseBody200OneOf2DelegationNextChanges_at" (\obj -> (GHC.Base.pure PatchSharedWalletInDelegationResponseBody200OneOf2DelegationNextChanges_at GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "epoch_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "epoch_start_time"))
-- | Create a new 'PatchSharedWalletInDelegationResponseBody200OneOf2DelegationNextChanges_at' with all required fields.
mkPatchSharedWalletInDelegationResponseBody200OneOf2DelegationNextChanges_at :: GHC.Types.Int -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf2DelegationNextChanges_atEpoch_number'
  -> Data.Text.Internal.Text -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf2DelegationNextChanges_atEpoch_start_time'
  -> PatchSharedWalletInDelegationResponseBody200OneOf2DelegationNextChanges_at
mkPatchSharedWalletInDelegationResponseBody200OneOf2DelegationNextChanges_at patchSharedWalletInDelegationResponseBody200OneOf2DelegationNextChanges_atEpoch_number patchSharedWalletInDelegationResponseBody200OneOf2DelegationNextChanges_atEpoch_start_time = PatchSharedWalletInDelegationResponseBody200OneOf2DelegationNextChanges_at{patchSharedWalletInDelegationResponseBody200OneOf2DelegationNextChanges_atEpoch_number = patchSharedWalletInDelegationResponseBody200OneOf2DelegationNextChanges_atEpoch_number,
                                                                                                                                                                                                                                                                                                                                            patchSharedWalletInDelegationResponseBody200OneOf2DelegationNextChanges_atEpoch_start_time = patchSharedWalletInDelegationResponseBody200OneOf2DelegationNextChanges_atEpoch_start_time}
-- | Defines the enum schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.200.content.application\/json.schema.oneOf.properties.delegation.properties.next.items.properties.status@ in the specification.
-- 
-- 
data PatchSharedWalletInDelegationResponseBody200OneOf2DelegationNextStatus =
   PatchSharedWalletInDelegationResponseBody200OneOf2DelegationNextStatusOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PatchSharedWalletInDelegationResponseBody200OneOf2DelegationNextStatusTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PatchSharedWalletInDelegationResponseBody200OneOf2DelegationNextStatusEnumNot_delegating -- ^ Represents the JSON value @"not_delegating"@
  | PatchSharedWalletInDelegationResponseBody200OneOf2DelegationNextStatusEnumDelegating -- ^ Represents the JSON value @"delegating"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody200OneOf2DelegationNextStatus
    where toJSON (PatchSharedWalletInDelegationResponseBody200OneOf2DelegationNextStatusOther val) = val
          toJSON (PatchSharedWalletInDelegationResponseBody200OneOf2DelegationNextStatusTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (PatchSharedWalletInDelegationResponseBody200OneOf2DelegationNextStatusEnumNot_delegating) = "not_delegating"
          toJSON (PatchSharedWalletInDelegationResponseBody200OneOf2DelegationNextStatusEnumDelegating) = "delegating"
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody200OneOf2DelegationNextStatus
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "not_delegating" -> PatchSharedWalletInDelegationResponseBody200OneOf2DelegationNextStatusEnumNot_delegating
                                            | val GHC.Classes.== "delegating" -> PatchSharedWalletInDelegationResponseBody200OneOf2DelegationNextStatusEnumDelegating
                                            | GHC.Base.otherwise -> PatchSharedWalletInDelegationResponseBody200OneOf2DelegationNextStatusOther val)
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.200.content.application\/json.schema.oneOf.properties.delegation_script_template@ in the specification.
-- 
-- 
data PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_template = PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_template {
  -- | cosigners: Map of cosigners and their account public keys. Use key as in &cosigner, eg. \"cosigner\#\"
  patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateCosigners :: Data.Aeson.Types.Internal.Object
  -- | template
  , patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplate :: PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateVariants
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_template
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["cosigners" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateCosigners obj] : ["template" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplate obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["cosigners" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateCosigners obj] : ["template" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplate obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_template
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_template" (\obj -> (GHC.Base.pure PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_template GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cosigners")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "template"))
-- | Create a new 'PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_template' with all required fields.
mkPatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_template :: Data.Aeson.Types.Internal.Object -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateCosigners'
  -> PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateVariants -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplate'
  -> PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_template
mkPatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_template patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateCosigners patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplate = PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_template{patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateCosigners = patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateCosigners,
                                                                                                                                                                                                                                                                                                                                         patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplate = patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplate}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.200.content.application\/json.schema.oneOf.properties.delegation_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf2 = PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf2 {
  -- | all: Script primitive for which all signing keys corresponding to all list cosigners\' verification keys are expected to make the script valid.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf2All :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf2
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["all" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf2All obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["all" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf2All obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf2
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf2" (\obj -> GHC.Base.pure PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf2 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "all"))
-- | Create a new 'PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf2' with all required fields.
mkPatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf2 :: [ScriptTemplateValue] -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf2All'
  -> PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf2
mkPatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf2 patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf2All = PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf2{patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf2All = patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf2All}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.200.content.application\/json.schema.oneOf.properties.delegation_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf3 = PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf3 {
  -- | any: Script primitive for which a signing key corresponding to any of the list cosigners\' verification keys is expected to make the script valid. It is equivalent to \`some\` with \`\"at_least\"=1\`.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf3Any :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf3
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["any" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf3Any obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["any" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf3Any obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf3
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf3" (\obj -> GHC.Base.pure PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf3 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "any"))
-- | Create a new 'PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf3' with all required fields.
mkPatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf3 :: [ScriptTemplateValue] -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf3Any'
  -> PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf3
mkPatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf3 patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf3Any = PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf3{patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf3Any = patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf3Any}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.200.content.application\/json.schema.oneOf.properties.delegation_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf4 = PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf4 {
  -- | some: Script primitive for which at least a given number of signing keys corresponding to the list cosigners\' verification keys are expected to make the script valid.
  patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf4Some :: PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf4Some
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf4
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["some" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf4Some obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["some" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf4Some obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf4
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf4" (\obj -> GHC.Base.pure PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf4 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "some"))
-- | Create a new 'PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf4' with all required fields.
mkPatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf4 :: PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf4Some -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf4Some'
  -> PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf4
mkPatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf4 patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf4Some = PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf4{patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf4Some = patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf4Some}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.200.content.application\/json.schema.oneOf.properties.delegation_script_template.properties.template.oneOf.properties.some@ in the specification.
-- 
-- Script primitive for which at least a given number of signing keys corresponding to the list cosigners\' verification keys are expected to make the script valid.
data PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf4Some = PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf4Some {
  -- | at_least
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 255.0
  -- * Minimum  of 1.0
  patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf4SomeAt_least :: GHC.Types.Int
  -- | from
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  , patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf4SomeFrom :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf4Some
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["at_least" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf4SomeAt_least obj] : ["from" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf4SomeFrom obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["at_least" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf4SomeAt_least obj] : ["from" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf4SomeFrom obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf4Some
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf4Some" (\obj -> (GHC.Base.pure PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf4Some GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "at_least")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "from"))
-- | Create a new 'PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf4Some' with all required fields.
mkPatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf4Some :: GHC.Types.Int -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf4SomeAt_least'
  -> [ScriptTemplateValue] -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf4SomeFrom'
  -> PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf4Some
mkPatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf4Some patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf4SomeAt_least patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf4SomeFrom = PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf4Some{patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf4SomeAt_least = patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf4SomeAt_least,
                                                                                                                                                                                                                                                                                                                                                                                                            patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf4SomeFrom = patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf4SomeFrom}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.200.content.application\/json.schema.oneOf.properties.delegation_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf5 = PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf5 {
  -- | active_from: Transaction is only valid starting at the specified slot number (\`â‰¥ active_from\`).
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf5Active_from :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf5
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["active_from" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf5Active_from obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["active_from" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf5Active_from obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf5
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf5" (\obj -> GHC.Base.pure PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf5 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active_from"))
-- | Create a new 'PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf5' with all required fields.
mkPatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf5 :: GHC.Types.Int -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf5Active_from'
  -> PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf5
mkPatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf5 patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf5Active_from = PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf5{patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf5Active_from = patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf5Active_from}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.200.content.application\/json.schema.oneOf.properties.delegation_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf6 = PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf6 {
  -- | active_until: Transaction is only valid before the specified slot number (\`\< active_until\`).
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf6Active_until :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf6
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["active_until" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf6Active_until obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["active_until" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf6Active_until obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf6
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf6" (\obj -> GHC.Base.pure PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf6 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active_until"))
-- | Create a new 'PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf6' with all required fields.
mkPatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf6 :: GHC.Types.Int -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf6Active_until'
  -> PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf6
mkPatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf6 patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf6Active_until = PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf6{patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf6Active_until = patchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf6Active_until}
-- | Defines the oneOf schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.200.content.application\/json.schema.oneOf.properties.delegation_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateVariants =
   PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateVariant1 Data.Text.Internal.Text
  | PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateVariant2 PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf2
  | PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateVariant3 PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf3
  | PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateVariant4 PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf4
  | PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateVariant5 PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf5
  | PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateVariant6 PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateOneOf6
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateVariants
    where toJSON (PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateVariant1 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateVariant2 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateVariant3 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateVariant4 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateVariant5 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateVariant6 a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateVariants
    where parseJSON val = case (PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateVariant1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateVariant2 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateVariant3 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateVariant4 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateVariant5 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PatchSharedWalletInDelegationResponseBody200OneOf2Delegation_script_templateTemplateVariant6 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched"))))) of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.200.content.application\/json.schema.oneOf.properties.passphrase@ in the specification.
-- 
-- Information about the wallet\'s passphrase
data PatchSharedWalletInDelegationResponseBody200OneOf2Passphrase = PatchSharedWalletInDelegationResponseBody200OneOf2Passphrase {
  -- | last_updated_at
  patchSharedWalletInDelegationResponseBody200OneOf2PassphraseLast_updated_at :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody200OneOf2Passphrase
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["last_updated_at" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2PassphraseLast_updated_at obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["last_updated_at" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2PassphraseLast_updated_at obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody200OneOf2Passphrase
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchSharedWalletInDelegationResponseBody200OneOf2Passphrase" (\obj -> GHC.Base.pure PatchSharedWalletInDelegationResponseBody200OneOf2Passphrase GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "last_updated_at"))
-- | Create a new 'PatchSharedWalletInDelegationResponseBody200OneOf2Passphrase' with all required fields.
mkPatchSharedWalletInDelegationResponseBody200OneOf2Passphrase :: Data.Text.Internal.Text -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf2PassphraseLast_updated_at'
  -> PatchSharedWalletInDelegationResponseBody200OneOf2Passphrase
mkPatchSharedWalletInDelegationResponseBody200OneOf2Passphrase patchSharedWalletInDelegationResponseBody200OneOf2PassphraseLast_updated_at = PatchSharedWalletInDelegationResponseBody200OneOf2Passphrase{patchSharedWalletInDelegationResponseBody200OneOf2PassphraseLast_updated_at = patchSharedWalletInDelegationResponseBody200OneOf2PassphraseLast_updated_at}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.200.content.application\/json.schema.oneOf.properties.payment_script_template@ in the specification.
-- 
-- 
data PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_template = PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_template {
  -- | cosigners: Map of cosigners and their account public keys. Use key as in &cosigner, eg. \"cosigner\#\"
  patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateCosigners :: Data.Aeson.Types.Internal.Object
  -- | template
  , patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplate :: PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateVariants
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_template
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["cosigners" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateCosigners obj] : ["template" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplate obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["cosigners" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateCosigners obj] : ["template" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplate obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_template
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_template" (\obj -> (GHC.Base.pure PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_template GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cosigners")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "template"))
-- | Create a new 'PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_template' with all required fields.
mkPatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_template :: Data.Aeson.Types.Internal.Object -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateCosigners'
  -> PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateVariants -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplate'
  -> PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_template
mkPatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_template patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateCosigners patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplate = PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_template{patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateCosigners = patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateCosigners,
                                                                                                                                                                                                                                                                                                                             patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplate = patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplate}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.200.content.application\/json.schema.oneOf.properties.payment_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf2 = PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf2 {
  -- | all: Script primitive for which all signing keys corresponding to all list cosigners\' verification keys are expected to make the script valid.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf2All :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf2
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["all" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf2All obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["all" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf2All obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf2
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf2" (\obj -> GHC.Base.pure PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf2 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "all"))
-- | Create a new 'PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf2' with all required fields.
mkPatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf2 :: [ScriptTemplateValue] -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf2All'
  -> PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf2
mkPatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf2 patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf2All = PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf2{patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf2All = patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf2All}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.200.content.application\/json.schema.oneOf.properties.payment_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf3 = PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf3 {
  -- | any: Script primitive for which a signing key corresponding to any of the list cosigners\' verification keys is expected to make the script valid. It is equivalent to \`some\` with \`\"at_least\"=1\`.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf3Any :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf3
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["any" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf3Any obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["any" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf3Any obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf3
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf3" (\obj -> GHC.Base.pure PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf3 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "any"))
-- | Create a new 'PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf3' with all required fields.
mkPatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf3 :: [ScriptTemplateValue] -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf3Any'
  -> PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf3
mkPatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf3 patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf3Any = PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf3{patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf3Any = patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf3Any}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.200.content.application\/json.schema.oneOf.properties.payment_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf4 = PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf4 {
  -- | some: Script primitive for which at least a given number of signing keys corresponding to the list cosigners\' verification keys are expected to make the script valid.
  patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf4Some :: PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf4Some
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf4
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["some" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf4Some obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["some" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf4Some obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf4
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf4" (\obj -> GHC.Base.pure PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf4 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "some"))
-- | Create a new 'PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf4' with all required fields.
mkPatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf4 :: PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf4Some -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf4Some'
  -> PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf4
mkPatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf4 patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf4Some = PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf4{patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf4Some = patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf4Some}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.200.content.application\/json.schema.oneOf.properties.payment_script_template.properties.template.oneOf.properties.some@ in the specification.
-- 
-- Script primitive for which at least a given number of signing keys corresponding to the list cosigners\' verification keys are expected to make the script valid.
data PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf4Some = PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf4Some {
  -- | at_least
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 255.0
  -- * Minimum  of 1.0
  patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf4SomeAt_least :: GHC.Types.Int
  -- | from
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  , patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf4SomeFrom :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf4Some
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["at_least" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf4SomeAt_least obj] : ["from" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf4SomeFrom obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["at_least" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf4SomeAt_least obj] : ["from" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf4SomeFrom obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf4Some
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf4Some" (\obj -> (GHC.Base.pure PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf4Some GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "at_least")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "from"))
-- | Create a new 'PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf4Some' with all required fields.
mkPatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf4Some :: GHC.Types.Int -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf4SomeAt_least'
  -> [ScriptTemplateValue] -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf4SomeFrom'
  -> PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf4Some
mkPatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf4Some patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf4SomeAt_least patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf4SomeFrom = PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf4Some{patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf4SomeAt_least = patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf4SomeAt_least,
                                                                                                                                                                                                                                                                                                                                                                                                patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf4SomeFrom = patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf4SomeFrom}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.200.content.application\/json.schema.oneOf.properties.payment_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf5 = PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf5 {
  -- | active_from: Transaction is only valid starting at the specified slot number (\`â‰¥ active_from\`).
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf5Active_from :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf5
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["active_from" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf5Active_from obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["active_from" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf5Active_from obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf5
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf5" (\obj -> GHC.Base.pure PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf5 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active_from"))
-- | Create a new 'PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf5' with all required fields.
mkPatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf5 :: GHC.Types.Int -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf5Active_from'
  -> PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf5
mkPatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf5 patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf5Active_from = PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf5{patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf5Active_from = patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf5Active_from}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.200.content.application\/json.schema.oneOf.properties.payment_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf6 = PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf6 {
  -- | active_until: Transaction is only valid before the specified slot number (\`\< active_until\`).
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf6Active_until :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf6
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["active_until" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf6Active_until obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["active_until" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf6Active_until obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf6
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf6" (\obj -> GHC.Base.pure PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf6 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active_until"))
-- | Create a new 'PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf6' with all required fields.
mkPatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf6 :: GHC.Types.Int -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf6Active_until'
  -> PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf6
mkPatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf6 patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf6Active_until = PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf6{patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf6Active_until = patchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf6Active_until}
-- | Defines the oneOf schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.200.content.application\/json.schema.oneOf.properties.payment_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateVariants =
   PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateVariant1 Data.Text.Internal.Text
  | PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateVariant2 PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf2
  | PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateVariant3 PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf3
  | PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateVariant4 PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf4
  | PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateVariant5 PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf5
  | PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateVariant6 PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateOneOf6
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateVariants
    where toJSON (PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateVariant1 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateVariant2 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateVariant3 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateVariant4 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateVariant5 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateVariant6 a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateVariants
    where parseJSON val = case (PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateVariant1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateVariant2 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateVariant3 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateVariant4 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateVariant5 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PatchSharedWalletInDelegationResponseBody200OneOf2Payment_script_templateTemplateVariant6 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched"))))) of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.200.content.application\/json.schema.oneOf.properties.state@ in the specification.
-- 
-- Whether a wallet is ready to use or still syncing
data PatchSharedWalletInDelegationResponseBody200OneOf2State = PatchSharedWalletInDelegationResponseBody200OneOf2State {
  -- | progress: \<span style=\"position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;\">
  -- \<strong>if:\<\/strong> status == syncing
  -- \<\/span>\<br\/>
  patchSharedWalletInDelegationResponseBody200OneOf2StateProgress :: (GHC.Maybe.Maybe PatchSharedWalletInDelegationResponseBody200OneOf2StateProgress)
  -- | status
  , patchSharedWalletInDelegationResponseBody200OneOf2StateStatus :: PatchSharedWalletInDelegationResponseBody200OneOf2StateStatus
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody200OneOf2State
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("progress" Data.Aeson.Types.ToJSON..=)) (patchSharedWalletInDelegationResponseBody200OneOf2StateProgress obj) : ["status" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2StateStatus obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("progress" Data.Aeson.Types.ToJSON..=)) (patchSharedWalletInDelegationResponseBody200OneOf2StateProgress obj) : ["status" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2StateStatus obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody200OneOf2State
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchSharedWalletInDelegationResponseBody200OneOf2State" (\obj -> (GHC.Base.pure PatchSharedWalletInDelegationResponseBody200OneOf2State GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "progress")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))
-- | Create a new 'PatchSharedWalletInDelegationResponseBody200OneOf2State' with all required fields.
mkPatchSharedWalletInDelegationResponseBody200OneOf2State :: PatchSharedWalletInDelegationResponseBody200OneOf2StateStatus -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf2StateStatus'
  -> PatchSharedWalletInDelegationResponseBody200OneOf2State
mkPatchSharedWalletInDelegationResponseBody200OneOf2State patchSharedWalletInDelegationResponseBody200OneOf2StateStatus = PatchSharedWalletInDelegationResponseBody200OneOf2State{patchSharedWalletInDelegationResponseBody200OneOf2StateProgress = GHC.Maybe.Nothing,
                                                                                                                                                                                  patchSharedWalletInDelegationResponseBody200OneOf2StateStatus = patchSharedWalletInDelegationResponseBody200OneOf2StateStatus}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.200.content.application\/json.schema.oneOf.properties.state.properties.progress@ in the specification.
-- 
-- \<span style=\"position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;\">
-- \<strong>if:\<\/strong> status == syncing
-- \<\/span>\<br\/>
data PatchSharedWalletInDelegationResponseBody200OneOf2StateProgress = PatchSharedWalletInDelegationResponseBody200OneOf2StateProgress {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  -- * Minimum  of 0.0
  patchSharedWalletInDelegationResponseBody200OneOf2StateProgressQuantity :: GHC.Types.Double
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody200OneOf2StateProgress
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2StateProgressQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "percent"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2StateProgressQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "percent"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody200OneOf2StateProgress
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchSharedWalletInDelegationResponseBody200OneOf2StateProgress" (\obj -> GHC.Base.pure PatchSharedWalletInDelegationResponseBody200OneOf2StateProgress GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'PatchSharedWalletInDelegationResponseBody200OneOf2StateProgress' with all required fields.
mkPatchSharedWalletInDelegationResponseBody200OneOf2StateProgress :: GHC.Types.Double -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf2StateProgressQuantity'
  -> PatchSharedWalletInDelegationResponseBody200OneOf2StateProgress
mkPatchSharedWalletInDelegationResponseBody200OneOf2StateProgress patchSharedWalletInDelegationResponseBody200OneOf2StateProgressQuantity = PatchSharedWalletInDelegationResponseBody200OneOf2StateProgress{patchSharedWalletInDelegationResponseBody200OneOf2StateProgressQuantity = patchSharedWalletInDelegationResponseBody200OneOf2StateProgressQuantity}
-- | Defines the enum schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.200.content.application\/json.schema.oneOf.properties.state.properties.status@ in the specification.
-- 
-- 
data PatchSharedWalletInDelegationResponseBody200OneOf2StateStatus =
   PatchSharedWalletInDelegationResponseBody200OneOf2StateStatusOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PatchSharedWalletInDelegationResponseBody200OneOf2StateStatusTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PatchSharedWalletInDelegationResponseBody200OneOf2StateStatusEnumReady -- ^ Represents the JSON value @"ready"@
  | PatchSharedWalletInDelegationResponseBody200OneOf2StateStatusEnumSyncing -- ^ Represents the JSON value @"syncing"@
  | PatchSharedWalletInDelegationResponseBody200OneOf2StateStatusEnumNot_responding -- ^ Represents the JSON value @"not_responding"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody200OneOf2StateStatus
    where toJSON (PatchSharedWalletInDelegationResponseBody200OneOf2StateStatusOther val) = val
          toJSON (PatchSharedWalletInDelegationResponseBody200OneOf2StateStatusTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (PatchSharedWalletInDelegationResponseBody200OneOf2StateStatusEnumReady) = "ready"
          toJSON (PatchSharedWalletInDelegationResponseBody200OneOf2StateStatusEnumSyncing) = "syncing"
          toJSON (PatchSharedWalletInDelegationResponseBody200OneOf2StateStatusEnumNot_responding) = "not_responding"
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody200OneOf2StateStatus
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "ready" -> PatchSharedWalletInDelegationResponseBody200OneOf2StateStatusEnumReady
                                            | val GHC.Classes.== "syncing" -> PatchSharedWalletInDelegationResponseBody200OneOf2StateStatusEnumSyncing
                                            | val GHC.Classes.== "not_responding" -> PatchSharedWalletInDelegationResponseBody200OneOf2StateStatusEnumNot_responding
                                            | GHC.Base.otherwise -> PatchSharedWalletInDelegationResponseBody200OneOf2StateStatusOther val)
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.200.content.application\/json.schema.oneOf.properties.tip@ in the specification.
-- 
-- A reference to a particular time slot, and the block height at that point.
data PatchSharedWalletInDelegationResponseBody200OneOf2Tip = PatchSharedWalletInDelegationResponseBody200OneOf2Tip {
  -- | absolute_slot_number: The 0-based slot index starting from genesis of the blockchain.
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  patchSharedWalletInDelegationResponseBody200OneOf2TipAbsolute_slot_number :: GHC.Types.Int
  -- | epoch_number: An epoch is a time period which is divided into slots.
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , patchSharedWalletInDelegationResponseBody200OneOf2TipEpoch_number :: GHC.Types.Int
  -- | height
  , patchSharedWalletInDelegationResponseBody200OneOf2TipHeight :: PatchSharedWalletInDelegationResponseBody200OneOf2TipHeight
  -- | slot_number: The zero-based slot index within an epoch.
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , patchSharedWalletInDelegationResponseBody200OneOf2TipSlot_number :: GHC.Types.Int
  -- | time
  , patchSharedWalletInDelegationResponseBody200OneOf2TipTime :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody200OneOf2Tip
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["absolute_slot_number" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2TipAbsolute_slot_number obj] : ["epoch_number" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2TipEpoch_number obj] : ["height" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2TipHeight obj] : ["slot_number" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2TipSlot_number obj] : ["time" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2TipTime obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["absolute_slot_number" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2TipAbsolute_slot_number obj] : ["epoch_number" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2TipEpoch_number obj] : ["height" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2TipHeight obj] : ["slot_number" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2TipSlot_number obj] : ["time" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2TipTime obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody200OneOf2Tip
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchSharedWalletInDelegationResponseBody200OneOf2Tip" (\obj -> ((((GHC.Base.pure PatchSharedWalletInDelegationResponseBody200OneOf2Tip GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "absolute_slot_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "epoch_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "height")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "slot_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "time"))
-- | Create a new 'PatchSharedWalletInDelegationResponseBody200OneOf2Tip' with all required fields.
mkPatchSharedWalletInDelegationResponseBody200OneOf2Tip :: GHC.Types.Int -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf2TipAbsolute_slot_number'
  -> GHC.Types.Int -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf2TipEpoch_number'
  -> PatchSharedWalletInDelegationResponseBody200OneOf2TipHeight -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf2TipHeight'
  -> GHC.Types.Int -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf2TipSlot_number'
  -> Data.Text.Internal.Text -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf2TipTime'
  -> PatchSharedWalletInDelegationResponseBody200OneOf2Tip
mkPatchSharedWalletInDelegationResponseBody200OneOf2Tip patchSharedWalletInDelegationResponseBody200OneOf2TipAbsolute_slot_number patchSharedWalletInDelegationResponseBody200OneOf2TipEpoch_number patchSharedWalletInDelegationResponseBody200OneOf2TipHeight patchSharedWalletInDelegationResponseBody200OneOf2TipSlot_number patchSharedWalletInDelegationResponseBody200OneOf2TipTime = PatchSharedWalletInDelegationResponseBody200OneOf2Tip{patchSharedWalletInDelegationResponseBody200OneOf2TipAbsolute_slot_number = patchSharedWalletInDelegationResponseBody200OneOf2TipAbsolute_slot_number,
                                                                                                                                                                                                                                                                                                                                                                                                                                                   patchSharedWalletInDelegationResponseBody200OneOf2TipEpoch_number = patchSharedWalletInDelegationResponseBody200OneOf2TipEpoch_number,
                                                                                                                                                                                                                                                                                                                                                                                                                                                   patchSharedWalletInDelegationResponseBody200OneOf2TipHeight = patchSharedWalletInDelegationResponseBody200OneOf2TipHeight,
                                                                                                                                                                                                                                                                                                                                                                                                                                                   patchSharedWalletInDelegationResponseBody200OneOf2TipSlot_number = patchSharedWalletInDelegationResponseBody200OneOf2TipSlot_number,
                                                                                                                                                                                                                                                                                                                                                                                                                                                   patchSharedWalletInDelegationResponseBody200OneOf2TipTime = patchSharedWalletInDelegationResponseBody200OneOf2TipTime}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.200.content.application\/json.schema.oneOf.properties.tip.properties.height@ in the specification.
-- 
-- 
data PatchSharedWalletInDelegationResponseBody200OneOf2TipHeight = PatchSharedWalletInDelegationResponseBody200OneOf2TipHeight {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  patchSharedWalletInDelegationResponseBody200OneOf2TipHeightQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody200OneOf2TipHeight
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2TipHeightQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "block"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody200OneOf2TipHeightQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "block"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody200OneOf2TipHeight
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchSharedWalletInDelegationResponseBody200OneOf2TipHeight" (\obj -> GHC.Base.pure PatchSharedWalletInDelegationResponseBody200OneOf2TipHeight GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'PatchSharedWalletInDelegationResponseBody200OneOf2TipHeight' with all required fields.
mkPatchSharedWalletInDelegationResponseBody200OneOf2TipHeight :: GHC.Types.Int -- ^ 'patchSharedWalletInDelegationResponseBody200OneOf2TipHeightQuantity'
  -> PatchSharedWalletInDelegationResponseBody200OneOf2TipHeight
mkPatchSharedWalletInDelegationResponseBody200OneOf2TipHeight patchSharedWalletInDelegationResponseBody200OneOf2TipHeightQuantity = PatchSharedWalletInDelegationResponseBody200OneOf2TipHeight{patchSharedWalletInDelegationResponseBody200OneOf2TipHeightQuantity = patchSharedWalletInDelegationResponseBody200OneOf2TipHeightQuantity}
-- | Defines the oneOf schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.200.content.application\/json.schema.oneOf@ in the specification.
-- 
-- 
data PatchSharedWalletInDelegationResponseBody200Variants =
   PatchSharedWalletInDelegationResponseBody200Variant1 PatchSharedWalletInDelegationResponseBody200OneOf1
  | PatchSharedWalletInDelegationResponseBody200Variant2 PatchSharedWalletInDelegationResponseBody200OneOf2
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody200Variants
    where toJSON (PatchSharedWalletInDelegationResponseBody200Variant1 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PatchSharedWalletInDelegationResponseBody200Variant2 a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody200Variants
    where parseJSON val = case (PatchSharedWalletInDelegationResponseBody200Variant1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PatchSharedWalletInDelegationResponseBody200Variant2 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.400.content.application\/json.schema@ in the specification.
-- 
-- 
data PatchSharedWalletInDelegationResponseBody400 = PatchSharedWalletInDelegationResponseBody400 {
  -- | message: May occur when a request is not well-formed; that is, it fails to parse
  -- successfully. This could be the case when some required parameters
  -- are missing or, when malformed values are provided.
  patchSharedWalletInDelegationResponseBody400Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody400Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "bad_request"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody400Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "bad_request"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchSharedWalletInDelegationResponseBody400" (\obj -> GHC.Base.pure PatchSharedWalletInDelegationResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'PatchSharedWalletInDelegationResponseBody400' with all required fields.
mkPatchSharedWalletInDelegationResponseBody400 :: Data.Text.Internal.Text -- ^ 'patchSharedWalletInDelegationResponseBody400Message'
  -> PatchSharedWalletInDelegationResponseBody400
mkPatchSharedWalletInDelegationResponseBody400 patchSharedWalletInDelegationResponseBody400Message = PatchSharedWalletInDelegationResponseBody400{patchSharedWalletInDelegationResponseBody400Message = patchSharedWalletInDelegationResponseBody400Message}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.403.content.application\/json.schema.oneOf@ in the specification.
-- 
-- 
data PatchSharedWalletInDelegationResponseBody403OneOf1 = PatchSharedWalletInDelegationResponseBody403OneOf1 {
  -- | message: Returned when a user tries to add cosigner key to a shared wallet
  -- but the same key is already present in a given template.
  patchSharedWalletInDelegationResponseBody403OneOf1Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody403OneOf1
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody403OneOf1Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "shared_wallet_key_already_exists"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody403OneOf1Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "shared_wallet_key_already_exists"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody403OneOf1
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchSharedWalletInDelegationResponseBody403OneOf1" (\obj -> GHC.Base.pure PatchSharedWalletInDelegationResponseBody403OneOf1 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'PatchSharedWalletInDelegationResponseBody403OneOf1' with all required fields.
mkPatchSharedWalletInDelegationResponseBody403OneOf1 :: Data.Text.Internal.Text -- ^ 'patchSharedWalletInDelegationResponseBody403OneOf1Message'
  -> PatchSharedWalletInDelegationResponseBody403OneOf1
mkPatchSharedWalletInDelegationResponseBody403OneOf1 patchSharedWalletInDelegationResponseBody403OneOf1Message = PatchSharedWalletInDelegationResponseBody403OneOf1{patchSharedWalletInDelegationResponseBody403OneOf1Message = patchSharedWalletInDelegationResponseBody403OneOf1Message}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.403.content.application\/json.schema.oneOf@ in the specification.
-- 
-- 
data PatchSharedWalletInDelegationResponseBody403OneOf2 = PatchSharedWalletInDelegationResponseBody403OneOf2 {
  -- | message: Returned when a user tries to add cosigner key to a shared wallet
  -- for delegation, but the shared wallet misses the delegation template.
  patchSharedWalletInDelegationResponseBody403OneOf2Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody403OneOf2
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody403OneOf2Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "shared_wallet_no_delegation_template"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody403OneOf2Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "shared_wallet_no_delegation_template"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody403OneOf2
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchSharedWalletInDelegationResponseBody403OneOf2" (\obj -> GHC.Base.pure PatchSharedWalletInDelegationResponseBody403OneOf2 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'PatchSharedWalletInDelegationResponseBody403OneOf2' with all required fields.
mkPatchSharedWalletInDelegationResponseBody403OneOf2 :: Data.Text.Internal.Text -- ^ 'patchSharedWalletInDelegationResponseBody403OneOf2Message'
  -> PatchSharedWalletInDelegationResponseBody403OneOf2
mkPatchSharedWalletInDelegationResponseBody403OneOf2 patchSharedWalletInDelegationResponseBody403OneOf2Message = PatchSharedWalletInDelegationResponseBody403OneOf2{patchSharedWalletInDelegationResponseBody403OneOf2Message = patchSharedWalletInDelegationResponseBody403OneOf2Message}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.403.content.application\/json.schema.oneOf@ in the specification.
-- 
-- 
data PatchSharedWalletInDelegationResponseBody403OneOf3 = PatchSharedWalletInDelegationResponseBody403OneOf3 {
  -- | message: Returned when a user tries to add cosigner key to a shared wallet
  -- that is active, not incomplete anymore.
  patchSharedWalletInDelegationResponseBody403OneOf3Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody403OneOf3
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody403OneOf3Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "shared_wallet_active"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody403OneOf3Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "shared_wallet_active"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody403OneOf3
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchSharedWalletInDelegationResponseBody403OneOf3" (\obj -> GHC.Base.pure PatchSharedWalletInDelegationResponseBody403OneOf3 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'PatchSharedWalletInDelegationResponseBody403OneOf3' with all required fields.
mkPatchSharedWalletInDelegationResponseBody403OneOf3 :: Data.Text.Internal.Text -- ^ 'patchSharedWalletInDelegationResponseBody403OneOf3Message'
  -> PatchSharedWalletInDelegationResponseBody403OneOf3
mkPatchSharedWalletInDelegationResponseBody403OneOf3 patchSharedWalletInDelegationResponseBody403OneOf3Message = PatchSharedWalletInDelegationResponseBody403OneOf3{patchSharedWalletInDelegationResponseBody403OneOf3Message = patchSharedWalletInDelegationResponseBody403OneOf3Message}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.403.content.application\/json.schema.oneOf@ in the specification.
-- 
-- 
data PatchSharedWalletInDelegationResponseBody403OneOf4 = PatchSharedWalletInDelegationResponseBody403OneOf4 {
  -- | info
  patchSharedWalletInDelegationResponseBody403OneOf4Info :: (GHC.Maybe.Maybe PatchSharedWalletInDelegationResponseBody403OneOf4Info)
  -- | message: Returned when a user tries to add cosigner key to a shared wallet
  -- in script template that misses the cosigner.
  , patchSharedWalletInDelegationResponseBody403OneOf4Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody403OneOf4
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("info" Data.Aeson.Types.ToJSON..=)) (patchSharedWalletInDelegationResponseBody403OneOf4Info obj) : ["message" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody403OneOf4Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "shared_wallet_no_such_cosigner"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("info" Data.Aeson.Types.ToJSON..=)) (patchSharedWalletInDelegationResponseBody403OneOf4Info obj) : ["message" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody403OneOf4Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "shared_wallet_no_such_cosigner"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody403OneOf4
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchSharedWalletInDelegationResponseBody403OneOf4" (\obj -> (GHC.Base.pure PatchSharedWalletInDelegationResponseBody403OneOf4 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "info")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'PatchSharedWalletInDelegationResponseBody403OneOf4' with all required fields.
mkPatchSharedWalletInDelegationResponseBody403OneOf4 :: Data.Text.Internal.Text -- ^ 'patchSharedWalletInDelegationResponseBody403OneOf4Message'
  -> PatchSharedWalletInDelegationResponseBody403OneOf4
mkPatchSharedWalletInDelegationResponseBody403OneOf4 patchSharedWalletInDelegationResponseBody403OneOf4Message = PatchSharedWalletInDelegationResponseBody403OneOf4{patchSharedWalletInDelegationResponseBody403OneOf4Info = GHC.Maybe.Nothing,
                                                                                                                                                                    patchSharedWalletInDelegationResponseBody403OneOf4Message = patchSharedWalletInDelegationResponseBody403OneOf4Message}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.403.content.application\/json.schema.oneOf.properties.info@ in the specification.
-- 
-- 
data PatchSharedWalletInDelegationResponseBody403OneOf4Info = PatchSharedWalletInDelegationResponseBody403OneOf4Info {
  -- | cosigner_index
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 255.0
  -- * Minimum  of 0.0
  patchSharedWalletInDelegationResponseBody403OneOf4InfoCosigner_index :: GHC.Types.Int
  -- | credential_type
  , patchSharedWalletInDelegationResponseBody403OneOf4InfoCredential_type :: PatchSharedWalletInDelegationResponseBody403OneOf4InfoCredential_type
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody403OneOf4Info
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["cosigner_index" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody403OneOf4InfoCosigner_index obj] : ["credential_type" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody403OneOf4InfoCredential_type obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["cosigner_index" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody403OneOf4InfoCosigner_index obj] : ["credential_type" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody403OneOf4InfoCredential_type obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody403OneOf4Info
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchSharedWalletInDelegationResponseBody403OneOf4Info" (\obj -> (GHC.Base.pure PatchSharedWalletInDelegationResponseBody403OneOf4Info GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cosigner_index")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "credential_type"))
-- | Create a new 'PatchSharedWalletInDelegationResponseBody403OneOf4Info' with all required fields.
mkPatchSharedWalletInDelegationResponseBody403OneOf4Info :: GHC.Types.Int -- ^ 'patchSharedWalletInDelegationResponseBody403OneOf4InfoCosigner_index'
  -> PatchSharedWalletInDelegationResponseBody403OneOf4InfoCredential_type -- ^ 'patchSharedWalletInDelegationResponseBody403OneOf4InfoCredential_type'
  -> PatchSharedWalletInDelegationResponseBody403OneOf4Info
mkPatchSharedWalletInDelegationResponseBody403OneOf4Info patchSharedWalletInDelegationResponseBody403OneOf4InfoCosigner_index patchSharedWalletInDelegationResponseBody403OneOf4InfoCredential_type = PatchSharedWalletInDelegationResponseBody403OneOf4Info{patchSharedWalletInDelegationResponseBody403OneOf4InfoCosigner_index = patchSharedWalletInDelegationResponseBody403OneOf4InfoCosigner_index,
                                                                                                                                                                                                                                                             patchSharedWalletInDelegationResponseBody403OneOf4InfoCredential_type = patchSharedWalletInDelegationResponseBody403OneOf4InfoCredential_type}
-- | Defines the enum schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.403.content.application\/json.schema.oneOf.properties.info.properties.credential_type@ in the specification.
-- 
-- 
data PatchSharedWalletInDelegationResponseBody403OneOf4InfoCredential_type =
   PatchSharedWalletInDelegationResponseBody403OneOf4InfoCredential_typeOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PatchSharedWalletInDelegationResponseBody403OneOf4InfoCredential_typeTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PatchSharedWalletInDelegationResponseBody403OneOf4InfoCredential_typeEnumDelegation -- ^ Represents the JSON value @"delegation"@
  | PatchSharedWalletInDelegationResponseBody403OneOf4InfoCredential_typeEnumPayment -- ^ Represents the JSON value @"payment"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody403OneOf4InfoCredential_type
    where toJSON (PatchSharedWalletInDelegationResponseBody403OneOf4InfoCredential_typeOther val) = val
          toJSON (PatchSharedWalletInDelegationResponseBody403OneOf4InfoCredential_typeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (PatchSharedWalletInDelegationResponseBody403OneOf4InfoCredential_typeEnumDelegation) = "delegation"
          toJSON (PatchSharedWalletInDelegationResponseBody403OneOf4InfoCredential_typeEnumPayment) = "payment"
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody403OneOf4InfoCredential_type
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "delegation" -> PatchSharedWalletInDelegationResponseBody403OneOf4InfoCredential_typeEnumDelegation
                                            | val GHC.Classes.== "payment" -> PatchSharedWalletInDelegationResponseBody403OneOf4InfoCredential_typeEnumPayment
                                            | GHC.Base.otherwise -> PatchSharedWalletInDelegationResponseBody403OneOf4InfoCredential_typeOther val)
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.403.content.application\/json.schema.oneOf@ in the specification.
-- 
-- 
data PatchSharedWalletInDelegationResponseBody403OneOf5 = PatchSharedWalletInDelegationResponseBody403OneOf5 {
  -- | message: Returned when a user tries to update cosigner key that contains a key of a shared wallet.
  -- Only other cosigner keys can be updated.
  patchSharedWalletInDelegationResponseBody403OneOf5Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody403OneOf5
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody403OneOf5Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "shared_wallet_cannot_update_key"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody403OneOf5Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "shared_wallet_cannot_update_key"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody403OneOf5
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchSharedWalletInDelegationResponseBody403OneOf5" (\obj -> GHC.Base.pure PatchSharedWalletInDelegationResponseBody403OneOf5 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'PatchSharedWalletInDelegationResponseBody403OneOf5' with all required fields.
mkPatchSharedWalletInDelegationResponseBody403OneOf5 :: Data.Text.Internal.Text -- ^ 'patchSharedWalletInDelegationResponseBody403OneOf5Message'
  -> PatchSharedWalletInDelegationResponseBody403OneOf5
mkPatchSharedWalletInDelegationResponseBody403OneOf5 patchSharedWalletInDelegationResponseBody403OneOf5Message = PatchSharedWalletInDelegationResponseBody403OneOf5{patchSharedWalletInDelegationResponseBody403OneOf5Message = patchSharedWalletInDelegationResponseBody403OneOf5Message}
-- | Defines the oneOf schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.403.content.application\/json.schema.oneOf@ in the specification.
-- 
-- 
data PatchSharedWalletInDelegationResponseBody403Variants =
   PatchSharedWalletInDelegationResponseBody403Variant1 PatchSharedWalletInDelegationResponseBody403OneOf1
  | PatchSharedWalletInDelegationResponseBody403Variant2 PatchSharedWalletInDelegationResponseBody403OneOf2
  | PatchSharedWalletInDelegationResponseBody403Variant3 PatchSharedWalletInDelegationResponseBody403OneOf3
  | PatchSharedWalletInDelegationResponseBody403Variant4 PatchSharedWalletInDelegationResponseBody403OneOf4
  | PatchSharedWalletInDelegationResponseBody403Variant5 PatchSharedWalletInDelegationResponseBody403OneOf5
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody403Variants
    where toJSON (PatchSharedWalletInDelegationResponseBody403Variant1 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PatchSharedWalletInDelegationResponseBody403Variant2 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PatchSharedWalletInDelegationResponseBody403Variant3 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PatchSharedWalletInDelegationResponseBody403Variant4 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PatchSharedWalletInDelegationResponseBody403Variant5 a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody403Variants
    where parseJSON val = case (PatchSharedWalletInDelegationResponseBody403Variant1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PatchSharedWalletInDelegationResponseBody403Variant2 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PatchSharedWalletInDelegationResponseBody403Variant3 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PatchSharedWalletInDelegationResponseBody403Variant4 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PatchSharedWalletInDelegationResponseBody403Variant5 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched")))) of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.404.content.application\/json.schema@ in the specification.
-- 
-- 
data PatchSharedWalletInDelegationResponseBody404 = PatchSharedWalletInDelegationResponseBody404 {
  -- | message: May occur when a given walletId does not match with any known
  -- wallets (because it has been deleted, or has never existed).
  patchSharedWalletInDelegationResponseBody404Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody404Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "no_such_wallet"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody404Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "no_such_wallet"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchSharedWalletInDelegationResponseBody404" (\obj -> GHC.Base.pure PatchSharedWalletInDelegationResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'PatchSharedWalletInDelegationResponseBody404' with all required fields.
mkPatchSharedWalletInDelegationResponseBody404 :: Data.Text.Internal.Text -- ^ 'patchSharedWalletInDelegationResponseBody404Message'
  -> PatchSharedWalletInDelegationResponseBody404
mkPatchSharedWalletInDelegationResponseBody404 patchSharedWalletInDelegationResponseBody404Message = PatchSharedWalletInDelegationResponseBody404{patchSharedWalletInDelegationResponseBody404Message = patchSharedWalletInDelegationResponseBody404Message}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.406.content.application\/json.schema@ in the specification.
-- 
-- 
data PatchSharedWalletInDelegationResponseBody406 = PatchSharedWalletInDelegationResponseBody406 {
  -- | message: May occur when providing an invalid \'Accept\' header.
  patchSharedWalletInDelegationResponseBody406Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody406
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody406Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "not_acceptable"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody406Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "not_acceptable"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody406
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchSharedWalletInDelegationResponseBody406" (\obj -> GHC.Base.pure PatchSharedWalletInDelegationResponseBody406 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'PatchSharedWalletInDelegationResponseBody406' with all required fields.
mkPatchSharedWalletInDelegationResponseBody406 :: Data.Text.Internal.Text -- ^ 'patchSharedWalletInDelegationResponseBody406Message'
  -> PatchSharedWalletInDelegationResponseBody406
mkPatchSharedWalletInDelegationResponseBody406 patchSharedWalletInDelegationResponseBody406Message = PatchSharedWalletInDelegationResponseBody406{patchSharedWalletInDelegationResponseBody406Message = patchSharedWalletInDelegationResponseBody406Message}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/delegation-script-template.PATCH.responses.503.content.application\/json.schema@ in the specification.
-- 
-- 
data PatchSharedWalletInDelegationResponseBody503 = PatchSharedWalletInDelegationResponseBody503 {
  -- | message: Indicates that it was not possible to find any metadata for the given
  -- wallet within the database.
  -- 
  -- May occur when a shared wallet has not yet become active after being in
  -- the incomplete state.
  patchSharedWalletInDelegationResponseBody503Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PatchSharedWalletInDelegationResponseBody503
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody503Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "wallet_metadata_not_found"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= patchSharedWalletInDelegationResponseBody503Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "wallet_metadata_not_found"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PatchSharedWalletInDelegationResponseBody503
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchSharedWalletInDelegationResponseBody503" (\obj -> GHC.Base.pure PatchSharedWalletInDelegationResponseBody503 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'PatchSharedWalletInDelegationResponseBody503' with all required fields.
mkPatchSharedWalletInDelegationResponseBody503 :: Data.Text.Internal.Text -- ^ 'patchSharedWalletInDelegationResponseBody503Message'
  -> PatchSharedWalletInDelegationResponseBody503
mkPatchSharedWalletInDelegationResponseBody503 patchSharedWalletInDelegationResponseBody503Message = PatchSharedWalletInDelegationResponseBody503{patchSharedWalletInDelegationResponseBody503Message = patchSharedWalletInDelegationResponseBody503Message}
-- | > PATCH /shared-wallets/{walletId}/delegation-script-template
-- 
-- The same as 'patchSharedWalletInDelegation' but accepts an explicit configuration.
patchSharedWalletInDelegationWithConfiguration :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ walletId | Constraints: Maximum length of 40, Minimum length of 40
  -> Data.Aeson.Types.Internal.Object -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response PatchSharedWalletInDelegationResponse) -- ^ Monadic computation which returns the result of the operation
patchSharedWalletInDelegationWithConfiguration config
                                               walletId
                                               body = GHC.Base.fmap (\response_7 -> GHC.Base.fmap (Data.Either.either PatchSharedWalletInDelegationResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_8 -> Network.HTTP.Types.Status.statusCode status_8 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PatchSharedWalletInDelegationResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           PatchSharedWalletInDelegationResponseBody200Variants)
                                                                                                                                                                                                              | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> PatchSharedWalletInDelegationResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           PatchSharedWalletInDelegationResponseBody400)
                                                                                                                                                                                                              | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> PatchSharedWalletInDelegationResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             PatchSharedWalletInDelegationResponseBody403Variants)
                                                                                                                                                                                                              | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> PatchSharedWalletInDelegationResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             PatchSharedWalletInDelegationResponseBody404)
                                                                                                                                                                                                              | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 406) (Network.HTTP.Client.Types.responseStatus response) -> PatchSharedWalletInDelegationResponse406 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             PatchSharedWalletInDelegationResponseBody406)
                                                                                                                                                                                                              | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 503) (Network.HTTP.Client.Types.responseStatus response) -> PatchSharedWalletInDelegationResponse503 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             PatchSharedWalletInDelegationResponseBody503)
                                                                                                                                                                                                              | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_7) response_7) (Wallet.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "PATCH") ("/shared-wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel walletId)) GHC.Base.<> "/delegation-script-template")) GHC.Base.mempty (GHC.Maybe.Just body) Wallet.Common.RequestBodyEncodingJSON)
-- | > PATCH /shared-wallets/{walletId}/delegation-script-template
-- 
-- The same as 'patchSharedWalletInDelegation' but returns the raw 'Data.ByteString.ByteString'.
patchSharedWalletInDelegationRaw :: forall m . Wallet.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ walletId | Constraints: Maximum length of 40, Minimum length of 40
  -> Data.Aeson.Types.Internal.Object -- ^ The request body to send
  -> Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
patchSharedWalletInDelegationRaw walletId
                                 body = GHC.Base.id (Wallet.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "PATCH") ("/shared-wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel walletId)) GHC.Base.<> "/delegation-script-template")) GHC.Base.mempty (GHC.Maybe.Just body) Wallet.Common.RequestBodyEncodingJSON)
-- | > PATCH /shared-wallets/{walletId}/delegation-script-template
-- 
-- The same as 'patchSharedWalletInDelegation' but accepts an explicit configuration and returns the raw 'Data.ByteString.ByteString'.
patchSharedWalletInDelegationWithConfigurationRaw :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ walletId | Constraints: Maximum length of 40, Minimum length of 40
  -> Data.Aeson.Types.Internal.Object -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
patchSharedWalletInDelegationWithConfigurationRaw config
                                                  walletId
                                                  body = GHC.Base.id (Wallet.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "PATCH") ("/shared-wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel walletId)) GHC.Base.<> "/delegation-script-template")) GHC.Base.mempty (GHC.Maybe.Just body) Wallet.Common.RequestBodyEncodingJSON)
