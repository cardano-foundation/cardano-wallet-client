-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation signSharedTransaction
module Wallet.Operations.SignSharedTransaction where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Wallet.Common
import Wallet.Types

-- | > POST /shared-wallets/{walletId}/transactions-sign
-- 
-- \<p align=\"right\">status: \<strong>under development\<\/strong>\<\/p>
-- 
-- Signs a serialised transaction, returning the modified
-- transaction.
-- 
-- This endpoint will add new witnesses using the keys available
-- to this wallet. Any existing witnesses will remain in the
-- witness set.
signSharedTransaction :: forall m . Wallet.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ walletId | Constraints: Maximum length of 40, Minimum length of 40
  -> SignSharedTransactionRequestBody -- ^ The request body to send
  -> Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response SignSharedTransactionResponse) -- ^ Monadic computation which returns the result of the operation
signSharedTransaction walletId
                      body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either SignSharedTransactionResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 202) (Network.HTTP.Client.Types.responseStatus response) -> SignSharedTransactionResponse202 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                  SignSharedTransactionResponseBody202)
                                                                                                                                                                             | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> SignSharedTransactionResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                  SignSharedTransactionResponseBody400)
                                                                                                                                                                             | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> SignSharedTransactionResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                  SignSharedTransactionResponseBody403Variants)
                                                                                                                                                                             | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> SignSharedTransactionResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                  SignSharedTransactionResponseBody404)
                                                                                                                                                                             | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 406) (Network.HTTP.Client.Types.responseStatus response) -> SignSharedTransactionResponse406 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                  SignSharedTransactionResponseBody406)
                                                                                                                                                                             | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 415) (Network.HTTP.Client.Types.responseStatus response) -> SignSharedTransactionResponse415 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                  SignSharedTransactionResponseBody415)
                                                                                                                                                                             | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Wallet.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") ("/shared-wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel walletId)) GHC.Base.<> "/transactions-sign")) GHC.Base.mempty (GHC.Maybe.Just body) Wallet.Common.RequestBodyEncodingJSON)
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-sign.POST.requestBody.content.application\/json.schema@ in the specification.
-- 
-- 
data SignSharedTransactionRequestBody = SignSharedTransactionRequestBody {
  -- | encoding: Encoding of transaction CBOR returned in response (base64 by default).
  signSharedTransactionRequestBodyEncoding :: (GHC.Maybe.Maybe SignSharedTransactionRequestBodyEncoding)
  -- | passphrase: The wallet\'s master passphrase.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 255
  -- * Minimum length of 0
  , signSharedTransactionRequestBodyPassphrase :: Data.Text.Internal.Text
  -- | transaction: The CBOR-encoded transaction, represented in either hex or base64 encoding.
  -- This always includes the transaction body and the witness set, even if the
  -- latter is empty.
  , signSharedTransactionRequestBodyTransaction :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON SignSharedTransactionRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("encoding" Data.Aeson.Types.ToJSON..=)) (signSharedTransactionRequestBodyEncoding obj) : ["passphrase" Data.Aeson.Types.ToJSON..= signSharedTransactionRequestBodyPassphrase obj] : ["transaction" Data.Aeson.Types.ToJSON..= signSharedTransactionRequestBodyTransaction obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("encoding" Data.Aeson.Types.ToJSON..=)) (signSharedTransactionRequestBodyEncoding obj) : ["passphrase" Data.Aeson.Types.ToJSON..= signSharedTransactionRequestBodyPassphrase obj] : ["transaction" Data.Aeson.Types.ToJSON..= signSharedTransactionRequestBodyTransaction obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON SignSharedTransactionRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SignSharedTransactionRequestBody" (\obj -> ((GHC.Base.pure SignSharedTransactionRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "encoding")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "passphrase")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "transaction"))
-- | Create a new 'SignSharedTransactionRequestBody' with all required fields.
mkSignSharedTransactionRequestBody :: Data.Text.Internal.Text -- ^ 'signSharedTransactionRequestBodyPassphrase'
  -> Data.Text.Internal.Text -- ^ 'signSharedTransactionRequestBodyTransaction'
  -> SignSharedTransactionRequestBody
mkSignSharedTransactionRequestBody signSharedTransactionRequestBodyPassphrase signSharedTransactionRequestBodyTransaction = SignSharedTransactionRequestBody{signSharedTransactionRequestBodyEncoding = GHC.Maybe.Nothing,
                                                                                                                                                             signSharedTransactionRequestBodyPassphrase = signSharedTransactionRequestBodyPassphrase,
                                                                                                                                                             signSharedTransactionRequestBodyTransaction = signSharedTransactionRequestBodyTransaction}
-- | Defines the enum schema located at @paths.\/shared-wallets\/{walletId}\/transactions-sign.POST.requestBody.content.application\/json.schema.properties.encoding@ in the specification.
-- 
-- Encoding of transaction CBOR returned in response (base64 by default).
data SignSharedTransactionRequestBodyEncoding =
   SignSharedTransactionRequestBodyEncodingOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | SignSharedTransactionRequestBodyEncodingTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | SignSharedTransactionRequestBodyEncodingEnumBase16 -- ^ Represents the JSON value @"base16"@
  | SignSharedTransactionRequestBodyEncodingEnumBase64 -- ^ Represents the JSON value @"base64"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON SignSharedTransactionRequestBodyEncoding
    where toJSON (SignSharedTransactionRequestBodyEncodingOther val) = val
          toJSON (SignSharedTransactionRequestBodyEncodingTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (SignSharedTransactionRequestBodyEncodingEnumBase16) = "base16"
          toJSON (SignSharedTransactionRequestBodyEncodingEnumBase64) = "base64"
instance Data.Aeson.Types.FromJSON.FromJSON SignSharedTransactionRequestBodyEncoding
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "base16" -> SignSharedTransactionRequestBodyEncodingEnumBase16
                                            | val GHC.Classes.== "base64" -> SignSharedTransactionRequestBodyEncodingEnumBase64
                                            | GHC.Base.otherwise -> SignSharedTransactionRequestBodyEncodingOther val)
-- | Represents a response of the operation 'signSharedTransaction'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'SignSharedTransactionResponseError' is used.
data SignSharedTransactionResponse =
   SignSharedTransactionResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | SignSharedTransactionResponse202 SignSharedTransactionResponseBody202 -- ^ Accepted
  | SignSharedTransactionResponse400 SignSharedTransactionResponseBody400 -- ^ Bad Request
  | SignSharedTransactionResponse403 SignSharedTransactionResponseBody403Variants -- ^ Forbidden
  | SignSharedTransactionResponse404 SignSharedTransactionResponseBody404 -- ^ Not Found
  | SignSharedTransactionResponse406 SignSharedTransactionResponseBody406 -- ^ Not Acceptable
  | SignSharedTransactionResponse415 SignSharedTransactionResponseBody415 -- ^ Unsupported Media Type
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-sign.POST.responses.202.content.application\/json.schema@ in the specification.
-- 
-- The result of signing a transaction (serialized and encoded).
data SignSharedTransactionResponseBody202 = SignSharedTransactionResponseBody202 {
  -- | transaction: The CBOR-encoded transaction, represented in either hex or base64 encoding.
  -- This always includes the transaction body and the witness set, even if the
  -- latter is empty.
  signSharedTransactionResponseBody202Transaction :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON SignSharedTransactionResponseBody202
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["transaction" Data.Aeson.Types.ToJSON..= signSharedTransactionResponseBody202Transaction obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["transaction" Data.Aeson.Types.ToJSON..= signSharedTransactionResponseBody202Transaction obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON SignSharedTransactionResponseBody202
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SignSharedTransactionResponseBody202" (\obj -> GHC.Base.pure SignSharedTransactionResponseBody202 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "transaction"))
-- | Create a new 'SignSharedTransactionResponseBody202' with all required fields.
mkSignSharedTransactionResponseBody202 :: Data.Text.Internal.Text -- ^ 'signSharedTransactionResponseBody202Transaction'
  -> SignSharedTransactionResponseBody202
mkSignSharedTransactionResponseBody202 signSharedTransactionResponseBody202Transaction = SignSharedTransactionResponseBody202{signSharedTransactionResponseBody202Transaction = signSharedTransactionResponseBody202Transaction}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-sign.POST.responses.400.content.application\/json.schema@ in the specification.
-- 
-- 
data SignSharedTransactionResponseBody400 = SignSharedTransactionResponseBody400 {
  -- | message: May occur when a request is not well-formed; that is, it fails to parse
  -- successfully. This could be the case when some required parameters
  -- are missing or, when malformed values are provided.
  signSharedTransactionResponseBody400Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON SignSharedTransactionResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= signSharedTransactionResponseBody400Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "bad_request"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= signSharedTransactionResponseBody400Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "bad_request"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON SignSharedTransactionResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SignSharedTransactionResponseBody400" (\obj -> GHC.Base.pure SignSharedTransactionResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'SignSharedTransactionResponseBody400' with all required fields.
mkSignSharedTransactionResponseBody400 :: Data.Text.Internal.Text -- ^ 'signSharedTransactionResponseBody400Message'
  -> SignSharedTransactionResponseBody400
mkSignSharedTransactionResponseBody400 signSharedTransactionResponseBody400Message = SignSharedTransactionResponseBody400{signSharedTransactionResponseBody400Message = signSharedTransactionResponseBody400Message}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-sign.POST.responses.403.content.application\/json.schema.oneOf@ in the specification.
-- 
-- 
data SignSharedTransactionResponseBody403OneOf1 = SignSharedTransactionResponseBody403OneOf1 {
  -- | message: May occur when an action require a signing key but the wallet has only access to verification keys.
  signSharedTransactionResponseBody403OneOf1Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON SignSharedTransactionResponseBody403OneOf1
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= signSharedTransactionResponseBody403OneOf1Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "no_root_key"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= signSharedTransactionResponseBody403OneOf1Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "no_root_key"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON SignSharedTransactionResponseBody403OneOf1
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SignSharedTransactionResponseBody403OneOf1" (\obj -> GHC.Base.pure SignSharedTransactionResponseBody403OneOf1 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'SignSharedTransactionResponseBody403OneOf1' with all required fields.
mkSignSharedTransactionResponseBody403OneOf1 :: Data.Text.Internal.Text -- ^ 'signSharedTransactionResponseBody403OneOf1Message'
  -> SignSharedTransactionResponseBody403OneOf1
mkSignSharedTransactionResponseBody403OneOf1 signSharedTransactionResponseBody403OneOf1Message = SignSharedTransactionResponseBody403OneOf1{signSharedTransactionResponseBody403OneOf1Message = signSharedTransactionResponseBody403OneOf1Message}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-sign.POST.responses.403.content.application\/json.schema.oneOf@ in the specification.
-- 
-- 
data SignSharedTransactionResponseBody403OneOf2 = SignSharedTransactionResponseBody403OneOf2 {
  -- | message: May occur when the given spending passphrase is wrong.
  signSharedTransactionResponseBody403OneOf2Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON SignSharedTransactionResponseBody403OneOf2
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= signSharedTransactionResponseBody403OneOf2Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "wrong_encryption_passphrase"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= signSharedTransactionResponseBody403OneOf2Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "wrong_encryption_passphrase"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON SignSharedTransactionResponseBody403OneOf2
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SignSharedTransactionResponseBody403OneOf2" (\obj -> GHC.Base.pure SignSharedTransactionResponseBody403OneOf2 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'SignSharedTransactionResponseBody403OneOf2' with all required fields.
mkSignSharedTransactionResponseBody403OneOf2 :: Data.Text.Internal.Text -- ^ 'signSharedTransactionResponseBody403OneOf2Message'
  -> SignSharedTransactionResponseBody403OneOf2
mkSignSharedTransactionResponseBody403OneOf2 signSharedTransactionResponseBody403OneOf2Message = SignSharedTransactionResponseBody403OneOf2{signSharedTransactionResponseBody403OneOf2Message = signSharedTransactionResponseBody403OneOf2Message}
-- | Defines the oneOf schema located at @paths.\/shared-wallets\/{walletId}\/transactions-sign.POST.responses.403.content.application\/json.schema.oneOf@ in the specification.
-- 
-- 
data SignSharedTransactionResponseBody403Variants =
   SignSharedTransactionResponseBody403Variant1 SignSharedTransactionResponseBody403OneOf1
  | SignSharedTransactionResponseBody403Variant2 SignSharedTransactionResponseBody403OneOf2
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON SignSharedTransactionResponseBody403Variants
    where toJSON (SignSharedTransactionResponseBody403Variant1 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (SignSharedTransactionResponseBody403Variant2 a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON SignSharedTransactionResponseBody403Variants
    where parseJSON val = case (SignSharedTransactionResponseBody403Variant1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((SignSharedTransactionResponseBody403Variant2 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-sign.POST.responses.404.content.application\/json.schema@ in the specification.
-- 
-- 
data SignSharedTransactionResponseBody404 = SignSharedTransactionResponseBody404 {
  -- | message: May occur when a given walletId does not match with any known
  -- wallets (because it has been deleted, or has never existed).
  signSharedTransactionResponseBody404Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON SignSharedTransactionResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= signSharedTransactionResponseBody404Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "no_such_wallet"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= signSharedTransactionResponseBody404Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "no_such_wallet"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON SignSharedTransactionResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SignSharedTransactionResponseBody404" (\obj -> GHC.Base.pure SignSharedTransactionResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'SignSharedTransactionResponseBody404' with all required fields.
mkSignSharedTransactionResponseBody404 :: Data.Text.Internal.Text -- ^ 'signSharedTransactionResponseBody404Message'
  -> SignSharedTransactionResponseBody404
mkSignSharedTransactionResponseBody404 signSharedTransactionResponseBody404Message = SignSharedTransactionResponseBody404{signSharedTransactionResponseBody404Message = signSharedTransactionResponseBody404Message}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-sign.POST.responses.406.content.application\/json.schema@ in the specification.
-- 
-- 
data SignSharedTransactionResponseBody406 = SignSharedTransactionResponseBody406 {
  -- | message: May occur when providing an invalid \'Accept\' header.
  signSharedTransactionResponseBody406Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON SignSharedTransactionResponseBody406
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= signSharedTransactionResponseBody406Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "not_acceptable"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= signSharedTransactionResponseBody406Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "not_acceptable"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON SignSharedTransactionResponseBody406
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SignSharedTransactionResponseBody406" (\obj -> GHC.Base.pure SignSharedTransactionResponseBody406 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'SignSharedTransactionResponseBody406' with all required fields.
mkSignSharedTransactionResponseBody406 :: Data.Text.Internal.Text -- ^ 'signSharedTransactionResponseBody406Message'
  -> SignSharedTransactionResponseBody406
mkSignSharedTransactionResponseBody406 signSharedTransactionResponseBody406Message = SignSharedTransactionResponseBody406{signSharedTransactionResponseBody406Message = signSharedTransactionResponseBody406Message}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/transactions-sign.POST.responses.415.content.application\/json.schema@ in the specification.
-- 
-- 
data SignSharedTransactionResponseBody415 = SignSharedTransactionResponseBody415 {
  -- | message: May occur when providing an invalid \'Content-Type\' header.
  signSharedTransactionResponseBody415Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON SignSharedTransactionResponseBody415
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= signSharedTransactionResponseBody415Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "unsupported_media_type"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= signSharedTransactionResponseBody415Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "unsupported_media_type"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON SignSharedTransactionResponseBody415
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SignSharedTransactionResponseBody415" (\obj -> GHC.Base.pure SignSharedTransactionResponseBody415 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'SignSharedTransactionResponseBody415' with all required fields.
mkSignSharedTransactionResponseBody415 :: Data.Text.Internal.Text -- ^ 'signSharedTransactionResponseBody415Message'
  -> SignSharedTransactionResponseBody415
mkSignSharedTransactionResponseBody415 signSharedTransactionResponseBody415Message = SignSharedTransactionResponseBody415{signSharedTransactionResponseBody415Message = signSharedTransactionResponseBody415Message}
-- | > POST /shared-wallets/{walletId}/transactions-sign
-- 
-- The same as 'signSharedTransaction' but accepts an explicit configuration.
signSharedTransactionWithConfiguration :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ walletId | Constraints: Maximum length of 40, Minimum length of 40
  -> SignSharedTransactionRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response SignSharedTransactionResponse) -- ^ Monadic computation which returns the result of the operation
signSharedTransactionWithConfiguration config
                                       walletId
                                       body = GHC.Base.fmap (\response_7 -> GHC.Base.fmap (Data.Either.either SignSharedTransactionResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_8 -> Network.HTTP.Types.Status.statusCode status_8 GHC.Classes.== 202) (Network.HTTP.Client.Types.responseStatus response) -> SignSharedTransactionResponse202 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                   SignSharedTransactionResponseBody202)
                                                                                                                                                                                              | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> SignSharedTransactionResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                   SignSharedTransactionResponseBody400)
                                                                                                                                                                                              | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> SignSharedTransactionResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                     SignSharedTransactionResponseBody403Variants)
                                                                                                                                                                                              | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> SignSharedTransactionResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                     SignSharedTransactionResponseBody404)
                                                                                                                                                                                              | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 406) (Network.HTTP.Client.Types.responseStatus response) -> SignSharedTransactionResponse406 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                     SignSharedTransactionResponseBody406)
                                                                                                                                                                                              | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 415) (Network.HTTP.Client.Types.responseStatus response) -> SignSharedTransactionResponse415 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                     SignSharedTransactionResponseBody415)
                                                                                                                                                                                              | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_7) response_7) (Wallet.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") ("/shared-wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel walletId)) GHC.Base.<> "/transactions-sign")) GHC.Base.mempty (GHC.Maybe.Just body) Wallet.Common.RequestBodyEncodingJSON)
-- | > POST /shared-wallets/{walletId}/transactions-sign
-- 
-- The same as 'signSharedTransaction' but returns the raw 'Data.ByteString.ByteString'.
signSharedTransactionRaw :: forall m . Wallet.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ walletId | Constraints: Maximum length of 40, Minimum length of 40
  -> SignSharedTransactionRequestBody -- ^ The request body to send
  -> Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
signSharedTransactionRaw walletId
                         body = GHC.Base.id (Wallet.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") ("/shared-wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel walletId)) GHC.Base.<> "/transactions-sign")) GHC.Base.mempty (GHC.Maybe.Just body) Wallet.Common.RequestBodyEncodingJSON)
-- | > POST /shared-wallets/{walletId}/transactions-sign
-- 
-- The same as 'signSharedTransaction' but accepts an explicit configuration and returns the raw 'Data.ByteString.ByteString'.
signSharedTransactionWithConfigurationRaw :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ walletId | Constraints: Maximum length of 40, Minimum length of 40
  -> SignSharedTransactionRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
signSharedTransactionWithConfigurationRaw config
                                          walletId
                                          body = GHC.Base.id (Wallet.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") ("/shared-wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel walletId)) GHC.Base.<> "/transactions-sign")) GHC.Base.mempty (GHC.Maybe.Just body) Wallet.Common.RequestBodyEncodingJSON)
