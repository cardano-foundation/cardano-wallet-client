-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation listSharedWallets
module Wallet.Operations.ListSharedWallets where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Wallet.Common
import Wallet.Types

-- | > GET /shared-wallets
-- 
-- \<p align=\"right\">status: \<strong>âš  under development\<\/strong>\<\/p>
-- 
-- Return a list of known shared wallets, ordered from oldest to newest.
listSharedWallets :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response ListSharedWalletsResponse) -- ^ Monadic computation which returns the result of the operation
listSharedWallets = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either ListSharedWalletsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> ListSharedWalletsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                 ([ListSharedWalletsResponseBody200Variants]))
                                                                                                                                                                | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 406) (Network.HTTP.Client.Types.responseStatus response) -> ListSharedWalletsResponse406 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                 ListSharedWalletsResponseBody406)
                                                                                                                                                                | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Wallet.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") "/shared-wallets" GHC.Base.mempty)
-- | Represents a response of the operation 'listSharedWallets'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'ListSharedWalletsResponseError' is used.
data ListSharedWalletsResponse =
   ListSharedWalletsResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | ListSharedWalletsResponse200 ([ListSharedWalletsResponseBody200Variants]) -- ^ Ok
  | ListSharedWalletsResponse406 ListSharedWalletsResponseBody406 -- ^ Not Acceptable
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/shared-wallets.GET.responses.200.content.application\/json.schema.items.oneOf@ in the specification.
-- 
-- 
data ListSharedWalletsResponseBody200OneOf1 = ListSharedWalletsResponseBody200OneOf1 {
  -- | account_index: An individual segment within a derivation path.
  -- 
  -- The \`H\` suffix indicates a _Hardened_ child private key, which
  -- means that children of this key cannot be derived from the public
  -- key. Indices without a \`H\` suffix are called _Soft_.
  listSharedWalletsResponseBody200OneOf1Account_index :: Data.Text.Internal.Text
  -- | address_pool_gap: Number of consecutive unused addresses allowed.
  -- 
  -- **IMPORTANT DISCLAIMER:** Using values other than \`20\` automatically makes your wallet invalid with regards to BIP-44 address discovery. It means that you **will not** be able to fully restore
  -- your wallet in a different software which is strictly following BIP-44.
  -- 
  -- Beside, using large gaps is **not recommended** as it may induce important performance degradations. Use at your own risks.
  -- 
  -- **IMPORTANT DISCLAIMER 2:** There is no way to \`import\` addresses generated outside (e.g. using cardano-addresses) into the wallet.
  -- Wallet only discovers transactions on its used and unused addresses that are within its currently seen \`address_pool_gap\`.
  -- Transactions on addresses that \"belong\" to the wallet but happen to be beyond its \`address_pool_gap\` will not be visible to the wallet.
  -- This is a technical limitation of the industry standard [BIP-44](https:\/\/github.com\/bitcoin\/bips\/blob\/master\/bip-0044.mediawiki). See also [CIP-1852](https:\/\/github.com\/cardano-foundation\/CIPs\/blob\/master\/CIP-1852\/CIP-1852.md).
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100000.0
  -- * Minimum  of 10.0
  , listSharedWalletsResponseBody200OneOf1Address_pool_gap :: GHC.Types.Int
  -- | delegation_script_template
  , listSharedWalletsResponseBody200OneOf1Delegation_script_template :: (GHC.Maybe.Maybe ListSharedWalletsResponseBody200OneOf1Delegation_script_template)
  -- | id: A unique identifier for the wallet
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 40
  -- * Minimum length of 40
  , listSharedWalletsResponseBody200OneOf1Id :: Data.Text.Internal.Text
  -- | name
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 255
  -- * Minimum length of 1
  , listSharedWalletsResponseBody200OneOf1Name :: Data.Text.Internal.Text
  -- | payment_script_template
  , listSharedWalletsResponseBody200OneOf1Payment_script_template :: ListSharedWalletsResponseBody200OneOf1Payment_script_template
  -- | state
  , listSharedWalletsResponseBody200OneOf1State :: ListSharedWalletsResponseBody200OneOf1State
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedWalletsResponseBody200OneOf1
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["account_index" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf1Account_index obj] : ["address_pool_gap" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf1Address_pool_gap obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("delegation_script_template" Data.Aeson.Types.ToJSON..=)) (listSharedWalletsResponseBody200OneOf1Delegation_script_template obj) : ["id" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf1Id obj] : ["name" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf1Name obj] : ["payment_script_template" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf1Payment_script_template obj] : ["state" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf1State obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["account_index" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf1Account_index obj] : ["address_pool_gap" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf1Address_pool_gap obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("delegation_script_template" Data.Aeson.Types.ToJSON..=)) (listSharedWalletsResponseBody200OneOf1Delegation_script_template obj) : ["id" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf1Id obj] : ["name" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf1Name obj] : ["payment_script_template" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf1Payment_script_template obj] : ["state" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf1State obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedWalletsResponseBody200OneOf1
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListSharedWalletsResponseBody200OneOf1" (\obj -> ((((((GHC.Base.pure ListSharedWalletsResponseBody200OneOf1 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "account_index")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "address_pool_gap")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "delegation_script_template")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "payment_script_template")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "state"))
-- | Create a new 'ListSharedWalletsResponseBody200OneOf1' with all required fields.
mkListSharedWalletsResponseBody200OneOf1 :: Data.Text.Internal.Text -- ^ 'listSharedWalletsResponseBody200OneOf1Account_index'
  -> GHC.Types.Int -- ^ 'listSharedWalletsResponseBody200OneOf1Address_pool_gap'
  -> Data.Text.Internal.Text -- ^ 'listSharedWalletsResponseBody200OneOf1Id'
  -> Data.Text.Internal.Text -- ^ 'listSharedWalletsResponseBody200OneOf1Name'
  -> ListSharedWalletsResponseBody200OneOf1Payment_script_template -- ^ 'listSharedWalletsResponseBody200OneOf1Payment_script_template'
  -> ListSharedWalletsResponseBody200OneOf1State -- ^ 'listSharedWalletsResponseBody200OneOf1State'
  -> ListSharedWalletsResponseBody200OneOf1
mkListSharedWalletsResponseBody200OneOf1 listSharedWalletsResponseBody200OneOf1Account_index listSharedWalletsResponseBody200OneOf1Address_pool_gap listSharedWalletsResponseBody200OneOf1Id listSharedWalletsResponseBody200OneOf1Name listSharedWalletsResponseBody200OneOf1Payment_script_template listSharedWalletsResponseBody200OneOf1State = ListSharedWalletsResponseBody200OneOf1{listSharedWalletsResponseBody200OneOf1Account_index = listSharedWalletsResponseBody200OneOf1Account_index,
                                                                                                                                                                                                                                                                                                                                                                                           listSharedWalletsResponseBody200OneOf1Address_pool_gap = listSharedWalletsResponseBody200OneOf1Address_pool_gap,
                                                                                                                                                                                                                                                                                                                                                                                           listSharedWalletsResponseBody200OneOf1Delegation_script_template = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                                                                                                                                           listSharedWalletsResponseBody200OneOf1Id = listSharedWalletsResponseBody200OneOf1Id,
                                                                                                                                                                                                                                                                                                                                                                                           listSharedWalletsResponseBody200OneOf1Name = listSharedWalletsResponseBody200OneOf1Name,
                                                                                                                                                                                                                                                                                                                                                                                           listSharedWalletsResponseBody200OneOf1Payment_script_template = listSharedWalletsResponseBody200OneOf1Payment_script_template,
                                                                                                                                                                                                                                                                                                                                                                                           listSharedWalletsResponseBody200OneOf1State = listSharedWalletsResponseBody200OneOf1State}
-- | Defines the object schema located at @paths.\/shared-wallets.GET.responses.200.content.application\/json.schema.items.oneOf.properties.delegation_script_template@ in the specification.
-- 
-- 
data ListSharedWalletsResponseBody200OneOf1Delegation_script_template = ListSharedWalletsResponseBody200OneOf1Delegation_script_template {
  -- | cosigners: Map of cosigners and their account public keys. Use key as in &cosigner, eg. \"cosigner\#\"
  listSharedWalletsResponseBody200OneOf1Delegation_script_templateCosigners :: Data.Aeson.Types.Internal.Object
  -- | template
  , listSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplate :: ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateVariants
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedWalletsResponseBody200OneOf1Delegation_script_template
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["cosigners" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf1Delegation_script_templateCosigners obj] : ["template" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplate obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["cosigners" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf1Delegation_script_templateCosigners obj] : ["template" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplate obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedWalletsResponseBody200OneOf1Delegation_script_template
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListSharedWalletsResponseBody200OneOf1Delegation_script_template" (\obj -> (GHC.Base.pure ListSharedWalletsResponseBody200OneOf1Delegation_script_template GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cosigners")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "template"))
-- | Create a new 'ListSharedWalletsResponseBody200OneOf1Delegation_script_template' with all required fields.
mkListSharedWalletsResponseBody200OneOf1Delegation_script_template :: Data.Aeson.Types.Internal.Object -- ^ 'listSharedWalletsResponseBody200OneOf1Delegation_script_templateCosigners'
  -> ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateVariants -- ^ 'listSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplate'
  -> ListSharedWalletsResponseBody200OneOf1Delegation_script_template
mkListSharedWalletsResponseBody200OneOf1Delegation_script_template listSharedWalletsResponseBody200OneOf1Delegation_script_templateCosigners listSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplate = ListSharedWalletsResponseBody200OneOf1Delegation_script_template{listSharedWalletsResponseBody200OneOf1Delegation_script_templateCosigners = listSharedWalletsResponseBody200OneOf1Delegation_script_templateCosigners,
                                                                                                                                                                                                                                                                                         listSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplate = listSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplate}
-- | Defines the object schema located at @paths.\/shared-wallets.GET.responses.200.content.application\/json.schema.items.oneOf.properties.delegation_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf2 = ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf2 {
  -- | all: Script primitive for which all signing keys corresponding to all list cosigners\' verification keys are expected to make the script valid.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  listSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf2All :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf2
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["all" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf2All obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["all" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf2All obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf2
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf2" (\obj -> GHC.Base.pure ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf2 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "all"))
-- | Create a new 'ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf2' with all required fields.
mkListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf2 :: [ScriptTemplateValue] -- ^ 'listSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf2All'
  -> ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf2
mkListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf2 listSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf2All = ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf2{listSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf2All = listSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf2All}
-- | Defines the object schema located at @paths.\/shared-wallets.GET.responses.200.content.application\/json.schema.items.oneOf.properties.delegation_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf3 = ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf3 {
  -- | any: Script primitive for which a signing key corresponding to any of the list cosigners\' verification keys is expected to make the script valid. It is equivalent to \`some\` with \`\"at_least\"=1\`.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  listSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf3Any :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf3
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["any" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf3Any obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["any" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf3Any obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf3
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf3" (\obj -> GHC.Base.pure ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf3 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "any"))
-- | Create a new 'ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf3' with all required fields.
mkListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf3 :: [ScriptTemplateValue] -- ^ 'listSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf3Any'
  -> ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf3
mkListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf3 listSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf3Any = ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf3{listSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf3Any = listSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf3Any}
-- | Defines the object schema located at @paths.\/shared-wallets.GET.responses.200.content.application\/json.schema.items.oneOf.properties.delegation_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf4 = ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf4 {
  -- | some: Script primitive for which at least a given number of signing keys corresponding to the list cosigners\' verification keys are expected to make the script valid.
  listSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf4Some :: ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf4Some
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf4
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["some" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf4Some obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["some" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf4Some obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf4
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf4" (\obj -> GHC.Base.pure ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf4 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "some"))
-- | Create a new 'ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf4' with all required fields.
mkListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf4 :: ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf4Some -- ^ 'listSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf4Some'
  -> ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf4
mkListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf4 listSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf4Some = ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf4{listSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf4Some = listSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf4Some}
-- | Defines the object schema located at @paths.\/shared-wallets.GET.responses.200.content.application\/json.schema.items.oneOf.properties.delegation_script_template.properties.template.oneOf.properties.some@ in the specification.
-- 
-- Script primitive for which at least a given number of signing keys corresponding to the list cosigners\' verification keys are expected to make the script valid.
data ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf4Some = ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf4Some {
  -- | at_least
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 255.0
  -- * Minimum  of 1.0
  listSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf4SomeAt_least :: GHC.Types.Int
  -- | from
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  , listSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf4SomeFrom :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf4Some
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["at_least" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf4SomeAt_least obj] : ["from" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf4SomeFrom obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["at_least" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf4SomeAt_least obj] : ["from" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf4SomeFrom obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf4Some
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf4Some" (\obj -> (GHC.Base.pure ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf4Some GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "at_least")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "from"))
-- | Create a new 'ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf4Some' with all required fields.
mkListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf4Some :: GHC.Types.Int -- ^ 'listSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf4SomeAt_least'
  -> [ScriptTemplateValue] -- ^ 'listSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf4SomeFrom'
  -> ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf4Some
mkListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf4Some listSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf4SomeAt_least listSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf4SomeFrom = ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf4Some{listSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf4SomeAt_least = listSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf4SomeAt_least,
                                                                                                                                                                                                                                                                                                                                                            listSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf4SomeFrom = listSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf4SomeFrom}
-- | Defines the object schema located at @paths.\/shared-wallets.GET.responses.200.content.application\/json.schema.items.oneOf.properties.delegation_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf5 = ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf5 {
  -- | active_from: Transaction is only valid starting at the specified slot number (\`â‰¥ active_from\`).
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  listSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf5Active_from :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf5
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["active_from" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf5Active_from obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["active_from" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf5Active_from obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf5
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf5" (\obj -> GHC.Base.pure ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf5 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active_from"))
-- | Create a new 'ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf5' with all required fields.
mkListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf5 :: GHC.Types.Int -- ^ 'listSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf5Active_from'
  -> ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf5
mkListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf5 listSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf5Active_from = ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf5{listSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf5Active_from = listSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf5Active_from}
-- | Defines the object schema located at @paths.\/shared-wallets.GET.responses.200.content.application\/json.schema.items.oneOf.properties.delegation_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf6 = ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf6 {
  -- | active_until: Transaction is only valid before the specified slot number (\`\< active_until\`).
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  listSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf6Active_until :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf6
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["active_until" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf6Active_until obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["active_until" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf6Active_until obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf6
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf6" (\obj -> GHC.Base.pure ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf6 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active_until"))
-- | Create a new 'ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf6' with all required fields.
mkListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf6 :: GHC.Types.Int -- ^ 'listSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf6Active_until'
  -> ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf6
mkListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf6 listSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf6Active_until = ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf6{listSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf6Active_until = listSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf6Active_until}
-- | Defines the oneOf schema located at @paths.\/shared-wallets.GET.responses.200.content.application\/json.schema.items.oneOf.properties.delegation_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateVariants =
   ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateVariant1 Data.Text.Internal.Text
  | ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateVariant2 ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf2
  | ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateVariant3 ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf3
  | ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateVariant4 ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf4
  | ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateVariant5 ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf5
  | ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateVariant6 ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateOneOf6
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateVariants
    where toJSON (ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateVariant1 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateVariant2 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateVariant3 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateVariant4 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateVariant5 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateVariant6 a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateVariants
    where parseJSON val = case (ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateVariant1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateVariant2 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateVariant3 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateVariant4 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateVariant5 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ListSharedWalletsResponseBody200OneOf1Delegation_script_templateTemplateVariant6 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched"))))) of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the object schema located at @paths.\/shared-wallets.GET.responses.200.content.application\/json.schema.items.oneOf.properties.payment_script_template@ in the specification.
-- 
-- 
data ListSharedWalletsResponseBody200OneOf1Payment_script_template = ListSharedWalletsResponseBody200OneOf1Payment_script_template {
  -- | cosigners: Map of cosigners and their account public keys. Use key as in &cosigner, eg. \"cosigner\#\"
  listSharedWalletsResponseBody200OneOf1Payment_script_templateCosigners :: Data.Aeson.Types.Internal.Object
  -- | template
  , listSharedWalletsResponseBody200OneOf1Payment_script_templateTemplate :: ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateVariants
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedWalletsResponseBody200OneOf1Payment_script_template
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["cosigners" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf1Payment_script_templateCosigners obj] : ["template" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf1Payment_script_templateTemplate obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["cosigners" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf1Payment_script_templateCosigners obj] : ["template" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf1Payment_script_templateTemplate obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedWalletsResponseBody200OneOf1Payment_script_template
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListSharedWalletsResponseBody200OneOf1Payment_script_template" (\obj -> (GHC.Base.pure ListSharedWalletsResponseBody200OneOf1Payment_script_template GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cosigners")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "template"))
-- | Create a new 'ListSharedWalletsResponseBody200OneOf1Payment_script_template' with all required fields.
mkListSharedWalletsResponseBody200OneOf1Payment_script_template :: Data.Aeson.Types.Internal.Object -- ^ 'listSharedWalletsResponseBody200OneOf1Payment_script_templateCosigners'
  -> ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateVariants -- ^ 'listSharedWalletsResponseBody200OneOf1Payment_script_templateTemplate'
  -> ListSharedWalletsResponseBody200OneOf1Payment_script_template
mkListSharedWalletsResponseBody200OneOf1Payment_script_template listSharedWalletsResponseBody200OneOf1Payment_script_templateCosigners listSharedWalletsResponseBody200OneOf1Payment_script_templateTemplate = ListSharedWalletsResponseBody200OneOf1Payment_script_template{listSharedWalletsResponseBody200OneOf1Payment_script_templateCosigners = listSharedWalletsResponseBody200OneOf1Payment_script_templateCosigners,
                                                                                                                                                                                                                                                                             listSharedWalletsResponseBody200OneOf1Payment_script_templateTemplate = listSharedWalletsResponseBody200OneOf1Payment_script_templateTemplate}
-- | Defines the object schema located at @paths.\/shared-wallets.GET.responses.200.content.application\/json.schema.items.oneOf.properties.payment_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf2 = ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf2 {
  -- | all: Script primitive for which all signing keys corresponding to all list cosigners\' verification keys are expected to make the script valid.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  listSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf2All :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf2
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["all" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf2All obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["all" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf2All obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf2
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf2" (\obj -> GHC.Base.pure ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf2 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "all"))
-- | Create a new 'ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf2' with all required fields.
mkListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf2 :: [ScriptTemplateValue] -- ^ 'listSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf2All'
  -> ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf2
mkListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf2 listSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf2All = ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf2{listSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf2All = listSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf2All}
-- | Defines the object schema located at @paths.\/shared-wallets.GET.responses.200.content.application\/json.schema.items.oneOf.properties.payment_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf3 = ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf3 {
  -- | any: Script primitive for which a signing key corresponding to any of the list cosigners\' verification keys is expected to make the script valid. It is equivalent to \`some\` with \`\"at_least\"=1\`.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  listSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf3Any :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf3
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["any" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf3Any obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["any" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf3Any obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf3
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf3" (\obj -> GHC.Base.pure ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf3 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "any"))
-- | Create a new 'ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf3' with all required fields.
mkListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf3 :: [ScriptTemplateValue] -- ^ 'listSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf3Any'
  -> ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf3
mkListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf3 listSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf3Any = ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf3{listSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf3Any = listSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf3Any}
-- | Defines the object schema located at @paths.\/shared-wallets.GET.responses.200.content.application\/json.schema.items.oneOf.properties.payment_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf4 = ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf4 {
  -- | some: Script primitive for which at least a given number of signing keys corresponding to the list cosigners\' verification keys are expected to make the script valid.
  listSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf4Some :: ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf4Some
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf4
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["some" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf4Some obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["some" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf4Some obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf4
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf4" (\obj -> GHC.Base.pure ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf4 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "some"))
-- | Create a new 'ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf4' with all required fields.
mkListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf4 :: ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf4Some -- ^ 'listSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf4Some'
  -> ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf4
mkListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf4 listSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf4Some = ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf4{listSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf4Some = listSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf4Some}
-- | Defines the object schema located at @paths.\/shared-wallets.GET.responses.200.content.application\/json.schema.items.oneOf.properties.payment_script_template.properties.template.oneOf.properties.some@ in the specification.
-- 
-- Script primitive for which at least a given number of signing keys corresponding to the list cosigners\' verification keys are expected to make the script valid.
data ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf4Some = ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf4Some {
  -- | at_least
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 255.0
  -- * Minimum  of 1.0
  listSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf4SomeAt_least :: GHC.Types.Int
  -- | from
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  , listSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf4SomeFrom :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf4Some
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["at_least" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf4SomeAt_least obj] : ["from" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf4SomeFrom obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["at_least" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf4SomeAt_least obj] : ["from" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf4SomeFrom obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf4Some
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf4Some" (\obj -> (GHC.Base.pure ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf4Some GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "at_least")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "from"))
-- | Create a new 'ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf4Some' with all required fields.
mkListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf4Some :: GHC.Types.Int -- ^ 'listSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf4SomeAt_least'
  -> [ScriptTemplateValue] -- ^ 'listSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf4SomeFrom'
  -> ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf4Some
mkListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf4Some listSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf4SomeAt_least listSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf4SomeFrom = ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf4Some{listSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf4SomeAt_least = listSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf4SomeAt_least,
                                                                                                                                                                                                                                                                                                                                                listSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf4SomeFrom = listSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf4SomeFrom}
-- | Defines the object schema located at @paths.\/shared-wallets.GET.responses.200.content.application\/json.schema.items.oneOf.properties.payment_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf5 = ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf5 {
  -- | active_from: Transaction is only valid starting at the specified slot number (\`â‰¥ active_from\`).
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  listSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf5Active_from :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf5
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["active_from" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf5Active_from obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["active_from" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf5Active_from obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf5
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf5" (\obj -> GHC.Base.pure ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf5 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active_from"))
-- | Create a new 'ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf5' with all required fields.
mkListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf5 :: GHC.Types.Int -- ^ 'listSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf5Active_from'
  -> ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf5
mkListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf5 listSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf5Active_from = ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf5{listSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf5Active_from = listSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf5Active_from}
-- | Defines the object schema located at @paths.\/shared-wallets.GET.responses.200.content.application\/json.schema.items.oneOf.properties.payment_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf6 = ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf6 {
  -- | active_until: Transaction is only valid before the specified slot number (\`\< active_until\`).
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  listSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf6Active_until :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf6
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["active_until" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf6Active_until obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["active_until" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf6Active_until obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf6
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf6" (\obj -> GHC.Base.pure ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf6 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active_until"))
-- | Create a new 'ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf6' with all required fields.
mkListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf6 :: GHC.Types.Int -- ^ 'listSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf6Active_until'
  -> ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf6
mkListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf6 listSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf6Active_until = ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf6{listSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf6Active_until = listSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf6Active_until}
-- | Defines the oneOf schema located at @paths.\/shared-wallets.GET.responses.200.content.application\/json.schema.items.oneOf.properties.payment_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateVariants =
   ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateVariant1 Data.Text.Internal.Text
  | ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateVariant2 ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf2
  | ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateVariant3 ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf3
  | ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateVariant4 ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf4
  | ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateVariant5 ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf5
  | ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateVariant6 ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateOneOf6
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateVariants
    where toJSON (ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateVariant1 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateVariant2 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateVariant3 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateVariant4 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateVariant5 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateVariant6 a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateVariants
    where parseJSON val = case (ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateVariant1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateVariant2 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateVariant3 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateVariant4 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateVariant5 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ListSharedWalletsResponseBody200OneOf1Payment_script_templateTemplateVariant6 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched"))))) of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the object schema located at @paths.\/shared-wallets.GET.responses.200.content.application\/json.schema.items.oneOf.properties.state@ in the specification.
-- 
-- 
data ListSharedWalletsResponseBody200OneOf1State = ListSharedWalletsResponseBody200OneOf1State {

  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedWalletsResponseBody200OneOf1State
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["status" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "incomplete"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["status" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "incomplete"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedWalletsResponseBody200OneOf1State
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListSharedWalletsResponseBody200OneOf1State" (\obj -> GHC.Base.pure ListSharedWalletsResponseBody200OneOf1State)
-- | Create a new 'ListSharedWalletsResponseBody200OneOf1State' with all required fields.
mkListSharedWalletsResponseBody200OneOf1State :: ListSharedWalletsResponseBody200OneOf1State
mkListSharedWalletsResponseBody200OneOf1State = ListSharedWalletsResponseBody200OneOf1State{}
-- | Defines the object schema located at @paths.\/shared-wallets.GET.responses.200.content.application\/json.schema.items.oneOf@ in the specification.
-- 
-- 
data ListSharedWalletsResponseBody200OneOf2 = ListSharedWalletsResponseBody200OneOf2 {
  -- | account_index: An individual segment within a derivation path.
  -- 
  -- The \`H\` suffix indicates a _Hardened_ child private key, which
  -- means that children of this key cannot be derived from the public
  -- key. Indices without a \`H\` suffix are called _Soft_.
  listSharedWalletsResponseBody200OneOf2Account_index :: Data.Text.Internal.Text
  -- | address_pool_gap: Number of consecutive unused addresses allowed.
  -- 
  -- **IMPORTANT DISCLAIMER:** Using values other than \`20\` automatically makes your wallet invalid with regards to BIP-44 address discovery. It means that you **will not** be able to fully restore
  -- your wallet in a different software which is strictly following BIP-44.
  -- 
  -- Beside, using large gaps is **not recommended** as it may induce important performance degradations. Use at your own risks.
  -- 
  -- **IMPORTANT DISCLAIMER 2:** There is no way to \`import\` addresses generated outside (e.g. using cardano-addresses) into the wallet.
  -- Wallet only discovers transactions on its used and unused addresses that are within its currently seen \`address_pool_gap\`.
  -- Transactions on addresses that \"belong\" to the wallet but happen to be beyond its \`address_pool_gap\` will not be visible to the wallet.
  -- This is a technical limitation of the industry standard [BIP-44](https:\/\/github.com\/bitcoin\/bips\/blob\/master\/bip-0044.mediawiki). See also [CIP-1852](https:\/\/github.com\/cardano-foundation\/CIPs\/blob\/master\/CIP-1852\/CIP-1852.md).
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100000.0
  -- * Minimum  of 10.0
  , listSharedWalletsResponseBody200OneOf2Address_pool_gap :: GHC.Types.Int
  -- | assets: Current non-Ada asset holdings of the wallet.
  -- 
  -- The amount of assets available to spend may be less than the total
  -- unspent assets due to transaction change amounts which are yet to
  -- be fully confirmed (pending).
  , listSharedWalletsResponseBody200OneOf2Assets :: ListSharedWalletsResponseBody200OneOf2Assets
  -- | balance: Wallet current Ada balance(s).
  , listSharedWalletsResponseBody200OneOf2Balance :: ListSharedWalletsResponseBody200OneOf2Balance
  -- | delegation: Delegation settings
  , listSharedWalletsResponseBody200OneOf2Delegation :: ListSharedWalletsResponseBody200OneOf2Delegation
  -- | delegation_script_template
  , listSharedWalletsResponseBody200OneOf2Delegation_script_template :: (GHC.Maybe.Maybe ListSharedWalletsResponseBody200OneOf2Delegation_script_template)
  -- | id: A unique identifier for the wallet
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 40
  -- * Minimum length of 40
  , listSharedWalletsResponseBody200OneOf2Id :: Data.Text.Internal.Text
  -- | name
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 255
  -- * Minimum length of 1
  , listSharedWalletsResponseBody200OneOf2Name :: Data.Text.Internal.Text
  -- | passphrase: Information about the wallet\'s passphrase
  , listSharedWalletsResponseBody200OneOf2Passphrase :: (GHC.Maybe.Maybe ListSharedWalletsResponseBody200OneOf2Passphrase)
  -- | payment_script_template
  , listSharedWalletsResponseBody200OneOf2Payment_script_template :: ListSharedWalletsResponseBody200OneOf2Payment_script_template
  -- | state: Whether a wallet is ready to use or still syncing
  , listSharedWalletsResponseBody200OneOf2State :: ListSharedWalletsResponseBody200OneOf2State
  -- | tip: A reference to a particular time slot, and the block height at that point.
  , listSharedWalletsResponseBody200OneOf2Tip :: ListSharedWalletsResponseBody200OneOf2Tip
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedWalletsResponseBody200OneOf2
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["account_index" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2Account_index obj] : ["address_pool_gap" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2Address_pool_gap obj] : ["assets" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2Assets obj] : ["balance" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2Balance obj] : ["delegation" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2Delegation obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("delegation_script_template" Data.Aeson.Types.ToJSON..=)) (listSharedWalletsResponseBody200OneOf2Delegation_script_template obj) : ["id" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2Id obj] : ["name" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2Name obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("passphrase" Data.Aeson.Types.ToJSON..=)) (listSharedWalletsResponseBody200OneOf2Passphrase obj) : ["payment_script_template" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2Payment_script_template obj] : ["state" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2State obj] : ["tip" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2Tip obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["account_index" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2Account_index obj] : ["address_pool_gap" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2Address_pool_gap obj] : ["assets" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2Assets obj] : ["balance" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2Balance obj] : ["delegation" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2Delegation obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("delegation_script_template" Data.Aeson.Types.ToJSON..=)) (listSharedWalletsResponseBody200OneOf2Delegation_script_template obj) : ["id" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2Id obj] : ["name" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2Name obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("passphrase" Data.Aeson.Types.ToJSON..=)) (listSharedWalletsResponseBody200OneOf2Passphrase obj) : ["payment_script_template" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2Payment_script_template obj] : ["state" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2State obj] : ["tip" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2Tip obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedWalletsResponseBody200OneOf2
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListSharedWalletsResponseBody200OneOf2" (\obj -> (((((((((((GHC.Base.pure ListSharedWalletsResponseBody200OneOf2 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "account_index")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "address_pool_gap")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "assets")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "balance")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "delegation")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "delegation_script_template")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "passphrase")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "payment_script_template")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "state")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "tip"))
-- | Create a new 'ListSharedWalletsResponseBody200OneOf2' with all required fields.
mkListSharedWalletsResponseBody200OneOf2 :: Data.Text.Internal.Text -- ^ 'listSharedWalletsResponseBody200OneOf2Account_index'
  -> GHC.Types.Int -- ^ 'listSharedWalletsResponseBody200OneOf2Address_pool_gap'
  -> ListSharedWalletsResponseBody200OneOf2Assets -- ^ 'listSharedWalletsResponseBody200OneOf2Assets'
  -> ListSharedWalletsResponseBody200OneOf2Balance -- ^ 'listSharedWalletsResponseBody200OneOf2Balance'
  -> ListSharedWalletsResponseBody200OneOf2Delegation -- ^ 'listSharedWalletsResponseBody200OneOf2Delegation'
  -> Data.Text.Internal.Text -- ^ 'listSharedWalletsResponseBody200OneOf2Id'
  -> Data.Text.Internal.Text -- ^ 'listSharedWalletsResponseBody200OneOf2Name'
  -> ListSharedWalletsResponseBody200OneOf2Payment_script_template -- ^ 'listSharedWalletsResponseBody200OneOf2Payment_script_template'
  -> ListSharedWalletsResponseBody200OneOf2State -- ^ 'listSharedWalletsResponseBody200OneOf2State'
  -> ListSharedWalletsResponseBody200OneOf2Tip -- ^ 'listSharedWalletsResponseBody200OneOf2Tip'
  -> ListSharedWalletsResponseBody200OneOf2
mkListSharedWalletsResponseBody200OneOf2 listSharedWalletsResponseBody200OneOf2Account_index listSharedWalletsResponseBody200OneOf2Address_pool_gap listSharedWalletsResponseBody200OneOf2Assets listSharedWalletsResponseBody200OneOf2Balance listSharedWalletsResponseBody200OneOf2Delegation listSharedWalletsResponseBody200OneOf2Id listSharedWalletsResponseBody200OneOf2Name listSharedWalletsResponseBody200OneOf2Payment_script_template listSharedWalletsResponseBody200OneOf2State listSharedWalletsResponseBody200OneOf2Tip = ListSharedWalletsResponseBody200OneOf2{listSharedWalletsResponseBody200OneOf2Account_index = listSharedWalletsResponseBody200OneOf2Account_index,
listSharedWalletsResponseBody200OneOf2Address_pool_gap = listSharedWalletsResponseBody200OneOf2Address_pool_gap,
listSharedWalletsResponseBody200OneOf2Assets = listSharedWalletsResponseBody200OneOf2Assets,
listSharedWalletsResponseBody200OneOf2Balance = listSharedWalletsResponseBody200OneOf2Balance,
listSharedWalletsResponseBody200OneOf2Delegation = listSharedWalletsResponseBody200OneOf2Delegation,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 listSharedWalletsResponseBody200OneOf2Delegation_script_template = GHC.Maybe.Nothing,
listSharedWalletsResponseBody200OneOf2Id = listSharedWalletsResponseBody200OneOf2Id,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 listSharedWalletsResponseBody200OneOf2Name = listSharedWalletsResponseBody200OneOf2Name,
listSharedWalletsResponseBody200OneOf2Passphrase = GHC.Maybe.Nothing,
listSharedWalletsResponseBody200OneOf2Payment_script_template = listSharedWalletsResponseBody200OneOf2Payment_script_template,
listSharedWalletsResponseBody200OneOf2State = listSharedWalletsResponseBody200OneOf2State,
listSharedWalletsResponseBody200OneOf2Tip = listSharedWalletsResponseBody200OneOf2Tip}
-- | Defines the object schema located at @paths.\/shared-wallets.GET.responses.200.content.application\/json.schema.items.oneOf.properties.assets@ in the specification.
-- 
-- Current non-Ada asset holdings of the wallet.
-- 
-- The amount of assets available to spend may be less than the total
-- unspent assets due to transaction change amounts which are yet to
-- be fully confirmed (pending).
data ListSharedWalletsResponseBody200OneOf2Assets = ListSharedWalletsResponseBody200OneOf2Assets {
  -- | available: Available UTxO asset balances (funds that can be spent without
  -- condition).
  listSharedWalletsResponseBody200OneOf2AssetsAvailable :: ([ListSharedWalletsResponseBody200OneOf2AssetsAvailable])
  -- | total: Total asset balances (available balances plus pending change balances).
  , listSharedWalletsResponseBody200OneOf2AssetsTotal :: ([ListSharedWalletsResponseBody200OneOf2AssetsTotal])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedWalletsResponseBody200OneOf2Assets
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["available" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2AssetsAvailable obj] : ["total" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2AssetsTotal obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["available" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2AssetsAvailable obj] : ["total" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2AssetsTotal obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedWalletsResponseBody200OneOf2Assets
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListSharedWalletsResponseBody200OneOf2Assets" (\obj -> (GHC.Base.pure ListSharedWalletsResponseBody200OneOf2Assets GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "available")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "total"))
-- | Create a new 'ListSharedWalletsResponseBody200OneOf2Assets' with all required fields.
mkListSharedWalletsResponseBody200OneOf2Assets :: [ListSharedWalletsResponseBody200OneOf2AssetsAvailable] -- ^ 'listSharedWalletsResponseBody200OneOf2AssetsAvailable'
  -> [ListSharedWalletsResponseBody200OneOf2AssetsTotal] -- ^ 'listSharedWalletsResponseBody200OneOf2AssetsTotal'
  -> ListSharedWalletsResponseBody200OneOf2Assets
mkListSharedWalletsResponseBody200OneOf2Assets listSharedWalletsResponseBody200OneOf2AssetsAvailable listSharedWalletsResponseBody200OneOf2AssetsTotal = ListSharedWalletsResponseBody200OneOf2Assets{listSharedWalletsResponseBody200OneOf2AssetsAvailable = listSharedWalletsResponseBody200OneOf2AssetsAvailable,
                                                                                                                                                                                                      listSharedWalletsResponseBody200OneOf2AssetsTotal = listSharedWalletsResponseBody200OneOf2AssetsTotal}
-- | Defines the object schema located at @paths.\/shared-wallets.GET.responses.200.content.application\/json.schema.items.oneOf.properties.assets.properties.available.items@ in the specification.
-- 
-- An asset on the Cardano blockchain. An asset is uniquely identified by
-- its \`policy_id\` and \`asset_name\` (together, these form the _asset id_).
-- 
-- Two assets with the same \`asset_name\` and \`policy_id\` are
-- interchangeable. Yet, different assets with a same \`policy_id\` but
-- different \`asset_name\` are treated as separate assets, as are two
-- assets with the same \`asset_name\` but different \`policy_id\`.
data ListSharedWalletsResponseBody200OneOf2AssetsAvailable = ListSharedWalletsResponseBody200OneOf2AssetsAvailable {
  -- | asset_name: The asset on-chain type which acts as a sub-identifier within a
  -- policy. Although we call it \"asset name\", the value needn\'t be
  -- text, and it could even be empty.
  -- 
  -- For policies with a single fungible asset item, asset name is
  -- typically an empty string.
  -- 
  -- This value can be up to 32 bytes of arbitrary data (which is 64
  -- hexadecimal digits).
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  listSharedWalletsResponseBody200OneOf2AssetsAvailableAsset_name :: Data.Text.Internal.Text
  -- | policy_id: A unique identifier of the asset\'s monetary policy. The policy
  -- controls how assets of this kind are created and destroyed.
  -- 
  -- The contents are the blake2b-224 hash of the monetary policy
  -- script, encoded in hexadecimal.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 56
  -- * Minimum length of 56
  , listSharedWalletsResponseBody200OneOf2AssetsAvailablePolicy_id :: Data.Text.Internal.Text
  -- | quantity: Number of assets for the given \`policy_id\` and \`asset_name\`.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , listSharedWalletsResponseBody200OneOf2AssetsAvailableQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedWalletsResponseBody200OneOf2AssetsAvailable
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["asset_name" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2AssetsAvailableAsset_name obj] : ["policy_id" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2AssetsAvailablePolicy_id obj] : ["quantity" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2AssetsAvailableQuantity obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["asset_name" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2AssetsAvailableAsset_name obj] : ["policy_id" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2AssetsAvailablePolicy_id obj] : ["quantity" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2AssetsAvailableQuantity obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedWalletsResponseBody200OneOf2AssetsAvailable
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListSharedWalletsResponseBody200OneOf2AssetsAvailable" (\obj -> ((GHC.Base.pure ListSharedWalletsResponseBody200OneOf2AssetsAvailable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "asset_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "policy_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'ListSharedWalletsResponseBody200OneOf2AssetsAvailable' with all required fields.
mkListSharedWalletsResponseBody200OneOf2AssetsAvailable :: Data.Text.Internal.Text -- ^ 'listSharedWalletsResponseBody200OneOf2AssetsAvailableAsset_name'
  -> Data.Text.Internal.Text -- ^ 'listSharedWalletsResponseBody200OneOf2AssetsAvailablePolicy_id'
  -> GHC.Types.Int -- ^ 'listSharedWalletsResponseBody200OneOf2AssetsAvailableQuantity'
  -> ListSharedWalletsResponseBody200OneOf2AssetsAvailable
mkListSharedWalletsResponseBody200OneOf2AssetsAvailable listSharedWalletsResponseBody200OneOf2AssetsAvailableAsset_name listSharedWalletsResponseBody200OneOf2AssetsAvailablePolicy_id listSharedWalletsResponseBody200OneOf2AssetsAvailableQuantity = ListSharedWalletsResponseBody200OneOf2AssetsAvailable{listSharedWalletsResponseBody200OneOf2AssetsAvailableAsset_name = listSharedWalletsResponseBody200OneOf2AssetsAvailableAsset_name,
                                                                                                                                                                                                                                                                                                             listSharedWalletsResponseBody200OneOf2AssetsAvailablePolicy_id = listSharedWalletsResponseBody200OneOf2AssetsAvailablePolicy_id,
                                                                                                                                                                                                                                                                                                             listSharedWalletsResponseBody200OneOf2AssetsAvailableQuantity = listSharedWalletsResponseBody200OneOf2AssetsAvailableQuantity}
-- | Defines the object schema located at @paths.\/shared-wallets.GET.responses.200.content.application\/json.schema.items.oneOf.properties.assets.properties.total.items@ in the specification.
-- 
-- An asset on the Cardano blockchain. An asset is uniquely identified by
-- its \`policy_id\` and \`asset_name\` (together, these form the _asset id_).
-- 
-- Two assets with the same \`asset_name\` and \`policy_id\` are
-- interchangeable. Yet, different assets with a same \`policy_id\` but
-- different \`asset_name\` are treated as separate assets, as are two
-- assets with the same \`asset_name\` but different \`policy_id\`.
data ListSharedWalletsResponseBody200OneOf2AssetsTotal = ListSharedWalletsResponseBody200OneOf2AssetsTotal {
  -- | asset_name: The asset on-chain type which acts as a sub-identifier within a
  -- policy. Although we call it \"asset name\", the value needn\'t be
  -- text, and it could even be empty.
  -- 
  -- For policies with a single fungible asset item, asset name is
  -- typically an empty string.
  -- 
  -- This value can be up to 32 bytes of arbitrary data (which is 64
  -- hexadecimal digits).
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  listSharedWalletsResponseBody200OneOf2AssetsTotalAsset_name :: Data.Text.Internal.Text
  -- | policy_id: A unique identifier of the asset\'s monetary policy. The policy
  -- controls how assets of this kind are created and destroyed.
  -- 
  -- The contents are the blake2b-224 hash of the monetary policy
  -- script, encoded in hexadecimal.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 56
  -- * Minimum length of 56
  , listSharedWalletsResponseBody200OneOf2AssetsTotalPolicy_id :: Data.Text.Internal.Text
  -- | quantity: Number of assets for the given \`policy_id\` and \`asset_name\`.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , listSharedWalletsResponseBody200OneOf2AssetsTotalQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedWalletsResponseBody200OneOf2AssetsTotal
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["asset_name" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2AssetsTotalAsset_name obj] : ["policy_id" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2AssetsTotalPolicy_id obj] : ["quantity" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2AssetsTotalQuantity obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["asset_name" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2AssetsTotalAsset_name obj] : ["policy_id" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2AssetsTotalPolicy_id obj] : ["quantity" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2AssetsTotalQuantity obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedWalletsResponseBody200OneOf2AssetsTotal
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListSharedWalletsResponseBody200OneOf2AssetsTotal" (\obj -> ((GHC.Base.pure ListSharedWalletsResponseBody200OneOf2AssetsTotal GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "asset_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "policy_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'ListSharedWalletsResponseBody200OneOf2AssetsTotal' with all required fields.
mkListSharedWalletsResponseBody200OneOf2AssetsTotal :: Data.Text.Internal.Text -- ^ 'listSharedWalletsResponseBody200OneOf2AssetsTotalAsset_name'
  -> Data.Text.Internal.Text -- ^ 'listSharedWalletsResponseBody200OneOf2AssetsTotalPolicy_id'
  -> GHC.Types.Int -- ^ 'listSharedWalletsResponseBody200OneOf2AssetsTotalQuantity'
  -> ListSharedWalletsResponseBody200OneOf2AssetsTotal
mkListSharedWalletsResponseBody200OneOf2AssetsTotal listSharedWalletsResponseBody200OneOf2AssetsTotalAsset_name listSharedWalletsResponseBody200OneOf2AssetsTotalPolicy_id listSharedWalletsResponseBody200OneOf2AssetsTotalQuantity = ListSharedWalletsResponseBody200OneOf2AssetsTotal{listSharedWalletsResponseBody200OneOf2AssetsTotalAsset_name = listSharedWalletsResponseBody200OneOf2AssetsTotalAsset_name,
                                                                                                                                                                                                                                                                                         listSharedWalletsResponseBody200OneOf2AssetsTotalPolicy_id = listSharedWalletsResponseBody200OneOf2AssetsTotalPolicy_id,
                                                                                                                                                                                                                                                                                         listSharedWalletsResponseBody200OneOf2AssetsTotalQuantity = listSharedWalletsResponseBody200OneOf2AssetsTotalQuantity}
-- | Defines the object schema located at @paths.\/shared-wallets.GET.responses.200.content.application\/json.schema.items.oneOf.properties.balance@ in the specification.
-- 
-- Wallet current Ada balance(s).
data ListSharedWalletsResponseBody200OneOf2Balance = ListSharedWalletsResponseBody200OneOf2Balance {
  -- | available: Available Ada UTxO balance (funds that can be spent without condition).
  listSharedWalletsResponseBody200OneOf2BalanceAvailable :: ListSharedWalletsResponseBody200OneOf2BalanceAvailable
  -- | reward: The Ada balance of the reward account for this wallet.
  , listSharedWalletsResponseBody200OneOf2BalanceReward :: ListSharedWalletsResponseBody200OneOf2BalanceReward
  -- | total: Total Ada balance (available balance plus pending change and reward balance).
  , listSharedWalletsResponseBody200OneOf2BalanceTotal :: ListSharedWalletsResponseBody200OneOf2BalanceTotal
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedWalletsResponseBody200OneOf2Balance
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["available" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2BalanceAvailable obj] : ["reward" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2BalanceReward obj] : ["total" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2BalanceTotal obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["available" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2BalanceAvailable obj] : ["reward" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2BalanceReward obj] : ["total" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2BalanceTotal obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedWalletsResponseBody200OneOf2Balance
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListSharedWalletsResponseBody200OneOf2Balance" (\obj -> ((GHC.Base.pure ListSharedWalletsResponseBody200OneOf2Balance GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "available")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "reward")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "total"))
-- | Create a new 'ListSharedWalletsResponseBody200OneOf2Balance' with all required fields.
mkListSharedWalletsResponseBody200OneOf2Balance :: ListSharedWalletsResponseBody200OneOf2BalanceAvailable -- ^ 'listSharedWalletsResponseBody200OneOf2BalanceAvailable'
  -> ListSharedWalletsResponseBody200OneOf2BalanceReward -- ^ 'listSharedWalletsResponseBody200OneOf2BalanceReward'
  -> ListSharedWalletsResponseBody200OneOf2BalanceTotal -- ^ 'listSharedWalletsResponseBody200OneOf2BalanceTotal'
  -> ListSharedWalletsResponseBody200OneOf2Balance
mkListSharedWalletsResponseBody200OneOf2Balance listSharedWalletsResponseBody200OneOf2BalanceAvailable listSharedWalletsResponseBody200OneOf2BalanceReward listSharedWalletsResponseBody200OneOf2BalanceTotal = ListSharedWalletsResponseBody200OneOf2Balance{listSharedWalletsResponseBody200OneOf2BalanceAvailable = listSharedWalletsResponseBody200OneOf2BalanceAvailable,
                                                                                                                                                                                                                                                              listSharedWalletsResponseBody200OneOf2BalanceReward = listSharedWalletsResponseBody200OneOf2BalanceReward,
                                                                                                                                                                                                                                                              listSharedWalletsResponseBody200OneOf2BalanceTotal = listSharedWalletsResponseBody200OneOf2BalanceTotal}
-- | Defines the object schema located at @paths.\/shared-wallets.GET.responses.200.content.application\/json.schema.items.oneOf.properties.balance.properties.available@ in the specification.
-- 
-- Available Ada UTxO balance (funds that can be spent without condition).
data ListSharedWalletsResponseBody200OneOf2BalanceAvailable = ListSharedWalletsResponseBody200OneOf2BalanceAvailable {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  listSharedWalletsResponseBody200OneOf2BalanceAvailableQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedWalletsResponseBody200OneOf2BalanceAvailable
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2BalanceAvailableQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2BalanceAvailableQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedWalletsResponseBody200OneOf2BalanceAvailable
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListSharedWalletsResponseBody200OneOf2BalanceAvailable" (\obj -> GHC.Base.pure ListSharedWalletsResponseBody200OneOf2BalanceAvailable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'ListSharedWalletsResponseBody200OneOf2BalanceAvailable' with all required fields.
mkListSharedWalletsResponseBody200OneOf2BalanceAvailable :: GHC.Types.Int -- ^ 'listSharedWalletsResponseBody200OneOf2BalanceAvailableQuantity'
  -> ListSharedWalletsResponseBody200OneOf2BalanceAvailable
mkListSharedWalletsResponseBody200OneOf2BalanceAvailable listSharedWalletsResponseBody200OneOf2BalanceAvailableQuantity = ListSharedWalletsResponseBody200OneOf2BalanceAvailable{listSharedWalletsResponseBody200OneOf2BalanceAvailableQuantity = listSharedWalletsResponseBody200OneOf2BalanceAvailableQuantity}
-- | Defines the object schema located at @paths.\/shared-wallets.GET.responses.200.content.application\/json.schema.items.oneOf.properties.balance.properties.reward@ in the specification.
-- 
-- The Ada balance of the reward account for this wallet.
data ListSharedWalletsResponseBody200OneOf2BalanceReward = ListSharedWalletsResponseBody200OneOf2BalanceReward {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  listSharedWalletsResponseBody200OneOf2BalanceRewardQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedWalletsResponseBody200OneOf2BalanceReward
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2BalanceRewardQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2BalanceRewardQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedWalletsResponseBody200OneOf2BalanceReward
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListSharedWalletsResponseBody200OneOf2BalanceReward" (\obj -> GHC.Base.pure ListSharedWalletsResponseBody200OneOf2BalanceReward GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'ListSharedWalletsResponseBody200OneOf2BalanceReward' with all required fields.
mkListSharedWalletsResponseBody200OneOf2BalanceReward :: GHC.Types.Int -- ^ 'listSharedWalletsResponseBody200OneOf2BalanceRewardQuantity'
  -> ListSharedWalletsResponseBody200OneOf2BalanceReward
mkListSharedWalletsResponseBody200OneOf2BalanceReward listSharedWalletsResponseBody200OneOf2BalanceRewardQuantity = ListSharedWalletsResponseBody200OneOf2BalanceReward{listSharedWalletsResponseBody200OneOf2BalanceRewardQuantity = listSharedWalletsResponseBody200OneOf2BalanceRewardQuantity}
-- | Defines the object schema located at @paths.\/shared-wallets.GET.responses.200.content.application\/json.schema.items.oneOf.properties.balance.properties.total@ in the specification.
-- 
-- Total Ada balance (available balance plus pending change and reward balance).
data ListSharedWalletsResponseBody200OneOf2BalanceTotal = ListSharedWalletsResponseBody200OneOf2BalanceTotal {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  listSharedWalletsResponseBody200OneOf2BalanceTotalQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedWalletsResponseBody200OneOf2BalanceTotal
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2BalanceTotalQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2BalanceTotalQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedWalletsResponseBody200OneOf2BalanceTotal
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListSharedWalletsResponseBody200OneOf2BalanceTotal" (\obj -> GHC.Base.pure ListSharedWalletsResponseBody200OneOf2BalanceTotal GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'ListSharedWalletsResponseBody200OneOf2BalanceTotal' with all required fields.
mkListSharedWalletsResponseBody200OneOf2BalanceTotal :: GHC.Types.Int -- ^ 'listSharedWalletsResponseBody200OneOf2BalanceTotalQuantity'
  -> ListSharedWalletsResponseBody200OneOf2BalanceTotal
mkListSharedWalletsResponseBody200OneOf2BalanceTotal listSharedWalletsResponseBody200OneOf2BalanceTotalQuantity = ListSharedWalletsResponseBody200OneOf2BalanceTotal{listSharedWalletsResponseBody200OneOf2BalanceTotalQuantity = listSharedWalletsResponseBody200OneOf2BalanceTotalQuantity}
-- | Defines the object schema located at @paths.\/shared-wallets.GET.responses.200.content.application\/json.schema.items.oneOf.properties.delegation@ in the specification.
-- 
-- Delegation settings
data ListSharedWalletsResponseBody200OneOf2Delegation = ListSharedWalletsResponseBody200OneOf2Delegation {
  -- | active: Currently active delegation status.
  listSharedWalletsResponseBody200OneOf2DelegationActive :: ListSharedWalletsResponseBody200OneOf2DelegationActive
  -- | next
  , listSharedWalletsResponseBody200OneOf2DelegationNext :: ([ListSharedWalletsResponseBody200OneOf2DelegationNext])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedWalletsResponseBody200OneOf2Delegation
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["active" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2DelegationActive obj] : ["next" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2DelegationNext obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["active" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2DelegationActive obj] : ["next" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2DelegationNext obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedWalletsResponseBody200OneOf2Delegation
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListSharedWalletsResponseBody200OneOf2Delegation" (\obj -> (GHC.Base.pure ListSharedWalletsResponseBody200OneOf2Delegation GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "next"))
-- | Create a new 'ListSharedWalletsResponseBody200OneOf2Delegation' with all required fields.
mkListSharedWalletsResponseBody200OneOf2Delegation :: ListSharedWalletsResponseBody200OneOf2DelegationActive -- ^ 'listSharedWalletsResponseBody200OneOf2DelegationActive'
  -> [ListSharedWalletsResponseBody200OneOf2DelegationNext] -- ^ 'listSharedWalletsResponseBody200OneOf2DelegationNext'
  -> ListSharedWalletsResponseBody200OneOf2Delegation
mkListSharedWalletsResponseBody200OneOf2Delegation listSharedWalletsResponseBody200OneOf2DelegationActive listSharedWalletsResponseBody200OneOf2DelegationNext = ListSharedWalletsResponseBody200OneOf2Delegation{listSharedWalletsResponseBody200OneOf2DelegationActive = listSharedWalletsResponseBody200OneOf2DelegationActive,
                                                                                                                                                                                                                  listSharedWalletsResponseBody200OneOf2DelegationNext = listSharedWalletsResponseBody200OneOf2DelegationNext}
-- | Defines the object schema located at @paths.\/shared-wallets.GET.responses.200.content.application\/json.schema.items.oneOf.properties.delegation.properties.active@ in the specification.
-- 
-- Currently active delegation status.
data ListSharedWalletsResponseBody200OneOf2DelegationActive = ListSharedWalletsResponseBody200OneOf2DelegationActive {
  -- | status
  listSharedWalletsResponseBody200OneOf2DelegationActiveStatus :: ListSharedWalletsResponseBody200OneOf2DelegationActiveStatus
  -- | target: A unique Stake-Pool identifier (present only if status = \`delegating\`)
  , listSharedWalletsResponseBody200OneOf2DelegationActiveTarget :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedWalletsResponseBody200OneOf2DelegationActive
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["status" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2DelegationActiveStatus obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("target" Data.Aeson.Types.ToJSON..=)) (listSharedWalletsResponseBody200OneOf2DelegationActiveTarget obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["status" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2DelegationActiveStatus obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("target" Data.Aeson.Types.ToJSON..=)) (listSharedWalletsResponseBody200OneOf2DelegationActiveTarget obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedWalletsResponseBody200OneOf2DelegationActive
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListSharedWalletsResponseBody200OneOf2DelegationActive" (\obj -> (GHC.Base.pure ListSharedWalletsResponseBody200OneOf2DelegationActive GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "target"))
-- | Create a new 'ListSharedWalletsResponseBody200OneOf2DelegationActive' with all required fields.
mkListSharedWalletsResponseBody200OneOf2DelegationActive :: ListSharedWalletsResponseBody200OneOf2DelegationActiveStatus -- ^ 'listSharedWalletsResponseBody200OneOf2DelegationActiveStatus'
  -> ListSharedWalletsResponseBody200OneOf2DelegationActive
mkListSharedWalletsResponseBody200OneOf2DelegationActive listSharedWalletsResponseBody200OneOf2DelegationActiveStatus = ListSharedWalletsResponseBody200OneOf2DelegationActive{listSharedWalletsResponseBody200OneOf2DelegationActiveStatus = listSharedWalletsResponseBody200OneOf2DelegationActiveStatus,
                                                                                                                                                                               listSharedWalletsResponseBody200OneOf2DelegationActiveTarget = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/shared-wallets.GET.responses.200.content.application\/json.schema.items.oneOf.properties.delegation.properties.active.properties.status@ in the specification.
-- 
-- 
data ListSharedWalletsResponseBody200OneOf2DelegationActiveStatus =
   ListSharedWalletsResponseBody200OneOf2DelegationActiveStatusOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | ListSharedWalletsResponseBody200OneOf2DelegationActiveStatusTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | ListSharedWalletsResponseBody200OneOf2DelegationActiveStatusEnumNot_delegating -- ^ Represents the JSON value @"not_delegating"@
  | ListSharedWalletsResponseBody200OneOf2DelegationActiveStatusEnumDelegating -- ^ Represents the JSON value @"delegating"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedWalletsResponseBody200OneOf2DelegationActiveStatus
    where toJSON (ListSharedWalletsResponseBody200OneOf2DelegationActiveStatusOther val) = val
          toJSON (ListSharedWalletsResponseBody200OneOf2DelegationActiveStatusTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (ListSharedWalletsResponseBody200OneOf2DelegationActiveStatusEnumNot_delegating) = "not_delegating"
          toJSON (ListSharedWalletsResponseBody200OneOf2DelegationActiveStatusEnumDelegating) = "delegating"
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedWalletsResponseBody200OneOf2DelegationActiveStatus
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "not_delegating" -> ListSharedWalletsResponseBody200OneOf2DelegationActiveStatusEnumNot_delegating
                                            | val GHC.Classes.== "delegating" -> ListSharedWalletsResponseBody200OneOf2DelegationActiveStatusEnumDelegating
                                            | GHC.Base.otherwise -> ListSharedWalletsResponseBody200OneOf2DelegationActiveStatusOther val)
-- | Defines the object schema located at @paths.\/shared-wallets.GET.responses.200.content.application\/json.schema.items.oneOf.properties.delegation.properties.next.items@ in the specification.
-- 
-- Next delegation status becomes active at the start of the second epoch after the corresponding delegation certificate was discovered. The exact moment is specified by changes_at
data ListSharedWalletsResponseBody200OneOf2DelegationNext = ListSharedWalletsResponseBody200OneOf2DelegationNext {
  -- | changes_at
  listSharedWalletsResponseBody200OneOf2DelegationNextChanges_at :: ListSharedWalletsResponseBody200OneOf2DelegationNextChanges_at
  -- | status
  , listSharedWalletsResponseBody200OneOf2DelegationNextStatus :: ListSharedWalletsResponseBody200OneOf2DelegationNextStatus
  -- | target: A unique Stake-Pool identifier (present only if status = \`delegating\`)
  , listSharedWalletsResponseBody200OneOf2DelegationNextTarget :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedWalletsResponseBody200OneOf2DelegationNext
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["changes_at" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2DelegationNextChanges_at obj] : ["status" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2DelegationNextStatus obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("target" Data.Aeson.Types.ToJSON..=)) (listSharedWalletsResponseBody200OneOf2DelegationNextTarget obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["changes_at" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2DelegationNextChanges_at obj] : ["status" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2DelegationNextStatus obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("target" Data.Aeson.Types.ToJSON..=)) (listSharedWalletsResponseBody200OneOf2DelegationNextTarget obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedWalletsResponseBody200OneOf2DelegationNext
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListSharedWalletsResponseBody200OneOf2DelegationNext" (\obj -> ((GHC.Base.pure ListSharedWalletsResponseBody200OneOf2DelegationNext GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "changes_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "target"))
-- | Create a new 'ListSharedWalletsResponseBody200OneOf2DelegationNext' with all required fields.
mkListSharedWalletsResponseBody200OneOf2DelegationNext :: ListSharedWalletsResponseBody200OneOf2DelegationNextChanges_at -- ^ 'listSharedWalletsResponseBody200OneOf2DelegationNextChanges_at'
  -> ListSharedWalletsResponseBody200OneOf2DelegationNextStatus -- ^ 'listSharedWalletsResponseBody200OneOf2DelegationNextStatus'
  -> ListSharedWalletsResponseBody200OneOf2DelegationNext
mkListSharedWalletsResponseBody200OneOf2DelegationNext listSharedWalletsResponseBody200OneOf2DelegationNextChanges_at listSharedWalletsResponseBody200OneOf2DelegationNextStatus = ListSharedWalletsResponseBody200OneOf2DelegationNext{listSharedWalletsResponseBody200OneOf2DelegationNextChanges_at = listSharedWalletsResponseBody200OneOf2DelegationNextChanges_at,
                                                                                                                                                                                                                                        listSharedWalletsResponseBody200OneOf2DelegationNextStatus = listSharedWalletsResponseBody200OneOf2DelegationNextStatus,
                                                                                                                                                                                                                                        listSharedWalletsResponseBody200OneOf2DelegationNextTarget = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/shared-wallets.GET.responses.200.content.application\/json.schema.items.oneOf.properties.delegation.properties.next.items.properties.changes_at@ in the specification.
-- 
-- 
data ListSharedWalletsResponseBody200OneOf2DelegationNextChanges_at = ListSharedWalletsResponseBody200OneOf2DelegationNextChanges_at {
  -- | epoch_number: An epoch is a time period which is divided into slots.
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  listSharedWalletsResponseBody200OneOf2DelegationNextChanges_atEpoch_number :: GHC.Types.Int
  -- | epoch_start_time
  , listSharedWalletsResponseBody200OneOf2DelegationNextChanges_atEpoch_start_time :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedWalletsResponseBody200OneOf2DelegationNextChanges_at
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["epoch_number" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2DelegationNextChanges_atEpoch_number obj] : ["epoch_start_time" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2DelegationNextChanges_atEpoch_start_time obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["epoch_number" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2DelegationNextChanges_atEpoch_number obj] : ["epoch_start_time" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2DelegationNextChanges_atEpoch_start_time obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedWalletsResponseBody200OneOf2DelegationNextChanges_at
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListSharedWalletsResponseBody200OneOf2DelegationNextChanges_at" (\obj -> (GHC.Base.pure ListSharedWalletsResponseBody200OneOf2DelegationNextChanges_at GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "epoch_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "epoch_start_time"))
-- | Create a new 'ListSharedWalletsResponseBody200OneOf2DelegationNextChanges_at' with all required fields.
mkListSharedWalletsResponseBody200OneOf2DelegationNextChanges_at :: GHC.Types.Int -- ^ 'listSharedWalletsResponseBody200OneOf2DelegationNextChanges_atEpoch_number'
  -> Data.Text.Internal.Text -- ^ 'listSharedWalletsResponseBody200OneOf2DelegationNextChanges_atEpoch_start_time'
  -> ListSharedWalletsResponseBody200OneOf2DelegationNextChanges_at
mkListSharedWalletsResponseBody200OneOf2DelegationNextChanges_at listSharedWalletsResponseBody200OneOf2DelegationNextChanges_atEpoch_number listSharedWalletsResponseBody200OneOf2DelegationNextChanges_atEpoch_start_time = ListSharedWalletsResponseBody200OneOf2DelegationNextChanges_at{listSharedWalletsResponseBody200OneOf2DelegationNextChanges_atEpoch_number = listSharedWalletsResponseBody200OneOf2DelegationNextChanges_atEpoch_number,
                                                                                                                                                                                                                                                                                            listSharedWalletsResponseBody200OneOf2DelegationNextChanges_atEpoch_start_time = listSharedWalletsResponseBody200OneOf2DelegationNextChanges_atEpoch_start_time}
-- | Defines the enum schema located at @paths.\/shared-wallets.GET.responses.200.content.application\/json.schema.items.oneOf.properties.delegation.properties.next.items.properties.status@ in the specification.
-- 
-- 
data ListSharedWalletsResponseBody200OneOf2DelegationNextStatus =
   ListSharedWalletsResponseBody200OneOf2DelegationNextStatusOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | ListSharedWalletsResponseBody200OneOf2DelegationNextStatusTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | ListSharedWalletsResponseBody200OneOf2DelegationNextStatusEnumNot_delegating -- ^ Represents the JSON value @"not_delegating"@
  | ListSharedWalletsResponseBody200OneOf2DelegationNextStatusEnumDelegating -- ^ Represents the JSON value @"delegating"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedWalletsResponseBody200OneOf2DelegationNextStatus
    where toJSON (ListSharedWalletsResponseBody200OneOf2DelegationNextStatusOther val) = val
          toJSON (ListSharedWalletsResponseBody200OneOf2DelegationNextStatusTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (ListSharedWalletsResponseBody200OneOf2DelegationNextStatusEnumNot_delegating) = "not_delegating"
          toJSON (ListSharedWalletsResponseBody200OneOf2DelegationNextStatusEnumDelegating) = "delegating"
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedWalletsResponseBody200OneOf2DelegationNextStatus
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "not_delegating" -> ListSharedWalletsResponseBody200OneOf2DelegationNextStatusEnumNot_delegating
                                            | val GHC.Classes.== "delegating" -> ListSharedWalletsResponseBody200OneOf2DelegationNextStatusEnumDelegating
                                            | GHC.Base.otherwise -> ListSharedWalletsResponseBody200OneOf2DelegationNextStatusOther val)
-- | Defines the object schema located at @paths.\/shared-wallets.GET.responses.200.content.application\/json.schema.items.oneOf.properties.delegation_script_template@ in the specification.
-- 
-- 
data ListSharedWalletsResponseBody200OneOf2Delegation_script_template = ListSharedWalletsResponseBody200OneOf2Delegation_script_template {
  -- | cosigners: Map of cosigners and their account public keys. Use key as in &cosigner, eg. \"cosigner\#\"
  listSharedWalletsResponseBody200OneOf2Delegation_script_templateCosigners :: Data.Aeson.Types.Internal.Object
  -- | template
  , listSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplate :: ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateVariants
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedWalletsResponseBody200OneOf2Delegation_script_template
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["cosigners" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2Delegation_script_templateCosigners obj] : ["template" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplate obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["cosigners" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2Delegation_script_templateCosigners obj] : ["template" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplate obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedWalletsResponseBody200OneOf2Delegation_script_template
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListSharedWalletsResponseBody200OneOf2Delegation_script_template" (\obj -> (GHC.Base.pure ListSharedWalletsResponseBody200OneOf2Delegation_script_template GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cosigners")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "template"))
-- | Create a new 'ListSharedWalletsResponseBody200OneOf2Delegation_script_template' with all required fields.
mkListSharedWalletsResponseBody200OneOf2Delegation_script_template :: Data.Aeson.Types.Internal.Object -- ^ 'listSharedWalletsResponseBody200OneOf2Delegation_script_templateCosigners'
  -> ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateVariants -- ^ 'listSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplate'
  -> ListSharedWalletsResponseBody200OneOf2Delegation_script_template
mkListSharedWalletsResponseBody200OneOf2Delegation_script_template listSharedWalletsResponseBody200OneOf2Delegation_script_templateCosigners listSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplate = ListSharedWalletsResponseBody200OneOf2Delegation_script_template{listSharedWalletsResponseBody200OneOf2Delegation_script_templateCosigners = listSharedWalletsResponseBody200OneOf2Delegation_script_templateCosigners,
                                                                                                                                                                                                                                                                                         listSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplate = listSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplate}
-- | Defines the object schema located at @paths.\/shared-wallets.GET.responses.200.content.application\/json.schema.items.oneOf.properties.delegation_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf2 = ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf2 {
  -- | all: Script primitive for which all signing keys corresponding to all list cosigners\' verification keys are expected to make the script valid.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  listSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf2All :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf2
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["all" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf2All obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["all" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf2All obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf2
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf2" (\obj -> GHC.Base.pure ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf2 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "all"))
-- | Create a new 'ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf2' with all required fields.
mkListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf2 :: [ScriptTemplateValue] -- ^ 'listSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf2All'
  -> ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf2
mkListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf2 listSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf2All = ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf2{listSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf2All = listSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf2All}
-- | Defines the object schema located at @paths.\/shared-wallets.GET.responses.200.content.application\/json.schema.items.oneOf.properties.delegation_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf3 = ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf3 {
  -- | any: Script primitive for which a signing key corresponding to any of the list cosigners\' verification keys is expected to make the script valid. It is equivalent to \`some\` with \`\"at_least\"=1\`.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  listSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf3Any :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf3
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["any" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf3Any obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["any" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf3Any obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf3
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf3" (\obj -> GHC.Base.pure ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf3 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "any"))
-- | Create a new 'ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf3' with all required fields.
mkListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf3 :: [ScriptTemplateValue] -- ^ 'listSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf3Any'
  -> ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf3
mkListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf3 listSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf3Any = ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf3{listSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf3Any = listSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf3Any}
-- | Defines the object schema located at @paths.\/shared-wallets.GET.responses.200.content.application\/json.schema.items.oneOf.properties.delegation_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf4 = ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf4 {
  -- | some: Script primitive for which at least a given number of signing keys corresponding to the list cosigners\' verification keys are expected to make the script valid.
  listSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf4Some :: ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf4Some
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf4
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["some" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf4Some obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["some" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf4Some obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf4
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf4" (\obj -> GHC.Base.pure ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf4 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "some"))
-- | Create a new 'ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf4' with all required fields.
mkListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf4 :: ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf4Some -- ^ 'listSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf4Some'
  -> ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf4
mkListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf4 listSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf4Some = ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf4{listSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf4Some = listSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf4Some}
-- | Defines the object schema located at @paths.\/shared-wallets.GET.responses.200.content.application\/json.schema.items.oneOf.properties.delegation_script_template.properties.template.oneOf.properties.some@ in the specification.
-- 
-- Script primitive for which at least a given number of signing keys corresponding to the list cosigners\' verification keys are expected to make the script valid.
data ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf4Some = ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf4Some {
  -- | at_least
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 255.0
  -- * Minimum  of 1.0
  listSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf4SomeAt_least :: GHC.Types.Int
  -- | from
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  , listSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf4SomeFrom :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf4Some
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["at_least" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf4SomeAt_least obj] : ["from" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf4SomeFrom obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["at_least" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf4SomeAt_least obj] : ["from" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf4SomeFrom obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf4Some
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf4Some" (\obj -> (GHC.Base.pure ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf4Some GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "at_least")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "from"))
-- | Create a new 'ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf4Some' with all required fields.
mkListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf4Some :: GHC.Types.Int -- ^ 'listSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf4SomeAt_least'
  -> [ScriptTemplateValue] -- ^ 'listSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf4SomeFrom'
  -> ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf4Some
mkListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf4Some listSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf4SomeAt_least listSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf4SomeFrom = ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf4Some{listSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf4SomeAt_least = listSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf4SomeAt_least,
                                                                                                                                                                                                                                                                                                                                                            listSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf4SomeFrom = listSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf4SomeFrom}
-- | Defines the object schema located at @paths.\/shared-wallets.GET.responses.200.content.application\/json.schema.items.oneOf.properties.delegation_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf5 = ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf5 {
  -- | active_from: Transaction is only valid starting at the specified slot number (\`â‰¥ active_from\`).
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  listSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf5Active_from :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf5
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["active_from" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf5Active_from obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["active_from" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf5Active_from obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf5
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf5" (\obj -> GHC.Base.pure ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf5 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active_from"))
-- | Create a new 'ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf5' with all required fields.
mkListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf5 :: GHC.Types.Int -- ^ 'listSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf5Active_from'
  -> ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf5
mkListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf5 listSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf5Active_from = ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf5{listSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf5Active_from = listSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf5Active_from}
-- | Defines the object schema located at @paths.\/shared-wallets.GET.responses.200.content.application\/json.schema.items.oneOf.properties.delegation_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf6 = ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf6 {
  -- | active_until: Transaction is only valid before the specified slot number (\`\< active_until\`).
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  listSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf6Active_until :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf6
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["active_until" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf6Active_until obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["active_until" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf6Active_until obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf6
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf6" (\obj -> GHC.Base.pure ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf6 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active_until"))
-- | Create a new 'ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf6' with all required fields.
mkListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf6 :: GHC.Types.Int -- ^ 'listSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf6Active_until'
  -> ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf6
mkListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf6 listSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf6Active_until = ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf6{listSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf6Active_until = listSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf6Active_until}
-- | Defines the oneOf schema located at @paths.\/shared-wallets.GET.responses.200.content.application\/json.schema.items.oneOf.properties.delegation_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateVariants =
   ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateVariant1 Data.Text.Internal.Text
  | ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateVariant2 ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf2
  | ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateVariant3 ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf3
  | ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateVariant4 ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf4
  | ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateVariant5 ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf5
  | ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateVariant6 ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateOneOf6
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateVariants
    where toJSON (ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateVariant1 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateVariant2 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateVariant3 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateVariant4 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateVariant5 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateVariant6 a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateVariants
    where parseJSON val = case (ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateVariant1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateVariant2 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateVariant3 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateVariant4 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateVariant5 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ListSharedWalletsResponseBody200OneOf2Delegation_script_templateTemplateVariant6 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched"))))) of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the object schema located at @paths.\/shared-wallets.GET.responses.200.content.application\/json.schema.items.oneOf.properties.passphrase@ in the specification.
-- 
-- Information about the wallet\'s passphrase
data ListSharedWalletsResponseBody200OneOf2Passphrase = ListSharedWalletsResponseBody200OneOf2Passphrase {
  -- | last_updated_at
  listSharedWalletsResponseBody200OneOf2PassphraseLast_updated_at :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedWalletsResponseBody200OneOf2Passphrase
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["last_updated_at" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2PassphraseLast_updated_at obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["last_updated_at" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2PassphraseLast_updated_at obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedWalletsResponseBody200OneOf2Passphrase
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListSharedWalletsResponseBody200OneOf2Passphrase" (\obj -> GHC.Base.pure ListSharedWalletsResponseBody200OneOf2Passphrase GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "last_updated_at"))
-- | Create a new 'ListSharedWalletsResponseBody200OneOf2Passphrase' with all required fields.
mkListSharedWalletsResponseBody200OneOf2Passphrase :: Data.Text.Internal.Text -- ^ 'listSharedWalletsResponseBody200OneOf2PassphraseLast_updated_at'
  -> ListSharedWalletsResponseBody200OneOf2Passphrase
mkListSharedWalletsResponseBody200OneOf2Passphrase listSharedWalletsResponseBody200OneOf2PassphraseLast_updated_at = ListSharedWalletsResponseBody200OneOf2Passphrase{listSharedWalletsResponseBody200OneOf2PassphraseLast_updated_at = listSharedWalletsResponseBody200OneOf2PassphraseLast_updated_at}
-- | Defines the object schema located at @paths.\/shared-wallets.GET.responses.200.content.application\/json.schema.items.oneOf.properties.payment_script_template@ in the specification.
-- 
-- 
data ListSharedWalletsResponseBody200OneOf2Payment_script_template = ListSharedWalletsResponseBody200OneOf2Payment_script_template {
  -- | cosigners: Map of cosigners and their account public keys. Use key as in &cosigner, eg. \"cosigner\#\"
  listSharedWalletsResponseBody200OneOf2Payment_script_templateCosigners :: Data.Aeson.Types.Internal.Object
  -- | template
  , listSharedWalletsResponseBody200OneOf2Payment_script_templateTemplate :: ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateVariants
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedWalletsResponseBody200OneOf2Payment_script_template
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["cosigners" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2Payment_script_templateCosigners obj] : ["template" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2Payment_script_templateTemplate obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["cosigners" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2Payment_script_templateCosigners obj] : ["template" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2Payment_script_templateTemplate obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedWalletsResponseBody200OneOf2Payment_script_template
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListSharedWalletsResponseBody200OneOf2Payment_script_template" (\obj -> (GHC.Base.pure ListSharedWalletsResponseBody200OneOf2Payment_script_template GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cosigners")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "template"))
-- | Create a new 'ListSharedWalletsResponseBody200OneOf2Payment_script_template' with all required fields.
mkListSharedWalletsResponseBody200OneOf2Payment_script_template :: Data.Aeson.Types.Internal.Object -- ^ 'listSharedWalletsResponseBody200OneOf2Payment_script_templateCosigners'
  -> ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateVariants -- ^ 'listSharedWalletsResponseBody200OneOf2Payment_script_templateTemplate'
  -> ListSharedWalletsResponseBody200OneOf2Payment_script_template
mkListSharedWalletsResponseBody200OneOf2Payment_script_template listSharedWalletsResponseBody200OneOf2Payment_script_templateCosigners listSharedWalletsResponseBody200OneOf2Payment_script_templateTemplate = ListSharedWalletsResponseBody200OneOf2Payment_script_template{listSharedWalletsResponseBody200OneOf2Payment_script_templateCosigners = listSharedWalletsResponseBody200OneOf2Payment_script_templateCosigners,
                                                                                                                                                                                                                                                                             listSharedWalletsResponseBody200OneOf2Payment_script_templateTemplate = listSharedWalletsResponseBody200OneOf2Payment_script_templateTemplate}
-- | Defines the object schema located at @paths.\/shared-wallets.GET.responses.200.content.application\/json.schema.items.oneOf.properties.payment_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf2 = ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf2 {
  -- | all: Script primitive for which all signing keys corresponding to all list cosigners\' verification keys are expected to make the script valid.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  listSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf2All :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf2
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["all" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf2All obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["all" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf2All obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf2
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf2" (\obj -> GHC.Base.pure ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf2 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "all"))
-- | Create a new 'ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf2' with all required fields.
mkListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf2 :: [ScriptTemplateValue] -- ^ 'listSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf2All'
  -> ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf2
mkListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf2 listSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf2All = ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf2{listSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf2All = listSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf2All}
-- | Defines the object schema located at @paths.\/shared-wallets.GET.responses.200.content.application\/json.schema.items.oneOf.properties.payment_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf3 = ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf3 {
  -- | any: Script primitive for which a signing key corresponding to any of the list cosigners\' verification keys is expected to make the script valid. It is equivalent to \`some\` with \`\"at_least\"=1\`.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  listSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf3Any :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf3
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["any" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf3Any obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["any" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf3Any obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf3
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf3" (\obj -> GHC.Base.pure ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf3 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "any"))
-- | Create a new 'ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf3' with all required fields.
mkListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf3 :: [ScriptTemplateValue] -- ^ 'listSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf3Any'
  -> ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf3
mkListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf3 listSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf3Any = ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf3{listSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf3Any = listSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf3Any}
-- | Defines the object schema located at @paths.\/shared-wallets.GET.responses.200.content.application\/json.schema.items.oneOf.properties.payment_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf4 = ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf4 {
  -- | some: Script primitive for which at least a given number of signing keys corresponding to the list cosigners\' verification keys are expected to make the script valid.
  listSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf4Some :: ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf4Some
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf4
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["some" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf4Some obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["some" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf4Some obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf4
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf4" (\obj -> GHC.Base.pure ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf4 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "some"))
-- | Create a new 'ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf4' with all required fields.
mkListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf4 :: ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf4Some -- ^ 'listSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf4Some'
  -> ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf4
mkListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf4 listSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf4Some = ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf4{listSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf4Some = listSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf4Some}
-- | Defines the object schema located at @paths.\/shared-wallets.GET.responses.200.content.application\/json.schema.items.oneOf.properties.payment_script_template.properties.template.oneOf.properties.some@ in the specification.
-- 
-- Script primitive for which at least a given number of signing keys corresponding to the list cosigners\' verification keys are expected to make the script valid.
data ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf4Some = ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf4Some {
  -- | at_least
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 255.0
  -- * Minimum  of 1.0
  listSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf4SomeAt_least :: GHC.Types.Int
  -- | from
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  , listSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf4SomeFrom :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf4Some
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["at_least" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf4SomeAt_least obj] : ["from" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf4SomeFrom obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["at_least" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf4SomeAt_least obj] : ["from" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf4SomeFrom obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf4Some
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf4Some" (\obj -> (GHC.Base.pure ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf4Some GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "at_least")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "from"))
-- | Create a new 'ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf4Some' with all required fields.
mkListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf4Some :: GHC.Types.Int -- ^ 'listSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf4SomeAt_least'
  -> [ScriptTemplateValue] -- ^ 'listSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf4SomeFrom'
  -> ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf4Some
mkListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf4Some listSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf4SomeAt_least listSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf4SomeFrom = ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf4Some{listSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf4SomeAt_least = listSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf4SomeAt_least,
                                                                                                                                                                                                                                                                                                                                                listSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf4SomeFrom = listSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf4SomeFrom}
-- | Defines the object schema located at @paths.\/shared-wallets.GET.responses.200.content.application\/json.schema.items.oneOf.properties.payment_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf5 = ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf5 {
  -- | active_from: Transaction is only valid starting at the specified slot number (\`â‰¥ active_from\`).
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  listSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf5Active_from :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf5
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["active_from" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf5Active_from obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["active_from" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf5Active_from obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf5
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf5" (\obj -> GHC.Base.pure ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf5 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active_from"))
-- | Create a new 'ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf5' with all required fields.
mkListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf5 :: GHC.Types.Int -- ^ 'listSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf5Active_from'
  -> ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf5
mkListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf5 listSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf5Active_from = ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf5{listSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf5Active_from = listSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf5Active_from}
-- | Defines the object schema located at @paths.\/shared-wallets.GET.responses.200.content.application\/json.schema.items.oneOf.properties.payment_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf6 = ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf6 {
  -- | active_until: Transaction is only valid before the specified slot number (\`\< active_until\`).
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  listSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf6Active_until :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf6
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["active_until" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf6Active_until obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["active_until" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf6Active_until obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf6
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf6" (\obj -> GHC.Base.pure ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf6 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active_until"))
-- | Create a new 'ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf6' with all required fields.
mkListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf6 :: GHC.Types.Int -- ^ 'listSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf6Active_until'
  -> ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf6
mkListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf6 listSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf6Active_until = ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf6{listSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf6Active_until = listSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf6Active_until}
-- | Defines the oneOf schema located at @paths.\/shared-wallets.GET.responses.200.content.application\/json.schema.items.oneOf.properties.payment_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateVariants =
   ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateVariant1 Data.Text.Internal.Text
  | ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateVariant2 ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf2
  | ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateVariant3 ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf3
  | ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateVariant4 ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf4
  | ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateVariant5 ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf5
  | ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateVariant6 ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateOneOf6
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateVariants
    where toJSON (ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateVariant1 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateVariant2 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateVariant3 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateVariant4 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateVariant5 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateVariant6 a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateVariants
    where parseJSON val = case (ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateVariant1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateVariant2 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateVariant3 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateVariant4 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateVariant5 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ListSharedWalletsResponseBody200OneOf2Payment_script_templateTemplateVariant6 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched"))))) of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the object schema located at @paths.\/shared-wallets.GET.responses.200.content.application\/json.schema.items.oneOf.properties.state@ in the specification.
-- 
-- Whether a wallet is ready to use or still syncing
data ListSharedWalletsResponseBody200OneOf2State = ListSharedWalletsResponseBody200OneOf2State {
  -- | progress: \<span style=\"position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;\">
  -- \<strong>if:\<\/strong> status == syncing
  -- \<\/span>\<br\/>
  listSharedWalletsResponseBody200OneOf2StateProgress :: (GHC.Maybe.Maybe ListSharedWalletsResponseBody200OneOf2StateProgress)
  -- | status
  , listSharedWalletsResponseBody200OneOf2StateStatus :: ListSharedWalletsResponseBody200OneOf2StateStatus
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedWalletsResponseBody200OneOf2State
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("progress" Data.Aeson.Types.ToJSON..=)) (listSharedWalletsResponseBody200OneOf2StateProgress obj) : ["status" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2StateStatus obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("progress" Data.Aeson.Types.ToJSON..=)) (listSharedWalletsResponseBody200OneOf2StateProgress obj) : ["status" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2StateStatus obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedWalletsResponseBody200OneOf2State
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListSharedWalletsResponseBody200OneOf2State" (\obj -> (GHC.Base.pure ListSharedWalletsResponseBody200OneOf2State GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "progress")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))
-- | Create a new 'ListSharedWalletsResponseBody200OneOf2State' with all required fields.
mkListSharedWalletsResponseBody200OneOf2State :: ListSharedWalletsResponseBody200OneOf2StateStatus -- ^ 'listSharedWalletsResponseBody200OneOf2StateStatus'
  -> ListSharedWalletsResponseBody200OneOf2State
mkListSharedWalletsResponseBody200OneOf2State listSharedWalletsResponseBody200OneOf2StateStatus = ListSharedWalletsResponseBody200OneOf2State{listSharedWalletsResponseBody200OneOf2StateProgress = GHC.Maybe.Nothing,
                                                                                                                                              listSharedWalletsResponseBody200OneOf2StateStatus = listSharedWalletsResponseBody200OneOf2StateStatus}
-- | Defines the object schema located at @paths.\/shared-wallets.GET.responses.200.content.application\/json.schema.items.oneOf.properties.state.properties.progress@ in the specification.
-- 
-- \<span style=\"position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;\">
-- \<strong>if:\<\/strong> status == syncing
-- \<\/span>\<br\/>
data ListSharedWalletsResponseBody200OneOf2StateProgress = ListSharedWalletsResponseBody200OneOf2StateProgress {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  -- * Minimum  of 0.0
  listSharedWalletsResponseBody200OneOf2StateProgressQuantity :: GHC.Types.Double
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedWalletsResponseBody200OneOf2StateProgress
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2StateProgressQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "percent"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2StateProgressQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "percent"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedWalletsResponseBody200OneOf2StateProgress
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListSharedWalletsResponseBody200OneOf2StateProgress" (\obj -> GHC.Base.pure ListSharedWalletsResponseBody200OneOf2StateProgress GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'ListSharedWalletsResponseBody200OneOf2StateProgress' with all required fields.
mkListSharedWalletsResponseBody200OneOf2StateProgress :: GHC.Types.Double -- ^ 'listSharedWalletsResponseBody200OneOf2StateProgressQuantity'
  -> ListSharedWalletsResponseBody200OneOf2StateProgress
mkListSharedWalletsResponseBody200OneOf2StateProgress listSharedWalletsResponseBody200OneOf2StateProgressQuantity = ListSharedWalletsResponseBody200OneOf2StateProgress{listSharedWalletsResponseBody200OneOf2StateProgressQuantity = listSharedWalletsResponseBody200OneOf2StateProgressQuantity}
-- | Defines the enum schema located at @paths.\/shared-wallets.GET.responses.200.content.application\/json.schema.items.oneOf.properties.state.properties.status@ in the specification.
-- 
-- 
data ListSharedWalletsResponseBody200OneOf2StateStatus =
   ListSharedWalletsResponseBody200OneOf2StateStatusOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | ListSharedWalletsResponseBody200OneOf2StateStatusTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | ListSharedWalletsResponseBody200OneOf2StateStatusEnumReady -- ^ Represents the JSON value @"ready"@
  | ListSharedWalletsResponseBody200OneOf2StateStatusEnumSyncing -- ^ Represents the JSON value @"syncing"@
  | ListSharedWalletsResponseBody200OneOf2StateStatusEnumNot_responding -- ^ Represents the JSON value @"not_responding"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedWalletsResponseBody200OneOf2StateStatus
    where toJSON (ListSharedWalletsResponseBody200OneOf2StateStatusOther val) = val
          toJSON (ListSharedWalletsResponseBody200OneOf2StateStatusTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (ListSharedWalletsResponseBody200OneOf2StateStatusEnumReady) = "ready"
          toJSON (ListSharedWalletsResponseBody200OneOf2StateStatusEnumSyncing) = "syncing"
          toJSON (ListSharedWalletsResponseBody200OneOf2StateStatusEnumNot_responding) = "not_responding"
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedWalletsResponseBody200OneOf2StateStatus
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "ready" -> ListSharedWalletsResponseBody200OneOf2StateStatusEnumReady
                                            | val GHC.Classes.== "syncing" -> ListSharedWalletsResponseBody200OneOf2StateStatusEnumSyncing
                                            | val GHC.Classes.== "not_responding" -> ListSharedWalletsResponseBody200OneOf2StateStatusEnumNot_responding
                                            | GHC.Base.otherwise -> ListSharedWalletsResponseBody200OneOf2StateStatusOther val)
-- | Defines the object schema located at @paths.\/shared-wallets.GET.responses.200.content.application\/json.schema.items.oneOf.properties.tip@ in the specification.
-- 
-- A reference to a particular time slot, and the block height at that point.
data ListSharedWalletsResponseBody200OneOf2Tip = ListSharedWalletsResponseBody200OneOf2Tip {
  -- | absolute_slot_number: The 0-based slot index starting from genesis of the blockchain.
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  listSharedWalletsResponseBody200OneOf2TipAbsolute_slot_number :: GHC.Types.Int
  -- | epoch_number: An epoch is a time period which is divided into slots.
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , listSharedWalletsResponseBody200OneOf2TipEpoch_number :: GHC.Types.Int
  -- | height
  , listSharedWalletsResponseBody200OneOf2TipHeight :: ListSharedWalletsResponseBody200OneOf2TipHeight
  -- | slot_number: The zero-based slot index within an epoch.
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , listSharedWalletsResponseBody200OneOf2TipSlot_number :: GHC.Types.Int
  -- | time
  , listSharedWalletsResponseBody200OneOf2TipTime :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedWalletsResponseBody200OneOf2Tip
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["absolute_slot_number" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2TipAbsolute_slot_number obj] : ["epoch_number" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2TipEpoch_number obj] : ["height" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2TipHeight obj] : ["slot_number" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2TipSlot_number obj] : ["time" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2TipTime obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["absolute_slot_number" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2TipAbsolute_slot_number obj] : ["epoch_number" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2TipEpoch_number obj] : ["height" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2TipHeight obj] : ["slot_number" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2TipSlot_number obj] : ["time" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2TipTime obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedWalletsResponseBody200OneOf2Tip
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListSharedWalletsResponseBody200OneOf2Tip" (\obj -> ((((GHC.Base.pure ListSharedWalletsResponseBody200OneOf2Tip GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "absolute_slot_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "epoch_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "height")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "slot_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "time"))
-- | Create a new 'ListSharedWalletsResponseBody200OneOf2Tip' with all required fields.
mkListSharedWalletsResponseBody200OneOf2Tip :: GHC.Types.Int -- ^ 'listSharedWalletsResponseBody200OneOf2TipAbsolute_slot_number'
  -> GHC.Types.Int -- ^ 'listSharedWalletsResponseBody200OneOf2TipEpoch_number'
  -> ListSharedWalletsResponseBody200OneOf2TipHeight -- ^ 'listSharedWalletsResponseBody200OneOf2TipHeight'
  -> GHC.Types.Int -- ^ 'listSharedWalletsResponseBody200OneOf2TipSlot_number'
  -> Data.Text.Internal.Text -- ^ 'listSharedWalletsResponseBody200OneOf2TipTime'
  -> ListSharedWalletsResponseBody200OneOf2Tip
mkListSharedWalletsResponseBody200OneOf2Tip listSharedWalletsResponseBody200OneOf2TipAbsolute_slot_number listSharedWalletsResponseBody200OneOf2TipEpoch_number listSharedWalletsResponseBody200OneOf2TipHeight listSharedWalletsResponseBody200OneOf2TipSlot_number listSharedWalletsResponseBody200OneOf2TipTime = ListSharedWalletsResponseBody200OneOf2Tip{listSharedWalletsResponseBody200OneOf2TipAbsolute_slot_number = listSharedWalletsResponseBody200OneOf2TipAbsolute_slot_number,
                                                                                                                                                                                                                                                                                                                                                               listSharedWalletsResponseBody200OneOf2TipEpoch_number = listSharedWalletsResponseBody200OneOf2TipEpoch_number,
                                                                                                                                                                                                                                                                                                                                                               listSharedWalletsResponseBody200OneOf2TipHeight = listSharedWalletsResponseBody200OneOf2TipHeight,
                                                                                                                                                                                                                                                                                                                                                               listSharedWalletsResponseBody200OneOf2TipSlot_number = listSharedWalletsResponseBody200OneOf2TipSlot_number,
                                                                                                                                                                                                                                                                                                                                                               listSharedWalletsResponseBody200OneOf2TipTime = listSharedWalletsResponseBody200OneOf2TipTime}
-- | Defines the object schema located at @paths.\/shared-wallets.GET.responses.200.content.application\/json.schema.items.oneOf.properties.tip.properties.height@ in the specification.
-- 
-- 
data ListSharedWalletsResponseBody200OneOf2TipHeight = ListSharedWalletsResponseBody200OneOf2TipHeight {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  listSharedWalletsResponseBody200OneOf2TipHeightQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedWalletsResponseBody200OneOf2TipHeight
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2TipHeightQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "block"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody200OneOf2TipHeightQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "block"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedWalletsResponseBody200OneOf2TipHeight
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListSharedWalletsResponseBody200OneOf2TipHeight" (\obj -> GHC.Base.pure ListSharedWalletsResponseBody200OneOf2TipHeight GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'ListSharedWalletsResponseBody200OneOf2TipHeight' with all required fields.
mkListSharedWalletsResponseBody200OneOf2TipHeight :: GHC.Types.Int -- ^ 'listSharedWalletsResponseBody200OneOf2TipHeightQuantity'
  -> ListSharedWalletsResponseBody200OneOf2TipHeight
mkListSharedWalletsResponseBody200OneOf2TipHeight listSharedWalletsResponseBody200OneOf2TipHeightQuantity = ListSharedWalletsResponseBody200OneOf2TipHeight{listSharedWalletsResponseBody200OneOf2TipHeightQuantity = listSharedWalletsResponseBody200OneOf2TipHeightQuantity}
-- | Defines the oneOf schema located at @paths.\/shared-wallets.GET.responses.200.content.application\/json.schema.items.oneOf@ in the specification.
-- 
-- 
data ListSharedWalletsResponseBody200Variants =
   ListSharedWalletsResponseBody200Variant1 ListSharedWalletsResponseBody200OneOf1
  | ListSharedWalletsResponseBody200Variant2 ListSharedWalletsResponseBody200OneOf2
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedWalletsResponseBody200Variants
    where toJSON (ListSharedWalletsResponseBody200Variant1 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (ListSharedWalletsResponseBody200Variant2 a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedWalletsResponseBody200Variants
    where parseJSON val = case (ListSharedWalletsResponseBody200Variant1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ListSharedWalletsResponseBody200Variant2 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the object schema located at @paths.\/shared-wallets.GET.responses.406.content.application\/json.schema@ in the specification.
-- 
-- 
data ListSharedWalletsResponseBody406 = ListSharedWalletsResponseBody406 {
  -- | message: May occur when providing an invalid \'Accept\' header.
  listSharedWalletsResponseBody406Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListSharedWalletsResponseBody406
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody406Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "not_acceptable"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= listSharedWalletsResponseBody406Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "not_acceptable"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListSharedWalletsResponseBody406
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListSharedWalletsResponseBody406" (\obj -> GHC.Base.pure ListSharedWalletsResponseBody406 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'ListSharedWalletsResponseBody406' with all required fields.
mkListSharedWalletsResponseBody406 :: Data.Text.Internal.Text -- ^ 'listSharedWalletsResponseBody406Message'
  -> ListSharedWalletsResponseBody406
mkListSharedWalletsResponseBody406 listSharedWalletsResponseBody406Message = ListSharedWalletsResponseBody406{listSharedWalletsResponseBody406Message = listSharedWalletsResponseBody406Message}
-- | > GET /shared-wallets
-- 
-- The same as 'listSharedWallets' but accepts an explicit configuration.
listSharedWalletsWithConfiguration :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> m (Network.HTTP.Client.Types.Response ListSharedWalletsResponse) -- ^ Monadic computation which returns the result of the operation
listSharedWalletsWithConfiguration config = GHC.Base.fmap (\response_3 -> GHC.Base.fmap (Data.Either.either ListSharedWalletsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> ListSharedWalletsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                         ([ListSharedWalletsResponseBody200Variants]))
                                                                                                                                                                                        | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 406) (Network.HTTP.Client.Types.responseStatus response) -> ListSharedWalletsResponse406 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                         ListSharedWalletsResponseBody406)
                                                                                                                                                                                        | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_3) response_3) (Wallet.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") "/shared-wallets" GHC.Base.mempty)
-- | > GET /shared-wallets
-- 
-- The same as 'listSharedWallets' but returns the raw 'Data.ByteString.ByteString'.
listSharedWalletsRaw :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
listSharedWalletsRaw = GHC.Base.id (Wallet.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") "/shared-wallets" GHC.Base.mempty)
-- | > GET /shared-wallets
-- 
-- The same as 'listSharedWallets' but accepts an explicit configuration and returns the raw 'Data.ByteString.ByteString'.
listSharedWalletsWithConfigurationRaw :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
listSharedWalletsWithConfigurationRaw config = GHC.Base.id (Wallet.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") "/shared-wallets" GHC.Base.mempty)
