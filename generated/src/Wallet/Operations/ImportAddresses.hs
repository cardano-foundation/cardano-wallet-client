-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation importAddresses
module Wallet.Operations.ImportAddresses where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Wallet.Common
import Wallet.Types

-- | > PUT /byron-wallets/{walletId}/addresses
-- 
-- \<p align=\"right\">status: \<strong>stable\<\/strong>\<\/p>
-- 
-- ⚠️  This endpoint is available for \`random\` wallets only. Any
-- attempt to call this endpoint on another type of wallet will result in
-- a \`403 Forbidden\` error from the server.
importAddresses :: forall m . Wallet.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ walletId | Constraints: Maximum length of 40, Minimum length of 40
  -> ImportAddressesRequestBody -- ^ The request body to send
  -> Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response ImportAddressesResponse) -- ^ Monadic computation which returns the result of the operation
importAddresses walletId
                body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either ImportAddressesResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 204) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right ImportAddressesResponse204
                                                                                                                                                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> ImportAddressesResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                ImportAddressesResponseBody400)
                                                                                                                                                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> ImportAddressesResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                ImportAddressesResponseBody403)
                                                                                                                                                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Wallet.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "PUT") ("/byron-wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel walletId)) GHC.Base.<> "/addresses")) GHC.Base.mempty (GHC.Maybe.Just body) Wallet.Common.RequestBodyEncodingJSON)
-- | Defines the object schema located at @paths.\/byron-wallets\/{walletId}\/addresses.PUT.requestBody.content.application\/json.schema@ in the specification.
-- 
-- 
data ImportAddressesRequestBody = ImportAddressesRequestBody {
  -- | addresses: The imported addresses.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  importAddressesRequestBodyAddresses :: ([Data.Text.Internal.Text])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ImportAddressesRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["addresses" Data.Aeson.Types.ToJSON..= importAddressesRequestBodyAddresses obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["addresses" Data.Aeson.Types.ToJSON..= importAddressesRequestBodyAddresses obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ImportAddressesRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ImportAddressesRequestBody" (\obj -> GHC.Base.pure ImportAddressesRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "addresses"))
-- | Create a new 'ImportAddressesRequestBody' with all required fields.
mkImportAddressesRequestBody :: [Data.Text.Internal.Text] -- ^ 'importAddressesRequestBodyAddresses'
  -> ImportAddressesRequestBody
mkImportAddressesRequestBody importAddressesRequestBodyAddresses = ImportAddressesRequestBody{importAddressesRequestBodyAddresses = importAddressesRequestBodyAddresses}
-- | Represents a response of the operation 'importAddresses'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'ImportAddressesResponseError' is used.
data ImportAddressesResponse =
   ImportAddressesResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | ImportAddressesResponse204 -- ^ No Content
  | ImportAddressesResponse400 ImportAddressesResponseBody400 -- ^ Bad Request
  | ImportAddressesResponse403 ImportAddressesResponseBody403 -- ^ Forbidden
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/byron-wallets\/{walletId}\/addresses.PUT.responses.400.content.application\/json.schema@ in the specification.
-- 
-- 
data ImportAddressesResponseBody400 = ImportAddressesResponseBody400 {
  -- | message: May occur when a request is not well-formed; that is, it fails to parse
  -- successfully. This could be the case when some required parameters
  -- are missing or, when malformed values are provided.
  importAddressesResponseBody400Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ImportAddressesResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= importAddressesResponseBody400Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "bad_request"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= importAddressesResponseBody400Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "bad_request"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ImportAddressesResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ImportAddressesResponseBody400" (\obj -> GHC.Base.pure ImportAddressesResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'ImportAddressesResponseBody400' with all required fields.
mkImportAddressesResponseBody400 :: Data.Text.Internal.Text -- ^ 'importAddressesResponseBody400Message'
  -> ImportAddressesResponseBody400
mkImportAddressesResponseBody400 importAddressesResponseBody400Message = ImportAddressesResponseBody400{importAddressesResponseBody400Message = importAddressesResponseBody400Message}
-- | Defines the object schema located at @paths.\/byron-wallets\/{walletId}\/addresses.PUT.responses.403.content.application\/json.schema@ in the specification.
-- 
-- 
data ImportAddressesResponseBody403 = ImportAddressesResponseBody403 {
  -- | code: A specific error code for this error, more precise than HTTP ones.
  importAddressesResponseBody403Code :: Data.Text.Internal.Text
  -- | message: A descriptive error message.
  , importAddressesResponseBody403Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ImportAddressesResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["code" Data.Aeson.Types.ToJSON..= importAddressesResponseBody403Code obj] : ["message" Data.Aeson.Types.ToJSON..= importAddressesResponseBody403Message obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["code" Data.Aeson.Types.ToJSON..= importAddressesResponseBody403Code obj] : ["message" Data.Aeson.Types.ToJSON..= importAddressesResponseBody403Message obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ImportAddressesResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ImportAddressesResponseBody403" (\obj -> (GHC.Base.pure ImportAddressesResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'ImportAddressesResponseBody403' with all required fields.
mkImportAddressesResponseBody403 :: Data.Text.Internal.Text -- ^ 'importAddressesResponseBody403Code'
  -> Data.Text.Internal.Text -- ^ 'importAddressesResponseBody403Message'
  -> ImportAddressesResponseBody403
mkImportAddressesResponseBody403 importAddressesResponseBody403Code importAddressesResponseBody403Message = ImportAddressesResponseBody403{importAddressesResponseBody403Code = importAddressesResponseBody403Code,
                                                                                                                                           importAddressesResponseBody403Message = importAddressesResponseBody403Message}
-- | > PUT /byron-wallets/{walletId}/addresses
-- 
-- The same as 'importAddresses' but accepts an explicit configuration.
importAddressesWithConfiguration :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ walletId | Constraints: Maximum length of 40, Minimum length of 40
  -> ImportAddressesRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response ImportAddressesResponse) -- ^ Monadic computation which returns the result of the operation
importAddressesWithConfiguration config
                                 walletId
                                 body = GHC.Base.fmap (\response_4 -> GHC.Base.fmap (Data.Either.either ImportAddressesResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 204) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right ImportAddressesResponse204
                                                                                                                                                                                  | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> ImportAddressesResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                 ImportAddressesResponseBody400)
                                                                                                                                                                                  | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> ImportAddressesResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                 ImportAddressesResponseBody403)
                                                                                                                                                                                  | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_4) response_4) (Wallet.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "PUT") ("/byron-wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel walletId)) GHC.Base.<> "/addresses")) GHC.Base.mempty (GHC.Maybe.Just body) Wallet.Common.RequestBodyEncodingJSON)
-- | > PUT /byron-wallets/{walletId}/addresses
-- 
-- The same as 'importAddresses' but returns the raw 'Data.ByteString.ByteString'.
importAddressesRaw :: forall m . Wallet.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ walletId | Constraints: Maximum length of 40, Minimum length of 40
  -> ImportAddressesRequestBody -- ^ The request body to send
  -> Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
importAddressesRaw walletId
                   body = GHC.Base.id (Wallet.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "PUT") ("/byron-wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel walletId)) GHC.Base.<> "/addresses")) GHC.Base.mempty (GHC.Maybe.Just body) Wallet.Common.RequestBodyEncodingJSON)
-- | > PUT /byron-wallets/{walletId}/addresses
-- 
-- The same as 'importAddresses' but accepts an explicit configuration and returns the raw 'Data.ByteString.ByteString'.
importAddressesWithConfigurationRaw :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ walletId | Constraints: Maximum length of 40, Minimum length of 40
  -> ImportAddressesRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
importAddressesWithConfigurationRaw config
                                    walletId
                                    body = GHC.Base.id (Wallet.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "PUT") ("/byron-wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel walletId)) GHC.Base.<> "/addresses")) GHC.Base.mempty (GHC.Maybe.Just body) Wallet.Common.RequestBodyEncodingJSON)
