-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getNetworkClock
module Wallet.Operations.GetNetworkClock where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Wallet.Common
import Wallet.Types

-- | > GET /network/clock
-- 
-- \<p align=\"right\">status: \<strong>stable\<\/strong>\<\/p>
getNetworkClock :: forall m . Wallet.Common.MonadHTTP m => GHC.Maybe.Maybe GHC.Types.Bool -- ^ forceNtpCheck: NTP checks are cached for short duration to avoid sending too many queries to the central NTP servers. In some cases however, a client may want to force a new check.  When this flag is set, the request **will block** until NTP server responds or will timeout after a while without any answer from the NTP server. 
  -> Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response GetNetworkClockResponse) -- ^ Monadic computation which returns the result of the operation
getNetworkClock forceNtpCheck = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetNetworkClockResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetNetworkClockResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                         GetNetworkClockResponseBody200)
                                                                                                                                                                          | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 406) (Network.HTTP.Client.Types.responseStatus response) -> GetNetworkClockResponse406 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                         GetNetworkClockResponseBody406)
                                                                                                                                                                          | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Wallet.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") "/network/clock" [Wallet.Common.QueryParameter (Data.Text.pack "forceNtpCheck") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> forceNtpCheck) (Data.Text.pack "form") GHC.Types.False])
-- | Represents a response of the operation 'getNetworkClock'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetNetworkClockResponseError' is used.
data GetNetworkClockResponse =
   GetNetworkClockResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetNetworkClockResponse200 GetNetworkClockResponseBody200 -- ^ Ok
  | GetNetworkClockResponse406 GetNetworkClockResponseBody406 -- ^ Not Acceptable
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/network\/clock.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- [Network Time Protocol](https:\/\/en.wikipedia.org\/wiki\/Network_Time_Protocol) information of the server.
-- 
-- **Important:** This piece of information only makes sense when the server runs on the same host machine as the node.
data GetNetworkClockResponseBody200 = GetNetworkClockResponseBody200 {
  -- | offset: \<span style=\"position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;\">
  -- \<strong>if:\<\/strong> status == available
  -- \<\/span>\<br\/>
  -- Drift offset of the local clock.
  getNetworkClockResponseBody200Offset :: (GHC.Maybe.Maybe GetNetworkClockResponseBody200Offset)
  -- | status
  , getNetworkClockResponseBody200Status :: GetNetworkClockResponseBody200Status
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetNetworkClockResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("offset" Data.Aeson.Types.ToJSON..=)) (getNetworkClockResponseBody200Offset obj) : ["status" Data.Aeson.Types.ToJSON..= getNetworkClockResponseBody200Status obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("offset" Data.Aeson.Types.ToJSON..=)) (getNetworkClockResponseBody200Offset obj) : ["status" Data.Aeson.Types.ToJSON..= getNetworkClockResponseBody200Status obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetNetworkClockResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetNetworkClockResponseBody200" (\obj -> (GHC.Base.pure GetNetworkClockResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "offset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))
-- | Create a new 'GetNetworkClockResponseBody200' with all required fields.
mkGetNetworkClockResponseBody200 :: GetNetworkClockResponseBody200Status -- ^ 'getNetworkClockResponseBody200Status'
  -> GetNetworkClockResponseBody200
mkGetNetworkClockResponseBody200 getNetworkClockResponseBody200Status = GetNetworkClockResponseBody200{getNetworkClockResponseBody200Offset = GHC.Maybe.Nothing,
                                                                                                       getNetworkClockResponseBody200Status = getNetworkClockResponseBody200Status}
-- | Defines the object schema located at @paths.\/network\/clock.GET.responses.200.content.application\/json.schema.properties.offset@ in the specification.
-- 
-- \<span style=\"position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;\">
-- \<strong>if:\<\/strong> status == available
-- \<\/span>\<br\/>
-- Drift offset of the local clock.
data GetNetworkClockResponseBody200Offset = GetNetworkClockResponseBody200Offset {
  -- | quantity
  getNetworkClockResponseBody200OffsetQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetNetworkClockResponseBody200Offset
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= getNetworkClockResponseBody200OffsetQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "microsecond"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= getNetworkClockResponseBody200OffsetQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "microsecond"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetNetworkClockResponseBody200Offset
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetNetworkClockResponseBody200Offset" (\obj -> GHC.Base.pure GetNetworkClockResponseBody200Offset GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'GetNetworkClockResponseBody200Offset' with all required fields.
mkGetNetworkClockResponseBody200Offset :: GHC.Types.Int -- ^ 'getNetworkClockResponseBody200OffsetQuantity'
  -> GetNetworkClockResponseBody200Offset
mkGetNetworkClockResponseBody200Offset getNetworkClockResponseBody200OffsetQuantity = GetNetworkClockResponseBody200Offset{getNetworkClockResponseBody200OffsetQuantity = getNetworkClockResponseBody200OffsetQuantity}
-- | Defines the enum schema located at @paths.\/network\/clock.GET.responses.200.content.application\/json.schema.properties.status@ in the specification.
-- 
-- 
data GetNetworkClockResponseBody200Status =
   GetNetworkClockResponseBody200StatusOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetNetworkClockResponseBody200StatusTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetNetworkClockResponseBody200StatusEnumAvailable -- ^ Represents the JSON value @"available"@
  | GetNetworkClockResponseBody200StatusEnumUnavailable -- ^ Represents the JSON value @"unavailable"@
  | GetNetworkClockResponseBody200StatusEnumPending -- ^ Represents the JSON value @"pending"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetNetworkClockResponseBody200Status
    where toJSON (GetNetworkClockResponseBody200StatusOther val) = val
          toJSON (GetNetworkClockResponseBody200StatusTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetNetworkClockResponseBody200StatusEnumAvailable) = "available"
          toJSON (GetNetworkClockResponseBody200StatusEnumUnavailable) = "unavailable"
          toJSON (GetNetworkClockResponseBody200StatusEnumPending) = "pending"
instance Data.Aeson.Types.FromJSON.FromJSON GetNetworkClockResponseBody200Status
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "available" -> GetNetworkClockResponseBody200StatusEnumAvailable
                                            | val GHC.Classes.== "unavailable" -> GetNetworkClockResponseBody200StatusEnumUnavailable
                                            | val GHC.Classes.== "pending" -> GetNetworkClockResponseBody200StatusEnumPending
                                            | GHC.Base.otherwise -> GetNetworkClockResponseBody200StatusOther val)
-- | Defines the object schema located at @paths.\/network\/clock.GET.responses.406.content.application\/json.schema@ in the specification.
-- 
-- 
data GetNetworkClockResponseBody406 = GetNetworkClockResponseBody406 {
  -- | message: May occur when providing an invalid \'Accept\' header.
  getNetworkClockResponseBody406Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetNetworkClockResponseBody406
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= getNetworkClockResponseBody406Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "not_acceptable"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= getNetworkClockResponseBody406Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "not_acceptable"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetNetworkClockResponseBody406
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetNetworkClockResponseBody406" (\obj -> GHC.Base.pure GetNetworkClockResponseBody406 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'GetNetworkClockResponseBody406' with all required fields.
mkGetNetworkClockResponseBody406 :: Data.Text.Internal.Text -- ^ 'getNetworkClockResponseBody406Message'
  -> GetNetworkClockResponseBody406
mkGetNetworkClockResponseBody406 getNetworkClockResponseBody406Message = GetNetworkClockResponseBody406{getNetworkClockResponseBody406Message = getNetworkClockResponseBody406Message}
-- | > GET /network/clock
-- 
-- The same as 'getNetworkClock' but accepts an explicit configuration.
getNetworkClockWithConfiguration :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> GHC.Maybe.Maybe GHC.Types.Bool -- ^ forceNtpCheck: NTP checks are cached for short duration to avoid sending too many queries to the central NTP servers. In some cases however, a client may want to force a new check.  When this flag is set, the request **will block** until NTP server responds or will timeout after a while without any answer from the NTP server. 
  -> m (Network.HTTP.Client.Types.Response GetNetworkClockResponse) -- ^ Monadic computation which returns the result of the operation
getNetworkClockWithConfiguration config
                                 forceNtpCheck = GHC.Base.fmap (\response_3 -> GHC.Base.fmap (Data.Either.either GetNetworkClockResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetNetworkClockResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                          GetNetworkClockResponseBody200)
                                                                                                                                                                                           | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 406) (Network.HTTP.Client.Types.responseStatus response) -> GetNetworkClockResponse406 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                          GetNetworkClockResponseBody406)
                                                                                                                                                                                           | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_3) response_3) (Wallet.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") "/network/clock" [Wallet.Common.QueryParameter (Data.Text.pack "forceNtpCheck") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> forceNtpCheck) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /network/clock
-- 
-- The same as 'getNetworkClock' but returns the raw 'Data.ByteString.ByteString'.
getNetworkClockRaw :: forall m . Wallet.Common.MonadHTTP m => GHC.Maybe.Maybe GHC.Types.Bool -- ^ forceNtpCheck: NTP checks are cached for short duration to avoid sending too many queries to the central NTP servers. In some cases however, a client may want to force a new check.  When this flag is set, the request **will block** until NTP server responds or will timeout after a while without any answer from the NTP server. 
  -> Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
getNetworkClockRaw forceNtpCheck = GHC.Base.id (Wallet.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") "/network/clock" [Wallet.Common.QueryParameter (Data.Text.pack "forceNtpCheck") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> forceNtpCheck) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /network/clock
-- 
-- The same as 'getNetworkClock' but accepts an explicit configuration and returns the raw 'Data.ByteString.ByteString'.
getNetworkClockWithConfigurationRaw :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> GHC.Maybe.Maybe GHC.Types.Bool -- ^ forceNtpCheck: NTP checks are cached for short duration to avoid sending too many queries to the central NTP servers. In some cases however, a client may want to force a new check.  When this flag is set, the request **will block** until NTP server responds or will timeout after a while without any answer from the NTP server. 
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
getNetworkClockWithConfigurationRaw config
                                    forceNtpCheck = GHC.Base.id (Wallet.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") "/network/clock" [Wallet.Common.QueryParameter (Data.Text.pack "forceNtpCheck") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> forceNtpCheck) (Data.Text.pack "form") GHC.Types.False])
