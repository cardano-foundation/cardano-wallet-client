-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getAccountKey
module Wallet.Operations.GetAccountKey where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Wallet.Common
import Wallet.Types

-- | > GET /wallets/{walletId}/keys
-- 
-- \<p align=\"right\">status: \<strong>stable\<\/strong>\<\/p>
-- Retrieve the account public key of this wallet.
-- 
-- To get an extended public key, instead of the public key,
-- use query parameter \`format=extended\`. For non-extended public key
-- use \`format=non_extended\` or omit query parameter.
getAccountKey :: forall m . Wallet.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ walletId | Constraints: Maximum length of 40, Minimum length of 40
  -> Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response GetAccountKeyResponse) -- ^ Monadic computation which returns the result of the operation
getAccountKey walletId = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetAccountKeyResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountKeyResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                              Data.Text.Internal.Text)
                                                                                                                                                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountKeyResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                              GetAccountKeyResponseBody400)
                                                                                                                                                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountKeyResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                              GetAccountKeyResponseBody404)
                                                                                                                                                                 | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 406) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountKeyResponse406 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                              GetAccountKeyResponseBody406)
                                                                                                                                                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Wallet.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") ("/wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel walletId)) GHC.Base.<> "/keys")) GHC.Base.mempty)
-- | Represents a response of the operation 'getAccountKey'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetAccountKeyResponseError' is used.
data GetAccountKeyResponse =
   GetAccountKeyResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetAccountKeyResponse200 Data.Text.Internal.Text -- ^ Ok
  | GetAccountKeyResponse400 GetAccountKeyResponseBody400 -- ^ Bad Request
  | GetAccountKeyResponse404 GetAccountKeyResponseBody404 -- ^ Not Found
  | GetAccountKeyResponse406 GetAccountKeyResponseBody406 -- ^ Not Acceptable
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/keys.GET.responses.400.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAccountKeyResponseBody400 = GetAccountKeyResponseBody400 {
  -- | message: May occur when a request is not well-formed; that is, it fails to parse
  -- successfully. This could be the case when some required parameters
  -- are missing or, when malformed values are provided.
  getAccountKeyResponseBody400Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountKeyResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= getAccountKeyResponseBody400Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "bad_request"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= getAccountKeyResponseBody400Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "bad_request"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountKeyResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountKeyResponseBody400" (\obj -> GHC.Base.pure GetAccountKeyResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'GetAccountKeyResponseBody400' with all required fields.
mkGetAccountKeyResponseBody400 :: Data.Text.Internal.Text -- ^ 'getAccountKeyResponseBody400Message'
  -> GetAccountKeyResponseBody400
mkGetAccountKeyResponseBody400 getAccountKeyResponseBody400Message = GetAccountKeyResponseBody400{getAccountKeyResponseBody400Message = getAccountKeyResponseBody400Message}
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/keys.GET.responses.404.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAccountKeyResponseBody404 = GetAccountKeyResponseBody404 {
  -- | code: A specific error code for this error, more precise than HTTP ones.
  getAccountKeyResponseBody404Code :: Data.Text.Internal.Text
  -- | message: A descriptive error message.
  , getAccountKeyResponseBody404Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountKeyResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["code" Data.Aeson.Types.ToJSON..= getAccountKeyResponseBody404Code obj] : ["message" Data.Aeson.Types.ToJSON..= getAccountKeyResponseBody404Message obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["code" Data.Aeson.Types.ToJSON..= getAccountKeyResponseBody404Code obj] : ["message" Data.Aeson.Types.ToJSON..= getAccountKeyResponseBody404Message obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountKeyResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountKeyResponseBody404" (\obj -> (GHC.Base.pure GetAccountKeyResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'GetAccountKeyResponseBody404' with all required fields.
mkGetAccountKeyResponseBody404 :: Data.Text.Internal.Text -- ^ 'getAccountKeyResponseBody404Code'
  -> Data.Text.Internal.Text -- ^ 'getAccountKeyResponseBody404Message'
  -> GetAccountKeyResponseBody404
mkGetAccountKeyResponseBody404 getAccountKeyResponseBody404Code getAccountKeyResponseBody404Message = GetAccountKeyResponseBody404{getAccountKeyResponseBody404Code = getAccountKeyResponseBody404Code,
                                                                                                                                   getAccountKeyResponseBody404Message = getAccountKeyResponseBody404Message}
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/keys.GET.responses.406.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAccountKeyResponseBody406 = GetAccountKeyResponseBody406 {
  -- | message: May occur when providing an invalid \'Accept\' header.
  getAccountKeyResponseBody406Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountKeyResponseBody406
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= getAccountKeyResponseBody406Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "not_acceptable"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= getAccountKeyResponseBody406Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "not_acceptable"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountKeyResponseBody406
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountKeyResponseBody406" (\obj -> GHC.Base.pure GetAccountKeyResponseBody406 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'GetAccountKeyResponseBody406' with all required fields.
mkGetAccountKeyResponseBody406 :: Data.Text.Internal.Text -- ^ 'getAccountKeyResponseBody406Message'
  -> GetAccountKeyResponseBody406
mkGetAccountKeyResponseBody406 getAccountKeyResponseBody406Message = GetAccountKeyResponseBody406{getAccountKeyResponseBody406Message = getAccountKeyResponseBody406Message}
-- | > GET /wallets/{walletId}/keys
-- 
-- The same as 'getAccountKey' but accepts an explicit configuration.
getAccountKeyWithConfiguration :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ walletId | Constraints: Maximum length of 40, Minimum length of 40
  -> m (Network.HTTP.Client.Types.Response GetAccountKeyResponse) -- ^ Monadic computation which returns the result of the operation
getAccountKeyWithConfiguration config
                               walletId = GHC.Base.fmap (\response_5 -> GHC.Base.fmap (Data.Either.either GetAccountKeyResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountKeyResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                               Data.Text.Internal.Text)
                                                                                                                                                                                  | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountKeyResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                               GetAccountKeyResponseBody400)
                                                                                                                                                                                  | (\status_8 -> Network.HTTP.Types.Status.statusCode status_8 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountKeyResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                               GetAccountKeyResponseBody404)
                                                                                                                                                                                  | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 406) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountKeyResponse406 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                               GetAccountKeyResponseBody406)
                                                                                                                                                                                  | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_5) response_5) (Wallet.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") ("/wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel walletId)) GHC.Base.<> "/keys")) GHC.Base.mempty)
-- | > GET /wallets/{walletId}/keys
-- 
-- The same as 'getAccountKey' but returns the raw 'Data.ByteString.ByteString'.
getAccountKeyRaw :: forall m . Wallet.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ walletId | Constraints: Maximum length of 40, Minimum length of 40
  -> Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
getAccountKeyRaw walletId = GHC.Base.id (Wallet.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") ("/wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel walletId)) GHC.Base.<> "/keys")) GHC.Base.mempty)
-- | > GET /wallets/{walletId}/keys
-- 
-- The same as 'getAccountKey' but accepts an explicit configuration and returns the raw 'Data.ByteString.ByteString'.
getAccountKeyWithConfigurationRaw :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ walletId | Constraints: Maximum length of 40, Minimum length of 40
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
getAccountKeyWithConfigurationRaw config
                                  walletId = GHC.Base.id (Wallet.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") ("/wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel walletId)) GHC.Base.<> "/keys")) GHC.Base.mempty)
