-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation deleteTransaction
module Wallet.Operations.DeleteTransaction where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Wallet.Common
import Wallet.Types

-- | > DELETE /wallets/{walletId}/transactions/{transactionId}
-- 
-- \<p align=\"right\">status: \<strong>stable\<\/strong>\<\/p>
-- 
-- Forget pending transaction. Importantly, a transaction, when sent,
-- cannot be cancelled. One can only request forgetting about it
-- in order to try spending (concurrently) the same UTxO in another
-- transaction. But, the transaction may still show up later in a block
-- and therefore, appear in the wallet.
deleteTransaction :: forall m . Wallet.Common.MonadHTTP m => DeleteTransactionParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response DeleteTransactionResponse) -- ^ Monadic computation which returns the result of the operation
deleteTransaction parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either DeleteTransactionResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 204) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right DeleteTransactionResponse204
                                                                                                                                                                           | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> DeleteTransactionResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                            DeleteTransactionResponseBody403)
                                                                                                                                                                           | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> DeleteTransactionResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                            DeleteTransactionResponseBody404Variants)
                                                                                                                                                                           | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 406) (Network.HTTP.Client.Types.responseStatus response) -> DeleteTransactionResponse406 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                            DeleteTransactionResponseBody406)
                                                                                                                                                                           | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Wallet.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "DELETE") ("/wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (deleteTransactionParametersPathWalletId parameters))) GHC.Base.<> ("/transactions/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (deleteTransactionParametersPathTransactionId parameters))) GHC.Base.<> "")))) GHC.Base.mempty)
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/transactions\/{transactionId}.DELETE.parameters@ in the specification.
-- 
-- 
data DeleteTransactionParameters = DeleteTransactionParameters {
  -- | pathTransactionId: Represents the parameter named \'transactionId\'
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  -- * Minimum length of 64
  deleteTransactionParametersPathTransactionId :: Data.Text.Internal.Text
  -- | pathWalletId: Represents the parameter named \'walletId\'
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 40
  -- * Minimum length of 40
  , deleteTransactionParametersPathWalletId :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DeleteTransactionParameters
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["pathTransactionId" Data.Aeson.Types.ToJSON..= deleteTransactionParametersPathTransactionId obj] : ["pathWalletId" Data.Aeson.Types.ToJSON..= deleteTransactionParametersPathWalletId obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["pathTransactionId" Data.Aeson.Types.ToJSON..= deleteTransactionParametersPathTransactionId obj] : ["pathWalletId" Data.Aeson.Types.ToJSON..= deleteTransactionParametersPathWalletId obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DeleteTransactionParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DeleteTransactionParameters" (\obj -> (GHC.Base.pure DeleteTransactionParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathTransactionId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathWalletId"))
-- | Create a new 'DeleteTransactionParameters' with all required fields.
mkDeleteTransactionParameters :: Data.Text.Internal.Text -- ^ 'deleteTransactionParametersPathTransactionId'
  -> Data.Text.Internal.Text -- ^ 'deleteTransactionParametersPathWalletId'
  -> DeleteTransactionParameters
mkDeleteTransactionParameters deleteTransactionParametersPathTransactionId deleteTransactionParametersPathWalletId = DeleteTransactionParameters{deleteTransactionParametersPathTransactionId = deleteTransactionParametersPathTransactionId,
                                                                                                                                                 deleteTransactionParametersPathWalletId = deleteTransactionParametersPathWalletId}
-- | Represents a response of the operation 'deleteTransaction'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'DeleteTransactionResponseError' is used.
data DeleteTransactionResponse =
   DeleteTransactionResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | DeleteTransactionResponse204 -- ^ No Content
  | DeleteTransactionResponse403 DeleteTransactionResponseBody403 -- ^ Forbidden
  | DeleteTransactionResponse404 DeleteTransactionResponseBody404Variants -- ^ Not Found
  | DeleteTransactionResponse406 DeleteTransactionResponseBody406 -- ^ Not Acceptable
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/transactions\/{transactionId}.DELETE.responses.403.content.application\/json.schema@ in the specification.
-- 
-- 
data DeleteTransactionResponseBody403 = DeleteTransactionResponseBody403 {
  -- | message: Occurs when attempting to delete a transaction which is neither pending nor expired.
  deleteTransactionResponseBody403Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DeleteTransactionResponseBody403
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= deleteTransactionResponseBody403Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "transaction_already_in_ledger"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= deleteTransactionResponseBody403Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "transaction_already_in_ledger"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DeleteTransactionResponseBody403
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DeleteTransactionResponseBody403" (\obj -> GHC.Base.pure DeleteTransactionResponseBody403 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'DeleteTransactionResponseBody403' with all required fields.
mkDeleteTransactionResponseBody403 :: Data.Text.Internal.Text -- ^ 'deleteTransactionResponseBody403Message'
  -> DeleteTransactionResponseBody403
mkDeleteTransactionResponseBody403 deleteTransactionResponseBody403Message = DeleteTransactionResponseBody403{deleteTransactionResponseBody403Message = deleteTransactionResponseBody403Message}
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/transactions\/{transactionId}.DELETE.responses.404.content.application\/json.schema.oneOf@ in the specification.
-- 
-- 
data DeleteTransactionResponseBody404OneOf1 = DeleteTransactionResponseBody404OneOf1 {
  -- | message: May occur when a given walletId does not match with any known
  -- wallets (because it has been deleted, or has never existed).
  deleteTransactionResponseBody404OneOf1Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DeleteTransactionResponseBody404OneOf1
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= deleteTransactionResponseBody404OneOf1Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "no_such_wallet"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= deleteTransactionResponseBody404OneOf1Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "no_such_wallet"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DeleteTransactionResponseBody404OneOf1
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DeleteTransactionResponseBody404OneOf1" (\obj -> GHC.Base.pure DeleteTransactionResponseBody404OneOf1 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'DeleteTransactionResponseBody404OneOf1' with all required fields.
mkDeleteTransactionResponseBody404OneOf1 :: Data.Text.Internal.Text -- ^ 'deleteTransactionResponseBody404OneOf1Message'
  -> DeleteTransactionResponseBody404OneOf1
mkDeleteTransactionResponseBody404OneOf1 deleteTransactionResponseBody404OneOf1Message = DeleteTransactionResponseBody404OneOf1{deleteTransactionResponseBody404OneOf1Message = deleteTransactionResponseBody404OneOf1Message}
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/transactions\/{transactionId}.DELETE.responses.404.content.application\/json.schema.oneOf@ in the specification.
-- 
-- 
data DeleteTransactionResponseBody404OneOf2 = DeleteTransactionResponseBody404OneOf2 {
  -- | message: May occur when a given transactionId does not match with any known transactions.
  deleteTransactionResponseBody404OneOf2Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DeleteTransactionResponseBody404OneOf2
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= deleteTransactionResponseBody404OneOf2Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "no_such_transaction"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= deleteTransactionResponseBody404OneOf2Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "no_such_transaction"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DeleteTransactionResponseBody404OneOf2
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DeleteTransactionResponseBody404OneOf2" (\obj -> GHC.Base.pure DeleteTransactionResponseBody404OneOf2 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'DeleteTransactionResponseBody404OneOf2' with all required fields.
mkDeleteTransactionResponseBody404OneOf2 :: Data.Text.Internal.Text -- ^ 'deleteTransactionResponseBody404OneOf2Message'
  -> DeleteTransactionResponseBody404OneOf2
mkDeleteTransactionResponseBody404OneOf2 deleteTransactionResponseBody404OneOf2Message = DeleteTransactionResponseBody404OneOf2{deleteTransactionResponseBody404OneOf2Message = deleteTransactionResponseBody404OneOf2Message}
-- | Defines the oneOf schema located at @paths.\/wallets\/{walletId}\/transactions\/{transactionId}.DELETE.responses.404.content.application\/json.schema.oneOf@ in the specification.
-- 
-- 
data DeleteTransactionResponseBody404Variants =
   DeleteTransactionResponseBody404Variant1 DeleteTransactionResponseBody404OneOf1
  | DeleteTransactionResponseBody404Variant2 DeleteTransactionResponseBody404OneOf2
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DeleteTransactionResponseBody404Variants
    where toJSON (DeleteTransactionResponseBody404Variant1 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (DeleteTransactionResponseBody404Variant2 a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON DeleteTransactionResponseBody404Variants
    where parseJSON val = case (DeleteTransactionResponseBody404Variant1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((DeleteTransactionResponseBody404Variant2 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/transactions\/{transactionId}.DELETE.responses.406.content.application\/json.schema@ in the specification.
-- 
-- 
data DeleteTransactionResponseBody406 = DeleteTransactionResponseBody406 {
  -- | message: May occur when providing an invalid \'Accept\' header.
  deleteTransactionResponseBody406Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DeleteTransactionResponseBody406
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= deleteTransactionResponseBody406Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "not_acceptable"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= deleteTransactionResponseBody406Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "not_acceptable"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DeleteTransactionResponseBody406
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DeleteTransactionResponseBody406" (\obj -> GHC.Base.pure DeleteTransactionResponseBody406 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'DeleteTransactionResponseBody406' with all required fields.
mkDeleteTransactionResponseBody406 :: Data.Text.Internal.Text -- ^ 'deleteTransactionResponseBody406Message'
  -> DeleteTransactionResponseBody406
mkDeleteTransactionResponseBody406 deleteTransactionResponseBody406Message = DeleteTransactionResponseBody406{deleteTransactionResponseBody406Message = deleteTransactionResponseBody406Message}
-- | > DELETE /wallets/{walletId}/transactions/{transactionId}
-- 
-- The same as 'deleteTransaction' but accepts an explicit configuration.
deleteTransactionWithConfiguration :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> DeleteTransactionParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response DeleteTransactionResponse) -- ^ Monadic computation which returns the result of the operation
deleteTransactionWithConfiguration config
                                   parameters = GHC.Base.fmap (\response_5 -> GHC.Base.fmap (Data.Either.either DeleteTransactionResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 204) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right DeleteTransactionResponse204
                                                                                                                                                                                            | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> DeleteTransactionResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                             DeleteTransactionResponseBody403)
                                                                                                                                                                                            | (\status_8 -> Network.HTTP.Types.Status.statusCode status_8 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> DeleteTransactionResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                             DeleteTransactionResponseBody404Variants)
                                                                                                                                                                                            | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 406) (Network.HTTP.Client.Types.responseStatus response) -> DeleteTransactionResponse406 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                             DeleteTransactionResponseBody406)
                                                                                                                                                                                            | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_5) response_5) (Wallet.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "DELETE") ("/wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (deleteTransactionParametersPathWalletId parameters))) GHC.Base.<> ("/transactions/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (deleteTransactionParametersPathTransactionId parameters))) GHC.Base.<> "")))) GHC.Base.mempty)
-- | > DELETE /wallets/{walletId}/transactions/{transactionId}
-- 
-- The same as 'deleteTransaction' but returns the raw 'Data.ByteString.ByteString'.
deleteTransactionRaw :: forall m . Wallet.Common.MonadHTTP m => DeleteTransactionParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
deleteTransactionRaw parameters = GHC.Base.id (Wallet.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "DELETE") ("/wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (deleteTransactionParametersPathWalletId parameters))) GHC.Base.<> ("/transactions/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (deleteTransactionParametersPathTransactionId parameters))) GHC.Base.<> "")))) GHC.Base.mempty)
-- | > DELETE /wallets/{walletId}/transactions/{transactionId}
-- 
-- The same as 'deleteTransaction' but accepts an explicit configuration and returns the raw 'Data.ByteString.ByteString'.
deleteTransactionWithConfigurationRaw :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> DeleteTransactionParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
deleteTransactionWithConfigurationRaw config
                                      parameters = GHC.Base.id (Wallet.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "DELETE") ("/wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (deleteTransactionParametersPathWalletId parameters))) GHC.Base.<> ("/transactions/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (deleteTransactionParametersPathTransactionId parameters))) GHC.Base.<> "")))) GHC.Base.mempty)
