-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getBlocksLatestHeader
module Wallet.Operations.GetBlocksLatestHeader where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Wallet.Common
import Wallet.Types

-- | > GET /blocks/latest/header
-- 
-- \<p align=\"right\">status: \<strong>stable\<\/strong>\<\/p>
-- 
-- Return the latest block-header available at the chain source
getBlocksLatestHeader :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response GetBlocksLatestHeaderResponse) -- ^ Monadic computation which returns the result of the operation
getBlocksLatestHeader = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetBlocksLatestHeaderResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksLatestHeaderResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                             GetBlocksLatestHeaderResponseBody200)
                                                                                                                                                                        | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 406) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksLatestHeaderResponse406 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                             GetBlocksLatestHeaderResponseBody406)
                                                                                                                                                                        | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Wallet.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") "/blocks/latest/header" GHC.Base.mempty)
-- | Represents a response of the operation 'getBlocksLatestHeader'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetBlocksLatestHeaderResponseError' is used.
data GetBlocksLatestHeaderResponse =
   GetBlocksLatestHeaderResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetBlocksLatestHeaderResponse200 GetBlocksLatestHeaderResponseBody200 -- ^ OK
  | GetBlocksLatestHeaderResponse406 GetBlocksLatestHeaderResponseBody406 -- ^ Not Acceptable
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/blocks\/latest\/header.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- A Block Header.
data GetBlocksLatestHeaderResponseBody200 = GetBlocksLatestHeaderResponseBody200 {
  -- | block_height
  getBlocksLatestHeaderResponseBody200Block_height :: GetBlocksLatestHeaderResponseBody200Block_height
  -- | header_hash: The hash of a block
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  -- * Minimum length of 64
  , getBlocksLatestHeaderResponseBody200Header_hash :: Data.Text.Internal.Text
  -- | slot_no
  , getBlocksLatestHeaderResponseBody200Slot_no :: GetBlocksLatestHeaderResponseBody200Slot_no
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBlocksLatestHeaderResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["block_height" Data.Aeson.Types.ToJSON..= getBlocksLatestHeaderResponseBody200Block_height obj] : ["header_hash" Data.Aeson.Types.ToJSON..= getBlocksLatestHeaderResponseBody200Header_hash obj] : ["slot_no" Data.Aeson.Types.ToJSON..= getBlocksLatestHeaderResponseBody200Slot_no obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["block_height" Data.Aeson.Types.ToJSON..= getBlocksLatestHeaderResponseBody200Block_height obj] : ["header_hash" Data.Aeson.Types.ToJSON..= getBlocksLatestHeaderResponseBody200Header_hash obj] : ["slot_no" Data.Aeson.Types.ToJSON..= getBlocksLatestHeaderResponseBody200Slot_no obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetBlocksLatestHeaderResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBlocksLatestHeaderResponseBody200" (\obj -> ((GHC.Base.pure GetBlocksLatestHeaderResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "block_height")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "header_hash")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "slot_no"))
-- | Create a new 'GetBlocksLatestHeaderResponseBody200' with all required fields.
mkGetBlocksLatestHeaderResponseBody200 :: GetBlocksLatestHeaderResponseBody200Block_height -- ^ 'getBlocksLatestHeaderResponseBody200Block_height'
  -> Data.Text.Internal.Text -- ^ 'getBlocksLatestHeaderResponseBody200Header_hash'
  -> GetBlocksLatestHeaderResponseBody200Slot_no -- ^ 'getBlocksLatestHeaderResponseBody200Slot_no'
  -> GetBlocksLatestHeaderResponseBody200
mkGetBlocksLatestHeaderResponseBody200 getBlocksLatestHeaderResponseBody200Block_height getBlocksLatestHeaderResponseBody200Header_hash getBlocksLatestHeaderResponseBody200Slot_no = GetBlocksLatestHeaderResponseBody200{getBlocksLatestHeaderResponseBody200Block_height = getBlocksLatestHeaderResponseBody200Block_height,
                                                                                                                                                                                                                           getBlocksLatestHeaderResponseBody200Header_hash = getBlocksLatestHeaderResponseBody200Header_hash,
                                                                                                                                                                                                                           getBlocksLatestHeaderResponseBody200Slot_no = getBlocksLatestHeaderResponseBody200Slot_no}
-- | Defines the object schema located at @paths.\/blocks\/latest\/header.GET.responses.200.content.application\/json.schema.properties.block_height@ in the specification.
-- 
-- 
data GetBlocksLatestHeaderResponseBody200Block_height = GetBlocksLatestHeaderResponseBody200Block_height {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  getBlocksLatestHeaderResponseBody200Block_heightQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBlocksLatestHeaderResponseBody200Block_height
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= getBlocksLatestHeaderResponseBody200Block_heightQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "block"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= getBlocksLatestHeaderResponseBody200Block_heightQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "block"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetBlocksLatestHeaderResponseBody200Block_height
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBlocksLatestHeaderResponseBody200Block_height" (\obj -> GHC.Base.pure GetBlocksLatestHeaderResponseBody200Block_height GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'GetBlocksLatestHeaderResponseBody200Block_height' with all required fields.
mkGetBlocksLatestHeaderResponseBody200Block_height :: GHC.Types.Int -- ^ 'getBlocksLatestHeaderResponseBody200Block_heightQuantity'
  -> GetBlocksLatestHeaderResponseBody200Block_height
mkGetBlocksLatestHeaderResponseBody200Block_height getBlocksLatestHeaderResponseBody200Block_heightQuantity = GetBlocksLatestHeaderResponseBody200Block_height{getBlocksLatestHeaderResponseBody200Block_heightQuantity = getBlocksLatestHeaderResponseBody200Block_heightQuantity}
-- | Defines the object schema located at @paths.\/blocks\/latest\/header.GET.responses.200.content.application\/json.schema.properties.slot_no@ in the specification.
-- 
-- 
data GetBlocksLatestHeaderResponseBody200Slot_no = GetBlocksLatestHeaderResponseBody200Slot_no {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  getBlocksLatestHeaderResponseBody200Slot_noQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBlocksLatestHeaderResponseBody200Slot_no
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= getBlocksLatestHeaderResponseBody200Slot_noQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "slot"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= getBlocksLatestHeaderResponseBody200Slot_noQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "slot"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetBlocksLatestHeaderResponseBody200Slot_no
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBlocksLatestHeaderResponseBody200Slot_no" (\obj -> GHC.Base.pure GetBlocksLatestHeaderResponseBody200Slot_no GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'GetBlocksLatestHeaderResponseBody200Slot_no' with all required fields.
mkGetBlocksLatestHeaderResponseBody200Slot_no :: GHC.Types.Int -- ^ 'getBlocksLatestHeaderResponseBody200Slot_noQuantity'
  -> GetBlocksLatestHeaderResponseBody200Slot_no
mkGetBlocksLatestHeaderResponseBody200Slot_no getBlocksLatestHeaderResponseBody200Slot_noQuantity = GetBlocksLatestHeaderResponseBody200Slot_no{getBlocksLatestHeaderResponseBody200Slot_noQuantity = getBlocksLatestHeaderResponseBody200Slot_noQuantity}
-- | Defines the object schema located at @paths.\/blocks\/latest\/header.GET.responses.406.content.application\/json.schema@ in the specification.
-- 
-- 
data GetBlocksLatestHeaderResponseBody406 = GetBlocksLatestHeaderResponseBody406 {
  -- | message: May occur when providing an invalid \'Accept\' header.
  getBlocksLatestHeaderResponseBody406Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetBlocksLatestHeaderResponseBody406
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= getBlocksLatestHeaderResponseBody406Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "not_acceptable"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= getBlocksLatestHeaderResponseBody406Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "not_acceptable"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetBlocksLatestHeaderResponseBody406
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBlocksLatestHeaderResponseBody406" (\obj -> GHC.Base.pure GetBlocksLatestHeaderResponseBody406 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'GetBlocksLatestHeaderResponseBody406' with all required fields.
mkGetBlocksLatestHeaderResponseBody406 :: Data.Text.Internal.Text -- ^ 'getBlocksLatestHeaderResponseBody406Message'
  -> GetBlocksLatestHeaderResponseBody406
mkGetBlocksLatestHeaderResponseBody406 getBlocksLatestHeaderResponseBody406Message = GetBlocksLatestHeaderResponseBody406{getBlocksLatestHeaderResponseBody406Message = getBlocksLatestHeaderResponseBody406Message}
-- | > GET /blocks/latest/header
-- 
-- The same as 'getBlocksLatestHeader' but accepts an explicit configuration.
getBlocksLatestHeaderWithConfiguration :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> m (Network.HTTP.Client.Types.Response GetBlocksLatestHeaderResponse) -- ^ Monadic computation which returns the result of the operation
getBlocksLatestHeaderWithConfiguration config = GHC.Base.fmap (\response_3 -> GHC.Base.fmap (Data.Either.either GetBlocksLatestHeaderResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksLatestHeaderResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                     GetBlocksLatestHeaderResponseBody200)
                                                                                                                                                                                                | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 406) (Network.HTTP.Client.Types.responseStatus response) -> GetBlocksLatestHeaderResponse406 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                     GetBlocksLatestHeaderResponseBody406)
                                                                                                                                                                                                | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_3) response_3) (Wallet.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") "/blocks/latest/header" GHC.Base.mempty)
-- | > GET /blocks/latest/header
-- 
-- The same as 'getBlocksLatestHeader' but returns the raw 'Data.ByteString.ByteString'.
getBlocksLatestHeaderRaw :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
getBlocksLatestHeaderRaw = GHC.Base.id (Wallet.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") "/blocks/latest/header" GHC.Base.mempty)
-- | > GET /blocks/latest/header
-- 
-- The same as 'getBlocksLatestHeader' but accepts an explicit configuration and returns the raw 'Data.ByteString.ByteString'.
getBlocksLatestHeaderWithConfigurationRaw :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
getBlocksLatestHeaderWithConfigurationRaw config = GHC.Base.id (Wallet.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") "/blocks/latest/header" GHC.Base.mempty)
