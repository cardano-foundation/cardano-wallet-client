-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation postMaintenanceAction
module Wallet.Operations.PostMaintenanceAction where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Wallet.Common
import Wallet.Types

-- | > POST /stake-pools/maintenance-actions
-- 
-- Performs maintenance actions on stake pools, such
-- as triggering metadata garbage collection.
-- 
-- Actions may not be instantaneous.
postMaintenanceAction :: forall m . Wallet.Common.MonadHTTP m => PostMaintenanceActionRequestBody -- ^ The request body to send
  -> Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response PostMaintenanceActionResponse) -- ^ Monadic computation which returns the result of the operation
postMaintenanceAction body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostMaintenanceActionResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 204) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right PostMaintenanceActionResponse204
                                                                                                                                                                             | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> PostMaintenanceActionResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                  PostMaintenanceActionResponseBody404)
                                                                                                                                                                             | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Wallet.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") "/stake-pools/maintenance-actions" GHC.Base.mempty (GHC.Maybe.Just body) Wallet.Common.RequestBodyEncodingJSON)
-- | Defines the object schema located at @paths.\/stake-pools\/maintenance-actions.POST.requestBody.content.application\/json.schema@ in the specification.
-- 
-- The maintenance action to carry out, current values are
--   - gc_stake_pools -> trigger looking up delisted pools from the remote SMASH server
data PostMaintenanceActionRequestBody = PostMaintenanceActionRequestBody {

  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostMaintenanceActionRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["maintenance_action" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "gc_stake_pools"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["maintenance_action" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "gc_stake_pools"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostMaintenanceActionRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostMaintenanceActionRequestBody" (\obj -> GHC.Base.pure PostMaintenanceActionRequestBody)
-- | Create a new 'PostMaintenanceActionRequestBody' with all required fields.
mkPostMaintenanceActionRequestBody :: PostMaintenanceActionRequestBody
mkPostMaintenanceActionRequestBody = PostMaintenanceActionRequestBody{}
-- | Represents a response of the operation 'postMaintenanceAction'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostMaintenanceActionResponseError' is used.
data PostMaintenanceActionResponse =
   PostMaintenanceActionResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | PostMaintenanceActionResponse204 -- ^ No Content
  | PostMaintenanceActionResponse404 PostMaintenanceActionResponseBody404 -- ^ Not Found
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/stake-pools\/maintenance-actions.POST.responses.404.content.application\/json.schema@ in the specification.
-- 
-- 
data PostMaintenanceActionResponseBody404 = PostMaintenanceActionResponseBody404 {
  -- | code: A specific error code for this error, more precise than HTTP ones.
  postMaintenanceActionResponseBody404Code :: Data.Text.Internal.Text
  -- | message: A descriptive error message.
  , postMaintenanceActionResponseBody404Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostMaintenanceActionResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["code" Data.Aeson.Types.ToJSON..= postMaintenanceActionResponseBody404Code obj] : ["message" Data.Aeson.Types.ToJSON..= postMaintenanceActionResponseBody404Message obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["code" Data.Aeson.Types.ToJSON..= postMaintenanceActionResponseBody404Code obj] : ["message" Data.Aeson.Types.ToJSON..= postMaintenanceActionResponseBody404Message obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostMaintenanceActionResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostMaintenanceActionResponseBody404" (\obj -> (GHC.Base.pure PostMaintenanceActionResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'PostMaintenanceActionResponseBody404' with all required fields.
mkPostMaintenanceActionResponseBody404 :: Data.Text.Internal.Text -- ^ 'postMaintenanceActionResponseBody404Code'
  -> Data.Text.Internal.Text -- ^ 'postMaintenanceActionResponseBody404Message'
  -> PostMaintenanceActionResponseBody404
mkPostMaintenanceActionResponseBody404 postMaintenanceActionResponseBody404Code postMaintenanceActionResponseBody404Message = PostMaintenanceActionResponseBody404{postMaintenanceActionResponseBody404Code = postMaintenanceActionResponseBody404Code,
                                                                                                                                                                   postMaintenanceActionResponseBody404Message = postMaintenanceActionResponseBody404Message}
-- | > POST /stake-pools/maintenance-actions
-- 
-- The same as 'postMaintenanceAction' but accepts an explicit configuration.
postMaintenanceActionWithConfiguration :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> PostMaintenanceActionRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response PostMaintenanceActionResponse) -- ^ Monadic computation which returns the result of the operation
postMaintenanceActionWithConfiguration config
                                       body = GHC.Base.fmap (\response_3 -> GHC.Base.fmap (Data.Either.either PostMaintenanceActionResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 204) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right PostMaintenanceActionResponse204
                                                                                                                                                                                              | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> PostMaintenanceActionResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                   PostMaintenanceActionResponseBody404)
                                                                                                                                                                                              | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_3) response_3) (Wallet.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") "/stake-pools/maintenance-actions" GHC.Base.mempty (GHC.Maybe.Just body) Wallet.Common.RequestBodyEncodingJSON)
-- | > POST /stake-pools/maintenance-actions
-- 
-- The same as 'postMaintenanceAction' but returns the raw 'Data.ByteString.ByteString'.
postMaintenanceActionRaw :: forall m . Wallet.Common.MonadHTTP m => PostMaintenanceActionRequestBody -- ^ The request body to send
  -> Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
postMaintenanceActionRaw body = GHC.Base.id (Wallet.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") "/stake-pools/maintenance-actions" GHC.Base.mempty (GHC.Maybe.Just body) Wallet.Common.RequestBodyEncodingJSON)
-- | > POST /stake-pools/maintenance-actions
-- 
-- The same as 'postMaintenanceAction' but accepts an explicit configuration and returns the raw 'Data.ByteString.ByteString'.
postMaintenanceActionWithConfigurationRaw :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> PostMaintenanceActionRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
postMaintenanceActionWithConfigurationRaw config
                                          body = GHC.Base.id (Wallet.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") "/stake-pools/maintenance-actions" GHC.Base.mempty (GHC.Maybe.Just body) Wallet.Common.RequestBodyEncodingJSON)
