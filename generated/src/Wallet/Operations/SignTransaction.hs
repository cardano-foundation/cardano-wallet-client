-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation signTransaction
module Wallet.Operations.SignTransaction where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Wallet.Common
import Wallet.Types

-- | > POST /wallets/{walletId}/transactions-sign
-- 
-- \<p align=\"right\">status: \<strong>stable\<\/strong>\<\/p>
-- 
-- Signs a serialised transaction either hex-encoded or base64-encoded,
-- returning the modified transaction.
-- 
-- This endpoint will add new witnesses using the keys available
-- to this wallet. Any existing witnesses will remain in the
-- witness set.
signTransaction :: forall m . Wallet.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ walletId | Constraints: Maximum length of 40, Minimum length of 40
  -> SignTransactionRequestBody -- ^ The request body to send
  -> Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response SignTransactionResponse) -- ^ Monadic computation which returns the result of the operation
signTransaction walletId
                body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either SignTransactionResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 202) (Network.HTTP.Client.Types.responseStatus response) -> SignTransactionResponse202 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                SignTransactionResponseBody202)
                                                                                                                                                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> SignTransactionResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                SignTransactionResponseBody400)
                                                                                                                                                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> SignTransactionResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                SignTransactionResponseBody403Variants)
                                                                                                                                                                 | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> SignTransactionResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                SignTransactionResponseBody404)
                                                                                                                                                                 | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 406) (Network.HTTP.Client.Types.responseStatus response) -> SignTransactionResponse406 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                SignTransactionResponseBody406)
                                                                                                                                                                 | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 415) (Network.HTTP.Client.Types.responseStatus response) -> SignTransactionResponse415 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                SignTransactionResponseBody415)
                                                                                                                                                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Wallet.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") ("/wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel walletId)) GHC.Base.<> "/transactions-sign")) GHC.Base.mempty (GHC.Maybe.Just body) Wallet.Common.RequestBodyEncodingJSON)
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/transactions-sign.POST.requestBody.content.application\/json.schema@ in the specification.
-- 
-- 
data SignTransactionRequestBody = SignTransactionRequestBody {
  -- | encoding: Encoding of transaction CBOR returned in response (base64 by default).
  signTransactionRequestBodyEncoding :: (GHC.Maybe.Maybe SignTransactionRequestBodyEncoding)
  -- | passphrase: The wallet\'s master passphrase.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 255
  -- * Minimum length of 0
  , signTransactionRequestBodyPassphrase :: Data.Text.Internal.Text
  -- | transaction: The CBOR-encoded transaction, represented in either hex or base64 encoding.
  -- This always includes the transaction body and the witness set, even if the
  -- latter is empty.
  , signTransactionRequestBodyTransaction :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON SignTransactionRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("encoding" Data.Aeson.Types.ToJSON..=)) (signTransactionRequestBodyEncoding obj) : ["passphrase" Data.Aeson.Types.ToJSON..= signTransactionRequestBodyPassphrase obj] : ["transaction" Data.Aeson.Types.ToJSON..= signTransactionRequestBodyTransaction obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("encoding" Data.Aeson.Types.ToJSON..=)) (signTransactionRequestBodyEncoding obj) : ["passphrase" Data.Aeson.Types.ToJSON..= signTransactionRequestBodyPassphrase obj] : ["transaction" Data.Aeson.Types.ToJSON..= signTransactionRequestBodyTransaction obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON SignTransactionRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SignTransactionRequestBody" (\obj -> ((GHC.Base.pure SignTransactionRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "encoding")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "passphrase")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "transaction"))
-- | Create a new 'SignTransactionRequestBody' with all required fields.
mkSignTransactionRequestBody :: Data.Text.Internal.Text -- ^ 'signTransactionRequestBodyPassphrase'
  -> Data.Text.Internal.Text -- ^ 'signTransactionRequestBodyTransaction'
  -> SignTransactionRequestBody
mkSignTransactionRequestBody signTransactionRequestBodyPassphrase signTransactionRequestBodyTransaction = SignTransactionRequestBody{signTransactionRequestBodyEncoding = GHC.Maybe.Nothing,
                                                                                                                                     signTransactionRequestBodyPassphrase = signTransactionRequestBodyPassphrase,
                                                                                                                                     signTransactionRequestBodyTransaction = signTransactionRequestBodyTransaction}
-- | Defines the enum schema located at @paths.\/wallets\/{walletId}\/transactions-sign.POST.requestBody.content.application\/json.schema.properties.encoding@ in the specification.
-- 
-- Encoding of transaction CBOR returned in response (base64 by default).
data SignTransactionRequestBodyEncoding =
   SignTransactionRequestBodyEncodingOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | SignTransactionRequestBodyEncodingTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | SignTransactionRequestBodyEncodingEnumBase16 -- ^ Represents the JSON value @"base16"@
  | SignTransactionRequestBodyEncodingEnumBase64 -- ^ Represents the JSON value @"base64"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON SignTransactionRequestBodyEncoding
    where toJSON (SignTransactionRequestBodyEncodingOther val) = val
          toJSON (SignTransactionRequestBodyEncodingTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (SignTransactionRequestBodyEncodingEnumBase16) = "base16"
          toJSON (SignTransactionRequestBodyEncodingEnumBase64) = "base64"
instance Data.Aeson.Types.FromJSON.FromJSON SignTransactionRequestBodyEncoding
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "base16" -> SignTransactionRequestBodyEncodingEnumBase16
                                            | val GHC.Classes.== "base64" -> SignTransactionRequestBodyEncodingEnumBase64
                                            | GHC.Base.otherwise -> SignTransactionRequestBodyEncodingOther val)
-- | Represents a response of the operation 'signTransaction'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'SignTransactionResponseError' is used.
data SignTransactionResponse =
   SignTransactionResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | SignTransactionResponse202 SignTransactionResponseBody202 -- ^ Accepted
  | SignTransactionResponse400 SignTransactionResponseBody400 -- ^ Bad Request
  | SignTransactionResponse403 SignTransactionResponseBody403Variants -- ^ Forbidden
  | SignTransactionResponse404 SignTransactionResponseBody404 -- ^ Not Found
  | SignTransactionResponse406 SignTransactionResponseBody406 -- ^ Not Acceptable
  | SignTransactionResponse415 SignTransactionResponseBody415 -- ^ Unsupported Media Type
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/transactions-sign.POST.responses.202.content.application\/json.schema@ in the specification.
-- 
-- The result of signing a transaction (serialized and encoded).
data SignTransactionResponseBody202 = SignTransactionResponseBody202 {
  -- | transaction: The CBOR-encoded transaction, represented in either hex or base64 encoding.
  -- This always includes the transaction body and the witness set, even if the
  -- latter is empty.
  signTransactionResponseBody202Transaction :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON SignTransactionResponseBody202
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["transaction" Data.Aeson.Types.ToJSON..= signTransactionResponseBody202Transaction obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["transaction" Data.Aeson.Types.ToJSON..= signTransactionResponseBody202Transaction obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON SignTransactionResponseBody202
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SignTransactionResponseBody202" (\obj -> GHC.Base.pure SignTransactionResponseBody202 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "transaction"))
-- | Create a new 'SignTransactionResponseBody202' with all required fields.
mkSignTransactionResponseBody202 :: Data.Text.Internal.Text -- ^ 'signTransactionResponseBody202Transaction'
  -> SignTransactionResponseBody202
mkSignTransactionResponseBody202 signTransactionResponseBody202Transaction = SignTransactionResponseBody202{signTransactionResponseBody202Transaction = signTransactionResponseBody202Transaction}
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/transactions-sign.POST.responses.400.content.application\/json.schema@ in the specification.
-- 
-- 
data SignTransactionResponseBody400 = SignTransactionResponseBody400 {
  -- | message: May occur when a request is not well-formed; that is, it fails to parse
  -- successfully. This could be the case when some required parameters
  -- are missing or, when malformed values are provided.
  signTransactionResponseBody400Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON SignTransactionResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= signTransactionResponseBody400Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "bad_request"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= signTransactionResponseBody400Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "bad_request"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON SignTransactionResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SignTransactionResponseBody400" (\obj -> GHC.Base.pure SignTransactionResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'SignTransactionResponseBody400' with all required fields.
mkSignTransactionResponseBody400 :: Data.Text.Internal.Text -- ^ 'signTransactionResponseBody400Message'
  -> SignTransactionResponseBody400
mkSignTransactionResponseBody400 signTransactionResponseBody400Message = SignTransactionResponseBody400{signTransactionResponseBody400Message = signTransactionResponseBody400Message}
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/transactions-sign.POST.responses.403.content.application\/json.schema.oneOf@ in the specification.
-- 
-- 
data SignTransactionResponseBody403OneOf1 = SignTransactionResponseBody403OneOf1 {
  -- | message: May occur when an action require a signing key but the wallet has only access to verification keys.
  signTransactionResponseBody403OneOf1Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON SignTransactionResponseBody403OneOf1
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= signTransactionResponseBody403OneOf1Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "no_root_key"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= signTransactionResponseBody403OneOf1Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "no_root_key"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON SignTransactionResponseBody403OneOf1
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SignTransactionResponseBody403OneOf1" (\obj -> GHC.Base.pure SignTransactionResponseBody403OneOf1 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'SignTransactionResponseBody403OneOf1' with all required fields.
mkSignTransactionResponseBody403OneOf1 :: Data.Text.Internal.Text -- ^ 'signTransactionResponseBody403OneOf1Message'
  -> SignTransactionResponseBody403OneOf1
mkSignTransactionResponseBody403OneOf1 signTransactionResponseBody403OneOf1Message = SignTransactionResponseBody403OneOf1{signTransactionResponseBody403OneOf1Message = signTransactionResponseBody403OneOf1Message}
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/transactions-sign.POST.responses.403.content.application\/json.schema.oneOf@ in the specification.
-- 
-- 
data SignTransactionResponseBody403OneOf2 = SignTransactionResponseBody403OneOf2 {
  -- | message: May occur when the given spending passphrase is wrong.
  signTransactionResponseBody403OneOf2Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON SignTransactionResponseBody403OneOf2
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= signTransactionResponseBody403OneOf2Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "wrong_encryption_passphrase"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= signTransactionResponseBody403OneOf2Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "wrong_encryption_passphrase"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON SignTransactionResponseBody403OneOf2
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SignTransactionResponseBody403OneOf2" (\obj -> GHC.Base.pure SignTransactionResponseBody403OneOf2 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'SignTransactionResponseBody403OneOf2' with all required fields.
mkSignTransactionResponseBody403OneOf2 :: Data.Text.Internal.Text -- ^ 'signTransactionResponseBody403OneOf2Message'
  -> SignTransactionResponseBody403OneOf2
mkSignTransactionResponseBody403OneOf2 signTransactionResponseBody403OneOf2Message = SignTransactionResponseBody403OneOf2{signTransactionResponseBody403OneOf2Message = signTransactionResponseBody403OneOf2Message}
-- | Defines the oneOf schema located at @paths.\/wallets\/{walletId}\/transactions-sign.POST.responses.403.content.application\/json.schema.oneOf@ in the specification.
-- 
-- 
data SignTransactionResponseBody403Variants =
   SignTransactionResponseBody403Variant1 SignTransactionResponseBody403OneOf1
  | SignTransactionResponseBody403Variant2 SignTransactionResponseBody403OneOf2
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON SignTransactionResponseBody403Variants
    where toJSON (SignTransactionResponseBody403Variant1 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (SignTransactionResponseBody403Variant2 a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON SignTransactionResponseBody403Variants
    where parseJSON val = case (SignTransactionResponseBody403Variant1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((SignTransactionResponseBody403Variant2 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/transactions-sign.POST.responses.404.content.application\/json.schema@ in the specification.
-- 
-- 
data SignTransactionResponseBody404 = SignTransactionResponseBody404 {
  -- | message: May occur when a given walletId does not match with any known
  -- wallets (because it has been deleted, or has never existed).
  signTransactionResponseBody404Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON SignTransactionResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= signTransactionResponseBody404Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "no_such_wallet"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= signTransactionResponseBody404Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "no_such_wallet"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON SignTransactionResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SignTransactionResponseBody404" (\obj -> GHC.Base.pure SignTransactionResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'SignTransactionResponseBody404' with all required fields.
mkSignTransactionResponseBody404 :: Data.Text.Internal.Text -- ^ 'signTransactionResponseBody404Message'
  -> SignTransactionResponseBody404
mkSignTransactionResponseBody404 signTransactionResponseBody404Message = SignTransactionResponseBody404{signTransactionResponseBody404Message = signTransactionResponseBody404Message}
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/transactions-sign.POST.responses.406.content.application\/json.schema@ in the specification.
-- 
-- 
data SignTransactionResponseBody406 = SignTransactionResponseBody406 {
  -- | message: May occur when providing an invalid \'Accept\' header.
  signTransactionResponseBody406Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON SignTransactionResponseBody406
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= signTransactionResponseBody406Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "not_acceptable"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= signTransactionResponseBody406Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "not_acceptable"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON SignTransactionResponseBody406
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SignTransactionResponseBody406" (\obj -> GHC.Base.pure SignTransactionResponseBody406 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'SignTransactionResponseBody406' with all required fields.
mkSignTransactionResponseBody406 :: Data.Text.Internal.Text -- ^ 'signTransactionResponseBody406Message'
  -> SignTransactionResponseBody406
mkSignTransactionResponseBody406 signTransactionResponseBody406Message = SignTransactionResponseBody406{signTransactionResponseBody406Message = signTransactionResponseBody406Message}
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/transactions-sign.POST.responses.415.content.application\/json.schema@ in the specification.
-- 
-- 
data SignTransactionResponseBody415 = SignTransactionResponseBody415 {
  -- | message: May occur when providing an invalid \'Content-Type\' header.
  signTransactionResponseBody415Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON SignTransactionResponseBody415
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= signTransactionResponseBody415Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "unsupported_media_type"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= signTransactionResponseBody415Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "unsupported_media_type"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON SignTransactionResponseBody415
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SignTransactionResponseBody415" (\obj -> GHC.Base.pure SignTransactionResponseBody415 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'SignTransactionResponseBody415' with all required fields.
mkSignTransactionResponseBody415 :: Data.Text.Internal.Text -- ^ 'signTransactionResponseBody415Message'
  -> SignTransactionResponseBody415
mkSignTransactionResponseBody415 signTransactionResponseBody415Message = SignTransactionResponseBody415{signTransactionResponseBody415Message = signTransactionResponseBody415Message}
-- | > POST /wallets/{walletId}/transactions-sign
-- 
-- The same as 'signTransaction' but accepts an explicit configuration.
signTransactionWithConfiguration :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ walletId | Constraints: Maximum length of 40, Minimum length of 40
  -> SignTransactionRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response SignTransactionResponse) -- ^ Monadic computation which returns the result of the operation
signTransactionWithConfiguration config
                                 walletId
                                 body = GHC.Base.fmap (\response_7 -> GHC.Base.fmap (Data.Either.either SignTransactionResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_8 -> Network.HTTP.Types.Status.statusCode status_8 GHC.Classes.== 202) (Network.HTTP.Client.Types.responseStatus response) -> SignTransactionResponse202 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                 SignTransactionResponseBody202)
                                                                                                                                                                                  | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> SignTransactionResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                 SignTransactionResponseBody400)
                                                                                                                                                                                  | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> SignTransactionResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                   SignTransactionResponseBody403Variants)
                                                                                                                                                                                  | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> SignTransactionResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                   SignTransactionResponseBody404)
                                                                                                                                                                                  | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 406) (Network.HTTP.Client.Types.responseStatus response) -> SignTransactionResponse406 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                   SignTransactionResponseBody406)
                                                                                                                                                                                  | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 415) (Network.HTTP.Client.Types.responseStatus response) -> SignTransactionResponse415 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                   SignTransactionResponseBody415)
                                                                                                                                                                                  | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_7) response_7) (Wallet.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") ("/wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel walletId)) GHC.Base.<> "/transactions-sign")) GHC.Base.mempty (GHC.Maybe.Just body) Wallet.Common.RequestBodyEncodingJSON)
-- | > POST /wallets/{walletId}/transactions-sign
-- 
-- The same as 'signTransaction' but returns the raw 'Data.ByteString.ByteString'.
signTransactionRaw :: forall m . Wallet.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ walletId | Constraints: Maximum length of 40, Minimum length of 40
  -> SignTransactionRequestBody -- ^ The request body to send
  -> Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
signTransactionRaw walletId
                   body = GHC.Base.id (Wallet.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") ("/wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel walletId)) GHC.Base.<> "/transactions-sign")) GHC.Base.mempty (GHC.Maybe.Just body) Wallet.Common.RequestBodyEncodingJSON)
-- | > POST /wallets/{walletId}/transactions-sign
-- 
-- The same as 'signTransaction' but accepts an explicit configuration and returns the raw 'Data.ByteString.ByteString'.
signTransactionWithConfigurationRaw :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ walletId | Constraints: Maximum length of 40, Minimum length of 40
  -> SignTransactionRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
signTransactionWithConfigurationRaw config
                                    walletId
                                    body = GHC.Base.id (Wallet.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") ("/wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel walletId)) GHC.Base.<> "/transactions-sign")) GHC.Base.mempty (GHC.Maybe.Just body) Wallet.Common.RequestBodyEncodingJSON)
