-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation postSharedWallet
module Wallet.Operations.PostSharedWallet where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Wallet.Common
import Wallet.Types

-- | > POST /shared-wallets
-- 
-- \<p align=\"right\">status: \<strong>âš  under development\<\/strong>\<\/p>
-- Create a shared wallet from either an account public key and script
-- templates or mnemonic and script templates.
postSharedWallet :: forall m . Wallet.Common.MonadHTTP m => PostSharedWalletRequestBodyVariants -- ^ The request body to send
  -> Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response PostSharedWalletResponse) -- ^ Monadic computation which returns the result of the operation
postSharedWallet body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostSharedWalletResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 201) (Network.HTTP.Client.Types.responseStatus response) -> PostSharedWalletResponse201 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                   PostSharedWalletResponseBody201Variants)
                                                                                                                                                                   | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> PostSharedWalletResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                   PostSharedWalletResponseBody400)
                                                                                                                                                                   | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> PostSharedWalletResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                   PostSharedWalletResponseBody403Variants)
                                                                                                                                                                   | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 406) (Network.HTTP.Client.Types.responseStatus response) -> PostSharedWalletResponse406 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                   PostSharedWalletResponseBody406)
                                                                                                                                                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 409) (Network.HTTP.Client.Types.responseStatus response) -> PostSharedWalletResponse409 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                   PostSharedWalletResponseBody409)
                                                                                                                                                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 415) (Network.HTTP.Client.Types.responseStatus response) -> PostSharedWalletResponse415 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                   PostSharedWalletResponseBody415)
                                                                                                                                                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> PostSharedWalletResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                   PostSharedWalletResponseBody500Variants)
                                                                                                                                                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Wallet.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") "/shared-wallets" GHC.Base.mempty (GHC.Maybe.Just body) Wallet.Common.RequestBodyEncodingJSON)
-- | Defines the object schema located at @paths.\/shared-wallets.POST.requestBody.content.application\/json.schema.oneOf@ in the specification.
-- 
-- 
data PostSharedWalletRequestBodyOneOf1 = PostSharedWalletRequestBodyOneOf1 {
  -- | account_index: An individual segment within a derivation path.
  -- 
  -- The \`H\` suffix indicates a _Hardened_ child private key, which
  -- means that children of this key cannot be derived from the public
  -- key. Indices without a \`H\` suffix are called _Soft_.
  postSharedWalletRequestBodyOneOf1Account_index :: Data.Text.Internal.Text
  -- | delegation_script_template
  , postSharedWalletRequestBodyOneOf1Delegation_script_template :: (GHC.Maybe.Maybe PostSharedWalletRequestBodyOneOf1Delegation_script_template)
  -- | mnemonic_second_factor: An optional passphrase used to encrypt the mnemonic sentence.
  -- 
  -- Constraints:
  -- 
  -- * Must have a maximum of 12 items
  -- * Must have a minimum of 9 items
  , postSharedWalletRequestBodyOneOf1Mnemonic_second_factor :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text]))
  -- | mnemonic_sentence: A list of mnemonic words
  -- 
  -- Constraints:
  -- 
  -- * Must have a maximum of 24 items
  -- * Must have a minimum of 15 items
  , postSharedWalletRequestBodyOneOf1Mnemonic_sentence :: ([Data.Text.Internal.Text])
  -- | name
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 255
  -- * Minimum length of 1
  , postSharedWalletRequestBodyOneOf1Name :: Data.Text.Internal.Text
  -- | passphrase: A master passphrase to lock and protect the wallet for sensitive operation (e.g. sending funds)
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 255
  -- * Minimum length of 10
  , postSharedWalletRequestBodyOneOf1Passphrase :: Data.Text.Internal.Text
  -- | payment_script_template
  , postSharedWalletRequestBodyOneOf1Payment_script_template :: PostSharedWalletRequestBodyOneOf1Payment_script_template
  -- | script_validation: Script validation level. Required validation sifts off scripts that would not
  -- be accepted by the ledger. Recommended level filters out scripts that do not pass
  -- required validation and additionally when:
  --   * \'all\' is non-empty
  --   * there are redundant timelocks in a given level
  --   * there are no duplicated verification keys in a given level
  --   * \'at_least\' coefficient is positive
  --   * \'all\', \'any\' are non-empty and \`\'at_least\' has no less elements in the list
  --      than the coefficient after timelocks are filtered out.
  , postSharedWalletRequestBodyOneOf1Script_validation :: (GHC.Maybe.Maybe PostSharedWalletRequestBodyOneOf1Script_validation)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletRequestBodyOneOf1
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["account_index" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf1Account_index obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("delegation_script_template" Data.Aeson.Types.ToJSON..=)) (postSharedWalletRequestBodyOneOf1Delegation_script_template obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mnemonic_second_factor" Data.Aeson.Types.ToJSON..=)) (postSharedWalletRequestBodyOneOf1Mnemonic_second_factor obj) : ["mnemonic_sentence" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf1Mnemonic_sentence obj] : ["name" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf1Name obj] : ["passphrase" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf1Passphrase obj] : ["payment_script_template" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf1Payment_script_template obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("script_validation" Data.Aeson.Types.ToJSON..=)) (postSharedWalletRequestBodyOneOf1Script_validation obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["account_index" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf1Account_index obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("delegation_script_template" Data.Aeson.Types.ToJSON..=)) (postSharedWalletRequestBodyOneOf1Delegation_script_template obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mnemonic_second_factor" Data.Aeson.Types.ToJSON..=)) (postSharedWalletRequestBodyOneOf1Mnemonic_second_factor obj) : ["mnemonic_sentence" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf1Mnemonic_sentence obj] : ["name" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf1Name obj] : ["passphrase" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf1Passphrase obj] : ["payment_script_template" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf1Payment_script_template obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("script_validation" Data.Aeson.Types.ToJSON..=)) (postSharedWalletRequestBodyOneOf1Script_validation obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletRequestBodyOneOf1
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletRequestBodyOneOf1" (\obj -> (((((((GHC.Base.pure PostSharedWalletRequestBodyOneOf1 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "account_index")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "delegation_script_template")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "mnemonic_second_factor")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "mnemonic_sentence")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "passphrase")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "payment_script_template")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "script_validation"))
-- | Create a new 'PostSharedWalletRequestBodyOneOf1' with all required fields.
mkPostSharedWalletRequestBodyOneOf1 :: Data.Text.Internal.Text -- ^ 'postSharedWalletRequestBodyOneOf1Account_index'
  -> [Data.Text.Internal.Text] -- ^ 'postSharedWalletRequestBodyOneOf1Mnemonic_sentence'
  -> Data.Text.Internal.Text -- ^ 'postSharedWalletRequestBodyOneOf1Name'
  -> Data.Text.Internal.Text -- ^ 'postSharedWalletRequestBodyOneOf1Passphrase'
  -> PostSharedWalletRequestBodyOneOf1Payment_script_template -- ^ 'postSharedWalletRequestBodyOneOf1Payment_script_template'
  -> PostSharedWalletRequestBodyOneOf1
mkPostSharedWalletRequestBodyOneOf1 postSharedWalletRequestBodyOneOf1Account_index postSharedWalletRequestBodyOneOf1Mnemonic_sentence postSharedWalletRequestBodyOneOf1Name postSharedWalletRequestBodyOneOf1Passphrase postSharedWalletRequestBodyOneOf1Payment_script_template = PostSharedWalletRequestBodyOneOf1{postSharedWalletRequestBodyOneOf1Account_index = postSharedWalletRequestBodyOneOf1Account_index,
                                                                                                                                                                                                                                                                                                                     postSharedWalletRequestBodyOneOf1Delegation_script_template = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                                                                     postSharedWalletRequestBodyOneOf1Mnemonic_second_factor = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                                                                     postSharedWalletRequestBodyOneOf1Mnemonic_sentence = postSharedWalletRequestBodyOneOf1Mnemonic_sentence,
                                                                                                                                                                                                                                                                                                                     postSharedWalletRequestBodyOneOf1Name = postSharedWalletRequestBodyOneOf1Name,
                                                                                                                                                                                                                                                                                                                     postSharedWalletRequestBodyOneOf1Passphrase = postSharedWalletRequestBodyOneOf1Passphrase,
                                                                                                                                                                                                                                                                                                                     postSharedWalletRequestBodyOneOf1Payment_script_template = postSharedWalletRequestBodyOneOf1Payment_script_template,
                                                                                                                                                                                                                                                                                                                     postSharedWalletRequestBodyOneOf1Script_validation = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.requestBody.content.application\/json.schema.oneOf.properties.delegation_script_template@ in the specification.
-- 
-- 
data PostSharedWalletRequestBodyOneOf1Delegation_script_template = PostSharedWalletRequestBodyOneOf1Delegation_script_template {
  -- | cosigners: Map of cosigners and their account public keys. Use key as in &cosigner, eg. \"cosigner\#\"or \'self\'
  postSharedWalletRequestBodyOneOf1Delegation_script_templateCosigners :: Data.Aeson.Types.Internal.Object
  -- | template
  , postSharedWalletRequestBodyOneOf1Delegation_script_templateTemplate :: PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateVariants
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletRequestBodyOneOf1Delegation_script_template
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["cosigners" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf1Delegation_script_templateCosigners obj] : ["template" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf1Delegation_script_templateTemplate obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["cosigners" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf1Delegation_script_templateCosigners obj] : ["template" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf1Delegation_script_templateTemplate obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletRequestBodyOneOf1Delegation_script_template
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletRequestBodyOneOf1Delegation_script_template" (\obj -> (GHC.Base.pure PostSharedWalletRequestBodyOneOf1Delegation_script_template GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cosigners")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "template"))
-- | Create a new 'PostSharedWalletRequestBodyOneOf1Delegation_script_template' with all required fields.
mkPostSharedWalletRequestBodyOneOf1Delegation_script_template :: Data.Aeson.Types.Internal.Object -- ^ 'postSharedWalletRequestBodyOneOf1Delegation_script_templateCosigners'
  -> PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateVariants -- ^ 'postSharedWalletRequestBodyOneOf1Delegation_script_templateTemplate'
  -> PostSharedWalletRequestBodyOneOf1Delegation_script_template
mkPostSharedWalletRequestBodyOneOf1Delegation_script_template postSharedWalletRequestBodyOneOf1Delegation_script_templateCosigners postSharedWalletRequestBodyOneOf1Delegation_script_templateTemplate = PostSharedWalletRequestBodyOneOf1Delegation_script_template{postSharedWalletRequestBodyOneOf1Delegation_script_templateCosigners = postSharedWalletRequestBodyOneOf1Delegation_script_templateCosigners,
                                                                                                                                                                                                                                                                     postSharedWalletRequestBodyOneOf1Delegation_script_templateTemplate = postSharedWalletRequestBodyOneOf1Delegation_script_templateTemplate}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.requestBody.content.application\/json.schema.oneOf.properties.delegation_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf2 = PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf2 {
  -- | all: Script primitive for which all signing keys corresponding to all list cosigners\' verification keys are expected to make the script valid.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  postSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf2All :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf2
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["all" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf2All obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["all" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf2All obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf2
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf2" (\obj -> GHC.Base.pure PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf2 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "all"))
-- | Create a new 'PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf2' with all required fields.
mkPostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf2 :: [ScriptTemplateValue] -- ^ 'postSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf2All'
  -> PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf2
mkPostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf2 postSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf2All = PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf2{postSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf2All = postSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf2All}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.requestBody.content.application\/json.schema.oneOf.properties.delegation_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf3 = PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf3 {
  -- | any: Script primitive for which a signing key corresponding to any of the list cosigners\' verification keys is expected to make the script valid. It is equivalent to \`some\` with \`\"at_least\"=1\`.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  postSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf3Any :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf3
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["any" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf3Any obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["any" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf3Any obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf3
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf3" (\obj -> GHC.Base.pure PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf3 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "any"))
-- | Create a new 'PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf3' with all required fields.
mkPostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf3 :: [ScriptTemplateValue] -- ^ 'postSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf3Any'
  -> PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf3
mkPostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf3 postSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf3Any = PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf3{postSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf3Any = postSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf3Any}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.requestBody.content.application\/json.schema.oneOf.properties.delegation_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf4 = PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf4 {
  -- | some: Script primitive for which at least a given number of signing keys corresponding to the list cosigners\' verification keys are expected to make the script valid.
  postSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf4Some :: PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf4Some
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf4
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["some" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf4Some obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["some" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf4Some obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf4
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf4" (\obj -> GHC.Base.pure PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf4 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "some"))
-- | Create a new 'PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf4' with all required fields.
mkPostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf4 :: PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf4Some -- ^ 'postSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf4Some'
  -> PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf4
mkPostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf4 postSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf4Some = PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf4{postSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf4Some = postSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf4Some}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.requestBody.content.application\/json.schema.oneOf.properties.delegation_script_template.properties.template.oneOf.properties.some@ in the specification.
-- 
-- Script primitive for which at least a given number of signing keys corresponding to the list cosigners\' verification keys are expected to make the script valid.
data PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf4Some = PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf4Some {
  -- | at_least
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 255.0
  -- * Minimum  of 1.0
  postSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf4SomeAt_least :: GHC.Types.Int
  -- | from
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  , postSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf4SomeFrom :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf4Some
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["at_least" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf4SomeAt_least obj] : ["from" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf4SomeFrom obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["at_least" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf4SomeAt_least obj] : ["from" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf4SomeFrom obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf4Some
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf4Some" (\obj -> (GHC.Base.pure PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf4Some GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "at_least")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "from"))
-- | Create a new 'PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf4Some' with all required fields.
mkPostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf4Some :: GHC.Types.Int -- ^ 'postSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf4SomeAt_least'
  -> [ScriptTemplateValue] -- ^ 'postSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf4SomeFrom'
  -> PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf4Some
mkPostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf4Some postSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf4SomeAt_least postSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf4SomeFrom = PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf4Some{postSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf4SomeAt_least = postSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf4SomeAt_least,
                                                                                                                                                                                                                                                                                                                                        postSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf4SomeFrom = postSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf4SomeFrom}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.requestBody.content.application\/json.schema.oneOf.properties.delegation_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf5 = PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf5 {
  -- | active_from: Transaction is only valid starting at the specified slot number (\`â‰¥ active_from\`).
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  postSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf5Active_from :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf5
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["active_from" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf5Active_from obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["active_from" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf5Active_from obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf5
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf5" (\obj -> GHC.Base.pure PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf5 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active_from"))
-- | Create a new 'PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf5' with all required fields.
mkPostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf5 :: GHC.Types.Int -- ^ 'postSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf5Active_from'
  -> PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf5
mkPostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf5 postSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf5Active_from = PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf5{postSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf5Active_from = postSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf5Active_from}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.requestBody.content.application\/json.schema.oneOf.properties.delegation_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf6 = PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf6 {
  -- | active_until: Transaction is only valid before the specified slot number (\`\< active_until\`).
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  postSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf6Active_until :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf6
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["active_until" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf6Active_until obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["active_until" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf6Active_until obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf6
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf6" (\obj -> GHC.Base.pure PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf6 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active_until"))
-- | Create a new 'PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf6' with all required fields.
mkPostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf6 :: GHC.Types.Int -- ^ 'postSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf6Active_until'
  -> PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf6
mkPostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf6 postSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf6Active_until = PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf6{postSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf6Active_until = postSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf6Active_until}
-- | Defines the oneOf schema located at @paths.\/shared-wallets.POST.requestBody.content.application\/json.schema.oneOf.properties.delegation_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateVariants =
   PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateVariant1 Data.Text.Internal.Text
  | PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateVariant2 PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf2
  | PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateVariant3 PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf3
  | PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateVariant4 PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf4
  | PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateVariant5 PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf5
  | PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateVariant6 PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateOneOf6
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateVariants
    where toJSON (PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateVariant1 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateVariant2 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateVariant3 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateVariant4 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateVariant5 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateVariant6 a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateVariants
    where parseJSON val = case (PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateVariant1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateVariant2 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateVariant3 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateVariant4 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateVariant5 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostSharedWalletRequestBodyOneOf1Delegation_script_templateTemplateVariant6 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched"))))) of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the object schema located at @paths.\/shared-wallets.POST.requestBody.content.application\/json.schema.oneOf.properties.payment_script_template@ in the specification.
-- 
-- 
data PostSharedWalletRequestBodyOneOf1Payment_script_template = PostSharedWalletRequestBodyOneOf1Payment_script_template {
  -- | cosigners: Map of cosigners and their account public keys. Use key as in &cosigner, eg. \"cosigner\#\"or \'self\'
  postSharedWalletRequestBodyOneOf1Payment_script_templateCosigners :: Data.Aeson.Types.Internal.Object
  -- | template
  , postSharedWalletRequestBodyOneOf1Payment_script_templateTemplate :: PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateVariants
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletRequestBodyOneOf1Payment_script_template
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["cosigners" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf1Payment_script_templateCosigners obj] : ["template" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf1Payment_script_templateTemplate obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["cosigners" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf1Payment_script_templateCosigners obj] : ["template" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf1Payment_script_templateTemplate obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletRequestBodyOneOf1Payment_script_template
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletRequestBodyOneOf1Payment_script_template" (\obj -> (GHC.Base.pure PostSharedWalletRequestBodyOneOf1Payment_script_template GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cosigners")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "template"))
-- | Create a new 'PostSharedWalletRequestBodyOneOf1Payment_script_template' with all required fields.
mkPostSharedWalletRequestBodyOneOf1Payment_script_template :: Data.Aeson.Types.Internal.Object -- ^ 'postSharedWalletRequestBodyOneOf1Payment_script_templateCosigners'
  -> PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateVariants -- ^ 'postSharedWalletRequestBodyOneOf1Payment_script_templateTemplate'
  -> PostSharedWalletRequestBodyOneOf1Payment_script_template
mkPostSharedWalletRequestBodyOneOf1Payment_script_template postSharedWalletRequestBodyOneOf1Payment_script_templateCosigners postSharedWalletRequestBodyOneOf1Payment_script_templateTemplate = PostSharedWalletRequestBodyOneOf1Payment_script_template{postSharedWalletRequestBodyOneOf1Payment_script_templateCosigners = postSharedWalletRequestBodyOneOf1Payment_script_templateCosigners,
                                                                                                                                                                                                                                                         postSharedWalletRequestBodyOneOf1Payment_script_templateTemplate = postSharedWalletRequestBodyOneOf1Payment_script_templateTemplate}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.requestBody.content.application\/json.schema.oneOf.properties.payment_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf2 = PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf2 {
  -- | all: Script primitive for which all signing keys corresponding to all list cosigners\' verification keys are expected to make the script valid.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  postSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf2All :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf2
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["all" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf2All obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["all" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf2All obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf2
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf2" (\obj -> GHC.Base.pure PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf2 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "all"))
-- | Create a new 'PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf2' with all required fields.
mkPostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf2 :: [ScriptTemplateValue] -- ^ 'postSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf2All'
  -> PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf2
mkPostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf2 postSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf2All = PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf2{postSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf2All = postSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf2All}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.requestBody.content.application\/json.schema.oneOf.properties.payment_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf3 = PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf3 {
  -- | any: Script primitive for which a signing key corresponding to any of the list cosigners\' verification keys is expected to make the script valid. It is equivalent to \`some\` with \`\"at_least\"=1\`.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  postSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf3Any :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf3
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["any" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf3Any obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["any" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf3Any obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf3
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf3" (\obj -> GHC.Base.pure PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf3 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "any"))
-- | Create a new 'PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf3' with all required fields.
mkPostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf3 :: [ScriptTemplateValue] -- ^ 'postSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf3Any'
  -> PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf3
mkPostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf3 postSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf3Any = PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf3{postSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf3Any = postSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf3Any}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.requestBody.content.application\/json.schema.oneOf.properties.payment_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf4 = PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf4 {
  -- | some: Script primitive for which at least a given number of signing keys corresponding to the list cosigners\' verification keys are expected to make the script valid.
  postSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf4Some :: PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf4Some
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf4
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["some" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf4Some obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["some" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf4Some obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf4
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf4" (\obj -> GHC.Base.pure PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf4 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "some"))
-- | Create a new 'PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf4' with all required fields.
mkPostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf4 :: PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf4Some -- ^ 'postSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf4Some'
  -> PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf4
mkPostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf4 postSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf4Some = PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf4{postSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf4Some = postSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf4Some}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.requestBody.content.application\/json.schema.oneOf.properties.payment_script_template.properties.template.oneOf.properties.some@ in the specification.
-- 
-- Script primitive for which at least a given number of signing keys corresponding to the list cosigners\' verification keys are expected to make the script valid.
data PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf4Some = PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf4Some {
  -- | at_least
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 255.0
  -- * Minimum  of 1.0
  postSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf4SomeAt_least :: GHC.Types.Int
  -- | from
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  , postSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf4SomeFrom :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf4Some
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["at_least" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf4SomeAt_least obj] : ["from" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf4SomeFrom obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["at_least" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf4SomeAt_least obj] : ["from" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf4SomeFrom obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf4Some
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf4Some" (\obj -> (GHC.Base.pure PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf4Some GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "at_least")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "from"))
-- | Create a new 'PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf4Some' with all required fields.
mkPostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf4Some :: GHC.Types.Int -- ^ 'postSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf4SomeAt_least'
  -> [ScriptTemplateValue] -- ^ 'postSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf4SomeFrom'
  -> PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf4Some
mkPostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf4Some postSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf4SomeAt_least postSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf4SomeFrom = PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf4Some{postSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf4SomeAt_least = postSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf4SomeAt_least,
                                                                                                                                                                                                                                                                                                                            postSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf4SomeFrom = postSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf4SomeFrom}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.requestBody.content.application\/json.schema.oneOf.properties.payment_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf5 = PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf5 {
  -- | active_from: Transaction is only valid starting at the specified slot number (\`â‰¥ active_from\`).
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  postSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf5Active_from :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf5
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["active_from" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf5Active_from obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["active_from" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf5Active_from obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf5
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf5" (\obj -> GHC.Base.pure PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf5 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active_from"))
-- | Create a new 'PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf5' with all required fields.
mkPostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf5 :: GHC.Types.Int -- ^ 'postSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf5Active_from'
  -> PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf5
mkPostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf5 postSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf5Active_from = PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf5{postSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf5Active_from = postSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf5Active_from}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.requestBody.content.application\/json.schema.oneOf.properties.payment_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf6 = PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf6 {
  -- | active_until: Transaction is only valid before the specified slot number (\`\< active_until\`).
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  postSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf6Active_until :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf6
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["active_until" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf6Active_until obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["active_until" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf6Active_until obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf6
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf6" (\obj -> GHC.Base.pure PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf6 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active_until"))
-- | Create a new 'PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf6' with all required fields.
mkPostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf6 :: GHC.Types.Int -- ^ 'postSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf6Active_until'
  -> PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf6
mkPostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf6 postSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf6Active_until = PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf6{postSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf6Active_until = postSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf6Active_until}
-- | Defines the oneOf schema located at @paths.\/shared-wallets.POST.requestBody.content.application\/json.schema.oneOf.properties.payment_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateVariants =
   PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateVariant1 Data.Text.Internal.Text
  | PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateVariant2 PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf2
  | PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateVariant3 PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf3
  | PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateVariant4 PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf4
  | PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateVariant5 PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf5
  | PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateVariant6 PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateOneOf6
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateVariants
    where toJSON (PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateVariant1 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateVariant2 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateVariant3 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateVariant4 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateVariant5 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateVariant6 a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateVariants
    where parseJSON val = case (PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateVariant1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateVariant2 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateVariant3 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateVariant4 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateVariant5 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostSharedWalletRequestBodyOneOf1Payment_script_templateTemplateVariant6 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched"))))) of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the enum schema located at @paths.\/shared-wallets.POST.requestBody.content.application\/json.schema.oneOf.properties.script_validation@ in the specification.
-- 
-- Script validation level. Required validation sifts off scripts that would not
-- be accepted by the ledger. Recommended level filters out scripts that do not pass
-- required validation and additionally when:
--   * \'all\' is non-empty
--   * there are redundant timelocks in a given level
--   * there are no duplicated verification keys in a given level
--   * \'at_least\' coefficient is positive
--   * \'all\', \'any\' are non-empty and \`\'at_least\' has no less elements in the list
--      than the coefficient after timelocks are filtered out.
data PostSharedWalletRequestBodyOneOf1Script_validation =
   PostSharedWalletRequestBodyOneOf1Script_validationOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostSharedWalletRequestBodyOneOf1Script_validationTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostSharedWalletRequestBodyOneOf1Script_validationEnumRequired -- ^ Represents the JSON value @"required"@
  | PostSharedWalletRequestBodyOneOf1Script_validationEnumRecommended -- ^ Represents the JSON value @"recommended"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletRequestBodyOneOf1Script_validation
    where toJSON (PostSharedWalletRequestBodyOneOf1Script_validationOther val) = val
          toJSON (PostSharedWalletRequestBodyOneOf1Script_validationTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (PostSharedWalletRequestBodyOneOf1Script_validationEnumRequired) = "required"
          toJSON (PostSharedWalletRequestBodyOneOf1Script_validationEnumRecommended) = "recommended"
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletRequestBodyOneOf1Script_validation
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "required" -> PostSharedWalletRequestBodyOneOf1Script_validationEnumRequired
                                            | val GHC.Classes.== "recommended" -> PostSharedWalletRequestBodyOneOf1Script_validationEnumRecommended
                                            | GHC.Base.otherwise -> PostSharedWalletRequestBodyOneOf1Script_validationOther val)
-- | Defines the object schema located at @paths.\/shared-wallets.POST.requestBody.content.application\/json.schema.oneOf@ in the specification.
-- 
-- 
data PostSharedWalletRequestBodyOneOf2 = PostSharedWalletRequestBodyOneOf2 {
  -- | account_index: An individual segment within a derivation path.
  -- 
  -- The \`H\` suffix indicates a _Hardened_ child private key, which
  -- means that children of this key cannot be derived from the public
  -- key. Indices without a \`H\` suffix are called _Soft_.
  postSharedWalletRequestBodyOneOf2Account_index :: Data.Text.Internal.Text
  -- | account_public_key: An extended account public key (public key + chain code) of shared wallet
  -- 
  -- Constraints:
  -- 
  -- * Must match pattern \'^(acct_shared_xvk)1[0-9a-z]*\$\'
  , postSharedWalletRequestBodyOneOf2Account_public_key :: Data.Text.Internal.Text
  -- | delegation_script_template
  , postSharedWalletRequestBodyOneOf2Delegation_script_template :: (GHC.Maybe.Maybe PostSharedWalletRequestBodyOneOf2Delegation_script_template)
  -- | name
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 255
  -- * Minimum length of 1
  , postSharedWalletRequestBodyOneOf2Name :: Data.Text.Internal.Text
  -- | payment_script_template
  , postSharedWalletRequestBodyOneOf2Payment_script_template :: PostSharedWalletRequestBodyOneOf2Payment_script_template
  -- | script_validation: Script validation level. Required validation sifts off scripts that would not
  -- be accepted by the ledger. Recommended level filters out scripts that do not pass
  -- required validation and additionally when:
  --   * \'all\' is non-empty
  --   * there are redundant timelocks in a given level
  --   * there are no duplicated verification keys in a given level
  --   * \'at_least\' coefficient is positive
  --   * \'all\', \'any\' are non-empty and \`\'at_least\' has no less elements in the list
  --      than the coefficient after timelocks are filtered out.
  , postSharedWalletRequestBodyOneOf2Script_validation :: (GHC.Maybe.Maybe PostSharedWalletRequestBodyOneOf2Script_validation)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletRequestBodyOneOf2
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["account_index" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf2Account_index obj] : ["account_public_key" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf2Account_public_key obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("delegation_script_template" Data.Aeson.Types.ToJSON..=)) (postSharedWalletRequestBodyOneOf2Delegation_script_template obj) : ["name" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf2Name obj] : ["payment_script_template" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf2Payment_script_template obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("script_validation" Data.Aeson.Types.ToJSON..=)) (postSharedWalletRequestBodyOneOf2Script_validation obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["account_index" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf2Account_index obj] : ["account_public_key" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf2Account_public_key obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("delegation_script_template" Data.Aeson.Types.ToJSON..=)) (postSharedWalletRequestBodyOneOf2Delegation_script_template obj) : ["name" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf2Name obj] : ["payment_script_template" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf2Payment_script_template obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("script_validation" Data.Aeson.Types.ToJSON..=)) (postSharedWalletRequestBodyOneOf2Script_validation obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletRequestBodyOneOf2
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletRequestBodyOneOf2" (\obj -> (((((GHC.Base.pure PostSharedWalletRequestBodyOneOf2 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "account_index")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "account_public_key")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "delegation_script_template")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "payment_script_template")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "script_validation"))
-- | Create a new 'PostSharedWalletRequestBodyOneOf2' with all required fields.
mkPostSharedWalletRequestBodyOneOf2 :: Data.Text.Internal.Text -- ^ 'postSharedWalletRequestBodyOneOf2Account_index'
  -> Data.Text.Internal.Text -- ^ 'postSharedWalletRequestBodyOneOf2Account_public_key'
  -> Data.Text.Internal.Text -- ^ 'postSharedWalletRequestBodyOneOf2Name'
  -> PostSharedWalletRequestBodyOneOf2Payment_script_template -- ^ 'postSharedWalletRequestBodyOneOf2Payment_script_template'
  -> PostSharedWalletRequestBodyOneOf2
mkPostSharedWalletRequestBodyOneOf2 postSharedWalletRequestBodyOneOf2Account_index postSharedWalletRequestBodyOneOf2Account_public_key postSharedWalletRequestBodyOneOf2Name postSharedWalletRequestBodyOneOf2Payment_script_template = PostSharedWalletRequestBodyOneOf2{postSharedWalletRequestBodyOneOf2Account_index = postSharedWalletRequestBodyOneOf2Account_index,
                                                                                                                                                                                                                                                                          postSharedWalletRequestBodyOneOf2Account_public_key = postSharedWalletRequestBodyOneOf2Account_public_key,
                                                                                                                                                                                                                                                                          postSharedWalletRequestBodyOneOf2Delegation_script_template = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                          postSharedWalletRequestBodyOneOf2Name = postSharedWalletRequestBodyOneOf2Name,
                                                                                                                                                                                                                                                                          postSharedWalletRequestBodyOneOf2Payment_script_template = postSharedWalletRequestBodyOneOf2Payment_script_template,
                                                                                                                                                                                                                                                                          postSharedWalletRequestBodyOneOf2Script_validation = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.requestBody.content.application\/json.schema.oneOf.properties.delegation_script_template@ in the specification.
-- 
-- 
data PostSharedWalletRequestBodyOneOf2Delegation_script_template = PostSharedWalletRequestBodyOneOf2Delegation_script_template {
  -- | cosigners: Map of cosigners and their account public keys. Use key as in &cosigner, eg. \"cosigner\#\"or \'self\'
  postSharedWalletRequestBodyOneOf2Delegation_script_templateCosigners :: Data.Aeson.Types.Internal.Object
  -- | template
  , postSharedWalletRequestBodyOneOf2Delegation_script_templateTemplate :: PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateVariants
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletRequestBodyOneOf2Delegation_script_template
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["cosigners" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf2Delegation_script_templateCosigners obj] : ["template" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf2Delegation_script_templateTemplate obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["cosigners" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf2Delegation_script_templateCosigners obj] : ["template" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf2Delegation_script_templateTemplate obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletRequestBodyOneOf2Delegation_script_template
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletRequestBodyOneOf2Delegation_script_template" (\obj -> (GHC.Base.pure PostSharedWalletRequestBodyOneOf2Delegation_script_template GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cosigners")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "template"))
-- | Create a new 'PostSharedWalletRequestBodyOneOf2Delegation_script_template' with all required fields.
mkPostSharedWalletRequestBodyOneOf2Delegation_script_template :: Data.Aeson.Types.Internal.Object -- ^ 'postSharedWalletRequestBodyOneOf2Delegation_script_templateCosigners'
  -> PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateVariants -- ^ 'postSharedWalletRequestBodyOneOf2Delegation_script_templateTemplate'
  -> PostSharedWalletRequestBodyOneOf2Delegation_script_template
mkPostSharedWalletRequestBodyOneOf2Delegation_script_template postSharedWalletRequestBodyOneOf2Delegation_script_templateCosigners postSharedWalletRequestBodyOneOf2Delegation_script_templateTemplate = PostSharedWalletRequestBodyOneOf2Delegation_script_template{postSharedWalletRequestBodyOneOf2Delegation_script_templateCosigners = postSharedWalletRequestBodyOneOf2Delegation_script_templateCosigners,
                                                                                                                                                                                                                                                                     postSharedWalletRequestBodyOneOf2Delegation_script_templateTemplate = postSharedWalletRequestBodyOneOf2Delegation_script_templateTemplate}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.requestBody.content.application\/json.schema.oneOf.properties.delegation_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf2 = PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf2 {
  -- | all: Script primitive for which all signing keys corresponding to all list cosigners\' verification keys are expected to make the script valid.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  postSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf2All :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf2
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["all" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf2All obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["all" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf2All obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf2
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf2" (\obj -> GHC.Base.pure PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf2 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "all"))
-- | Create a new 'PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf2' with all required fields.
mkPostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf2 :: [ScriptTemplateValue] -- ^ 'postSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf2All'
  -> PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf2
mkPostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf2 postSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf2All = PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf2{postSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf2All = postSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf2All}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.requestBody.content.application\/json.schema.oneOf.properties.delegation_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf3 = PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf3 {
  -- | any: Script primitive for which a signing key corresponding to any of the list cosigners\' verification keys is expected to make the script valid. It is equivalent to \`some\` with \`\"at_least\"=1\`.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  postSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf3Any :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf3
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["any" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf3Any obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["any" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf3Any obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf3
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf3" (\obj -> GHC.Base.pure PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf3 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "any"))
-- | Create a new 'PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf3' with all required fields.
mkPostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf3 :: [ScriptTemplateValue] -- ^ 'postSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf3Any'
  -> PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf3
mkPostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf3 postSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf3Any = PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf3{postSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf3Any = postSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf3Any}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.requestBody.content.application\/json.schema.oneOf.properties.delegation_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf4 = PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf4 {
  -- | some: Script primitive for which at least a given number of signing keys corresponding to the list cosigners\' verification keys are expected to make the script valid.
  postSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf4Some :: PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf4Some
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf4
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["some" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf4Some obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["some" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf4Some obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf4
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf4" (\obj -> GHC.Base.pure PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf4 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "some"))
-- | Create a new 'PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf4' with all required fields.
mkPostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf4 :: PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf4Some -- ^ 'postSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf4Some'
  -> PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf4
mkPostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf4 postSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf4Some = PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf4{postSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf4Some = postSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf4Some}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.requestBody.content.application\/json.schema.oneOf.properties.delegation_script_template.properties.template.oneOf.properties.some@ in the specification.
-- 
-- Script primitive for which at least a given number of signing keys corresponding to the list cosigners\' verification keys are expected to make the script valid.
data PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf4Some = PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf4Some {
  -- | at_least
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 255.0
  -- * Minimum  of 1.0
  postSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf4SomeAt_least :: GHC.Types.Int
  -- | from
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  , postSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf4SomeFrom :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf4Some
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["at_least" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf4SomeAt_least obj] : ["from" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf4SomeFrom obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["at_least" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf4SomeAt_least obj] : ["from" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf4SomeFrom obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf4Some
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf4Some" (\obj -> (GHC.Base.pure PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf4Some GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "at_least")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "from"))
-- | Create a new 'PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf4Some' with all required fields.
mkPostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf4Some :: GHC.Types.Int -- ^ 'postSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf4SomeAt_least'
  -> [ScriptTemplateValue] -- ^ 'postSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf4SomeFrom'
  -> PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf4Some
mkPostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf4Some postSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf4SomeAt_least postSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf4SomeFrom = PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf4Some{postSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf4SomeAt_least = postSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf4SomeAt_least,
                                                                                                                                                                                                                                                                                                                                        postSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf4SomeFrom = postSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf4SomeFrom}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.requestBody.content.application\/json.schema.oneOf.properties.delegation_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf5 = PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf5 {
  -- | active_from: Transaction is only valid starting at the specified slot number (\`â‰¥ active_from\`).
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  postSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf5Active_from :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf5
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["active_from" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf5Active_from obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["active_from" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf5Active_from obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf5
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf5" (\obj -> GHC.Base.pure PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf5 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active_from"))
-- | Create a new 'PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf5' with all required fields.
mkPostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf5 :: GHC.Types.Int -- ^ 'postSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf5Active_from'
  -> PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf5
mkPostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf5 postSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf5Active_from = PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf5{postSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf5Active_from = postSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf5Active_from}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.requestBody.content.application\/json.schema.oneOf.properties.delegation_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf6 = PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf6 {
  -- | active_until: Transaction is only valid before the specified slot number (\`\< active_until\`).
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  postSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf6Active_until :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf6
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["active_until" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf6Active_until obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["active_until" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf6Active_until obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf6
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf6" (\obj -> GHC.Base.pure PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf6 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active_until"))
-- | Create a new 'PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf6' with all required fields.
mkPostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf6 :: GHC.Types.Int -- ^ 'postSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf6Active_until'
  -> PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf6
mkPostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf6 postSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf6Active_until = PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf6{postSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf6Active_until = postSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf6Active_until}
-- | Defines the oneOf schema located at @paths.\/shared-wallets.POST.requestBody.content.application\/json.schema.oneOf.properties.delegation_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateVariants =
   PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateVariant1 Data.Text.Internal.Text
  | PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateVariant2 PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf2
  | PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateVariant3 PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf3
  | PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateVariant4 PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf4
  | PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateVariant5 PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf5
  | PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateVariant6 PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateOneOf6
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateVariants
    where toJSON (PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateVariant1 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateVariant2 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateVariant3 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateVariant4 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateVariant5 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateVariant6 a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateVariants
    where parseJSON val = case (PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateVariant1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateVariant2 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateVariant3 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateVariant4 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateVariant5 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostSharedWalletRequestBodyOneOf2Delegation_script_templateTemplateVariant6 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched"))))) of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the object schema located at @paths.\/shared-wallets.POST.requestBody.content.application\/json.schema.oneOf.properties.payment_script_template@ in the specification.
-- 
-- 
data PostSharedWalletRequestBodyOneOf2Payment_script_template = PostSharedWalletRequestBodyOneOf2Payment_script_template {
  -- | cosigners: Map of cosigners and their account public keys. Use key as in &cosigner, eg. \"cosigner\#\"or \'self\'
  postSharedWalletRequestBodyOneOf2Payment_script_templateCosigners :: Data.Aeson.Types.Internal.Object
  -- | template
  , postSharedWalletRequestBodyOneOf2Payment_script_templateTemplate :: PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateVariants
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletRequestBodyOneOf2Payment_script_template
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["cosigners" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf2Payment_script_templateCosigners obj] : ["template" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf2Payment_script_templateTemplate obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["cosigners" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf2Payment_script_templateCosigners obj] : ["template" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf2Payment_script_templateTemplate obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletRequestBodyOneOf2Payment_script_template
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletRequestBodyOneOf2Payment_script_template" (\obj -> (GHC.Base.pure PostSharedWalletRequestBodyOneOf2Payment_script_template GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cosigners")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "template"))
-- | Create a new 'PostSharedWalletRequestBodyOneOf2Payment_script_template' with all required fields.
mkPostSharedWalletRequestBodyOneOf2Payment_script_template :: Data.Aeson.Types.Internal.Object -- ^ 'postSharedWalletRequestBodyOneOf2Payment_script_templateCosigners'
  -> PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateVariants -- ^ 'postSharedWalletRequestBodyOneOf2Payment_script_templateTemplate'
  -> PostSharedWalletRequestBodyOneOf2Payment_script_template
mkPostSharedWalletRequestBodyOneOf2Payment_script_template postSharedWalletRequestBodyOneOf2Payment_script_templateCosigners postSharedWalletRequestBodyOneOf2Payment_script_templateTemplate = PostSharedWalletRequestBodyOneOf2Payment_script_template{postSharedWalletRequestBodyOneOf2Payment_script_templateCosigners = postSharedWalletRequestBodyOneOf2Payment_script_templateCosigners,
                                                                                                                                                                                                                                                         postSharedWalletRequestBodyOneOf2Payment_script_templateTemplate = postSharedWalletRequestBodyOneOf2Payment_script_templateTemplate}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.requestBody.content.application\/json.schema.oneOf.properties.payment_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf2 = PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf2 {
  -- | all: Script primitive for which all signing keys corresponding to all list cosigners\' verification keys are expected to make the script valid.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  postSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf2All :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf2
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["all" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf2All obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["all" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf2All obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf2
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf2" (\obj -> GHC.Base.pure PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf2 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "all"))
-- | Create a new 'PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf2' with all required fields.
mkPostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf2 :: [ScriptTemplateValue] -- ^ 'postSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf2All'
  -> PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf2
mkPostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf2 postSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf2All = PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf2{postSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf2All = postSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf2All}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.requestBody.content.application\/json.schema.oneOf.properties.payment_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf3 = PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf3 {
  -- | any: Script primitive for which a signing key corresponding to any of the list cosigners\' verification keys is expected to make the script valid. It is equivalent to \`some\` with \`\"at_least\"=1\`.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  postSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf3Any :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf3
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["any" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf3Any obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["any" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf3Any obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf3
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf3" (\obj -> GHC.Base.pure PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf3 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "any"))
-- | Create a new 'PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf3' with all required fields.
mkPostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf3 :: [ScriptTemplateValue] -- ^ 'postSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf3Any'
  -> PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf3
mkPostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf3 postSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf3Any = PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf3{postSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf3Any = postSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf3Any}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.requestBody.content.application\/json.schema.oneOf.properties.payment_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf4 = PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf4 {
  -- | some: Script primitive for which at least a given number of signing keys corresponding to the list cosigners\' verification keys are expected to make the script valid.
  postSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf4Some :: PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf4Some
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf4
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["some" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf4Some obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["some" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf4Some obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf4
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf4" (\obj -> GHC.Base.pure PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf4 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "some"))
-- | Create a new 'PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf4' with all required fields.
mkPostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf4 :: PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf4Some -- ^ 'postSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf4Some'
  -> PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf4
mkPostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf4 postSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf4Some = PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf4{postSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf4Some = postSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf4Some}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.requestBody.content.application\/json.schema.oneOf.properties.payment_script_template.properties.template.oneOf.properties.some@ in the specification.
-- 
-- Script primitive for which at least a given number of signing keys corresponding to the list cosigners\' verification keys are expected to make the script valid.
data PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf4Some = PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf4Some {
  -- | at_least
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 255.0
  -- * Minimum  of 1.0
  postSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf4SomeAt_least :: GHC.Types.Int
  -- | from
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  , postSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf4SomeFrom :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf4Some
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["at_least" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf4SomeAt_least obj] : ["from" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf4SomeFrom obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["at_least" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf4SomeAt_least obj] : ["from" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf4SomeFrom obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf4Some
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf4Some" (\obj -> (GHC.Base.pure PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf4Some GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "at_least")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "from"))
-- | Create a new 'PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf4Some' with all required fields.
mkPostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf4Some :: GHC.Types.Int -- ^ 'postSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf4SomeAt_least'
  -> [ScriptTemplateValue] -- ^ 'postSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf4SomeFrom'
  -> PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf4Some
mkPostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf4Some postSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf4SomeAt_least postSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf4SomeFrom = PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf4Some{postSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf4SomeAt_least = postSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf4SomeAt_least,
                                                                                                                                                                                                                                                                                                                            postSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf4SomeFrom = postSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf4SomeFrom}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.requestBody.content.application\/json.schema.oneOf.properties.payment_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf5 = PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf5 {
  -- | active_from: Transaction is only valid starting at the specified slot number (\`â‰¥ active_from\`).
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  postSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf5Active_from :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf5
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["active_from" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf5Active_from obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["active_from" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf5Active_from obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf5
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf5" (\obj -> GHC.Base.pure PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf5 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active_from"))
-- | Create a new 'PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf5' with all required fields.
mkPostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf5 :: GHC.Types.Int -- ^ 'postSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf5Active_from'
  -> PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf5
mkPostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf5 postSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf5Active_from = PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf5{postSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf5Active_from = postSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf5Active_from}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.requestBody.content.application\/json.schema.oneOf.properties.payment_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf6 = PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf6 {
  -- | active_until: Transaction is only valid before the specified slot number (\`\< active_until\`).
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  postSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf6Active_until :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf6
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["active_until" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf6Active_until obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["active_until" Data.Aeson.Types.ToJSON..= postSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf6Active_until obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf6
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf6" (\obj -> GHC.Base.pure PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf6 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active_until"))
-- | Create a new 'PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf6' with all required fields.
mkPostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf6 :: GHC.Types.Int -- ^ 'postSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf6Active_until'
  -> PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf6
mkPostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf6 postSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf6Active_until = PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf6{postSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf6Active_until = postSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf6Active_until}
-- | Defines the oneOf schema located at @paths.\/shared-wallets.POST.requestBody.content.application\/json.schema.oneOf.properties.payment_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateVariants =
   PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateVariant1 Data.Text.Internal.Text
  | PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateVariant2 PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf2
  | PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateVariant3 PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf3
  | PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateVariant4 PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf4
  | PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateVariant5 PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf5
  | PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateVariant6 PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateOneOf6
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateVariants
    where toJSON (PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateVariant1 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateVariant2 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateVariant3 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateVariant4 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateVariant5 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateVariant6 a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateVariants
    where parseJSON val = case (PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateVariant1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateVariant2 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateVariant3 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateVariant4 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateVariant5 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostSharedWalletRequestBodyOneOf2Payment_script_templateTemplateVariant6 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched"))))) of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the enum schema located at @paths.\/shared-wallets.POST.requestBody.content.application\/json.schema.oneOf.properties.script_validation@ in the specification.
-- 
-- Script validation level. Required validation sifts off scripts that would not
-- be accepted by the ledger. Recommended level filters out scripts that do not pass
-- required validation and additionally when:
--   * \'all\' is non-empty
--   * there are redundant timelocks in a given level
--   * there are no duplicated verification keys in a given level
--   * \'at_least\' coefficient is positive
--   * \'all\', \'any\' are non-empty and \`\'at_least\' has no less elements in the list
--      than the coefficient after timelocks are filtered out.
data PostSharedWalletRequestBodyOneOf2Script_validation =
   PostSharedWalletRequestBodyOneOf2Script_validationOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostSharedWalletRequestBodyOneOf2Script_validationTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostSharedWalletRequestBodyOneOf2Script_validationEnumRequired -- ^ Represents the JSON value @"required"@
  | PostSharedWalletRequestBodyOneOf2Script_validationEnumRecommended -- ^ Represents the JSON value @"recommended"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletRequestBodyOneOf2Script_validation
    where toJSON (PostSharedWalletRequestBodyOneOf2Script_validationOther val) = val
          toJSON (PostSharedWalletRequestBodyOneOf2Script_validationTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (PostSharedWalletRequestBodyOneOf2Script_validationEnumRequired) = "required"
          toJSON (PostSharedWalletRequestBodyOneOf2Script_validationEnumRecommended) = "recommended"
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletRequestBodyOneOf2Script_validation
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "required" -> PostSharedWalletRequestBodyOneOf2Script_validationEnumRequired
                                            | val GHC.Classes.== "recommended" -> PostSharedWalletRequestBodyOneOf2Script_validationEnumRecommended
                                            | GHC.Base.otherwise -> PostSharedWalletRequestBodyOneOf2Script_validationOther val)
-- | Defines the oneOf schema located at @paths.\/shared-wallets.POST.requestBody.content.application\/json.schema.oneOf@ in the specification.
-- 
-- 
data PostSharedWalletRequestBodyVariants =
   PostSharedWalletRequestBodyVariant1 PostSharedWalletRequestBodyOneOf1
  | PostSharedWalletRequestBodyVariant2 PostSharedWalletRequestBodyOneOf2
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletRequestBodyVariants
    where toJSON (PostSharedWalletRequestBodyVariant1 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostSharedWalletRequestBodyVariant2 a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletRequestBodyVariants
    where parseJSON val = case (PostSharedWalletRequestBodyVariant1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostSharedWalletRequestBodyVariant2 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Represents a response of the operation 'postSharedWallet'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostSharedWalletResponseError' is used.
data PostSharedWalletResponse =
   PostSharedWalletResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | PostSharedWalletResponse201 PostSharedWalletResponseBody201Variants -- ^ Created
  | PostSharedWalletResponse400 PostSharedWalletResponseBody400 -- ^ Bad Request
  | PostSharedWalletResponse403 PostSharedWalletResponseBody403Variants -- ^ Forbidden
  | PostSharedWalletResponse406 PostSharedWalletResponseBody406 -- ^ Not Acceptable
  | PostSharedWalletResponse409 PostSharedWalletResponseBody409 -- ^ Conflict
  | PostSharedWalletResponse415 PostSharedWalletResponseBody415 -- ^ Unsupported Media Type
  | PostSharedWalletResponse500 PostSharedWalletResponseBody500Variants -- ^ Forbidden
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/shared-wallets.POST.responses.201.content.application\/json.schema.oneOf@ in the specification.
-- 
-- 
data PostSharedWalletResponseBody201OneOf1 = PostSharedWalletResponseBody201OneOf1 {
  -- | account_index: An individual segment within a derivation path.
  -- 
  -- The \`H\` suffix indicates a _Hardened_ child private key, which
  -- means that children of this key cannot be derived from the public
  -- key. Indices without a \`H\` suffix are called _Soft_.
  postSharedWalletResponseBody201OneOf1Account_index :: Data.Text.Internal.Text
  -- | address_pool_gap: Number of consecutive unused addresses allowed.
  -- 
  -- **IMPORTANT DISCLAIMER:** Using values other than \`20\` automatically makes your wallet invalid with regards to BIP-44 address discovery. It means that you **will not** be able to fully restore
  -- your wallet in a different software which is strictly following BIP-44.
  -- 
  -- Beside, using large gaps is **not recommended** as it may induce important performance degradations. Use at your own risks.
  -- 
  -- **IMPORTANT DISCLAIMER 2:** There is no way to \`import\` addresses generated outside (e.g. using cardano-addresses) into the wallet.
  -- Wallet only discovers transactions on its used and unused addresses that are within its currently seen \`address_pool_gap\`.
  -- Transactions on addresses that \"belong\" to the wallet but happen to be beyond its \`address_pool_gap\` will not be visible to the wallet.
  -- This is a technical limitation of the industry standard [BIP-44](https:\/\/github.com\/bitcoin\/bips\/blob\/master\/bip-0044.mediawiki). See also [CIP-1852](https:\/\/github.com\/cardano-foundation\/CIPs\/blob\/master\/CIP-1852\/CIP-1852.md).
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100000.0
  -- * Minimum  of 10.0
  , postSharedWalletResponseBody201OneOf1Address_pool_gap :: GHC.Types.Int
  -- | delegation_script_template
  , postSharedWalletResponseBody201OneOf1Delegation_script_template :: (GHC.Maybe.Maybe PostSharedWalletResponseBody201OneOf1Delegation_script_template)
  -- | id: A unique identifier for the wallet
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 40
  -- * Minimum length of 40
  , postSharedWalletResponseBody201OneOf1Id :: Data.Text.Internal.Text
  -- | name
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 255
  -- * Minimum length of 1
  , postSharedWalletResponseBody201OneOf1Name :: Data.Text.Internal.Text
  -- | payment_script_template
  , postSharedWalletResponseBody201OneOf1Payment_script_template :: PostSharedWalletResponseBody201OneOf1Payment_script_template
  -- | state
  , postSharedWalletResponseBody201OneOf1State :: PostSharedWalletResponseBody201OneOf1State
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody201OneOf1
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["account_index" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf1Account_index obj] : ["address_pool_gap" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf1Address_pool_gap obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("delegation_script_template" Data.Aeson.Types.ToJSON..=)) (postSharedWalletResponseBody201OneOf1Delegation_script_template obj) : ["id" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf1Id obj] : ["name" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf1Name obj] : ["payment_script_template" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf1Payment_script_template obj] : ["state" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf1State obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["account_index" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf1Account_index obj] : ["address_pool_gap" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf1Address_pool_gap obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("delegation_script_template" Data.Aeson.Types.ToJSON..=)) (postSharedWalletResponseBody201OneOf1Delegation_script_template obj) : ["id" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf1Id obj] : ["name" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf1Name obj] : ["payment_script_template" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf1Payment_script_template obj] : ["state" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf1State obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody201OneOf1
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletResponseBody201OneOf1" (\obj -> ((((((GHC.Base.pure PostSharedWalletResponseBody201OneOf1 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "account_index")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "address_pool_gap")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "delegation_script_template")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "payment_script_template")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "state"))
-- | Create a new 'PostSharedWalletResponseBody201OneOf1' with all required fields.
mkPostSharedWalletResponseBody201OneOf1 :: Data.Text.Internal.Text -- ^ 'postSharedWalletResponseBody201OneOf1Account_index'
  -> GHC.Types.Int -- ^ 'postSharedWalletResponseBody201OneOf1Address_pool_gap'
  -> Data.Text.Internal.Text -- ^ 'postSharedWalletResponseBody201OneOf1Id'
  -> Data.Text.Internal.Text -- ^ 'postSharedWalletResponseBody201OneOf1Name'
  -> PostSharedWalletResponseBody201OneOf1Payment_script_template -- ^ 'postSharedWalletResponseBody201OneOf1Payment_script_template'
  -> PostSharedWalletResponseBody201OneOf1State -- ^ 'postSharedWalletResponseBody201OneOf1State'
  -> PostSharedWalletResponseBody201OneOf1
mkPostSharedWalletResponseBody201OneOf1 postSharedWalletResponseBody201OneOf1Account_index postSharedWalletResponseBody201OneOf1Address_pool_gap postSharedWalletResponseBody201OneOf1Id postSharedWalletResponseBody201OneOf1Name postSharedWalletResponseBody201OneOf1Payment_script_template postSharedWalletResponseBody201OneOf1State = PostSharedWalletResponseBody201OneOf1{postSharedWalletResponseBody201OneOf1Account_index = postSharedWalletResponseBody201OneOf1Account_index,
                                                                                                                                                                                                                                                                                                                                                                                   postSharedWalletResponseBody201OneOf1Address_pool_gap = postSharedWalletResponseBody201OneOf1Address_pool_gap,
                                                                                                                                                                                                                                                                                                                                                                                   postSharedWalletResponseBody201OneOf1Delegation_script_template = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                                                                                                                                   postSharedWalletResponseBody201OneOf1Id = postSharedWalletResponseBody201OneOf1Id,
                                                                                                                                                                                                                                                                                                                                                                                   postSharedWalletResponseBody201OneOf1Name = postSharedWalletResponseBody201OneOf1Name,
                                                                                                                                                                                                                                                                                                                                                                                   postSharedWalletResponseBody201OneOf1Payment_script_template = postSharedWalletResponseBody201OneOf1Payment_script_template,
                                                                                                                                                                                                                                                                                                                                                                                   postSharedWalletResponseBody201OneOf1State = postSharedWalletResponseBody201OneOf1State}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.responses.201.content.application\/json.schema.oneOf.properties.delegation_script_template@ in the specification.
-- 
-- 
data PostSharedWalletResponseBody201OneOf1Delegation_script_template = PostSharedWalletResponseBody201OneOf1Delegation_script_template {
  -- | cosigners: Map of cosigners and their account public keys. Use key as in &cosigner, eg. \"cosigner\#\"
  postSharedWalletResponseBody201OneOf1Delegation_script_templateCosigners :: Data.Aeson.Types.Internal.Object
  -- | template
  , postSharedWalletResponseBody201OneOf1Delegation_script_templateTemplate :: PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateVariants
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody201OneOf1Delegation_script_template
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["cosigners" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf1Delegation_script_templateCosigners obj] : ["template" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf1Delegation_script_templateTemplate obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["cosigners" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf1Delegation_script_templateCosigners obj] : ["template" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf1Delegation_script_templateTemplate obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody201OneOf1Delegation_script_template
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletResponseBody201OneOf1Delegation_script_template" (\obj -> (GHC.Base.pure PostSharedWalletResponseBody201OneOf1Delegation_script_template GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cosigners")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "template"))
-- | Create a new 'PostSharedWalletResponseBody201OneOf1Delegation_script_template' with all required fields.
mkPostSharedWalletResponseBody201OneOf1Delegation_script_template :: Data.Aeson.Types.Internal.Object -- ^ 'postSharedWalletResponseBody201OneOf1Delegation_script_templateCosigners'
  -> PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateVariants -- ^ 'postSharedWalletResponseBody201OneOf1Delegation_script_templateTemplate'
  -> PostSharedWalletResponseBody201OneOf1Delegation_script_template
mkPostSharedWalletResponseBody201OneOf1Delegation_script_template postSharedWalletResponseBody201OneOf1Delegation_script_templateCosigners postSharedWalletResponseBody201OneOf1Delegation_script_templateTemplate = PostSharedWalletResponseBody201OneOf1Delegation_script_template{postSharedWalletResponseBody201OneOf1Delegation_script_templateCosigners = postSharedWalletResponseBody201OneOf1Delegation_script_templateCosigners,
                                                                                                                                                                                                                                                                                     postSharedWalletResponseBody201OneOf1Delegation_script_templateTemplate = postSharedWalletResponseBody201OneOf1Delegation_script_templateTemplate}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.responses.201.content.application\/json.schema.oneOf.properties.delegation_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf2 = PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf2 {
  -- | all: Script primitive for which all signing keys corresponding to all list cosigners\' verification keys are expected to make the script valid.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  postSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf2All :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf2
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["all" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf2All obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["all" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf2All obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf2
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf2" (\obj -> GHC.Base.pure PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf2 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "all"))
-- | Create a new 'PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf2' with all required fields.
mkPostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf2 :: [ScriptTemplateValue] -- ^ 'postSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf2All'
  -> PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf2
mkPostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf2 postSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf2All = PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf2{postSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf2All = postSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf2All}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.responses.201.content.application\/json.schema.oneOf.properties.delegation_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf3 = PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf3 {
  -- | any: Script primitive for which a signing key corresponding to any of the list cosigners\' verification keys is expected to make the script valid. It is equivalent to \`some\` with \`\"at_least\"=1\`.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  postSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf3Any :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf3
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["any" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf3Any obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["any" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf3Any obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf3
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf3" (\obj -> GHC.Base.pure PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf3 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "any"))
-- | Create a new 'PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf3' with all required fields.
mkPostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf3 :: [ScriptTemplateValue] -- ^ 'postSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf3Any'
  -> PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf3
mkPostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf3 postSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf3Any = PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf3{postSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf3Any = postSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf3Any}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.responses.201.content.application\/json.schema.oneOf.properties.delegation_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf4 = PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf4 {
  -- | some: Script primitive for which at least a given number of signing keys corresponding to the list cosigners\' verification keys are expected to make the script valid.
  postSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf4Some :: PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf4Some
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf4
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["some" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf4Some obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["some" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf4Some obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf4
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf4" (\obj -> GHC.Base.pure PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf4 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "some"))
-- | Create a new 'PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf4' with all required fields.
mkPostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf4 :: PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf4Some -- ^ 'postSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf4Some'
  -> PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf4
mkPostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf4 postSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf4Some = PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf4{postSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf4Some = postSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf4Some}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.responses.201.content.application\/json.schema.oneOf.properties.delegation_script_template.properties.template.oneOf.properties.some@ in the specification.
-- 
-- Script primitive for which at least a given number of signing keys corresponding to the list cosigners\' verification keys are expected to make the script valid.
data PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf4Some = PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf4Some {
  -- | at_least
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 255.0
  -- * Minimum  of 1.0
  postSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf4SomeAt_least :: GHC.Types.Int
  -- | from
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  , postSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf4SomeFrom :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf4Some
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["at_least" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf4SomeAt_least obj] : ["from" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf4SomeFrom obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["at_least" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf4SomeAt_least obj] : ["from" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf4SomeFrom obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf4Some
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf4Some" (\obj -> (GHC.Base.pure PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf4Some GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "at_least")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "from"))
-- | Create a new 'PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf4Some' with all required fields.
mkPostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf4Some :: GHC.Types.Int -- ^ 'postSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf4SomeAt_least'
  -> [ScriptTemplateValue] -- ^ 'postSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf4SomeFrom'
  -> PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf4Some
mkPostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf4Some postSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf4SomeAt_least postSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf4SomeFrom = PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf4Some{postSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf4SomeAt_least = postSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf4SomeAt_least,
                                                                                                                                                                                                                                                                                                                                                        postSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf4SomeFrom = postSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf4SomeFrom}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.responses.201.content.application\/json.schema.oneOf.properties.delegation_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf5 = PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf5 {
  -- | active_from: Transaction is only valid starting at the specified slot number (\`â‰¥ active_from\`).
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  postSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf5Active_from :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf5
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["active_from" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf5Active_from obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["active_from" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf5Active_from obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf5
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf5" (\obj -> GHC.Base.pure PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf5 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active_from"))
-- | Create a new 'PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf5' with all required fields.
mkPostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf5 :: GHC.Types.Int -- ^ 'postSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf5Active_from'
  -> PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf5
mkPostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf5 postSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf5Active_from = PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf5{postSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf5Active_from = postSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf5Active_from}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.responses.201.content.application\/json.schema.oneOf.properties.delegation_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf6 = PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf6 {
  -- | active_until: Transaction is only valid before the specified slot number (\`\< active_until\`).
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  postSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf6Active_until :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf6
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["active_until" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf6Active_until obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["active_until" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf6Active_until obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf6
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf6" (\obj -> GHC.Base.pure PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf6 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active_until"))
-- | Create a new 'PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf6' with all required fields.
mkPostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf6 :: GHC.Types.Int -- ^ 'postSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf6Active_until'
  -> PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf6
mkPostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf6 postSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf6Active_until = PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf6{postSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf6Active_until = postSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf6Active_until}
-- | Defines the oneOf schema located at @paths.\/shared-wallets.POST.responses.201.content.application\/json.schema.oneOf.properties.delegation_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateVariants =
   PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateVariant1 Data.Text.Internal.Text
  | PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateVariant2 PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf2
  | PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateVariant3 PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf3
  | PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateVariant4 PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf4
  | PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateVariant5 PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf5
  | PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateVariant6 PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateOneOf6
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateVariants
    where toJSON (PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateVariant1 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateVariant2 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateVariant3 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateVariant4 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateVariant5 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateVariant6 a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateVariants
    where parseJSON val = case (PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateVariant1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateVariant2 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateVariant3 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateVariant4 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateVariant5 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostSharedWalletResponseBody201OneOf1Delegation_script_templateTemplateVariant6 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched"))))) of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the object schema located at @paths.\/shared-wallets.POST.responses.201.content.application\/json.schema.oneOf.properties.payment_script_template@ in the specification.
-- 
-- 
data PostSharedWalletResponseBody201OneOf1Payment_script_template = PostSharedWalletResponseBody201OneOf1Payment_script_template {
  -- | cosigners: Map of cosigners and their account public keys. Use key as in &cosigner, eg. \"cosigner\#\"
  postSharedWalletResponseBody201OneOf1Payment_script_templateCosigners :: Data.Aeson.Types.Internal.Object
  -- | template
  , postSharedWalletResponseBody201OneOf1Payment_script_templateTemplate :: PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateVariants
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody201OneOf1Payment_script_template
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["cosigners" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf1Payment_script_templateCosigners obj] : ["template" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf1Payment_script_templateTemplate obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["cosigners" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf1Payment_script_templateCosigners obj] : ["template" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf1Payment_script_templateTemplate obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody201OneOf1Payment_script_template
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletResponseBody201OneOf1Payment_script_template" (\obj -> (GHC.Base.pure PostSharedWalletResponseBody201OneOf1Payment_script_template GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cosigners")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "template"))
-- | Create a new 'PostSharedWalletResponseBody201OneOf1Payment_script_template' with all required fields.
mkPostSharedWalletResponseBody201OneOf1Payment_script_template :: Data.Aeson.Types.Internal.Object -- ^ 'postSharedWalletResponseBody201OneOf1Payment_script_templateCosigners'
  -> PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateVariants -- ^ 'postSharedWalletResponseBody201OneOf1Payment_script_templateTemplate'
  -> PostSharedWalletResponseBody201OneOf1Payment_script_template
mkPostSharedWalletResponseBody201OneOf1Payment_script_template postSharedWalletResponseBody201OneOf1Payment_script_templateCosigners postSharedWalletResponseBody201OneOf1Payment_script_templateTemplate = PostSharedWalletResponseBody201OneOf1Payment_script_template{postSharedWalletResponseBody201OneOf1Payment_script_templateCosigners = postSharedWalletResponseBody201OneOf1Payment_script_templateCosigners,
                                                                                                                                                                                                                                                                         postSharedWalletResponseBody201OneOf1Payment_script_templateTemplate = postSharedWalletResponseBody201OneOf1Payment_script_templateTemplate}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.responses.201.content.application\/json.schema.oneOf.properties.payment_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf2 = PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf2 {
  -- | all: Script primitive for which all signing keys corresponding to all list cosigners\' verification keys are expected to make the script valid.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  postSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf2All :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf2
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["all" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf2All obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["all" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf2All obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf2
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf2" (\obj -> GHC.Base.pure PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf2 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "all"))
-- | Create a new 'PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf2' with all required fields.
mkPostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf2 :: [ScriptTemplateValue] -- ^ 'postSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf2All'
  -> PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf2
mkPostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf2 postSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf2All = PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf2{postSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf2All = postSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf2All}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.responses.201.content.application\/json.schema.oneOf.properties.payment_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf3 = PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf3 {
  -- | any: Script primitive for which a signing key corresponding to any of the list cosigners\' verification keys is expected to make the script valid. It is equivalent to \`some\` with \`\"at_least\"=1\`.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  postSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf3Any :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf3
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["any" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf3Any obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["any" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf3Any obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf3
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf3" (\obj -> GHC.Base.pure PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf3 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "any"))
-- | Create a new 'PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf3' with all required fields.
mkPostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf3 :: [ScriptTemplateValue] -- ^ 'postSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf3Any'
  -> PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf3
mkPostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf3 postSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf3Any = PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf3{postSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf3Any = postSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf3Any}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.responses.201.content.application\/json.schema.oneOf.properties.payment_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf4 = PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf4 {
  -- | some: Script primitive for which at least a given number of signing keys corresponding to the list cosigners\' verification keys are expected to make the script valid.
  postSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf4Some :: PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf4Some
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf4
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["some" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf4Some obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["some" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf4Some obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf4
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf4" (\obj -> GHC.Base.pure PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf4 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "some"))
-- | Create a new 'PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf4' with all required fields.
mkPostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf4 :: PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf4Some -- ^ 'postSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf4Some'
  -> PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf4
mkPostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf4 postSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf4Some = PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf4{postSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf4Some = postSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf4Some}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.responses.201.content.application\/json.schema.oneOf.properties.payment_script_template.properties.template.oneOf.properties.some@ in the specification.
-- 
-- Script primitive for which at least a given number of signing keys corresponding to the list cosigners\' verification keys are expected to make the script valid.
data PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf4Some = PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf4Some {
  -- | at_least
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 255.0
  -- * Minimum  of 1.0
  postSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf4SomeAt_least :: GHC.Types.Int
  -- | from
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  , postSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf4SomeFrom :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf4Some
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["at_least" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf4SomeAt_least obj] : ["from" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf4SomeFrom obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["at_least" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf4SomeAt_least obj] : ["from" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf4SomeFrom obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf4Some
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf4Some" (\obj -> (GHC.Base.pure PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf4Some GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "at_least")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "from"))
-- | Create a new 'PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf4Some' with all required fields.
mkPostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf4Some :: GHC.Types.Int -- ^ 'postSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf4SomeAt_least'
  -> [ScriptTemplateValue] -- ^ 'postSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf4SomeFrom'
  -> PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf4Some
mkPostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf4Some postSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf4SomeAt_least postSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf4SomeFrom = PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf4Some{postSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf4SomeAt_least = postSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf4SomeAt_least,
                                                                                                                                                                                                                                                                                                                                            postSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf4SomeFrom = postSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf4SomeFrom}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.responses.201.content.application\/json.schema.oneOf.properties.payment_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf5 = PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf5 {
  -- | active_from: Transaction is only valid starting at the specified slot number (\`â‰¥ active_from\`).
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  postSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf5Active_from :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf5
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["active_from" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf5Active_from obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["active_from" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf5Active_from obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf5
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf5" (\obj -> GHC.Base.pure PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf5 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active_from"))
-- | Create a new 'PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf5' with all required fields.
mkPostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf5 :: GHC.Types.Int -- ^ 'postSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf5Active_from'
  -> PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf5
mkPostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf5 postSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf5Active_from = PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf5{postSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf5Active_from = postSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf5Active_from}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.responses.201.content.application\/json.schema.oneOf.properties.payment_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf6 = PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf6 {
  -- | active_until: Transaction is only valid before the specified slot number (\`\< active_until\`).
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  postSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf6Active_until :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf6
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["active_until" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf6Active_until obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["active_until" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf6Active_until obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf6
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf6" (\obj -> GHC.Base.pure PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf6 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active_until"))
-- | Create a new 'PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf6' with all required fields.
mkPostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf6 :: GHC.Types.Int -- ^ 'postSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf6Active_until'
  -> PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf6
mkPostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf6 postSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf6Active_until = PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf6{postSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf6Active_until = postSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf6Active_until}
-- | Defines the oneOf schema located at @paths.\/shared-wallets.POST.responses.201.content.application\/json.schema.oneOf.properties.payment_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateVariants =
   PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateVariant1 Data.Text.Internal.Text
  | PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateVariant2 PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf2
  | PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateVariant3 PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf3
  | PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateVariant4 PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf4
  | PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateVariant5 PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf5
  | PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateVariant6 PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateOneOf6
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateVariants
    where toJSON (PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateVariant1 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateVariant2 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateVariant3 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateVariant4 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateVariant5 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateVariant6 a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateVariants
    where parseJSON val = case (PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateVariant1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateVariant2 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateVariant3 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateVariant4 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateVariant5 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostSharedWalletResponseBody201OneOf1Payment_script_templateTemplateVariant6 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched"))))) of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the object schema located at @paths.\/shared-wallets.POST.responses.201.content.application\/json.schema.oneOf.properties.state@ in the specification.
-- 
-- 
data PostSharedWalletResponseBody201OneOf1State = PostSharedWalletResponseBody201OneOf1State {

  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody201OneOf1State
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["status" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "incomplete"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["status" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "incomplete"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody201OneOf1State
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletResponseBody201OneOf1State" (\obj -> GHC.Base.pure PostSharedWalletResponseBody201OneOf1State)
-- | Create a new 'PostSharedWalletResponseBody201OneOf1State' with all required fields.
mkPostSharedWalletResponseBody201OneOf1State :: PostSharedWalletResponseBody201OneOf1State
mkPostSharedWalletResponseBody201OneOf1State = PostSharedWalletResponseBody201OneOf1State{}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.responses.201.content.application\/json.schema.oneOf@ in the specification.
-- 
-- 
data PostSharedWalletResponseBody201OneOf2 = PostSharedWalletResponseBody201OneOf2 {
  -- | account_index: An individual segment within a derivation path.
  -- 
  -- The \`H\` suffix indicates a _Hardened_ child private key, which
  -- means that children of this key cannot be derived from the public
  -- key. Indices without a \`H\` suffix are called _Soft_.
  postSharedWalletResponseBody201OneOf2Account_index :: Data.Text.Internal.Text
  -- | address_pool_gap: Number of consecutive unused addresses allowed.
  -- 
  -- **IMPORTANT DISCLAIMER:** Using values other than \`20\` automatically makes your wallet invalid with regards to BIP-44 address discovery. It means that you **will not** be able to fully restore
  -- your wallet in a different software which is strictly following BIP-44.
  -- 
  -- Beside, using large gaps is **not recommended** as it may induce important performance degradations. Use at your own risks.
  -- 
  -- **IMPORTANT DISCLAIMER 2:** There is no way to \`import\` addresses generated outside (e.g. using cardano-addresses) into the wallet.
  -- Wallet only discovers transactions on its used and unused addresses that are within its currently seen \`address_pool_gap\`.
  -- Transactions on addresses that \"belong\" to the wallet but happen to be beyond its \`address_pool_gap\` will not be visible to the wallet.
  -- This is a technical limitation of the industry standard [BIP-44](https:\/\/github.com\/bitcoin\/bips\/blob\/master\/bip-0044.mediawiki). See also [CIP-1852](https:\/\/github.com\/cardano-foundation\/CIPs\/blob\/master\/CIP-1852\/CIP-1852.md).
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100000.0
  -- * Minimum  of 10.0
  , postSharedWalletResponseBody201OneOf2Address_pool_gap :: GHC.Types.Int
  -- | assets: Current non-Ada asset holdings of the wallet.
  -- 
  -- The amount of assets available to spend may be less than the total
  -- unspent assets due to transaction change amounts which are yet to
  -- be fully confirmed (pending).
  , postSharedWalletResponseBody201OneOf2Assets :: PostSharedWalletResponseBody201OneOf2Assets
  -- | balance: Wallet current Ada balance(s).
  , postSharedWalletResponseBody201OneOf2Balance :: PostSharedWalletResponseBody201OneOf2Balance
  -- | delegation: Delegation settings
  , postSharedWalletResponseBody201OneOf2Delegation :: PostSharedWalletResponseBody201OneOf2Delegation
  -- | delegation_script_template
  , postSharedWalletResponseBody201OneOf2Delegation_script_template :: (GHC.Maybe.Maybe PostSharedWalletResponseBody201OneOf2Delegation_script_template)
  -- | id: A unique identifier for the wallet
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 40
  -- * Minimum length of 40
  , postSharedWalletResponseBody201OneOf2Id :: Data.Text.Internal.Text
  -- | name
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 255
  -- * Minimum length of 1
  , postSharedWalletResponseBody201OneOf2Name :: Data.Text.Internal.Text
  -- | passphrase: Information about the wallet\'s passphrase
  , postSharedWalletResponseBody201OneOf2Passphrase :: (GHC.Maybe.Maybe PostSharedWalletResponseBody201OneOf2Passphrase)
  -- | payment_script_template
  , postSharedWalletResponseBody201OneOf2Payment_script_template :: PostSharedWalletResponseBody201OneOf2Payment_script_template
  -- | state: Whether a wallet is ready to use or still syncing
  , postSharedWalletResponseBody201OneOf2State :: PostSharedWalletResponseBody201OneOf2State
  -- | tip: A reference to a particular time slot, and the block height at that point.
  , postSharedWalletResponseBody201OneOf2Tip :: PostSharedWalletResponseBody201OneOf2Tip
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody201OneOf2
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["account_index" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2Account_index obj] : ["address_pool_gap" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2Address_pool_gap obj] : ["assets" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2Assets obj] : ["balance" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2Balance obj] : ["delegation" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2Delegation obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("delegation_script_template" Data.Aeson.Types.ToJSON..=)) (postSharedWalletResponseBody201OneOf2Delegation_script_template obj) : ["id" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2Id obj] : ["name" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2Name obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("passphrase" Data.Aeson.Types.ToJSON..=)) (postSharedWalletResponseBody201OneOf2Passphrase obj) : ["payment_script_template" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2Payment_script_template obj] : ["state" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2State obj] : ["tip" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2Tip obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["account_index" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2Account_index obj] : ["address_pool_gap" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2Address_pool_gap obj] : ["assets" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2Assets obj] : ["balance" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2Balance obj] : ["delegation" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2Delegation obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("delegation_script_template" Data.Aeson.Types.ToJSON..=)) (postSharedWalletResponseBody201OneOf2Delegation_script_template obj) : ["id" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2Id obj] : ["name" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2Name obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("passphrase" Data.Aeson.Types.ToJSON..=)) (postSharedWalletResponseBody201OneOf2Passphrase obj) : ["payment_script_template" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2Payment_script_template obj] : ["state" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2State obj] : ["tip" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2Tip obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody201OneOf2
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletResponseBody201OneOf2" (\obj -> (((((((((((GHC.Base.pure PostSharedWalletResponseBody201OneOf2 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "account_index")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "address_pool_gap")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "assets")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "balance")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "delegation")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "delegation_script_template")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "passphrase")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "payment_script_template")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "state")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "tip"))
-- | Create a new 'PostSharedWalletResponseBody201OneOf2' with all required fields.
mkPostSharedWalletResponseBody201OneOf2 :: Data.Text.Internal.Text -- ^ 'postSharedWalletResponseBody201OneOf2Account_index'
  -> GHC.Types.Int -- ^ 'postSharedWalletResponseBody201OneOf2Address_pool_gap'
  -> PostSharedWalletResponseBody201OneOf2Assets -- ^ 'postSharedWalletResponseBody201OneOf2Assets'
  -> PostSharedWalletResponseBody201OneOf2Balance -- ^ 'postSharedWalletResponseBody201OneOf2Balance'
  -> PostSharedWalletResponseBody201OneOf2Delegation -- ^ 'postSharedWalletResponseBody201OneOf2Delegation'
  -> Data.Text.Internal.Text -- ^ 'postSharedWalletResponseBody201OneOf2Id'
  -> Data.Text.Internal.Text -- ^ 'postSharedWalletResponseBody201OneOf2Name'
  -> PostSharedWalletResponseBody201OneOf2Payment_script_template -- ^ 'postSharedWalletResponseBody201OneOf2Payment_script_template'
  -> PostSharedWalletResponseBody201OneOf2State -- ^ 'postSharedWalletResponseBody201OneOf2State'
  -> PostSharedWalletResponseBody201OneOf2Tip -- ^ 'postSharedWalletResponseBody201OneOf2Tip'
  -> PostSharedWalletResponseBody201OneOf2
mkPostSharedWalletResponseBody201OneOf2 postSharedWalletResponseBody201OneOf2Account_index postSharedWalletResponseBody201OneOf2Address_pool_gap postSharedWalletResponseBody201OneOf2Assets postSharedWalletResponseBody201OneOf2Balance postSharedWalletResponseBody201OneOf2Delegation postSharedWalletResponseBody201OneOf2Id postSharedWalletResponseBody201OneOf2Name postSharedWalletResponseBody201OneOf2Payment_script_template postSharedWalletResponseBody201OneOf2State postSharedWalletResponseBody201OneOf2Tip = PostSharedWalletResponseBody201OneOf2{postSharedWalletResponseBody201OneOf2Account_index = postSharedWalletResponseBody201OneOf2Account_index,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     postSharedWalletResponseBody201OneOf2Address_pool_gap = postSharedWalletResponseBody201OneOf2Address_pool_gap,
postSharedWalletResponseBody201OneOf2Assets = postSharedWalletResponseBody201OneOf2Assets,
postSharedWalletResponseBody201OneOf2Balance = postSharedWalletResponseBody201OneOf2Balance,
postSharedWalletResponseBody201OneOf2Delegation = postSharedWalletResponseBody201OneOf2Delegation,
postSharedWalletResponseBody201OneOf2Delegation_script_template = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     postSharedWalletResponseBody201OneOf2Id = postSharedWalletResponseBody201OneOf2Id,
postSharedWalletResponseBody201OneOf2Name = postSharedWalletResponseBody201OneOf2Name,
postSharedWalletResponseBody201OneOf2Passphrase = GHC.Maybe.Nothing,
postSharedWalletResponseBody201OneOf2Payment_script_template = postSharedWalletResponseBody201OneOf2Payment_script_template,
postSharedWalletResponseBody201OneOf2State = postSharedWalletResponseBody201OneOf2State,
postSharedWalletResponseBody201OneOf2Tip = postSharedWalletResponseBody201OneOf2Tip}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.responses.201.content.application\/json.schema.oneOf.properties.assets@ in the specification.
-- 
-- Current non-Ada asset holdings of the wallet.
-- 
-- The amount of assets available to spend may be less than the total
-- unspent assets due to transaction change amounts which are yet to
-- be fully confirmed (pending).
data PostSharedWalletResponseBody201OneOf2Assets = PostSharedWalletResponseBody201OneOf2Assets {
  -- | available: Available UTxO asset balances (funds that can be spent without
  -- condition).
  postSharedWalletResponseBody201OneOf2AssetsAvailable :: ([PostSharedWalletResponseBody201OneOf2AssetsAvailable])
  -- | total: Total asset balances (available balances plus pending change balances).
  , postSharedWalletResponseBody201OneOf2AssetsTotal :: ([PostSharedWalletResponseBody201OneOf2AssetsTotal])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody201OneOf2Assets
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["available" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2AssetsAvailable obj] : ["total" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2AssetsTotal obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["available" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2AssetsAvailable obj] : ["total" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2AssetsTotal obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody201OneOf2Assets
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletResponseBody201OneOf2Assets" (\obj -> (GHC.Base.pure PostSharedWalletResponseBody201OneOf2Assets GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "available")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "total"))
-- | Create a new 'PostSharedWalletResponseBody201OneOf2Assets' with all required fields.
mkPostSharedWalletResponseBody201OneOf2Assets :: [PostSharedWalletResponseBody201OneOf2AssetsAvailable] -- ^ 'postSharedWalletResponseBody201OneOf2AssetsAvailable'
  -> [PostSharedWalletResponseBody201OneOf2AssetsTotal] -- ^ 'postSharedWalletResponseBody201OneOf2AssetsTotal'
  -> PostSharedWalletResponseBody201OneOf2Assets
mkPostSharedWalletResponseBody201OneOf2Assets postSharedWalletResponseBody201OneOf2AssetsAvailable postSharedWalletResponseBody201OneOf2AssetsTotal = PostSharedWalletResponseBody201OneOf2Assets{postSharedWalletResponseBody201OneOf2AssetsAvailable = postSharedWalletResponseBody201OneOf2AssetsAvailable,
                                                                                                                                                                                                  postSharedWalletResponseBody201OneOf2AssetsTotal = postSharedWalletResponseBody201OneOf2AssetsTotal}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.responses.201.content.application\/json.schema.oneOf.properties.assets.properties.available.items@ in the specification.
-- 
-- An asset on the Cardano blockchain. An asset is uniquely identified by
-- its \`policy_id\` and \`asset_name\` (together, these form the _asset id_).
-- 
-- Two assets with the same \`asset_name\` and \`policy_id\` are
-- interchangeable. Yet, different assets with a same \`policy_id\` but
-- different \`asset_name\` are treated as separate assets, as are two
-- assets with the same \`asset_name\` but different \`policy_id\`.
data PostSharedWalletResponseBody201OneOf2AssetsAvailable = PostSharedWalletResponseBody201OneOf2AssetsAvailable {
  -- | asset_name: The asset on-chain type which acts as a sub-identifier within a
  -- policy. Although we call it \"asset name\", the value needn\'t be
  -- text, and it could even be empty.
  -- 
  -- For policies with a single fungible asset item, asset name is
  -- typically an empty string.
  -- 
  -- This value can be up to 32 bytes of arbitrary data (which is 64
  -- hexadecimal digits).
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  postSharedWalletResponseBody201OneOf2AssetsAvailableAsset_name :: Data.Text.Internal.Text
  -- | policy_id: A unique identifier of the asset\'s monetary policy. The policy
  -- controls how assets of this kind are created and destroyed.
  -- 
  -- The contents are the blake2b-224 hash of the monetary policy
  -- script, encoded in hexadecimal.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 56
  -- * Minimum length of 56
  , postSharedWalletResponseBody201OneOf2AssetsAvailablePolicy_id :: Data.Text.Internal.Text
  -- | quantity: Number of assets for the given \`policy_id\` and \`asset_name\`.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , postSharedWalletResponseBody201OneOf2AssetsAvailableQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody201OneOf2AssetsAvailable
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["asset_name" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2AssetsAvailableAsset_name obj] : ["policy_id" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2AssetsAvailablePolicy_id obj] : ["quantity" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2AssetsAvailableQuantity obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["asset_name" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2AssetsAvailableAsset_name obj] : ["policy_id" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2AssetsAvailablePolicy_id obj] : ["quantity" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2AssetsAvailableQuantity obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody201OneOf2AssetsAvailable
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletResponseBody201OneOf2AssetsAvailable" (\obj -> ((GHC.Base.pure PostSharedWalletResponseBody201OneOf2AssetsAvailable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "asset_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "policy_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'PostSharedWalletResponseBody201OneOf2AssetsAvailable' with all required fields.
mkPostSharedWalletResponseBody201OneOf2AssetsAvailable :: Data.Text.Internal.Text -- ^ 'postSharedWalletResponseBody201OneOf2AssetsAvailableAsset_name'
  -> Data.Text.Internal.Text -- ^ 'postSharedWalletResponseBody201OneOf2AssetsAvailablePolicy_id'
  -> GHC.Types.Int -- ^ 'postSharedWalletResponseBody201OneOf2AssetsAvailableQuantity'
  -> PostSharedWalletResponseBody201OneOf2AssetsAvailable
mkPostSharedWalletResponseBody201OneOf2AssetsAvailable postSharedWalletResponseBody201OneOf2AssetsAvailableAsset_name postSharedWalletResponseBody201OneOf2AssetsAvailablePolicy_id postSharedWalletResponseBody201OneOf2AssetsAvailableQuantity = PostSharedWalletResponseBody201OneOf2AssetsAvailable{postSharedWalletResponseBody201OneOf2AssetsAvailableAsset_name = postSharedWalletResponseBody201OneOf2AssetsAvailableAsset_name,
                                                                                                                                                                                                                                                                                                        postSharedWalletResponseBody201OneOf2AssetsAvailablePolicy_id = postSharedWalletResponseBody201OneOf2AssetsAvailablePolicy_id,
                                                                                                                                                                                                                                                                                                        postSharedWalletResponseBody201OneOf2AssetsAvailableQuantity = postSharedWalletResponseBody201OneOf2AssetsAvailableQuantity}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.responses.201.content.application\/json.schema.oneOf.properties.assets.properties.total.items@ in the specification.
-- 
-- An asset on the Cardano blockchain. An asset is uniquely identified by
-- its \`policy_id\` and \`asset_name\` (together, these form the _asset id_).
-- 
-- Two assets with the same \`asset_name\` and \`policy_id\` are
-- interchangeable. Yet, different assets with a same \`policy_id\` but
-- different \`asset_name\` are treated as separate assets, as are two
-- assets with the same \`asset_name\` but different \`policy_id\`.
data PostSharedWalletResponseBody201OneOf2AssetsTotal = PostSharedWalletResponseBody201OneOf2AssetsTotal {
  -- | asset_name: The asset on-chain type which acts as a sub-identifier within a
  -- policy. Although we call it \"asset name\", the value needn\'t be
  -- text, and it could even be empty.
  -- 
  -- For policies with a single fungible asset item, asset name is
  -- typically an empty string.
  -- 
  -- This value can be up to 32 bytes of arbitrary data (which is 64
  -- hexadecimal digits).
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  postSharedWalletResponseBody201OneOf2AssetsTotalAsset_name :: Data.Text.Internal.Text
  -- | policy_id: A unique identifier of the asset\'s monetary policy. The policy
  -- controls how assets of this kind are created and destroyed.
  -- 
  -- The contents are the blake2b-224 hash of the monetary policy
  -- script, encoded in hexadecimal.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 56
  -- * Minimum length of 56
  , postSharedWalletResponseBody201OneOf2AssetsTotalPolicy_id :: Data.Text.Internal.Text
  -- | quantity: Number of assets for the given \`policy_id\` and \`asset_name\`.
  -- 
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , postSharedWalletResponseBody201OneOf2AssetsTotalQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody201OneOf2AssetsTotal
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["asset_name" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2AssetsTotalAsset_name obj] : ["policy_id" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2AssetsTotalPolicy_id obj] : ["quantity" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2AssetsTotalQuantity obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["asset_name" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2AssetsTotalAsset_name obj] : ["policy_id" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2AssetsTotalPolicy_id obj] : ["quantity" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2AssetsTotalQuantity obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody201OneOf2AssetsTotal
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletResponseBody201OneOf2AssetsTotal" (\obj -> ((GHC.Base.pure PostSharedWalletResponseBody201OneOf2AssetsTotal GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "asset_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "policy_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'PostSharedWalletResponseBody201OneOf2AssetsTotal' with all required fields.
mkPostSharedWalletResponseBody201OneOf2AssetsTotal :: Data.Text.Internal.Text -- ^ 'postSharedWalletResponseBody201OneOf2AssetsTotalAsset_name'
  -> Data.Text.Internal.Text -- ^ 'postSharedWalletResponseBody201OneOf2AssetsTotalPolicy_id'
  -> GHC.Types.Int -- ^ 'postSharedWalletResponseBody201OneOf2AssetsTotalQuantity'
  -> PostSharedWalletResponseBody201OneOf2AssetsTotal
mkPostSharedWalletResponseBody201OneOf2AssetsTotal postSharedWalletResponseBody201OneOf2AssetsTotalAsset_name postSharedWalletResponseBody201OneOf2AssetsTotalPolicy_id postSharedWalletResponseBody201OneOf2AssetsTotalQuantity = PostSharedWalletResponseBody201OneOf2AssetsTotal{postSharedWalletResponseBody201OneOf2AssetsTotalAsset_name = postSharedWalletResponseBody201OneOf2AssetsTotalAsset_name,
                                                                                                                                                                                                                                                                                    postSharedWalletResponseBody201OneOf2AssetsTotalPolicy_id = postSharedWalletResponseBody201OneOf2AssetsTotalPolicy_id,
                                                                                                                                                                                                                                                                                    postSharedWalletResponseBody201OneOf2AssetsTotalQuantity = postSharedWalletResponseBody201OneOf2AssetsTotalQuantity}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.responses.201.content.application\/json.schema.oneOf.properties.balance@ in the specification.
-- 
-- Wallet current Ada balance(s).
data PostSharedWalletResponseBody201OneOf2Balance = PostSharedWalletResponseBody201OneOf2Balance {
  -- | available: Available Ada UTxO balance (funds that can be spent without condition).
  postSharedWalletResponseBody201OneOf2BalanceAvailable :: PostSharedWalletResponseBody201OneOf2BalanceAvailable
  -- | reward: The Ada balance of the reward account for this wallet.
  , postSharedWalletResponseBody201OneOf2BalanceReward :: PostSharedWalletResponseBody201OneOf2BalanceReward
  -- | total: Total Ada balance (available balance plus pending change and reward balance).
  , postSharedWalletResponseBody201OneOf2BalanceTotal :: PostSharedWalletResponseBody201OneOf2BalanceTotal
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody201OneOf2Balance
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["available" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2BalanceAvailable obj] : ["reward" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2BalanceReward obj] : ["total" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2BalanceTotal obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["available" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2BalanceAvailable obj] : ["reward" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2BalanceReward obj] : ["total" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2BalanceTotal obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody201OneOf2Balance
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletResponseBody201OneOf2Balance" (\obj -> ((GHC.Base.pure PostSharedWalletResponseBody201OneOf2Balance GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "available")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "reward")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "total"))
-- | Create a new 'PostSharedWalletResponseBody201OneOf2Balance' with all required fields.
mkPostSharedWalletResponseBody201OneOf2Balance :: PostSharedWalletResponseBody201OneOf2BalanceAvailable -- ^ 'postSharedWalletResponseBody201OneOf2BalanceAvailable'
  -> PostSharedWalletResponseBody201OneOf2BalanceReward -- ^ 'postSharedWalletResponseBody201OneOf2BalanceReward'
  -> PostSharedWalletResponseBody201OneOf2BalanceTotal -- ^ 'postSharedWalletResponseBody201OneOf2BalanceTotal'
  -> PostSharedWalletResponseBody201OneOf2Balance
mkPostSharedWalletResponseBody201OneOf2Balance postSharedWalletResponseBody201OneOf2BalanceAvailable postSharedWalletResponseBody201OneOf2BalanceReward postSharedWalletResponseBody201OneOf2BalanceTotal = PostSharedWalletResponseBody201OneOf2Balance{postSharedWalletResponseBody201OneOf2BalanceAvailable = postSharedWalletResponseBody201OneOf2BalanceAvailable,
                                                                                                                                                                                                                                                         postSharedWalletResponseBody201OneOf2BalanceReward = postSharedWalletResponseBody201OneOf2BalanceReward,
                                                                                                                                                                                                                                                         postSharedWalletResponseBody201OneOf2BalanceTotal = postSharedWalletResponseBody201OneOf2BalanceTotal}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.responses.201.content.application\/json.schema.oneOf.properties.balance.properties.available@ in the specification.
-- 
-- Available Ada UTxO balance (funds that can be spent without condition).
data PostSharedWalletResponseBody201OneOf2BalanceAvailable = PostSharedWalletResponseBody201OneOf2BalanceAvailable {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  postSharedWalletResponseBody201OneOf2BalanceAvailableQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody201OneOf2BalanceAvailable
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2BalanceAvailableQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2BalanceAvailableQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody201OneOf2BalanceAvailable
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletResponseBody201OneOf2BalanceAvailable" (\obj -> GHC.Base.pure PostSharedWalletResponseBody201OneOf2BalanceAvailable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'PostSharedWalletResponseBody201OneOf2BalanceAvailable' with all required fields.
mkPostSharedWalletResponseBody201OneOf2BalanceAvailable :: GHC.Types.Int -- ^ 'postSharedWalletResponseBody201OneOf2BalanceAvailableQuantity'
  -> PostSharedWalletResponseBody201OneOf2BalanceAvailable
mkPostSharedWalletResponseBody201OneOf2BalanceAvailable postSharedWalletResponseBody201OneOf2BalanceAvailableQuantity = PostSharedWalletResponseBody201OneOf2BalanceAvailable{postSharedWalletResponseBody201OneOf2BalanceAvailableQuantity = postSharedWalletResponseBody201OneOf2BalanceAvailableQuantity}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.responses.201.content.application\/json.schema.oneOf.properties.balance.properties.reward@ in the specification.
-- 
-- The Ada balance of the reward account for this wallet.
data PostSharedWalletResponseBody201OneOf2BalanceReward = PostSharedWalletResponseBody201OneOf2BalanceReward {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  postSharedWalletResponseBody201OneOf2BalanceRewardQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody201OneOf2BalanceReward
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2BalanceRewardQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2BalanceRewardQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody201OneOf2BalanceReward
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletResponseBody201OneOf2BalanceReward" (\obj -> GHC.Base.pure PostSharedWalletResponseBody201OneOf2BalanceReward GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'PostSharedWalletResponseBody201OneOf2BalanceReward' with all required fields.
mkPostSharedWalletResponseBody201OneOf2BalanceReward :: GHC.Types.Int -- ^ 'postSharedWalletResponseBody201OneOf2BalanceRewardQuantity'
  -> PostSharedWalletResponseBody201OneOf2BalanceReward
mkPostSharedWalletResponseBody201OneOf2BalanceReward postSharedWalletResponseBody201OneOf2BalanceRewardQuantity = PostSharedWalletResponseBody201OneOf2BalanceReward{postSharedWalletResponseBody201OneOf2BalanceRewardQuantity = postSharedWalletResponseBody201OneOf2BalanceRewardQuantity}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.responses.201.content.application\/json.schema.oneOf.properties.balance.properties.total@ in the specification.
-- 
-- Total Ada balance (available balance plus pending change and reward balance).
data PostSharedWalletResponseBody201OneOf2BalanceTotal = PostSharedWalletResponseBody201OneOf2BalanceTotal {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  postSharedWalletResponseBody201OneOf2BalanceTotalQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody201OneOf2BalanceTotal
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2BalanceTotalQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2BalanceTotalQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "lovelace"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody201OneOf2BalanceTotal
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletResponseBody201OneOf2BalanceTotal" (\obj -> GHC.Base.pure PostSharedWalletResponseBody201OneOf2BalanceTotal GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'PostSharedWalletResponseBody201OneOf2BalanceTotal' with all required fields.
mkPostSharedWalletResponseBody201OneOf2BalanceTotal :: GHC.Types.Int -- ^ 'postSharedWalletResponseBody201OneOf2BalanceTotalQuantity'
  -> PostSharedWalletResponseBody201OneOf2BalanceTotal
mkPostSharedWalletResponseBody201OneOf2BalanceTotal postSharedWalletResponseBody201OneOf2BalanceTotalQuantity = PostSharedWalletResponseBody201OneOf2BalanceTotal{postSharedWalletResponseBody201OneOf2BalanceTotalQuantity = postSharedWalletResponseBody201OneOf2BalanceTotalQuantity}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.responses.201.content.application\/json.schema.oneOf.properties.delegation@ in the specification.
-- 
-- Delegation settings
data PostSharedWalletResponseBody201OneOf2Delegation = PostSharedWalletResponseBody201OneOf2Delegation {
  -- | active: Currently active delegation status.
  postSharedWalletResponseBody201OneOf2DelegationActive :: PostSharedWalletResponseBody201OneOf2DelegationActive
  -- | next
  , postSharedWalletResponseBody201OneOf2DelegationNext :: ([PostSharedWalletResponseBody201OneOf2DelegationNext])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody201OneOf2Delegation
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["active" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2DelegationActive obj] : ["next" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2DelegationNext obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["active" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2DelegationActive obj] : ["next" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2DelegationNext obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody201OneOf2Delegation
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletResponseBody201OneOf2Delegation" (\obj -> (GHC.Base.pure PostSharedWalletResponseBody201OneOf2Delegation GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "next"))
-- | Create a new 'PostSharedWalletResponseBody201OneOf2Delegation' with all required fields.
mkPostSharedWalletResponseBody201OneOf2Delegation :: PostSharedWalletResponseBody201OneOf2DelegationActive -- ^ 'postSharedWalletResponseBody201OneOf2DelegationActive'
  -> [PostSharedWalletResponseBody201OneOf2DelegationNext] -- ^ 'postSharedWalletResponseBody201OneOf2DelegationNext'
  -> PostSharedWalletResponseBody201OneOf2Delegation
mkPostSharedWalletResponseBody201OneOf2Delegation postSharedWalletResponseBody201OneOf2DelegationActive postSharedWalletResponseBody201OneOf2DelegationNext = PostSharedWalletResponseBody201OneOf2Delegation{postSharedWalletResponseBody201OneOf2DelegationActive = postSharedWalletResponseBody201OneOf2DelegationActive,
                                                                                                                                                                                                              postSharedWalletResponseBody201OneOf2DelegationNext = postSharedWalletResponseBody201OneOf2DelegationNext}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.responses.201.content.application\/json.schema.oneOf.properties.delegation.properties.active@ in the specification.
-- 
-- Currently active delegation status.
data PostSharedWalletResponseBody201OneOf2DelegationActive = PostSharedWalletResponseBody201OneOf2DelegationActive {
  -- | status
  postSharedWalletResponseBody201OneOf2DelegationActiveStatus :: PostSharedWalletResponseBody201OneOf2DelegationActiveStatus
  -- | target: A unique Stake-Pool identifier (present only if status = \`delegating\`)
  , postSharedWalletResponseBody201OneOf2DelegationActiveTarget :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody201OneOf2DelegationActive
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["status" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2DelegationActiveStatus obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("target" Data.Aeson.Types.ToJSON..=)) (postSharedWalletResponseBody201OneOf2DelegationActiveTarget obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["status" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2DelegationActiveStatus obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("target" Data.Aeson.Types.ToJSON..=)) (postSharedWalletResponseBody201OneOf2DelegationActiveTarget obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody201OneOf2DelegationActive
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletResponseBody201OneOf2DelegationActive" (\obj -> (GHC.Base.pure PostSharedWalletResponseBody201OneOf2DelegationActive GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "target"))
-- | Create a new 'PostSharedWalletResponseBody201OneOf2DelegationActive' with all required fields.
mkPostSharedWalletResponseBody201OneOf2DelegationActive :: PostSharedWalletResponseBody201OneOf2DelegationActiveStatus -- ^ 'postSharedWalletResponseBody201OneOf2DelegationActiveStatus'
  -> PostSharedWalletResponseBody201OneOf2DelegationActive
mkPostSharedWalletResponseBody201OneOf2DelegationActive postSharedWalletResponseBody201OneOf2DelegationActiveStatus = PostSharedWalletResponseBody201OneOf2DelegationActive{postSharedWalletResponseBody201OneOf2DelegationActiveStatus = postSharedWalletResponseBody201OneOf2DelegationActiveStatus,
                                                                                                                                                                            postSharedWalletResponseBody201OneOf2DelegationActiveTarget = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/shared-wallets.POST.responses.201.content.application\/json.schema.oneOf.properties.delegation.properties.active.properties.status@ in the specification.
-- 
-- 
data PostSharedWalletResponseBody201OneOf2DelegationActiveStatus =
   PostSharedWalletResponseBody201OneOf2DelegationActiveStatusOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostSharedWalletResponseBody201OneOf2DelegationActiveStatusTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostSharedWalletResponseBody201OneOf2DelegationActiveStatusEnumNot_delegating -- ^ Represents the JSON value @"not_delegating"@
  | PostSharedWalletResponseBody201OneOf2DelegationActiveStatusEnumDelegating -- ^ Represents the JSON value @"delegating"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody201OneOf2DelegationActiveStatus
    where toJSON (PostSharedWalletResponseBody201OneOf2DelegationActiveStatusOther val) = val
          toJSON (PostSharedWalletResponseBody201OneOf2DelegationActiveStatusTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (PostSharedWalletResponseBody201OneOf2DelegationActiveStatusEnumNot_delegating) = "not_delegating"
          toJSON (PostSharedWalletResponseBody201OneOf2DelegationActiveStatusEnumDelegating) = "delegating"
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody201OneOf2DelegationActiveStatus
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "not_delegating" -> PostSharedWalletResponseBody201OneOf2DelegationActiveStatusEnumNot_delegating
                                            | val GHC.Classes.== "delegating" -> PostSharedWalletResponseBody201OneOf2DelegationActiveStatusEnumDelegating
                                            | GHC.Base.otherwise -> PostSharedWalletResponseBody201OneOf2DelegationActiveStatusOther val)
-- | Defines the object schema located at @paths.\/shared-wallets.POST.responses.201.content.application\/json.schema.oneOf.properties.delegation.properties.next.items@ in the specification.
-- 
-- Next delegation status becomes active at the start of the second epoch after the corresponding delegation certificate was discovered. The exact moment is specified by changes_at
data PostSharedWalletResponseBody201OneOf2DelegationNext = PostSharedWalletResponseBody201OneOf2DelegationNext {
  -- | changes_at
  postSharedWalletResponseBody201OneOf2DelegationNextChanges_at :: PostSharedWalletResponseBody201OneOf2DelegationNextChanges_at
  -- | status
  , postSharedWalletResponseBody201OneOf2DelegationNextStatus :: PostSharedWalletResponseBody201OneOf2DelegationNextStatus
  -- | target: A unique Stake-Pool identifier (present only if status = \`delegating\`)
  , postSharedWalletResponseBody201OneOf2DelegationNextTarget :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody201OneOf2DelegationNext
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["changes_at" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2DelegationNextChanges_at obj] : ["status" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2DelegationNextStatus obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("target" Data.Aeson.Types.ToJSON..=)) (postSharedWalletResponseBody201OneOf2DelegationNextTarget obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["changes_at" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2DelegationNextChanges_at obj] : ["status" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2DelegationNextStatus obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("target" Data.Aeson.Types.ToJSON..=)) (postSharedWalletResponseBody201OneOf2DelegationNextTarget obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody201OneOf2DelegationNext
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletResponseBody201OneOf2DelegationNext" (\obj -> ((GHC.Base.pure PostSharedWalletResponseBody201OneOf2DelegationNext GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "changes_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "target"))
-- | Create a new 'PostSharedWalletResponseBody201OneOf2DelegationNext' with all required fields.
mkPostSharedWalletResponseBody201OneOf2DelegationNext :: PostSharedWalletResponseBody201OneOf2DelegationNextChanges_at -- ^ 'postSharedWalletResponseBody201OneOf2DelegationNextChanges_at'
  -> PostSharedWalletResponseBody201OneOf2DelegationNextStatus -- ^ 'postSharedWalletResponseBody201OneOf2DelegationNextStatus'
  -> PostSharedWalletResponseBody201OneOf2DelegationNext
mkPostSharedWalletResponseBody201OneOf2DelegationNext postSharedWalletResponseBody201OneOf2DelegationNextChanges_at postSharedWalletResponseBody201OneOf2DelegationNextStatus = PostSharedWalletResponseBody201OneOf2DelegationNext{postSharedWalletResponseBody201OneOf2DelegationNextChanges_at = postSharedWalletResponseBody201OneOf2DelegationNextChanges_at,
                                                                                                                                                                                                                                    postSharedWalletResponseBody201OneOf2DelegationNextStatus = postSharedWalletResponseBody201OneOf2DelegationNextStatus,
                                                                                                                                                                                                                                    postSharedWalletResponseBody201OneOf2DelegationNextTarget = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.responses.201.content.application\/json.schema.oneOf.properties.delegation.properties.next.items.properties.changes_at@ in the specification.
-- 
-- 
data PostSharedWalletResponseBody201OneOf2DelegationNextChanges_at = PostSharedWalletResponseBody201OneOf2DelegationNextChanges_at {
  -- | epoch_number: An epoch is a time period which is divided into slots.
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  postSharedWalletResponseBody201OneOf2DelegationNextChanges_atEpoch_number :: GHC.Types.Int
  -- | epoch_start_time
  , postSharedWalletResponseBody201OneOf2DelegationNextChanges_atEpoch_start_time :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody201OneOf2DelegationNextChanges_at
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["epoch_number" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2DelegationNextChanges_atEpoch_number obj] : ["epoch_start_time" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2DelegationNextChanges_atEpoch_start_time obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["epoch_number" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2DelegationNextChanges_atEpoch_number obj] : ["epoch_start_time" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2DelegationNextChanges_atEpoch_start_time obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody201OneOf2DelegationNextChanges_at
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletResponseBody201OneOf2DelegationNextChanges_at" (\obj -> (GHC.Base.pure PostSharedWalletResponseBody201OneOf2DelegationNextChanges_at GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "epoch_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "epoch_start_time"))
-- | Create a new 'PostSharedWalletResponseBody201OneOf2DelegationNextChanges_at' with all required fields.
mkPostSharedWalletResponseBody201OneOf2DelegationNextChanges_at :: GHC.Types.Int -- ^ 'postSharedWalletResponseBody201OneOf2DelegationNextChanges_atEpoch_number'
  -> Data.Text.Internal.Text -- ^ 'postSharedWalletResponseBody201OneOf2DelegationNextChanges_atEpoch_start_time'
  -> PostSharedWalletResponseBody201OneOf2DelegationNextChanges_at
mkPostSharedWalletResponseBody201OneOf2DelegationNextChanges_at postSharedWalletResponseBody201OneOf2DelegationNextChanges_atEpoch_number postSharedWalletResponseBody201OneOf2DelegationNextChanges_atEpoch_start_time = PostSharedWalletResponseBody201OneOf2DelegationNextChanges_at{postSharedWalletResponseBody201OneOf2DelegationNextChanges_atEpoch_number = postSharedWalletResponseBody201OneOf2DelegationNextChanges_atEpoch_number,
                                                                                                                                                                                                                                                                                        postSharedWalletResponseBody201OneOf2DelegationNextChanges_atEpoch_start_time = postSharedWalletResponseBody201OneOf2DelegationNextChanges_atEpoch_start_time}
-- | Defines the enum schema located at @paths.\/shared-wallets.POST.responses.201.content.application\/json.schema.oneOf.properties.delegation.properties.next.items.properties.status@ in the specification.
-- 
-- 
data PostSharedWalletResponseBody201OneOf2DelegationNextStatus =
   PostSharedWalletResponseBody201OneOf2DelegationNextStatusOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostSharedWalletResponseBody201OneOf2DelegationNextStatusTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostSharedWalletResponseBody201OneOf2DelegationNextStatusEnumNot_delegating -- ^ Represents the JSON value @"not_delegating"@
  | PostSharedWalletResponseBody201OneOf2DelegationNextStatusEnumDelegating -- ^ Represents the JSON value @"delegating"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody201OneOf2DelegationNextStatus
    where toJSON (PostSharedWalletResponseBody201OneOf2DelegationNextStatusOther val) = val
          toJSON (PostSharedWalletResponseBody201OneOf2DelegationNextStatusTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (PostSharedWalletResponseBody201OneOf2DelegationNextStatusEnumNot_delegating) = "not_delegating"
          toJSON (PostSharedWalletResponseBody201OneOf2DelegationNextStatusEnumDelegating) = "delegating"
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody201OneOf2DelegationNextStatus
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "not_delegating" -> PostSharedWalletResponseBody201OneOf2DelegationNextStatusEnumNot_delegating
                                            | val GHC.Classes.== "delegating" -> PostSharedWalletResponseBody201OneOf2DelegationNextStatusEnumDelegating
                                            | GHC.Base.otherwise -> PostSharedWalletResponseBody201OneOf2DelegationNextStatusOther val)
-- | Defines the object schema located at @paths.\/shared-wallets.POST.responses.201.content.application\/json.schema.oneOf.properties.delegation_script_template@ in the specification.
-- 
-- 
data PostSharedWalletResponseBody201OneOf2Delegation_script_template = PostSharedWalletResponseBody201OneOf2Delegation_script_template {
  -- | cosigners: Map of cosigners and their account public keys. Use key as in &cosigner, eg. \"cosigner\#\"
  postSharedWalletResponseBody201OneOf2Delegation_script_templateCosigners :: Data.Aeson.Types.Internal.Object
  -- | template
  , postSharedWalletResponseBody201OneOf2Delegation_script_templateTemplate :: PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateVariants
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody201OneOf2Delegation_script_template
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["cosigners" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2Delegation_script_templateCosigners obj] : ["template" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2Delegation_script_templateTemplate obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["cosigners" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2Delegation_script_templateCosigners obj] : ["template" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2Delegation_script_templateTemplate obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody201OneOf2Delegation_script_template
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletResponseBody201OneOf2Delegation_script_template" (\obj -> (GHC.Base.pure PostSharedWalletResponseBody201OneOf2Delegation_script_template GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cosigners")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "template"))
-- | Create a new 'PostSharedWalletResponseBody201OneOf2Delegation_script_template' with all required fields.
mkPostSharedWalletResponseBody201OneOf2Delegation_script_template :: Data.Aeson.Types.Internal.Object -- ^ 'postSharedWalletResponseBody201OneOf2Delegation_script_templateCosigners'
  -> PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateVariants -- ^ 'postSharedWalletResponseBody201OneOf2Delegation_script_templateTemplate'
  -> PostSharedWalletResponseBody201OneOf2Delegation_script_template
mkPostSharedWalletResponseBody201OneOf2Delegation_script_template postSharedWalletResponseBody201OneOf2Delegation_script_templateCosigners postSharedWalletResponseBody201OneOf2Delegation_script_templateTemplate = PostSharedWalletResponseBody201OneOf2Delegation_script_template{postSharedWalletResponseBody201OneOf2Delegation_script_templateCosigners = postSharedWalletResponseBody201OneOf2Delegation_script_templateCosigners,
                                                                                                                                                                                                                                                                                     postSharedWalletResponseBody201OneOf2Delegation_script_templateTemplate = postSharedWalletResponseBody201OneOf2Delegation_script_templateTemplate}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.responses.201.content.application\/json.schema.oneOf.properties.delegation_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf2 = PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf2 {
  -- | all: Script primitive for which all signing keys corresponding to all list cosigners\' verification keys are expected to make the script valid.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  postSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf2All :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf2
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["all" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf2All obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["all" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf2All obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf2
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf2" (\obj -> GHC.Base.pure PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf2 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "all"))
-- | Create a new 'PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf2' with all required fields.
mkPostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf2 :: [ScriptTemplateValue] -- ^ 'postSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf2All'
  -> PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf2
mkPostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf2 postSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf2All = PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf2{postSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf2All = postSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf2All}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.responses.201.content.application\/json.schema.oneOf.properties.delegation_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf3 = PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf3 {
  -- | any: Script primitive for which a signing key corresponding to any of the list cosigners\' verification keys is expected to make the script valid. It is equivalent to \`some\` with \`\"at_least\"=1\`.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  postSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf3Any :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf3
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["any" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf3Any obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["any" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf3Any obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf3
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf3" (\obj -> GHC.Base.pure PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf3 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "any"))
-- | Create a new 'PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf3' with all required fields.
mkPostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf3 :: [ScriptTemplateValue] -- ^ 'postSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf3Any'
  -> PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf3
mkPostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf3 postSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf3Any = PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf3{postSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf3Any = postSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf3Any}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.responses.201.content.application\/json.schema.oneOf.properties.delegation_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf4 = PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf4 {
  -- | some: Script primitive for which at least a given number of signing keys corresponding to the list cosigners\' verification keys are expected to make the script valid.
  postSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf4Some :: PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf4Some
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf4
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["some" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf4Some obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["some" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf4Some obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf4
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf4" (\obj -> GHC.Base.pure PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf4 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "some"))
-- | Create a new 'PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf4' with all required fields.
mkPostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf4 :: PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf4Some -- ^ 'postSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf4Some'
  -> PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf4
mkPostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf4 postSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf4Some = PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf4{postSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf4Some = postSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf4Some}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.responses.201.content.application\/json.schema.oneOf.properties.delegation_script_template.properties.template.oneOf.properties.some@ in the specification.
-- 
-- Script primitive for which at least a given number of signing keys corresponding to the list cosigners\' verification keys are expected to make the script valid.
data PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf4Some = PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf4Some {
  -- | at_least
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 255.0
  -- * Minimum  of 1.0
  postSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf4SomeAt_least :: GHC.Types.Int
  -- | from
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  , postSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf4SomeFrom :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf4Some
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["at_least" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf4SomeAt_least obj] : ["from" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf4SomeFrom obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["at_least" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf4SomeAt_least obj] : ["from" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf4SomeFrom obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf4Some
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf4Some" (\obj -> (GHC.Base.pure PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf4Some GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "at_least")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "from"))
-- | Create a new 'PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf4Some' with all required fields.
mkPostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf4Some :: GHC.Types.Int -- ^ 'postSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf4SomeAt_least'
  -> [ScriptTemplateValue] -- ^ 'postSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf4SomeFrom'
  -> PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf4Some
mkPostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf4Some postSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf4SomeAt_least postSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf4SomeFrom = PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf4Some{postSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf4SomeAt_least = postSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf4SomeAt_least,
                                                                                                                                                                                                                                                                                                                                                        postSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf4SomeFrom = postSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf4SomeFrom}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.responses.201.content.application\/json.schema.oneOf.properties.delegation_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf5 = PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf5 {
  -- | active_from: Transaction is only valid starting at the specified slot number (\`â‰¥ active_from\`).
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  postSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf5Active_from :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf5
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["active_from" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf5Active_from obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["active_from" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf5Active_from obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf5
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf5" (\obj -> GHC.Base.pure PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf5 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active_from"))
-- | Create a new 'PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf5' with all required fields.
mkPostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf5 :: GHC.Types.Int -- ^ 'postSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf5Active_from'
  -> PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf5
mkPostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf5 postSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf5Active_from = PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf5{postSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf5Active_from = postSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf5Active_from}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.responses.201.content.application\/json.schema.oneOf.properties.delegation_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf6 = PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf6 {
  -- | active_until: Transaction is only valid before the specified slot number (\`\< active_until\`).
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  postSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf6Active_until :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf6
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["active_until" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf6Active_until obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["active_until" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf6Active_until obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf6
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf6" (\obj -> GHC.Base.pure PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf6 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active_until"))
-- | Create a new 'PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf6' with all required fields.
mkPostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf6 :: GHC.Types.Int -- ^ 'postSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf6Active_until'
  -> PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf6
mkPostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf6 postSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf6Active_until = PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf6{postSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf6Active_until = postSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf6Active_until}
-- | Defines the oneOf schema located at @paths.\/shared-wallets.POST.responses.201.content.application\/json.schema.oneOf.properties.delegation_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateVariants =
   PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateVariant1 Data.Text.Internal.Text
  | PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateVariant2 PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf2
  | PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateVariant3 PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf3
  | PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateVariant4 PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf4
  | PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateVariant5 PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf5
  | PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateVariant6 PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateOneOf6
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateVariants
    where toJSON (PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateVariant1 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateVariant2 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateVariant3 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateVariant4 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateVariant5 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateVariant6 a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateVariants
    where parseJSON val = case (PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateVariant1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateVariant2 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateVariant3 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateVariant4 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateVariant5 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostSharedWalletResponseBody201OneOf2Delegation_script_templateTemplateVariant6 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched"))))) of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the object schema located at @paths.\/shared-wallets.POST.responses.201.content.application\/json.schema.oneOf.properties.passphrase@ in the specification.
-- 
-- Information about the wallet\'s passphrase
data PostSharedWalletResponseBody201OneOf2Passphrase = PostSharedWalletResponseBody201OneOf2Passphrase {
  -- | last_updated_at
  postSharedWalletResponseBody201OneOf2PassphraseLast_updated_at :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody201OneOf2Passphrase
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["last_updated_at" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2PassphraseLast_updated_at obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["last_updated_at" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2PassphraseLast_updated_at obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody201OneOf2Passphrase
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletResponseBody201OneOf2Passphrase" (\obj -> GHC.Base.pure PostSharedWalletResponseBody201OneOf2Passphrase GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "last_updated_at"))
-- | Create a new 'PostSharedWalletResponseBody201OneOf2Passphrase' with all required fields.
mkPostSharedWalletResponseBody201OneOf2Passphrase :: Data.Text.Internal.Text -- ^ 'postSharedWalletResponseBody201OneOf2PassphraseLast_updated_at'
  -> PostSharedWalletResponseBody201OneOf2Passphrase
mkPostSharedWalletResponseBody201OneOf2Passphrase postSharedWalletResponseBody201OneOf2PassphraseLast_updated_at = PostSharedWalletResponseBody201OneOf2Passphrase{postSharedWalletResponseBody201OneOf2PassphraseLast_updated_at = postSharedWalletResponseBody201OneOf2PassphraseLast_updated_at}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.responses.201.content.application\/json.schema.oneOf.properties.payment_script_template@ in the specification.
-- 
-- 
data PostSharedWalletResponseBody201OneOf2Payment_script_template = PostSharedWalletResponseBody201OneOf2Payment_script_template {
  -- | cosigners: Map of cosigners and their account public keys. Use key as in &cosigner, eg. \"cosigner\#\"
  postSharedWalletResponseBody201OneOf2Payment_script_templateCosigners :: Data.Aeson.Types.Internal.Object
  -- | template
  , postSharedWalletResponseBody201OneOf2Payment_script_templateTemplate :: PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateVariants
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody201OneOf2Payment_script_template
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["cosigners" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2Payment_script_templateCosigners obj] : ["template" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2Payment_script_templateTemplate obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["cosigners" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2Payment_script_templateCosigners obj] : ["template" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2Payment_script_templateTemplate obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody201OneOf2Payment_script_template
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletResponseBody201OneOf2Payment_script_template" (\obj -> (GHC.Base.pure PostSharedWalletResponseBody201OneOf2Payment_script_template GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cosigners")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "template"))
-- | Create a new 'PostSharedWalletResponseBody201OneOf2Payment_script_template' with all required fields.
mkPostSharedWalletResponseBody201OneOf2Payment_script_template :: Data.Aeson.Types.Internal.Object -- ^ 'postSharedWalletResponseBody201OneOf2Payment_script_templateCosigners'
  -> PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateVariants -- ^ 'postSharedWalletResponseBody201OneOf2Payment_script_templateTemplate'
  -> PostSharedWalletResponseBody201OneOf2Payment_script_template
mkPostSharedWalletResponseBody201OneOf2Payment_script_template postSharedWalletResponseBody201OneOf2Payment_script_templateCosigners postSharedWalletResponseBody201OneOf2Payment_script_templateTemplate = PostSharedWalletResponseBody201OneOf2Payment_script_template{postSharedWalletResponseBody201OneOf2Payment_script_templateCosigners = postSharedWalletResponseBody201OneOf2Payment_script_templateCosigners,
                                                                                                                                                                                                                                                                         postSharedWalletResponseBody201OneOf2Payment_script_templateTemplate = postSharedWalletResponseBody201OneOf2Payment_script_templateTemplate}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.responses.201.content.application\/json.schema.oneOf.properties.payment_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf2 = PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf2 {
  -- | all: Script primitive for which all signing keys corresponding to all list cosigners\' verification keys are expected to make the script valid.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  postSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf2All :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf2
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["all" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf2All obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["all" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf2All obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf2
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf2" (\obj -> GHC.Base.pure PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf2 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "all"))
-- | Create a new 'PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf2' with all required fields.
mkPostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf2 :: [ScriptTemplateValue] -- ^ 'postSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf2All'
  -> PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf2
mkPostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf2 postSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf2All = PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf2{postSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf2All = postSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf2All}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.responses.201.content.application\/json.schema.oneOf.properties.payment_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf3 = PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf3 {
  -- | any: Script primitive for which a signing key corresponding to any of the list cosigners\' verification keys is expected to make the script valid. It is equivalent to \`some\` with \`\"at_least\"=1\`.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  postSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf3Any :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf3
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["any" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf3Any obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["any" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf3Any obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf3
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf3" (\obj -> GHC.Base.pure PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf3 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "any"))
-- | Create a new 'PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf3' with all required fields.
mkPostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf3 :: [ScriptTemplateValue] -- ^ 'postSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf3Any'
  -> PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf3
mkPostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf3 postSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf3Any = PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf3{postSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf3Any = postSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf3Any}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.responses.201.content.application\/json.schema.oneOf.properties.payment_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf4 = PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf4 {
  -- | some: Script primitive for which at least a given number of signing keys corresponding to the list cosigners\' verification keys are expected to make the script valid.
  postSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf4Some :: PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf4Some
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf4
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["some" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf4Some obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["some" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf4Some obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf4
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf4" (\obj -> GHC.Base.pure PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf4 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "some"))
-- | Create a new 'PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf4' with all required fields.
mkPostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf4 :: PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf4Some -- ^ 'postSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf4Some'
  -> PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf4
mkPostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf4 postSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf4Some = PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf4{postSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf4Some = postSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf4Some}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.responses.201.content.application\/json.schema.oneOf.properties.payment_script_template.properties.template.oneOf.properties.some@ in the specification.
-- 
-- Script primitive for which at least a given number of signing keys corresponding to the list cosigners\' verification keys are expected to make the script valid.
data PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf4Some = PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf4Some {
  -- | at_least
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 255.0
  -- * Minimum  of 1.0
  postSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf4SomeAt_least :: GHC.Types.Int
  -- | from
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  , postSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf4SomeFrom :: ([ScriptTemplateValue])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf4Some
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["at_least" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf4SomeAt_least obj] : ["from" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf4SomeFrom obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["at_least" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf4SomeAt_least obj] : ["from" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf4SomeFrom obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf4Some
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf4Some" (\obj -> (GHC.Base.pure PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf4Some GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "at_least")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "from"))
-- | Create a new 'PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf4Some' with all required fields.
mkPostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf4Some :: GHC.Types.Int -- ^ 'postSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf4SomeAt_least'
  -> [ScriptTemplateValue] -- ^ 'postSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf4SomeFrom'
  -> PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf4Some
mkPostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf4Some postSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf4SomeAt_least postSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf4SomeFrom = PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf4Some{postSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf4SomeAt_least = postSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf4SomeAt_least,
                                                                                                                                                                                                                                                                                                                                            postSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf4SomeFrom = postSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf4SomeFrom}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.responses.201.content.application\/json.schema.oneOf.properties.payment_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf5 = PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf5 {
  -- | active_from: Transaction is only valid starting at the specified slot number (\`â‰¥ active_from\`).
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  postSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf5Active_from :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf5
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["active_from" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf5Active_from obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["active_from" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf5Active_from obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf5
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf5" (\obj -> GHC.Base.pure PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf5 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active_from"))
-- | Create a new 'PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf5' with all required fields.
mkPostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf5 :: GHC.Types.Int -- ^ 'postSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf5Active_from'
  -> PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf5
mkPostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf5 postSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf5Active_from = PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf5{postSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf5Active_from = postSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf5Active_from}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.responses.201.content.application\/json.schema.oneOf.properties.payment_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf6 = PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf6 {
  -- | active_until: Transaction is only valid before the specified slot number (\`\< active_until\`).
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  postSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf6Active_until :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf6
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["active_until" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf6Active_until obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["active_until" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf6Active_until obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf6
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf6" (\obj -> GHC.Base.pure PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf6 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active_until"))
-- | Create a new 'PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf6' with all required fields.
mkPostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf6 :: GHC.Types.Int -- ^ 'postSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf6Active_until'
  -> PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf6
mkPostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf6 postSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf6Active_until = PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf6{postSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf6Active_until = postSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf6Active_until}
-- | Defines the oneOf schema located at @paths.\/shared-wallets.POST.responses.201.content.application\/json.schema.oneOf.properties.payment_script_template.properties.template.oneOf@ in the specification.
-- 
-- 
data PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateVariants =
   PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateVariant1 Data.Text.Internal.Text
  | PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateVariant2 PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf2
  | PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateVariant3 PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf3
  | PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateVariant4 PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf4
  | PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateVariant5 PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf5
  | PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateVariant6 PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateOneOf6
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateVariants
    where toJSON (PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateVariant1 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateVariant2 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateVariant3 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateVariant4 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateVariant5 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateVariant6 a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateVariants
    where parseJSON val = case (PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateVariant1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateVariant2 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateVariant3 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateVariant4 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateVariant5 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostSharedWalletResponseBody201OneOf2Payment_script_templateTemplateVariant6 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched"))))) of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the object schema located at @paths.\/shared-wallets.POST.responses.201.content.application\/json.schema.oneOf.properties.state@ in the specification.
-- 
-- Whether a wallet is ready to use or still syncing
data PostSharedWalletResponseBody201OneOf2State = PostSharedWalletResponseBody201OneOf2State {
  -- | progress: \<span style=\"position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;\">
  -- \<strong>if:\<\/strong> status == syncing
  -- \<\/span>\<br\/>
  postSharedWalletResponseBody201OneOf2StateProgress :: (GHC.Maybe.Maybe PostSharedWalletResponseBody201OneOf2StateProgress)
  -- | status
  , postSharedWalletResponseBody201OneOf2StateStatus :: PostSharedWalletResponseBody201OneOf2StateStatus
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody201OneOf2State
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("progress" Data.Aeson.Types.ToJSON..=)) (postSharedWalletResponseBody201OneOf2StateProgress obj) : ["status" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2StateStatus obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("progress" Data.Aeson.Types.ToJSON..=)) (postSharedWalletResponseBody201OneOf2StateProgress obj) : ["status" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2StateStatus obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody201OneOf2State
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletResponseBody201OneOf2State" (\obj -> (GHC.Base.pure PostSharedWalletResponseBody201OneOf2State GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "progress")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))
-- | Create a new 'PostSharedWalletResponseBody201OneOf2State' with all required fields.
mkPostSharedWalletResponseBody201OneOf2State :: PostSharedWalletResponseBody201OneOf2StateStatus -- ^ 'postSharedWalletResponseBody201OneOf2StateStatus'
  -> PostSharedWalletResponseBody201OneOf2State
mkPostSharedWalletResponseBody201OneOf2State postSharedWalletResponseBody201OneOf2StateStatus = PostSharedWalletResponseBody201OneOf2State{postSharedWalletResponseBody201OneOf2StateProgress = GHC.Maybe.Nothing,
                                                                                                                                           postSharedWalletResponseBody201OneOf2StateStatus = postSharedWalletResponseBody201OneOf2StateStatus}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.responses.201.content.application\/json.schema.oneOf.properties.state.properties.progress@ in the specification.
-- 
-- \<span style=\"position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;\">
-- \<strong>if:\<\/strong> status == syncing
-- \<\/span>\<br\/>
data PostSharedWalletResponseBody201OneOf2StateProgress = PostSharedWalletResponseBody201OneOf2StateProgress {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  -- * Minimum  of 0.0
  postSharedWalletResponseBody201OneOf2StateProgressQuantity :: GHC.Types.Double
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody201OneOf2StateProgress
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2StateProgressQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "percent"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2StateProgressQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "percent"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody201OneOf2StateProgress
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletResponseBody201OneOf2StateProgress" (\obj -> GHC.Base.pure PostSharedWalletResponseBody201OneOf2StateProgress GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'PostSharedWalletResponseBody201OneOf2StateProgress' with all required fields.
mkPostSharedWalletResponseBody201OneOf2StateProgress :: GHC.Types.Double -- ^ 'postSharedWalletResponseBody201OneOf2StateProgressQuantity'
  -> PostSharedWalletResponseBody201OneOf2StateProgress
mkPostSharedWalletResponseBody201OneOf2StateProgress postSharedWalletResponseBody201OneOf2StateProgressQuantity = PostSharedWalletResponseBody201OneOf2StateProgress{postSharedWalletResponseBody201OneOf2StateProgressQuantity = postSharedWalletResponseBody201OneOf2StateProgressQuantity}
-- | Defines the enum schema located at @paths.\/shared-wallets.POST.responses.201.content.application\/json.schema.oneOf.properties.state.properties.status@ in the specification.
-- 
-- 
data PostSharedWalletResponseBody201OneOf2StateStatus =
   PostSharedWalletResponseBody201OneOf2StateStatusOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostSharedWalletResponseBody201OneOf2StateStatusTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostSharedWalletResponseBody201OneOf2StateStatusEnumReady -- ^ Represents the JSON value @"ready"@
  | PostSharedWalletResponseBody201OneOf2StateStatusEnumSyncing -- ^ Represents the JSON value @"syncing"@
  | PostSharedWalletResponseBody201OneOf2StateStatusEnumNot_responding -- ^ Represents the JSON value @"not_responding"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody201OneOf2StateStatus
    where toJSON (PostSharedWalletResponseBody201OneOf2StateStatusOther val) = val
          toJSON (PostSharedWalletResponseBody201OneOf2StateStatusTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (PostSharedWalletResponseBody201OneOf2StateStatusEnumReady) = "ready"
          toJSON (PostSharedWalletResponseBody201OneOf2StateStatusEnumSyncing) = "syncing"
          toJSON (PostSharedWalletResponseBody201OneOf2StateStatusEnumNot_responding) = "not_responding"
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody201OneOf2StateStatus
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "ready" -> PostSharedWalletResponseBody201OneOf2StateStatusEnumReady
                                            | val GHC.Classes.== "syncing" -> PostSharedWalletResponseBody201OneOf2StateStatusEnumSyncing
                                            | val GHC.Classes.== "not_responding" -> PostSharedWalletResponseBody201OneOf2StateStatusEnumNot_responding
                                            | GHC.Base.otherwise -> PostSharedWalletResponseBody201OneOf2StateStatusOther val)
-- | Defines the object schema located at @paths.\/shared-wallets.POST.responses.201.content.application\/json.schema.oneOf.properties.tip@ in the specification.
-- 
-- A reference to a particular time slot, and the block height at that point.
data PostSharedWalletResponseBody201OneOf2Tip = PostSharedWalletResponseBody201OneOf2Tip {
  -- | absolute_slot_number: The 0-based slot index starting from genesis of the blockchain.
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  postSharedWalletResponseBody201OneOf2TipAbsolute_slot_number :: GHC.Types.Int
  -- | epoch_number: An epoch is a time period which is divided into slots.
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , postSharedWalletResponseBody201OneOf2TipEpoch_number :: GHC.Types.Int
  -- | height
  , postSharedWalletResponseBody201OneOf2TipHeight :: PostSharedWalletResponseBody201OneOf2TipHeight
  -- | slot_number: The zero-based slot index within an epoch.
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , postSharedWalletResponseBody201OneOf2TipSlot_number :: GHC.Types.Int
  -- | time
  , postSharedWalletResponseBody201OneOf2TipTime :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody201OneOf2Tip
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["absolute_slot_number" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2TipAbsolute_slot_number obj] : ["epoch_number" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2TipEpoch_number obj] : ["height" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2TipHeight obj] : ["slot_number" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2TipSlot_number obj] : ["time" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2TipTime obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["absolute_slot_number" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2TipAbsolute_slot_number obj] : ["epoch_number" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2TipEpoch_number obj] : ["height" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2TipHeight obj] : ["slot_number" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2TipSlot_number obj] : ["time" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2TipTime obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody201OneOf2Tip
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletResponseBody201OneOf2Tip" (\obj -> ((((GHC.Base.pure PostSharedWalletResponseBody201OneOf2Tip GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "absolute_slot_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "epoch_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "height")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "slot_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "time"))
-- | Create a new 'PostSharedWalletResponseBody201OneOf2Tip' with all required fields.
mkPostSharedWalletResponseBody201OneOf2Tip :: GHC.Types.Int -- ^ 'postSharedWalletResponseBody201OneOf2TipAbsolute_slot_number'
  -> GHC.Types.Int -- ^ 'postSharedWalletResponseBody201OneOf2TipEpoch_number'
  -> PostSharedWalletResponseBody201OneOf2TipHeight -- ^ 'postSharedWalletResponseBody201OneOf2TipHeight'
  -> GHC.Types.Int -- ^ 'postSharedWalletResponseBody201OneOf2TipSlot_number'
  -> Data.Text.Internal.Text -- ^ 'postSharedWalletResponseBody201OneOf2TipTime'
  -> PostSharedWalletResponseBody201OneOf2Tip
mkPostSharedWalletResponseBody201OneOf2Tip postSharedWalletResponseBody201OneOf2TipAbsolute_slot_number postSharedWalletResponseBody201OneOf2TipEpoch_number postSharedWalletResponseBody201OneOf2TipHeight postSharedWalletResponseBody201OneOf2TipSlot_number postSharedWalletResponseBody201OneOf2TipTime = PostSharedWalletResponseBody201OneOf2Tip{postSharedWalletResponseBody201OneOf2TipAbsolute_slot_number = postSharedWalletResponseBody201OneOf2TipAbsolute_slot_number,
                                                                                                                                                                                                                                                                                                                                                        postSharedWalletResponseBody201OneOf2TipEpoch_number = postSharedWalletResponseBody201OneOf2TipEpoch_number,
                                                                                                                                                                                                                                                                                                                                                        postSharedWalletResponseBody201OneOf2TipHeight = postSharedWalletResponseBody201OneOf2TipHeight,
                                                                                                                                                                                                                                                                                                                                                        postSharedWalletResponseBody201OneOf2TipSlot_number = postSharedWalletResponseBody201OneOf2TipSlot_number,
                                                                                                                                                                                                                                                                                                                                                        postSharedWalletResponseBody201OneOf2TipTime = postSharedWalletResponseBody201OneOf2TipTime}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.responses.201.content.application\/json.schema.oneOf.properties.tip.properties.height@ in the specification.
-- 
-- 
data PostSharedWalletResponseBody201OneOf2TipHeight = PostSharedWalletResponseBody201OneOf2TipHeight {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  postSharedWalletResponseBody201OneOf2TipHeightQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody201OneOf2TipHeight
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2TipHeightQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "block"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody201OneOf2TipHeightQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "block"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody201OneOf2TipHeight
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletResponseBody201OneOf2TipHeight" (\obj -> GHC.Base.pure PostSharedWalletResponseBody201OneOf2TipHeight GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'PostSharedWalletResponseBody201OneOf2TipHeight' with all required fields.
mkPostSharedWalletResponseBody201OneOf2TipHeight :: GHC.Types.Int -- ^ 'postSharedWalletResponseBody201OneOf2TipHeightQuantity'
  -> PostSharedWalletResponseBody201OneOf2TipHeight
mkPostSharedWalletResponseBody201OneOf2TipHeight postSharedWalletResponseBody201OneOf2TipHeightQuantity = PostSharedWalletResponseBody201OneOf2TipHeight{postSharedWalletResponseBody201OneOf2TipHeightQuantity = postSharedWalletResponseBody201OneOf2TipHeightQuantity}
-- | Defines the oneOf schema located at @paths.\/shared-wallets.POST.responses.201.content.application\/json.schema.oneOf@ in the specification.
-- 
-- 
data PostSharedWalletResponseBody201Variants =
   PostSharedWalletResponseBody201Variant1 PostSharedWalletResponseBody201OneOf1
  | PostSharedWalletResponseBody201Variant2 PostSharedWalletResponseBody201OneOf2
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody201Variants
    where toJSON (PostSharedWalletResponseBody201Variant1 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostSharedWalletResponseBody201Variant2 a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody201Variants
    where parseJSON val = case (PostSharedWalletResponseBody201Variant1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostSharedWalletResponseBody201Variant2 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the object schema located at @paths.\/shared-wallets.POST.responses.400.content.application\/json.schema@ in the specification.
-- 
-- 
data PostSharedWalletResponseBody400 = PostSharedWalletResponseBody400 {
  -- | message: May occur when a request is not well-formed; that is, it fails to parse
  -- successfully. This could be the case when some required parameters
  -- are missing or, when malformed values are provided.
  postSharedWalletResponseBody400Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody400Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "bad_request"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody400Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "bad_request"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletResponseBody400" (\obj -> GHC.Base.pure PostSharedWalletResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'PostSharedWalletResponseBody400' with all required fields.
mkPostSharedWalletResponseBody400 :: Data.Text.Internal.Text -- ^ 'postSharedWalletResponseBody400Message'
  -> PostSharedWalletResponseBody400
mkPostSharedWalletResponseBody400 postSharedWalletResponseBody400Message = PostSharedWalletResponseBody400{postSharedWalletResponseBody400Message = postSharedWalletResponseBody400Message}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.responses.403.content.application\/json.schema.oneOf@ in the specification.
-- 
-- 
data PostSharedWalletResponseBody403OneOf1 = PostSharedWalletResponseBody403OneOf1 {
  -- | message: Returned when a user tries to create a shared wallet with script template
  -- that does not pass validation.
  postSharedWalletResponseBody403OneOf1Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody403OneOf1
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody403OneOf1Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "shared_wallet_script_template_invalid"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody403OneOf1Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "shared_wallet_script_template_invalid"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody403OneOf1
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletResponseBody403OneOf1" (\obj -> GHC.Base.pure PostSharedWalletResponseBody403OneOf1 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'PostSharedWalletResponseBody403OneOf1' with all required fields.
mkPostSharedWalletResponseBody403OneOf1 :: Data.Text.Internal.Text -- ^ 'postSharedWalletResponseBody403OneOf1Message'
  -> PostSharedWalletResponseBody403OneOf1
mkPostSharedWalletResponseBody403OneOf1 postSharedWalletResponseBody403OneOf1Message = PostSharedWalletResponseBody403OneOf1{postSharedWalletResponseBody403OneOf1Message = postSharedWalletResponseBody403OneOf1Message}
-- | Defines the oneOf schema located at @paths.\/shared-wallets.POST.responses.403.content.application\/json.schema.oneOf@ in the specification.
-- 
-- 
data PostSharedWalletResponseBody403Variants =
   PostSharedWalletResponseBody403Variant1 PostSharedWalletResponseBody403OneOf1
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody403Variants
    where toJSON (PostSharedWalletResponseBody403Variant1 a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody403Variants
    where parseJSON val = case (PostSharedWalletResponseBody403Variant1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched" of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the object schema located at @paths.\/shared-wallets.POST.responses.406.content.application\/json.schema@ in the specification.
-- 
-- 
data PostSharedWalletResponseBody406 = PostSharedWalletResponseBody406 {
  -- | message: May occur when providing an invalid \'Accept\' header.
  postSharedWalletResponseBody406Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody406
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody406Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "not_acceptable"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody406Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "not_acceptable"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody406
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletResponseBody406" (\obj -> GHC.Base.pure PostSharedWalletResponseBody406 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'PostSharedWalletResponseBody406' with all required fields.
mkPostSharedWalletResponseBody406 :: Data.Text.Internal.Text -- ^ 'postSharedWalletResponseBody406Message'
  -> PostSharedWalletResponseBody406
mkPostSharedWalletResponseBody406 postSharedWalletResponseBody406Message = PostSharedWalletResponseBody406{postSharedWalletResponseBody406Message = postSharedWalletResponseBody406Message}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.responses.409.content.application\/json.schema@ in the specification.
-- 
-- 
data PostSharedWalletResponseBody409 = PostSharedWalletResponseBody409 {
  -- | message: May occur when a otherwise valid request would yield a wallet that already exists.
  postSharedWalletResponseBody409Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody409
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody409Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "wallet_already_exists"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody409Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "wallet_already_exists"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody409
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletResponseBody409" (\obj -> GHC.Base.pure PostSharedWalletResponseBody409 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'PostSharedWalletResponseBody409' with all required fields.
mkPostSharedWalletResponseBody409 :: Data.Text.Internal.Text -- ^ 'postSharedWalletResponseBody409Message'
  -> PostSharedWalletResponseBody409
mkPostSharedWalletResponseBody409 postSharedWalletResponseBody409Message = PostSharedWalletResponseBody409{postSharedWalletResponseBody409Message = postSharedWalletResponseBody409Message}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.responses.415.content.application\/json.schema@ in the specification.
-- 
-- 
data PostSharedWalletResponseBody415 = PostSharedWalletResponseBody415 {
  -- | message: May occur when providing an invalid \'Content-Type\' header.
  postSharedWalletResponseBody415Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody415
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody415Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "unsupported_media_type"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody415Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "unsupported_media_type"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody415
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletResponseBody415" (\obj -> GHC.Base.pure PostSharedWalletResponseBody415 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'PostSharedWalletResponseBody415' with all required fields.
mkPostSharedWalletResponseBody415 :: Data.Text.Internal.Text -- ^ 'postSharedWalletResponseBody415Message'
  -> PostSharedWalletResponseBody415
mkPostSharedWalletResponseBody415 postSharedWalletResponseBody415Message = PostSharedWalletResponseBody415{postSharedWalletResponseBody415Message = postSharedWalletResponseBody415Message}
-- | Defines the object schema located at @paths.\/shared-wallets.POST.responses.500.content.application\/json.schema.oneOf@ in the specification.
-- 
-- 
data PostSharedWalletResponseBody500OneOf1 = PostSharedWalletResponseBody500OneOf1 {
  -- | message: May occur when there is a missing reward account but wallet participates in staking.
  postSharedWalletResponseBody500OneOf1Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody500OneOf1
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody500OneOf1Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "missing_reward_account"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= postSharedWalletResponseBody500OneOf1Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "missing_reward_account"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody500OneOf1
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSharedWalletResponseBody500OneOf1" (\obj -> GHC.Base.pure PostSharedWalletResponseBody500OneOf1 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'PostSharedWalletResponseBody500OneOf1' with all required fields.
mkPostSharedWalletResponseBody500OneOf1 :: Data.Text.Internal.Text -- ^ 'postSharedWalletResponseBody500OneOf1Message'
  -> PostSharedWalletResponseBody500OneOf1
mkPostSharedWalletResponseBody500OneOf1 postSharedWalletResponseBody500OneOf1Message = PostSharedWalletResponseBody500OneOf1{postSharedWalletResponseBody500OneOf1Message = postSharedWalletResponseBody500OneOf1Message}
-- | Defines the oneOf schema located at @paths.\/shared-wallets.POST.responses.500.content.application\/json.schema.oneOf@ in the specification.
-- 
-- 
data PostSharedWalletResponseBody500Variants =
   PostSharedWalletResponseBody500Variant1 PostSharedWalletResponseBody500OneOf1
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSharedWalletResponseBody500Variants
    where toJSON (PostSharedWalletResponseBody500Variant1 a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON PostSharedWalletResponseBody500Variants
    where parseJSON val = case (PostSharedWalletResponseBody500Variant1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched" of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | > POST /shared-wallets
-- 
-- The same as 'postSharedWallet' but accepts an explicit configuration.
postSharedWalletWithConfiguration :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> PostSharedWalletRequestBodyVariants -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response PostSharedWalletResponse) -- ^ Monadic computation which returns the result of the operation
postSharedWalletWithConfiguration config
                                  body = GHC.Base.fmap (\response_8 -> GHC.Base.fmap (Data.Either.either PostSharedWalletResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 201) (Network.HTTP.Client.Types.responseStatus response) -> PostSharedWalletResponse201 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                    PostSharedWalletResponseBody201Variants)
                                                                                                                                                                                    | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> PostSharedWalletResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                      PostSharedWalletResponseBody400)
                                                                                                                                                                                    | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> PostSharedWalletResponse403 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                      PostSharedWalletResponseBody403Variants)
                                                                                                                                                                                    | (\status_12 -> Network.HTTP.Types.Status.statusCode status_12 GHC.Classes.== 406) (Network.HTTP.Client.Types.responseStatus response) -> PostSharedWalletResponse406 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                      PostSharedWalletResponseBody406)
                                                                                                                                                                                    | (\status_13 -> Network.HTTP.Types.Status.statusCode status_13 GHC.Classes.== 409) (Network.HTTP.Client.Types.responseStatus response) -> PostSharedWalletResponse409 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                      PostSharedWalletResponseBody409)
                                                                                                                                                                                    | (\status_14 -> Network.HTTP.Types.Status.statusCode status_14 GHC.Classes.== 415) (Network.HTTP.Client.Types.responseStatus response) -> PostSharedWalletResponse415 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                      PostSharedWalletResponseBody415)
                                                                                                                                                                                    | (\status_15 -> Network.HTTP.Types.Status.statusCode status_15 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> PostSharedWalletResponse500 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                      PostSharedWalletResponseBody500Variants)
                                                                                                                                                                                    | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_8) response_8) (Wallet.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") "/shared-wallets" GHC.Base.mempty (GHC.Maybe.Just body) Wallet.Common.RequestBodyEncodingJSON)
-- | > POST /shared-wallets
-- 
-- The same as 'postSharedWallet' but returns the raw 'Data.ByteString.ByteString'.
postSharedWalletRaw :: forall m . Wallet.Common.MonadHTTP m => PostSharedWalletRequestBodyVariants -- ^ The request body to send
  -> Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
postSharedWalletRaw body = GHC.Base.id (Wallet.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") "/shared-wallets" GHC.Base.mempty (GHC.Maybe.Just body) Wallet.Common.RequestBodyEncodingJSON)
-- | > POST /shared-wallets
-- 
-- The same as 'postSharedWallet' but accepts an explicit configuration and returns the raw 'Data.ByteString.ByteString'.
postSharedWalletWithConfigurationRaw :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> PostSharedWalletRequestBodyVariants -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
postSharedWalletWithConfigurationRaw config
                                     body = GHC.Base.id (Wallet.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") "/shared-wallets" GHC.Base.mempty (GHC.Maybe.Just body) Wallet.Common.RequestBodyEncodingJSON)
