-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation submitTransaction
module Wallet.Operations.SubmitTransaction where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Wallet.Common
import Wallet.Types

-- | > POST /wallets/{walletId}/transactions-submit
-- 
-- \<p align=\"right\">status: \<strong>stable\<\/strong>\<\/p>
-- Submit a transaction that was already created and signed.
-- Fails for foreign transactions that is transactions which lack
-- the wallet\'s inputs and withdrawals.
submitTransaction :: forall m . Wallet.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ walletId | Constraints: Maximum length of 40, Minimum length of 40
  -> SubmitTransactionRequestBody -- ^ The request body to send
  -> Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response SubmitTransactionResponse) -- ^ Monadic computation which returns the result of the operation
submitTransaction walletId
                  body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either SubmitTransactionResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 202) (Network.HTTP.Client.Types.responseStatus response) -> SubmitTransactionResponse202 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                      SubmitTransactionResponseBody202)
                                                                                                                                                                     | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> SubmitTransactionResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                      SubmitTransactionResponseBody400)
                                                                                                                                                                     | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 406) (Network.HTTP.Client.Types.responseStatus response) -> SubmitTransactionResponse406 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                      SubmitTransactionResponseBody406)
                                                                                                                                                                     | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 415) (Network.HTTP.Client.Types.responseStatus response) -> SubmitTransactionResponse415 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                      SubmitTransactionResponseBody415)
                                                                                                                                                                     | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 425) (Network.HTTP.Client.Types.responseStatus response) -> SubmitTransactionResponse425 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                      SubmitTransactionResponseBody425)
                                                                                                                                                                     | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Wallet.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") ("/wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel walletId)) GHC.Base.<> "/transactions-submit")) GHC.Base.mempty (GHC.Maybe.Just body) Wallet.Common.RequestBodyEncodingJSON)
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/transactions-submit.POST.requestBody.content.application\/json.schema@ in the specification.
-- 
-- The result of signing a transaction (serialized and encoded).
data SubmitTransactionRequestBody = SubmitTransactionRequestBody {
  -- | transaction: The CBOR-encoded transaction, represented in either hex or base64 encoding.
  -- This always includes the transaction body and the witness set, even if the
  -- latter is empty.
  submitTransactionRequestBodyTransaction :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON SubmitTransactionRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["transaction" Data.Aeson.Types.ToJSON..= submitTransactionRequestBodyTransaction obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["transaction" Data.Aeson.Types.ToJSON..= submitTransactionRequestBodyTransaction obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON SubmitTransactionRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SubmitTransactionRequestBody" (\obj -> GHC.Base.pure SubmitTransactionRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "transaction"))
-- | Create a new 'SubmitTransactionRequestBody' with all required fields.
mkSubmitTransactionRequestBody :: Data.Text.Internal.Text -- ^ 'submitTransactionRequestBodyTransaction'
  -> SubmitTransactionRequestBody
mkSubmitTransactionRequestBody submitTransactionRequestBodyTransaction = SubmitTransactionRequestBody{submitTransactionRequestBodyTransaction = submitTransactionRequestBodyTransaction}
-- | Represents a response of the operation 'submitTransaction'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'SubmitTransactionResponseError' is used.
data SubmitTransactionResponse =
   SubmitTransactionResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | SubmitTransactionResponse202 SubmitTransactionResponseBody202 -- ^ Accepted
  | SubmitTransactionResponse400 SubmitTransactionResponseBody400 -- ^ Bad Request
  | SubmitTransactionResponse406 SubmitTransactionResponseBody406 -- ^ Not Acceptable
  | SubmitTransactionResponse415 SubmitTransactionResponseBody415 -- ^ Unsupported Media Type
  | SubmitTransactionResponse425 SubmitTransactionResponseBody425 -- ^ Mempool is Full
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/transactions-submit.POST.responses.202.content.application\/json.schema@ in the specification.
-- 
-- 
data SubmitTransactionResponseBody202 = SubmitTransactionResponseBody202 {
  -- | id: A unique identifier for this transaction
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 64
  -- * Minimum length of 64
  submitTransactionResponseBody202Id :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON SubmitTransactionResponseBody202
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["id" Data.Aeson.Types.ToJSON..= submitTransactionResponseBody202Id obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["id" Data.Aeson.Types.ToJSON..= submitTransactionResponseBody202Id obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON SubmitTransactionResponseBody202
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SubmitTransactionResponseBody202" (\obj -> GHC.Base.pure SubmitTransactionResponseBody202 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id"))
-- | Create a new 'SubmitTransactionResponseBody202' with all required fields.
mkSubmitTransactionResponseBody202 :: Data.Text.Internal.Text -- ^ 'submitTransactionResponseBody202Id'
  -> SubmitTransactionResponseBody202
mkSubmitTransactionResponseBody202 submitTransactionResponseBody202Id = SubmitTransactionResponseBody202{submitTransactionResponseBody202Id = submitTransactionResponseBody202Id}
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/transactions-submit.POST.responses.400.content.application\/json.schema@ in the specification.
-- 
-- 
data SubmitTransactionResponseBody400 = SubmitTransactionResponseBody400 {
  -- | message: May occur when a request is not well-formed; that is, it fails to parse
  -- successfully. This could be the case when some required parameters
  -- are missing or, when malformed values are provided.
  submitTransactionResponseBody400Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON SubmitTransactionResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= submitTransactionResponseBody400Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "bad_request"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= submitTransactionResponseBody400Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "bad_request"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON SubmitTransactionResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SubmitTransactionResponseBody400" (\obj -> GHC.Base.pure SubmitTransactionResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'SubmitTransactionResponseBody400' with all required fields.
mkSubmitTransactionResponseBody400 :: Data.Text.Internal.Text -- ^ 'submitTransactionResponseBody400Message'
  -> SubmitTransactionResponseBody400
mkSubmitTransactionResponseBody400 submitTransactionResponseBody400Message = SubmitTransactionResponseBody400{submitTransactionResponseBody400Message = submitTransactionResponseBody400Message}
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/transactions-submit.POST.responses.406.content.application\/json.schema@ in the specification.
-- 
-- 
data SubmitTransactionResponseBody406 = SubmitTransactionResponseBody406 {
  -- | message: May occur when providing an invalid \'Accept\' header.
  submitTransactionResponseBody406Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON SubmitTransactionResponseBody406
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= submitTransactionResponseBody406Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "not_acceptable"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= submitTransactionResponseBody406Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "not_acceptable"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON SubmitTransactionResponseBody406
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SubmitTransactionResponseBody406" (\obj -> GHC.Base.pure SubmitTransactionResponseBody406 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'SubmitTransactionResponseBody406' with all required fields.
mkSubmitTransactionResponseBody406 :: Data.Text.Internal.Text -- ^ 'submitTransactionResponseBody406Message'
  -> SubmitTransactionResponseBody406
mkSubmitTransactionResponseBody406 submitTransactionResponseBody406Message = SubmitTransactionResponseBody406{submitTransactionResponseBody406Message = submitTransactionResponseBody406Message}
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/transactions-submit.POST.responses.415.content.application\/json.schema@ in the specification.
-- 
-- 
data SubmitTransactionResponseBody415 = SubmitTransactionResponseBody415 {
  -- | message: May occur when providing an invalid \'Content-Type\' header.
  submitTransactionResponseBody415Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON SubmitTransactionResponseBody415
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= submitTransactionResponseBody415Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "unsupported_media_type"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= submitTransactionResponseBody415Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "unsupported_media_type"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON SubmitTransactionResponseBody415
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SubmitTransactionResponseBody415" (\obj -> GHC.Base.pure SubmitTransactionResponseBody415 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'SubmitTransactionResponseBody415' with all required fields.
mkSubmitTransactionResponseBody415 :: Data.Text.Internal.Text -- ^ 'submitTransactionResponseBody415Message'
  -> SubmitTransactionResponseBody415
mkSubmitTransactionResponseBody415 submitTransactionResponseBody415Message = SubmitTransactionResponseBody415{submitTransactionResponseBody415Message = submitTransactionResponseBody415Message}
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/transactions-submit.POST.responses.425.content.application\/json.schema@ in the specification.
-- 
-- 
data SubmitTransactionResponseBody425 = SubmitTransactionResponseBody425 {
  -- | message: May occur when submitting a serialized transaction to a node with full mempool.
  submitTransactionResponseBody425Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON SubmitTransactionResponseBody425
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= submitTransactionResponseBody425Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "mempool_is_full"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= submitTransactionResponseBody425Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "mempool_is_full"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON SubmitTransactionResponseBody425
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SubmitTransactionResponseBody425" (\obj -> GHC.Base.pure SubmitTransactionResponseBody425 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'SubmitTransactionResponseBody425' with all required fields.
mkSubmitTransactionResponseBody425 :: Data.Text.Internal.Text -- ^ 'submitTransactionResponseBody425Message'
  -> SubmitTransactionResponseBody425
mkSubmitTransactionResponseBody425 submitTransactionResponseBody425Message = SubmitTransactionResponseBody425{submitTransactionResponseBody425Message = submitTransactionResponseBody425Message}
-- | > POST /wallets/{walletId}/transactions-submit
-- 
-- The same as 'submitTransaction' but accepts an explicit configuration.
submitTransactionWithConfiguration :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ walletId | Constraints: Maximum length of 40, Minimum length of 40
  -> SubmitTransactionRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response SubmitTransactionResponse) -- ^ Monadic computation which returns the result of the operation
submitTransactionWithConfiguration config
                                   walletId
                                   body = GHC.Base.fmap (\response_6 -> GHC.Base.fmap (Data.Either.either SubmitTransactionResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 202) (Network.HTTP.Client.Types.responseStatus response) -> SubmitTransactionResponse202 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                       SubmitTransactionResponseBody202)
                                                                                                                                                                                      | (\status_8 -> Network.HTTP.Types.Status.statusCode status_8 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> SubmitTransactionResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                       SubmitTransactionResponseBody400)
                                                                                                                                                                                      | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 406) (Network.HTTP.Client.Types.responseStatus response) -> SubmitTransactionResponse406 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                       SubmitTransactionResponseBody406)
                                                                                                                                                                                      | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 415) (Network.HTTP.Client.Types.responseStatus response) -> SubmitTransactionResponse415 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                         SubmitTransactionResponseBody415)
                                                                                                                                                                                      | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 425) (Network.HTTP.Client.Types.responseStatus response) -> SubmitTransactionResponse425 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                         SubmitTransactionResponseBody425)
                                                                                                                                                                                      | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_6) response_6) (Wallet.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") ("/wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel walletId)) GHC.Base.<> "/transactions-submit")) GHC.Base.mempty (GHC.Maybe.Just body) Wallet.Common.RequestBodyEncodingJSON)
-- | > POST /wallets/{walletId}/transactions-submit
-- 
-- The same as 'submitTransaction' but returns the raw 'Data.ByteString.ByteString'.
submitTransactionRaw :: forall m . Wallet.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ walletId | Constraints: Maximum length of 40, Minimum length of 40
  -> SubmitTransactionRequestBody -- ^ The request body to send
  -> Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
submitTransactionRaw walletId
                     body = GHC.Base.id (Wallet.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") ("/wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel walletId)) GHC.Base.<> "/transactions-submit")) GHC.Base.mempty (GHC.Maybe.Just body) Wallet.Common.RequestBodyEncodingJSON)
-- | > POST /wallets/{walletId}/transactions-submit
-- 
-- The same as 'submitTransaction' but accepts an explicit configuration and returns the raw 'Data.ByteString.ByteString'.
submitTransactionWithConfigurationRaw :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ walletId | Constraints: Maximum length of 40, Minimum length of 40
  -> SubmitTransactionRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
submitTransactionWithConfigurationRaw config
                                      walletId
                                      body = GHC.Base.id (Wallet.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") ("/wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel walletId)) GHC.Base.<> "/transactions-submit")) GHC.Base.mempty (GHC.Maybe.Just body) Wallet.Common.RequestBodyEncodingJSON)
