-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getWalletKey
module Wallet.Operations.GetWalletKey where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Wallet.Common
import Wallet.Types

-- | > GET /wallets/{walletId}/keys/{role}/{index}
-- 
-- \<p align=\"right\">status: \<strong>stable\<\/strong>\<\/p>
-- Return a public key for a given role and derivation index.
-- 
-- To get a hash of the public key, instead of the public key,
-- use query parameter \`hash=true\`.
-- 
-- \<b>Note:\<\/b> Only \`Soft\` indexes are supported by this endpoint.
getWalletKey :: forall m . Wallet.Common.MonadHTTP m => GetWalletKeyParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response GetWalletKeyResponse) -- ^ Monadic computation which returns the result of the operation
getWalletKey parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetWalletKeyResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetWalletKeyResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                             Data.Text.Internal.Text)
                                                                                                                                                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetWalletKeyResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                             GetWalletKeyResponseBody400)
                                                                                                                                                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetWalletKeyResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                             GetWalletKeyResponseBody404)
                                                                                                                                                                 | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 406) (Network.HTTP.Client.Types.responseStatus response) -> GetWalletKeyResponse406 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                             GetWalletKeyResponseBody406)
                                                                                                                                                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Wallet.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") ("/wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (getWalletKeyParametersPathWalletId parameters))) GHC.Base.<> ("/keys/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (getWalletKeyParametersPathRole parameters))) GHC.Base.<> ("/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (getWalletKeyParametersPathIndex parameters))) GHC.Base.<> "")))))) GHC.Base.mempty)
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/keys\/{role}\/{index}.GET.parameters@ in the specification.
-- 
-- 
data GetWalletKeyParameters = GetWalletKeyParameters {
  -- | pathIndex: Represents the parameter named \'index\'
  -- 
  -- An individual segment within a derivation path.
  -- 
  -- The \`H\` suffix indicates a _Hardened_ child private key, which
  -- means that children of this key cannot be derived from the public
  -- key. Indices without a \`H\` suffix are called _Soft_.
  getWalletKeyParametersPathIndex :: Data.Text.Internal.Text
  -- | pathRole: Represents the parameter named \'role\'
  , getWalletKeyParametersPathRole :: GetWalletKeyParametersPathRole
  -- | pathWalletId: Represents the parameter named \'walletId\'
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 40
  -- * Minimum length of 40
  , getWalletKeyParametersPathWalletId :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetWalletKeyParameters
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["pathIndex" Data.Aeson.Types.ToJSON..= getWalletKeyParametersPathIndex obj] : ["pathRole" Data.Aeson.Types.ToJSON..= getWalletKeyParametersPathRole obj] : ["pathWalletId" Data.Aeson.Types.ToJSON..= getWalletKeyParametersPathWalletId obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["pathIndex" Data.Aeson.Types.ToJSON..= getWalletKeyParametersPathIndex obj] : ["pathRole" Data.Aeson.Types.ToJSON..= getWalletKeyParametersPathRole obj] : ["pathWalletId" Data.Aeson.Types.ToJSON..= getWalletKeyParametersPathWalletId obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetWalletKeyParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetWalletKeyParameters" (\obj -> ((GHC.Base.pure GetWalletKeyParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathIndex")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathRole")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathWalletId"))
-- | Create a new 'GetWalletKeyParameters' with all required fields.
mkGetWalletKeyParameters :: Data.Text.Internal.Text -- ^ 'getWalletKeyParametersPathIndex'
  -> GetWalletKeyParametersPathRole -- ^ 'getWalletKeyParametersPathRole'
  -> Data.Text.Internal.Text -- ^ 'getWalletKeyParametersPathWalletId'
  -> GetWalletKeyParameters
mkGetWalletKeyParameters getWalletKeyParametersPathIndex getWalletKeyParametersPathRole getWalletKeyParametersPathWalletId = GetWalletKeyParameters{getWalletKeyParametersPathIndex = getWalletKeyParametersPathIndex,
                                                                                                                                                    getWalletKeyParametersPathRole = getWalletKeyParametersPathRole,
                                                                                                                                                    getWalletKeyParametersPathWalletId = getWalletKeyParametersPathWalletId}
-- | Defines the enum schema located at @paths.\/wallets\/{walletId}\/keys\/{role}\/{index}.GET.parameters.properties.pathRole@ in the specification.
-- 
-- Represents the parameter named \'role\'
data GetWalletKeyParametersPathRole =
   GetWalletKeyParametersPathRoleOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetWalletKeyParametersPathRoleTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetWalletKeyParametersPathRoleEnumUtxo_external -- ^ Represents the JSON value @"utxo_external"@
  | GetWalletKeyParametersPathRoleEnumUtxo_internal -- ^ Represents the JSON value @"utxo_internal"@
  | GetWalletKeyParametersPathRoleEnumMutable_account -- ^ Represents the JSON value @"mutable_account"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetWalletKeyParametersPathRole
    where toJSON (GetWalletKeyParametersPathRoleOther val) = val
          toJSON (GetWalletKeyParametersPathRoleTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetWalletKeyParametersPathRoleEnumUtxo_external) = "utxo_external"
          toJSON (GetWalletKeyParametersPathRoleEnumUtxo_internal) = "utxo_internal"
          toJSON (GetWalletKeyParametersPathRoleEnumMutable_account) = "mutable_account"
instance Data.Aeson.Types.FromJSON.FromJSON GetWalletKeyParametersPathRole
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "utxo_external" -> GetWalletKeyParametersPathRoleEnumUtxo_external
                                            | val GHC.Classes.== "utxo_internal" -> GetWalletKeyParametersPathRoleEnumUtxo_internal
                                            | val GHC.Classes.== "mutable_account" -> GetWalletKeyParametersPathRoleEnumMutable_account
                                            | GHC.Base.otherwise -> GetWalletKeyParametersPathRoleOther val)
-- | Represents a response of the operation 'getWalletKey'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetWalletKeyResponseError' is used.
data GetWalletKeyResponse =
   GetWalletKeyResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetWalletKeyResponse200 Data.Text.Internal.Text -- ^ Ok
  | GetWalletKeyResponse400 GetWalletKeyResponseBody400 -- ^ Bad Request
  | GetWalletKeyResponse404 GetWalletKeyResponseBody404 -- ^ Not Found
  | GetWalletKeyResponse406 GetWalletKeyResponseBody406 -- ^ Not Acceptable
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/keys\/{role}\/{index}.GET.responses.400.content.application\/json.schema@ in the specification.
-- 
-- 
data GetWalletKeyResponseBody400 = GetWalletKeyResponseBody400 {
  -- | message: May occur when a request is not well-formed; that is, it fails to parse
  -- successfully. This could be the case when some required parameters
  -- are missing or, when malformed values are provided.
  getWalletKeyResponseBody400Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetWalletKeyResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= getWalletKeyResponseBody400Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "bad_request"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= getWalletKeyResponseBody400Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "bad_request"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetWalletKeyResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetWalletKeyResponseBody400" (\obj -> GHC.Base.pure GetWalletKeyResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'GetWalletKeyResponseBody400' with all required fields.
mkGetWalletKeyResponseBody400 :: Data.Text.Internal.Text -- ^ 'getWalletKeyResponseBody400Message'
  -> GetWalletKeyResponseBody400
mkGetWalletKeyResponseBody400 getWalletKeyResponseBody400Message = GetWalletKeyResponseBody400{getWalletKeyResponseBody400Message = getWalletKeyResponseBody400Message}
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/keys\/{role}\/{index}.GET.responses.404.content.application\/json.schema@ in the specification.
-- 
-- 
data GetWalletKeyResponseBody404 = GetWalletKeyResponseBody404 {
  -- | code: A specific error code for this error, more precise than HTTP ones.
  getWalletKeyResponseBody404Code :: Data.Text.Internal.Text
  -- | message: A descriptive error message.
  , getWalletKeyResponseBody404Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetWalletKeyResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["code" Data.Aeson.Types.ToJSON..= getWalletKeyResponseBody404Code obj] : ["message" Data.Aeson.Types.ToJSON..= getWalletKeyResponseBody404Message obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["code" Data.Aeson.Types.ToJSON..= getWalletKeyResponseBody404Code obj] : ["message" Data.Aeson.Types.ToJSON..= getWalletKeyResponseBody404Message obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetWalletKeyResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetWalletKeyResponseBody404" (\obj -> (GHC.Base.pure GetWalletKeyResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'GetWalletKeyResponseBody404' with all required fields.
mkGetWalletKeyResponseBody404 :: Data.Text.Internal.Text -- ^ 'getWalletKeyResponseBody404Code'
  -> Data.Text.Internal.Text -- ^ 'getWalletKeyResponseBody404Message'
  -> GetWalletKeyResponseBody404
mkGetWalletKeyResponseBody404 getWalletKeyResponseBody404Code getWalletKeyResponseBody404Message = GetWalletKeyResponseBody404{getWalletKeyResponseBody404Code = getWalletKeyResponseBody404Code,
                                                                                                                               getWalletKeyResponseBody404Message = getWalletKeyResponseBody404Message}
-- | Defines the object schema located at @paths.\/wallets\/{walletId}\/keys\/{role}\/{index}.GET.responses.406.content.application\/json.schema@ in the specification.
-- 
-- 
data GetWalletKeyResponseBody406 = GetWalletKeyResponseBody406 {
  -- | message: May occur when providing an invalid \'Accept\' header.
  getWalletKeyResponseBody406Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetWalletKeyResponseBody406
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= getWalletKeyResponseBody406Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "not_acceptable"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= getWalletKeyResponseBody406Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "not_acceptable"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetWalletKeyResponseBody406
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetWalletKeyResponseBody406" (\obj -> GHC.Base.pure GetWalletKeyResponseBody406 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'GetWalletKeyResponseBody406' with all required fields.
mkGetWalletKeyResponseBody406 :: Data.Text.Internal.Text -- ^ 'getWalletKeyResponseBody406Message'
  -> GetWalletKeyResponseBody406
mkGetWalletKeyResponseBody406 getWalletKeyResponseBody406Message = GetWalletKeyResponseBody406{getWalletKeyResponseBody406Message = getWalletKeyResponseBody406Message}
-- | > GET /wallets/{walletId}/keys/{role}/{index}
-- 
-- The same as 'getWalletKey' but accepts an explicit configuration.
getWalletKeyWithConfiguration :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> GetWalletKeyParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response GetWalletKeyResponse) -- ^ Monadic computation which returns the result of the operation
getWalletKeyWithConfiguration config
                              parameters = GHC.Base.fmap (\response_5 -> GHC.Base.fmap (Data.Either.either GetWalletKeyResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetWalletKeyResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                              Data.Text.Internal.Text)
                                                                                                                                                                                  | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetWalletKeyResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                              GetWalletKeyResponseBody400)
                                                                                                                                                                                  | (\status_8 -> Network.HTTP.Types.Status.statusCode status_8 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetWalletKeyResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                              GetWalletKeyResponseBody404)
                                                                                                                                                                                  | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 406) (Network.HTTP.Client.Types.responseStatus response) -> GetWalletKeyResponse406 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                              GetWalletKeyResponseBody406)
                                                                                                                                                                                  | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_5) response_5) (Wallet.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") ("/wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (getWalletKeyParametersPathWalletId parameters))) GHC.Base.<> ("/keys/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (getWalletKeyParametersPathRole parameters))) GHC.Base.<> ("/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (getWalletKeyParametersPathIndex parameters))) GHC.Base.<> "")))))) GHC.Base.mempty)
-- | > GET /wallets/{walletId}/keys/{role}/{index}
-- 
-- The same as 'getWalletKey' but returns the raw 'Data.ByteString.ByteString'.
getWalletKeyRaw :: forall m . Wallet.Common.MonadHTTP m => GetWalletKeyParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
getWalletKeyRaw parameters = GHC.Base.id (Wallet.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") ("/wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (getWalletKeyParametersPathWalletId parameters))) GHC.Base.<> ("/keys/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (getWalletKeyParametersPathRole parameters))) GHC.Base.<> ("/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (getWalletKeyParametersPathIndex parameters))) GHC.Base.<> "")))))) GHC.Base.mempty)
-- | > GET /wallets/{walletId}/keys/{role}/{index}
-- 
-- The same as 'getWalletKey' but accepts an explicit configuration and returns the raw 'Data.ByteString.ByteString'.
getWalletKeyWithConfigurationRaw :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> GetWalletKeyParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
getWalletKeyWithConfigurationRaw config
                                 parameters = GHC.Base.id (Wallet.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") ("/wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (getWalletKeyParametersPathWalletId parameters))) GHC.Base.<> ("/keys/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (getWalletKeyParametersPathRole parameters))) GHC.Base.<> ("/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (getWalletKeyParametersPathIndex parameters))) GHC.Base.<> "")))))) GHC.Base.mempty)
