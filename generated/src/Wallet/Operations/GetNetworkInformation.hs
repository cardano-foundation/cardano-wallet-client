-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getNetworkInformation
module Wallet.Operations.GetNetworkInformation where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Wallet.Common
import Wallet.Types

-- | > GET /network/information
-- 
-- \<p align=\"right\">status: \<strong>stable\<\/strong>\<\/p>
getNetworkInformation :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response GetNetworkInformationResponse) -- ^ Monadic computation which returns the result of the operation
getNetworkInformation = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetNetworkInformationResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetNetworkInformationResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                             GetNetworkInformationResponseBody200)
                                                                                                                                                                        | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 406) (Network.HTTP.Client.Types.responseStatus response) -> GetNetworkInformationResponse406 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                             GetNetworkInformationResponseBody406)
                                                                                                                                                                        | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Wallet.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") "/network/information" GHC.Base.mempty)
-- | Represents a response of the operation 'getNetworkInformation'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetNetworkInformationResponseError' is used.
data GetNetworkInformationResponse =
   GetNetworkInformationResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetNetworkInformationResponse200 GetNetworkInformationResponseBody200 -- ^ Ok
  | GetNetworkInformationResponse406 GetNetworkInformationResponseBody406 -- ^ Not Acceptable
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/network\/information.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data GetNetworkInformationResponseBody200 = GetNetworkInformationResponseBody200 {
  -- | network_info
  getNetworkInformationResponseBody200Network_info :: GetNetworkInformationResponseBody200Network_info
  -- | network_tip: The time slot corresponding the network tip.
  , getNetworkInformationResponseBody200Network_tip :: (GHC.Maybe.Maybe GetNetworkInformationResponseBody200Network_tip)
  -- | next_epoch
  , getNetworkInformationResponseBody200Next_epoch :: (GHC.Maybe.Maybe GetNetworkInformationResponseBody200Next_epoch)
  -- | node_era
  , getNetworkInformationResponseBody200Node_era :: GetNetworkInformationResponseBody200Node_era
  -- | node_tip: Underlying node\'s tip
  , getNetworkInformationResponseBody200Node_tip :: GetNetworkInformationResponseBody200Node_tip
  -- | sync_progress: Estimated synchronization progress of the node with the underlying network. Note that this may
  -- change quite arbitrarily as the node may switch to shorter or longer chain forks.
  , getNetworkInformationResponseBody200Sync_progress :: GetNetworkInformationResponseBody200Sync_progress
  -- | wallet_mode
  , getNetworkInformationResponseBody200Wallet_mode :: GetNetworkInformationResponseBody200Wallet_mode
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetNetworkInformationResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["network_info" Data.Aeson.Types.ToJSON..= getNetworkInformationResponseBody200Network_info obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("network_tip" Data.Aeson.Types.ToJSON..=)) (getNetworkInformationResponseBody200Network_tip obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("next_epoch" Data.Aeson.Types.ToJSON..=)) (getNetworkInformationResponseBody200Next_epoch obj) : ["node_era" Data.Aeson.Types.ToJSON..= getNetworkInformationResponseBody200Node_era obj] : ["node_tip" Data.Aeson.Types.ToJSON..= getNetworkInformationResponseBody200Node_tip obj] : ["sync_progress" Data.Aeson.Types.ToJSON..= getNetworkInformationResponseBody200Sync_progress obj] : ["wallet_mode" Data.Aeson.Types.ToJSON..= getNetworkInformationResponseBody200Wallet_mode obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["network_info" Data.Aeson.Types.ToJSON..= getNetworkInformationResponseBody200Network_info obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("network_tip" Data.Aeson.Types.ToJSON..=)) (getNetworkInformationResponseBody200Network_tip obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("next_epoch" Data.Aeson.Types.ToJSON..=)) (getNetworkInformationResponseBody200Next_epoch obj) : ["node_era" Data.Aeson.Types.ToJSON..= getNetworkInformationResponseBody200Node_era obj] : ["node_tip" Data.Aeson.Types.ToJSON..= getNetworkInformationResponseBody200Node_tip obj] : ["sync_progress" Data.Aeson.Types.ToJSON..= getNetworkInformationResponseBody200Sync_progress obj] : ["wallet_mode" Data.Aeson.Types.ToJSON..= getNetworkInformationResponseBody200Wallet_mode obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetNetworkInformationResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetNetworkInformationResponseBody200" (\obj -> ((((((GHC.Base.pure GetNetworkInformationResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "network_info")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "network_tip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "next_epoch")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "node_era")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "node_tip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "sync_progress")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "wallet_mode"))
-- | Create a new 'GetNetworkInformationResponseBody200' with all required fields.
mkGetNetworkInformationResponseBody200 :: GetNetworkInformationResponseBody200Network_info -- ^ 'getNetworkInformationResponseBody200Network_info'
  -> GetNetworkInformationResponseBody200Node_era -- ^ 'getNetworkInformationResponseBody200Node_era'
  -> GetNetworkInformationResponseBody200Node_tip -- ^ 'getNetworkInformationResponseBody200Node_tip'
  -> GetNetworkInformationResponseBody200Sync_progress -- ^ 'getNetworkInformationResponseBody200Sync_progress'
  -> GetNetworkInformationResponseBody200Wallet_mode -- ^ 'getNetworkInformationResponseBody200Wallet_mode'
  -> GetNetworkInformationResponseBody200
mkGetNetworkInformationResponseBody200 getNetworkInformationResponseBody200Network_info getNetworkInformationResponseBody200Node_era getNetworkInformationResponseBody200Node_tip getNetworkInformationResponseBody200Sync_progress getNetworkInformationResponseBody200Wallet_mode = GetNetworkInformationResponseBody200{getNetworkInformationResponseBody200Network_info = getNetworkInformationResponseBody200Network_info,
                                                                                                                                                                                                                                                                                                                           getNetworkInformationResponseBody200Network_tip = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                                                                           getNetworkInformationResponseBody200Next_epoch = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                                                                           getNetworkInformationResponseBody200Node_era = getNetworkInformationResponseBody200Node_era,
                                                                                                                                                                                                                                                                                                                           getNetworkInformationResponseBody200Node_tip = getNetworkInformationResponseBody200Node_tip,
                                                                                                                                                                                                                                                                                                                           getNetworkInformationResponseBody200Sync_progress = getNetworkInformationResponseBody200Sync_progress,
                                                                                                                                                                                                                                                                                                                           getNetworkInformationResponseBody200Wallet_mode = getNetworkInformationResponseBody200Wallet_mode}
-- | Defines the object schema located at @paths.\/network\/information.GET.responses.200.content.application\/json.schema.properties.network_info@ in the specification.
-- 
-- 
data GetNetworkInformationResponseBody200Network_info = GetNetworkInformationResponseBody200Network_info {
  -- | network_id: A name just distinguishing mainnet from testnets
  getNetworkInformationResponseBody200Network_infoNetwork_id :: GetNetworkInformationResponseBody200Network_infoNetwork_id
  -- | protocol_magic: The unique magic number defining the network the wallet is working on.
  , getNetworkInformationResponseBody200Network_infoProtocol_magic :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetNetworkInformationResponseBody200Network_info
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["network_id" Data.Aeson.Types.ToJSON..= getNetworkInformationResponseBody200Network_infoNetwork_id obj] : ["protocol_magic" Data.Aeson.Types.ToJSON..= getNetworkInformationResponseBody200Network_infoProtocol_magic obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["network_id" Data.Aeson.Types.ToJSON..= getNetworkInformationResponseBody200Network_infoNetwork_id obj] : ["protocol_magic" Data.Aeson.Types.ToJSON..= getNetworkInformationResponseBody200Network_infoProtocol_magic obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetNetworkInformationResponseBody200Network_info
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetNetworkInformationResponseBody200Network_info" (\obj -> (GHC.Base.pure GetNetworkInformationResponseBody200Network_info GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "network_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "protocol_magic"))
-- | Create a new 'GetNetworkInformationResponseBody200Network_info' with all required fields.
mkGetNetworkInformationResponseBody200Network_info :: GetNetworkInformationResponseBody200Network_infoNetwork_id -- ^ 'getNetworkInformationResponseBody200Network_infoNetwork_id'
  -> GHC.Types.Int -- ^ 'getNetworkInformationResponseBody200Network_infoProtocol_magic'
  -> GetNetworkInformationResponseBody200Network_info
mkGetNetworkInformationResponseBody200Network_info getNetworkInformationResponseBody200Network_infoNetwork_id getNetworkInformationResponseBody200Network_infoProtocol_magic = GetNetworkInformationResponseBody200Network_info{getNetworkInformationResponseBody200Network_infoNetwork_id = getNetworkInformationResponseBody200Network_infoNetwork_id,
                                                                                                                                                                                                                                getNetworkInformationResponseBody200Network_infoProtocol_magic = getNetworkInformationResponseBody200Network_infoProtocol_magic}
-- | Defines the enum schema located at @paths.\/network\/information.GET.responses.200.content.application\/json.schema.properties.network_info.properties.network_id@ in the specification.
-- 
-- A name just distinguishing mainnet from testnets
data GetNetworkInformationResponseBody200Network_infoNetwork_id =
   GetNetworkInformationResponseBody200Network_infoNetwork_idOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetNetworkInformationResponseBody200Network_infoNetwork_idTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetNetworkInformationResponseBody200Network_infoNetwork_idEnumMainnet -- ^ Represents the JSON value @"mainnet"@
  | GetNetworkInformationResponseBody200Network_infoNetwork_idEnumTestnet -- ^ Represents the JSON value @"testnet"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetNetworkInformationResponseBody200Network_infoNetwork_id
    where toJSON (GetNetworkInformationResponseBody200Network_infoNetwork_idOther val) = val
          toJSON (GetNetworkInformationResponseBody200Network_infoNetwork_idTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetNetworkInformationResponseBody200Network_infoNetwork_idEnumMainnet) = "mainnet"
          toJSON (GetNetworkInformationResponseBody200Network_infoNetwork_idEnumTestnet) = "testnet"
instance Data.Aeson.Types.FromJSON.FromJSON GetNetworkInformationResponseBody200Network_infoNetwork_id
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "mainnet" -> GetNetworkInformationResponseBody200Network_infoNetwork_idEnumMainnet
                                            | val GHC.Classes.== "testnet" -> GetNetworkInformationResponseBody200Network_infoNetwork_idEnumTestnet
                                            | GHC.Base.otherwise -> GetNetworkInformationResponseBody200Network_infoNetwork_idOther val)
-- | Defines the object schema located at @paths.\/network\/information.GET.responses.200.content.application\/json.schema.properties.network_tip@ in the specification.
-- 
-- The time slot corresponding the network tip.
data GetNetworkInformationResponseBody200Network_tip = GetNetworkInformationResponseBody200Network_tip {
  -- | absolute_slot_number: The 0-based slot index starting from genesis of the blockchain.
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  getNetworkInformationResponseBody200Network_tipAbsolute_slot_number :: GHC.Types.Int
  -- | epoch_number: An epoch is a time period which is divided into slots.
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , getNetworkInformationResponseBody200Network_tipEpoch_number :: GHC.Types.Int
  -- | slot_number: The zero-based slot index within an epoch.
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , getNetworkInformationResponseBody200Network_tipSlot_number :: GHC.Types.Int
  -- | time
  , getNetworkInformationResponseBody200Network_tipTime :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetNetworkInformationResponseBody200Network_tip
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["absolute_slot_number" Data.Aeson.Types.ToJSON..= getNetworkInformationResponseBody200Network_tipAbsolute_slot_number obj] : ["epoch_number" Data.Aeson.Types.ToJSON..= getNetworkInformationResponseBody200Network_tipEpoch_number obj] : ["slot_number" Data.Aeson.Types.ToJSON..= getNetworkInformationResponseBody200Network_tipSlot_number obj] : ["time" Data.Aeson.Types.ToJSON..= getNetworkInformationResponseBody200Network_tipTime obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["absolute_slot_number" Data.Aeson.Types.ToJSON..= getNetworkInformationResponseBody200Network_tipAbsolute_slot_number obj] : ["epoch_number" Data.Aeson.Types.ToJSON..= getNetworkInformationResponseBody200Network_tipEpoch_number obj] : ["slot_number" Data.Aeson.Types.ToJSON..= getNetworkInformationResponseBody200Network_tipSlot_number obj] : ["time" Data.Aeson.Types.ToJSON..= getNetworkInformationResponseBody200Network_tipTime obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetNetworkInformationResponseBody200Network_tip
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetNetworkInformationResponseBody200Network_tip" (\obj -> (((GHC.Base.pure GetNetworkInformationResponseBody200Network_tip GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "absolute_slot_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "epoch_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "slot_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "time"))
-- | Create a new 'GetNetworkInformationResponseBody200Network_tip' with all required fields.
mkGetNetworkInformationResponseBody200Network_tip :: GHC.Types.Int -- ^ 'getNetworkInformationResponseBody200Network_tipAbsolute_slot_number'
  -> GHC.Types.Int -- ^ 'getNetworkInformationResponseBody200Network_tipEpoch_number'
  -> GHC.Types.Int -- ^ 'getNetworkInformationResponseBody200Network_tipSlot_number'
  -> Data.Text.Internal.Text -- ^ 'getNetworkInformationResponseBody200Network_tipTime'
  -> GetNetworkInformationResponseBody200Network_tip
mkGetNetworkInformationResponseBody200Network_tip getNetworkInformationResponseBody200Network_tipAbsolute_slot_number getNetworkInformationResponseBody200Network_tipEpoch_number getNetworkInformationResponseBody200Network_tipSlot_number getNetworkInformationResponseBody200Network_tipTime = GetNetworkInformationResponseBody200Network_tip{getNetworkInformationResponseBody200Network_tipAbsolute_slot_number = getNetworkInformationResponseBody200Network_tipAbsolute_slot_number,
                                                                                                                                                                                                                                                                                                                                                   getNetworkInformationResponseBody200Network_tipEpoch_number = getNetworkInformationResponseBody200Network_tipEpoch_number,
                                                                                                                                                                                                                                                                                                                                                   getNetworkInformationResponseBody200Network_tipSlot_number = getNetworkInformationResponseBody200Network_tipSlot_number,
                                                                                                                                                                                                                                                                                                                                                   getNetworkInformationResponseBody200Network_tipTime = getNetworkInformationResponseBody200Network_tipTime}
-- | Defines the object schema located at @paths.\/network\/information.GET.responses.200.content.application\/json.schema.properties.next_epoch@ in the specification.
-- 
-- 
data GetNetworkInformationResponseBody200Next_epoch = GetNetworkInformationResponseBody200Next_epoch {
  -- | epoch_number: An epoch is a time period which is divided into slots.
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  getNetworkInformationResponseBody200Next_epochEpoch_number :: GHC.Types.Int
  -- | epoch_start_time
  , getNetworkInformationResponseBody200Next_epochEpoch_start_time :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetNetworkInformationResponseBody200Next_epoch
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["epoch_number" Data.Aeson.Types.ToJSON..= getNetworkInformationResponseBody200Next_epochEpoch_number obj] : ["epoch_start_time" Data.Aeson.Types.ToJSON..= getNetworkInformationResponseBody200Next_epochEpoch_start_time obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["epoch_number" Data.Aeson.Types.ToJSON..= getNetworkInformationResponseBody200Next_epochEpoch_number obj] : ["epoch_start_time" Data.Aeson.Types.ToJSON..= getNetworkInformationResponseBody200Next_epochEpoch_start_time obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetNetworkInformationResponseBody200Next_epoch
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetNetworkInformationResponseBody200Next_epoch" (\obj -> (GHC.Base.pure GetNetworkInformationResponseBody200Next_epoch GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "epoch_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "epoch_start_time"))
-- | Create a new 'GetNetworkInformationResponseBody200Next_epoch' with all required fields.
mkGetNetworkInformationResponseBody200Next_epoch :: GHC.Types.Int -- ^ 'getNetworkInformationResponseBody200Next_epochEpoch_number'
  -> Data.Text.Internal.Text -- ^ 'getNetworkInformationResponseBody200Next_epochEpoch_start_time'
  -> GetNetworkInformationResponseBody200Next_epoch
mkGetNetworkInformationResponseBody200Next_epoch getNetworkInformationResponseBody200Next_epochEpoch_number getNetworkInformationResponseBody200Next_epochEpoch_start_time = GetNetworkInformationResponseBody200Next_epoch{getNetworkInformationResponseBody200Next_epochEpoch_number = getNetworkInformationResponseBody200Next_epochEpoch_number,
                                                                                                                                                                                                                            getNetworkInformationResponseBody200Next_epochEpoch_start_time = getNetworkInformationResponseBody200Next_epochEpoch_start_time}
-- | Defines the enum schema located at @paths.\/network\/information.GET.responses.200.content.application\/json.schema.properties.node_era@ in the specification.
-- 
-- 
data GetNetworkInformationResponseBody200Node_era =
   GetNetworkInformationResponseBody200Node_eraOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetNetworkInformationResponseBody200Node_eraTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetNetworkInformationResponseBody200Node_eraEnumByron -- ^ Represents the JSON value @"byron"@
  | GetNetworkInformationResponseBody200Node_eraEnumShelley -- ^ Represents the JSON value @"shelley"@
  | GetNetworkInformationResponseBody200Node_eraEnumAllegra -- ^ Represents the JSON value @"allegra"@
  | GetNetworkInformationResponseBody200Node_eraEnumMary -- ^ Represents the JSON value @"mary"@
  | GetNetworkInformationResponseBody200Node_eraEnumAlonzo -- ^ Represents the JSON value @"alonzo"@
  | GetNetworkInformationResponseBody200Node_eraEnumBabbage -- ^ Represents the JSON value @"babbage"@
  | GetNetworkInformationResponseBody200Node_eraEnumConway -- ^ Represents the JSON value @"conway"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetNetworkInformationResponseBody200Node_era
    where toJSON (GetNetworkInformationResponseBody200Node_eraOther val) = val
          toJSON (GetNetworkInformationResponseBody200Node_eraTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetNetworkInformationResponseBody200Node_eraEnumByron) = "byron"
          toJSON (GetNetworkInformationResponseBody200Node_eraEnumShelley) = "shelley"
          toJSON (GetNetworkInformationResponseBody200Node_eraEnumAllegra) = "allegra"
          toJSON (GetNetworkInformationResponseBody200Node_eraEnumMary) = "mary"
          toJSON (GetNetworkInformationResponseBody200Node_eraEnumAlonzo) = "alonzo"
          toJSON (GetNetworkInformationResponseBody200Node_eraEnumBabbage) = "babbage"
          toJSON (GetNetworkInformationResponseBody200Node_eraEnumConway) = "conway"
instance Data.Aeson.Types.FromJSON.FromJSON GetNetworkInformationResponseBody200Node_era
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "byron" -> GetNetworkInformationResponseBody200Node_eraEnumByron
                                            | val GHC.Classes.== "shelley" -> GetNetworkInformationResponseBody200Node_eraEnumShelley
                                            | val GHC.Classes.== "allegra" -> GetNetworkInformationResponseBody200Node_eraEnumAllegra
                                            | val GHC.Classes.== "mary" -> GetNetworkInformationResponseBody200Node_eraEnumMary
                                            | val GHC.Classes.== "alonzo" -> GetNetworkInformationResponseBody200Node_eraEnumAlonzo
                                            | val GHC.Classes.== "babbage" -> GetNetworkInformationResponseBody200Node_eraEnumBabbage
                                            | val GHC.Classes.== "conway" -> GetNetworkInformationResponseBody200Node_eraEnumConway
                                            | GHC.Base.otherwise -> GetNetworkInformationResponseBody200Node_eraOther val)
-- | Defines the object schema located at @paths.\/network\/information.GET.responses.200.content.application\/json.schema.properties.node_tip@ in the specification.
-- 
-- Underlying node\'s tip
data GetNetworkInformationResponseBody200Node_tip = GetNetworkInformationResponseBody200Node_tip {
  -- | absolute_slot_number: The 0-based slot index starting from genesis of the blockchain.
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  getNetworkInformationResponseBody200Node_tipAbsolute_slot_number :: GHC.Types.Int
  -- | epoch_number: An epoch is a time period which is divided into slots.
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , getNetworkInformationResponseBody200Node_tipEpoch_number :: GHC.Types.Int
  -- | height
  , getNetworkInformationResponseBody200Node_tipHeight :: GetNetworkInformationResponseBody200Node_tipHeight
  -- | slot_number: The zero-based slot index within an epoch.
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  , getNetworkInformationResponseBody200Node_tipSlot_number :: GHC.Types.Int
  -- | time
  , getNetworkInformationResponseBody200Node_tipTime :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetNetworkInformationResponseBody200Node_tip
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["absolute_slot_number" Data.Aeson.Types.ToJSON..= getNetworkInformationResponseBody200Node_tipAbsolute_slot_number obj] : ["epoch_number" Data.Aeson.Types.ToJSON..= getNetworkInformationResponseBody200Node_tipEpoch_number obj] : ["height" Data.Aeson.Types.ToJSON..= getNetworkInformationResponseBody200Node_tipHeight obj] : ["slot_number" Data.Aeson.Types.ToJSON..= getNetworkInformationResponseBody200Node_tipSlot_number obj] : ["time" Data.Aeson.Types.ToJSON..= getNetworkInformationResponseBody200Node_tipTime obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["absolute_slot_number" Data.Aeson.Types.ToJSON..= getNetworkInformationResponseBody200Node_tipAbsolute_slot_number obj] : ["epoch_number" Data.Aeson.Types.ToJSON..= getNetworkInformationResponseBody200Node_tipEpoch_number obj] : ["height" Data.Aeson.Types.ToJSON..= getNetworkInformationResponseBody200Node_tipHeight obj] : ["slot_number" Data.Aeson.Types.ToJSON..= getNetworkInformationResponseBody200Node_tipSlot_number obj] : ["time" Data.Aeson.Types.ToJSON..= getNetworkInformationResponseBody200Node_tipTime obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetNetworkInformationResponseBody200Node_tip
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetNetworkInformationResponseBody200Node_tip" (\obj -> ((((GHC.Base.pure GetNetworkInformationResponseBody200Node_tip GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "absolute_slot_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "epoch_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "height")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "slot_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "time"))
-- | Create a new 'GetNetworkInformationResponseBody200Node_tip' with all required fields.
mkGetNetworkInformationResponseBody200Node_tip :: GHC.Types.Int -- ^ 'getNetworkInformationResponseBody200Node_tipAbsolute_slot_number'
  -> GHC.Types.Int -- ^ 'getNetworkInformationResponseBody200Node_tipEpoch_number'
  -> GetNetworkInformationResponseBody200Node_tipHeight -- ^ 'getNetworkInformationResponseBody200Node_tipHeight'
  -> GHC.Types.Int -- ^ 'getNetworkInformationResponseBody200Node_tipSlot_number'
  -> Data.Text.Internal.Text -- ^ 'getNetworkInformationResponseBody200Node_tipTime'
  -> GetNetworkInformationResponseBody200Node_tip
mkGetNetworkInformationResponseBody200Node_tip getNetworkInformationResponseBody200Node_tipAbsolute_slot_number getNetworkInformationResponseBody200Node_tipEpoch_number getNetworkInformationResponseBody200Node_tipHeight getNetworkInformationResponseBody200Node_tipSlot_number getNetworkInformationResponseBody200Node_tipTime = GetNetworkInformationResponseBody200Node_tip{getNetworkInformationResponseBody200Node_tipAbsolute_slot_number = getNetworkInformationResponseBody200Node_tipAbsolute_slot_number,
                                                                                                                                                                                                                                                                                                                                                                                    getNetworkInformationResponseBody200Node_tipEpoch_number = getNetworkInformationResponseBody200Node_tipEpoch_number,
                                                                                                                                                                                                                                                                                                                                                                                    getNetworkInformationResponseBody200Node_tipHeight = getNetworkInformationResponseBody200Node_tipHeight,
                                                                                                                                                                                                                                                                                                                                                                                    getNetworkInformationResponseBody200Node_tipSlot_number = getNetworkInformationResponseBody200Node_tipSlot_number,
                                                                                                                                                                                                                                                                                                                                                                                    getNetworkInformationResponseBody200Node_tipTime = getNetworkInformationResponseBody200Node_tipTime}
-- | Defines the object schema located at @paths.\/network\/information.GET.responses.200.content.application\/json.schema.properties.node_tip.properties.height@ in the specification.
-- 
-- 
data GetNetworkInformationResponseBody200Node_tipHeight = GetNetworkInformationResponseBody200Node_tipHeight {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Minimum  of 0.0
  getNetworkInformationResponseBody200Node_tipHeightQuantity :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetNetworkInformationResponseBody200Node_tipHeight
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= getNetworkInformationResponseBody200Node_tipHeightQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "block"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= getNetworkInformationResponseBody200Node_tipHeightQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "block"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetNetworkInformationResponseBody200Node_tipHeight
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetNetworkInformationResponseBody200Node_tipHeight" (\obj -> GHC.Base.pure GetNetworkInformationResponseBody200Node_tipHeight GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'GetNetworkInformationResponseBody200Node_tipHeight' with all required fields.
mkGetNetworkInformationResponseBody200Node_tipHeight :: GHC.Types.Int -- ^ 'getNetworkInformationResponseBody200Node_tipHeightQuantity'
  -> GetNetworkInformationResponseBody200Node_tipHeight
mkGetNetworkInformationResponseBody200Node_tipHeight getNetworkInformationResponseBody200Node_tipHeightQuantity = GetNetworkInformationResponseBody200Node_tipHeight{getNetworkInformationResponseBody200Node_tipHeightQuantity = getNetworkInformationResponseBody200Node_tipHeightQuantity}
-- | Defines the object schema located at @paths.\/network\/information.GET.responses.200.content.application\/json.schema.properties.sync_progress@ in the specification.
-- 
-- Estimated synchronization progress of the node with the underlying network. Note that this may
-- change quite arbitrarily as the node may switch to shorter or longer chain forks.
data GetNetworkInformationResponseBody200Sync_progress = GetNetworkInformationResponseBody200Sync_progress {
  -- | progress: \<span style=\"position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;\">
  -- \<strong>if:\<\/strong> status == syncing
  -- \<\/span>\<br\/>
  getNetworkInformationResponseBody200Sync_progressProgress :: (GHC.Maybe.Maybe GetNetworkInformationResponseBody200Sync_progressProgress)
  -- | status
  , getNetworkInformationResponseBody200Sync_progressStatus :: GetNetworkInformationResponseBody200Sync_progressStatus
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetNetworkInformationResponseBody200Sync_progress
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("progress" Data.Aeson.Types.ToJSON..=)) (getNetworkInformationResponseBody200Sync_progressProgress obj) : ["status" Data.Aeson.Types.ToJSON..= getNetworkInformationResponseBody200Sync_progressStatus obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("progress" Data.Aeson.Types.ToJSON..=)) (getNetworkInformationResponseBody200Sync_progressProgress obj) : ["status" Data.Aeson.Types.ToJSON..= getNetworkInformationResponseBody200Sync_progressStatus obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetNetworkInformationResponseBody200Sync_progress
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetNetworkInformationResponseBody200Sync_progress" (\obj -> (GHC.Base.pure GetNetworkInformationResponseBody200Sync_progress GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "progress")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))
-- | Create a new 'GetNetworkInformationResponseBody200Sync_progress' with all required fields.
mkGetNetworkInformationResponseBody200Sync_progress :: GetNetworkInformationResponseBody200Sync_progressStatus -- ^ 'getNetworkInformationResponseBody200Sync_progressStatus'
  -> GetNetworkInformationResponseBody200Sync_progress
mkGetNetworkInformationResponseBody200Sync_progress getNetworkInformationResponseBody200Sync_progressStatus = GetNetworkInformationResponseBody200Sync_progress{getNetworkInformationResponseBody200Sync_progressProgress = GHC.Maybe.Nothing,
                                                                                                                                                                getNetworkInformationResponseBody200Sync_progressStatus = getNetworkInformationResponseBody200Sync_progressStatus}
-- | Defines the object schema located at @paths.\/network\/information.GET.responses.200.content.application\/json.schema.properties.sync_progress.properties.progress@ in the specification.
-- 
-- \<span style=\"position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;\">
-- \<strong>if:\<\/strong> status == syncing
-- \<\/span>\<br\/>
data GetNetworkInformationResponseBody200Sync_progressProgress = GetNetworkInformationResponseBody200Sync_progressProgress {
  -- | quantity
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  -- * Minimum  of 0.0
  getNetworkInformationResponseBody200Sync_progressProgressQuantity :: GHC.Types.Double
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetNetworkInformationResponseBody200Sync_progressProgress
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= getNetworkInformationResponseBody200Sync_progressProgressQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "percent"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["quantity" Data.Aeson.Types.ToJSON..= getNetworkInformationResponseBody200Sync_progressProgressQuantity obj] : ["unit" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "percent"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetNetworkInformationResponseBody200Sync_progressProgress
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetNetworkInformationResponseBody200Sync_progressProgress" (\obj -> GHC.Base.pure GetNetworkInformationResponseBody200Sync_progressProgress GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'GetNetworkInformationResponseBody200Sync_progressProgress' with all required fields.
mkGetNetworkInformationResponseBody200Sync_progressProgress :: GHC.Types.Double -- ^ 'getNetworkInformationResponseBody200Sync_progressProgressQuantity'
  -> GetNetworkInformationResponseBody200Sync_progressProgress
mkGetNetworkInformationResponseBody200Sync_progressProgress getNetworkInformationResponseBody200Sync_progressProgressQuantity = GetNetworkInformationResponseBody200Sync_progressProgress{getNetworkInformationResponseBody200Sync_progressProgressQuantity = getNetworkInformationResponseBody200Sync_progressProgressQuantity}
-- | Defines the enum schema located at @paths.\/network\/information.GET.responses.200.content.application\/json.schema.properties.sync_progress.properties.status@ in the specification.
-- 
-- 
data GetNetworkInformationResponseBody200Sync_progressStatus =
   GetNetworkInformationResponseBody200Sync_progressStatusOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetNetworkInformationResponseBody200Sync_progressStatusTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetNetworkInformationResponseBody200Sync_progressStatusEnumReady -- ^ Represents the JSON value @"ready"@
  | GetNetworkInformationResponseBody200Sync_progressStatusEnumSyncing -- ^ Represents the JSON value @"syncing"@
  | GetNetworkInformationResponseBody200Sync_progressStatusEnumNot_responding -- ^ Represents the JSON value @"not_responding"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetNetworkInformationResponseBody200Sync_progressStatus
    where toJSON (GetNetworkInformationResponseBody200Sync_progressStatusOther val) = val
          toJSON (GetNetworkInformationResponseBody200Sync_progressStatusTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetNetworkInformationResponseBody200Sync_progressStatusEnumReady) = "ready"
          toJSON (GetNetworkInformationResponseBody200Sync_progressStatusEnumSyncing) = "syncing"
          toJSON (GetNetworkInformationResponseBody200Sync_progressStatusEnumNot_responding) = "not_responding"
instance Data.Aeson.Types.FromJSON.FromJSON GetNetworkInformationResponseBody200Sync_progressStatus
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "ready" -> GetNetworkInformationResponseBody200Sync_progressStatusEnumReady
                                            | val GHC.Classes.== "syncing" -> GetNetworkInformationResponseBody200Sync_progressStatusEnumSyncing
                                            | val GHC.Classes.== "not_responding" -> GetNetworkInformationResponseBody200Sync_progressStatusEnumNot_responding
                                            | GHC.Base.otherwise -> GetNetworkInformationResponseBody200Sync_progressStatusOther val)
-- | Defines the enum schema located at @paths.\/network\/information.GET.responses.200.content.application\/json.schema.properties.wallet_mode@ in the specification.
-- 
-- 
data GetNetworkInformationResponseBody200Wallet_mode =
   GetNetworkInformationResponseBody200Wallet_modeOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetNetworkInformationResponseBody200Wallet_modeTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetNetworkInformationResponseBody200Wallet_modeEnumLight -- ^ Represents the JSON value @"light"@
  | GetNetworkInformationResponseBody200Wallet_modeEnumNode -- ^ Represents the JSON value @"node"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetNetworkInformationResponseBody200Wallet_mode
    where toJSON (GetNetworkInformationResponseBody200Wallet_modeOther val) = val
          toJSON (GetNetworkInformationResponseBody200Wallet_modeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetNetworkInformationResponseBody200Wallet_modeEnumLight) = "light"
          toJSON (GetNetworkInformationResponseBody200Wallet_modeEnumNode) = "node"
instance Data.Aeson.Types.FromJSON.FromJSON GetNetworkInformationResponseBody200Wallet_mode
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "light" -> GetNetworkInformationResponseBody200Wallet_modeEnumLight
                                            | val GHC.Classes.== "node" -> GetNetworkInformationResponseBody200Wallet_modeEnumNode
                                            | GHC.Base.otherwise -> GetNetworkInformationResponseBody200Wallet_modeOther val)
-- | Defines the object schema located at @paths.\/network\/information.GET.responses.406.content.application\/json.schema@ in the specification.
-- 
-- 
data GetNetworkInformationResponseBody406 = GetNetworkInformationResponseBody406 {
  -- | message: May occur when providing an invalid \'Accept\' header.
  getNetworkInformationResponseBody406Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetNetworkInformationResponseBody406
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= getNetworkInformationResponseBody406Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "not_acceptable"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= getNetworkInformationResponseBody406Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "not_acceptable"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetNetworkInformationResponseBody406
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetNetworkInformationResponseBody406" (\obj -> GHC.Base.pure GetNetworkInformationResponseBody406 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'GetNetworkInformationResponseBody406' with all required fields.
mkGetNetworkInformationResponseBody406 :: Data.Text.Internal.Text -- ^ 'getNetworkInformationResponseBody406Message'
  -> GetNetworkInformationResponseBody406
mkGetNetworkInformationResponseBody406 getNetworkInformationResponseBody406Message = GetNetworkInformationResponseBody406{getNetworkInformationResponseBody406Message = getNetworkInformationResponseBody406Message}
-- | > GET /network/information
-- 
-- The same as 'getNetworkInformation' but accepts an explicit configuration.
getNetworkInformationWithConfiguration :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> m (Network.HTTP.Client.Types.Response GetNetworkInformationResponse) -- ^ Monadic computation which returns the result of the operation
getNetworkInformationWithConfiguration config = GHC.Base.fmap (\response_3 -> GHC.Base.fmap (Data.Either.either GetNetworkInformationResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetNetworkInformationResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                     GetNetworkInformationResponseBody200)
                                                                                                                                                                                                | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 406) (Network.HTTP.Client.Types.responseStatus response) -> GetNetworkInformationResponse406 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                     GetNetworkInformationResponseBody406)
                                                                                                                                                                                                | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_3) response_3) (Wallet.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") "/network/information" GHC.Base.mempty)
-- | > GET /network/information
-- 
-- The same as 'getNetworkInformation' but returns the raw 'Data.ByteString.ByteString'.
getNetworkInformationRaw :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
getNetworkInformationRaw = GHC.Base.id (Wallet.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") "/network/information" GHC.Base.mempty)
-- | > GET /network/information
-- 
-- The same as 'getNetworkInformation' but accepts an explicit configuration and returns the raw 'Data.ByteString.ByteString'.
getNetworkInformationWithConfigurationRaw :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
getNetworkInformationWithConfigurationRaw config = GHC.Base.id (Wallet.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") "/network/information" GHC.Base.mempty)
