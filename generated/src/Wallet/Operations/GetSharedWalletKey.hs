-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getSharedWalletKey
module Wallet.Operations.GetSharedWalletKey where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Wallet.Common
import Wallet.Types

-- | > GET /shared-wallets/{walletId}/keys/{role}/{index}
-- 
-- \<p align=\"right\">status: \<strong>stable\<\/strong>\<\/p>
-- Return a public key for a given role and derivation index for
-- a shared wallet.
-- 
-- To get a hash of the public key, instead of the public key,
-- use query parameter \`hash=true\`.
-- 
-- \<b>Note:\<\/b> Only \`Soft\` indexes are supported by this endpoint.
getSharedWalletKey :: forall m . Wallet.Common.MonadHTTP m => GetSharedWalletKeyParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response GetSharedWalletKeyResponse) -- ^ Monadic computation which returns the result of the operation
getSharedWalletKey parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetSharedWalletKeyResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetSharedWalletKeyResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                               Data.Text.Internal.Text)
                                                                                                                                                                             | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetSharedWalletKeyResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                               GetSharedWalletKeyResponseBody400)
                                                                                                                                                                             | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetSharedWalletKeyResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                               GetSharedWalletKeyResponseBody404)
                                                                                                                                                                             | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 406) (Network.HTTP.Client.Types.responseStatus response) -> GetSharedWalletKeyResponse406 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                               GetSharedWalletKeyResponseBody406)
                                                                                                                                                                             | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Wallet.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") ("/shared-wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (getSharedWalletKeyParametersPathWalletId parameters))) GHC.Base.<> ("/keys/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (getSharedWalletKeyParametersPathRole parameters))) GHC.Base.<> ("/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (getSharedWalletKeyParametersPathIndex parameters))) GHC.Base.<> "")))))) [Wallet.Common.QueryParameter (Data.Text.pack "hash") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSharedWalletKeyParametersQueryHash parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/keys\/{role}\/{index}.GET.parameters@ in the specification.
-- 
-- 
data GetSharedWalletKeyParameters = GetSharedWalletKeyParameters {
  -- | pathIndex: Represents the parameter named \'index\'
  -- 
  -- An individual segment within a derivation path.
  -- 
  -- The \`H\` suffix indicates a _Hardened_ child private key, which
  -- means that children of this key cannot be derived from the public
  -- key. Indices without a \`H\` suffix are called _Soft_.
  getSharedWalletKeyParametersPathIndex :: Data.Text.Internal.Text
  -- | pathRole: Represents the parameter named \'role\'
  , getSharedWalletKeyParametersPathRole :: GetSharedWalletKeyParametersPathRole
  -- | pathWalletId: Represents the parameter named \'walletId\'
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 40
  -- * Minimum length of 40
  , getSharedWalletKeyParametersPathWalletId :: Data.Text.Internal.Text
  -- | queryHash: Represents the parameter named \'hash\'
  -- 
  -- Whether to return the key hash instead of the key.
  , getSharedWalletKeyParametersQueryHash :: (GHC.Maybe.Maybe GHC.Types.Bool)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletKeyParameters
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["pathIndex" Data.Aeson.Types.ToJSON..= getSharedWalletKeyParametersPathIndex obj] : ["pathRole" Data.Aeson.Types.ToJSON..= getSharedWalletKeyParametersPathRole obj] : ["pathWalletId" Data.Aeson.Types.ToJSON..= getSharedWalletKeyParametersPathWalletId obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryHash" Data.Aeson.Types.ToJSON..=)) (getSharedWalletKeyParametersQueryHash obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["pathIndex" Data.Aeson.Types.ToJSON..= getSharedWalletKeyParametersPathIndex obj] : ["pathRole" Data.Aeson.Types.ToJSON..= getSharedWalletKeyParametersPathRole obj] : ["pathWalletId" Data.Aeson.Types.ToJSON..= getSharedWalletKeyParametersPathWalletId obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryHash" Data.Aeson.Types.ToJSON..=)) (getSharedWalletKeyParametersQueryHash obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletKeyParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedWalletKeyParameters" (\obj -> (((GHC.Base.pure GetSharedWalletKeyParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathIndex")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathRole")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathWalletId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryHash"))
-- | Create a new 'GetSharedWalletKeyParameters' with all required fields.
mkGetSharedWalletKeyParameters :: Data.Text.Internal.Text -- ^ 'getSharedWalletKeyParametersPathIndex'
  -> GetSharedWalletKeyParametersPathRole -- ^ 'getSharedWalletKeyParametersPathRole'
  -> Data.Text.Internal.Text -- ^ 'getSharedWalletKeyParametersPathWalletId'
  -> GetSharedWalletKeyParameters
mkGetSharedWalletKeyParameters getSharedWalletKeyParametersPathIndex getSharedWalletKeyParametersPathRole getSharedWalletKeyParametersPathWalletId = GetSharedWalletKeyParameters{getSharedWalletKeyParametersPathIndex = getSharedWalletKeyParametersPathIndex,
                                                                                                                                                                                  getSharedWalletKeyParametersPathRole = getSharedWalletKeyParametersPathRole,
                                                                                                                                                                                  getSharedWalletKeyParametersPathWalletId = getSharedWalletKeyParametersPathWalletId,
                                                                                                                                                                                  getSharedWalletKeyParametersQueryHash = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/shared-wallets\/{walletId}\/keys\/{role}\/{index}.GET.parameters.properties.pathRole@ in the specification.
-- 
-- Represents the parameter named \'role\'
data GetSharedWalletKeyParametersPathRole =
   GetSharedWalletKeyParametersPathRoleOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetSharedWalletKeyParametersPathRoleTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetSharedWalletKeyParametersPathRoleEnumUtxo_external -- ^ Represents the JSON value @"utxo_external"@
  | GetSharedWalletKeyParametersPathRoleEnumUtxo_internal -- ^ Represents the JSON value @"utxo_internal"@
  | GetSharedWalletKeyParametersPathRoleEnumMutable_account -- ^ Represents the JSON value @"mutable_account"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletKeyParametersPathRole
    where toJSON (GetSharedWalletKeyParametersPathRoleOther val) = val
          toJSON (GetSharedWalletKeyParametersPathRoleTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetSharedWalletKeyParametersPathRoleEnumUtxo_external) = "utxo_external"
          toJSON (GetSharedWalletKeyParametersPathRoleEnumUtxo_internal) = "utxo_internal"
          toJSON (GetSharedWalletKeyParametersPathRoleEnumMutable_account) = "mutable_account"
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletKeyParametersPathRole
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "utxo_external" -> GetSharedWalletKeyParametersPathRoleEnumUtxo_external
                                            | val GHC.Classes.== "utxo_internal" -> GetSharedWalletKeyParametersPathRoleEnumUtxo_internal
                                            | val GHC.Classes.== "mutable_account" -> GetSharedWalletKeyParametersPathRoleEnumMutable_account
                                            | GHC.Base.otherwise -> GetSharedWalletKeyParametersPathRoleOther val)
-- | Represents a response of the operation 'getSharedWalletKey'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetSharedWalletKeyResponseError' is used.
data GetSharedWalletKeyResponse =
   GetSharedWalletKeyResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetSharedWalletKeyResponse200 Data.Text.Internal.Text -- ^ Ok
  | GetSharedWalletKeyResponse400 GetSharedWalletKeyResponseBody400 -- ^ Bad Request
  | GetSharedWalletKeyResponse404 GetSharedWalletKeyResponseBody404 -- ^ Not Found
  | GetSharedWalletKeyResponse406 GetSharedWalletKeyResponseBody406 -- ^ Not Acceptable
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/keys\/{role}\/{index}.GET.responses.400.content.application\/json.schema@ in the specification.
-- 
-- 
data GetSharedWalletKeyResponseBody400 = GetSharedWalletKeyResponseBody400 {
  -- | message: May occur when a request is not well-formed; that is, it fails to parse
  -- successfully. This could be the case when some required parameters
  -- are missing or, when malformed values are provided.
  getSharedWalletKeyResponseBody400Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletKeyResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= getSharedWalletKeyResponseBody400Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "bad_request"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= getSharedWalletKeyResponseBody400Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "bad_request"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletKeyResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedWalletKeyResponseBody400" (\obj -> GHC.Base.pure GetSharedWalletKeyResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'GetSharedWalletKeyResponseBody400' with all required fields.
mkGetSharedWalletKeyResponseBody400 :: Data.Text.Internal.Text -- ^ 'getSharedWalletKeyResponseBody400Message'
  -> GetSharedWalletKeyResponseBody400
mkGetSharedWalletKeyResponseBody400 getSharedWalletKeyResponseBody400Message = GetSharedWalletKeyResponseBody400{getSharedWalletKeyResponseBody400Message = getSharedWalletKeyResponseBody400Message}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/keys\/{role}\/{index}.GET.responses.404.content.application\/json.schema@ in the specification.
-- 
-- 
data GetSharedWalletKeyResponseBody404 = GetSharedWalletKeyResponseBody404 {
  -- | code: A specific error code for this error, more precise than HTTP ones.
  getSharedWalletKeyResponseBody404Code :: Data.Text.Internal.Text
  -- | message: A descriptive error message.
  , getSharedWalletKeyResponseBody404Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletKeyResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["code" Data.Aeson.Types.ToJSON..= getSharedWalletKeyResponseBody404Code obj] : ["message" Data.Aeson.Types.ToJSON..= getSharedWalletKeyResponseBody404Message obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["code" Data.Aeson.Types.ToJSON..= getSharedWalletKeyResponseBody404Code obj] : ["message" Data.Aeson.Types.ToJSON..= getSharedWalletKeyResponseBody404Message obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletKeyResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedWalletKeyResponseBody404" (\obj -> (GHC.Base.pure GetSharedWalletKeyResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'GetSharedWalletKeyResponseBody404' with all required fields.
mkGetSharedWalletKeyResponseBody404 :: Data.Text.Internal.Text -- ^ 'getSharedWalletKeyResponseBody404Code'
  -> Data.Text.Internal.Text -- ^ 'getSharedWalletKeyResponseBody404Message'
  -> GetSharedWalletKeyResponseBody404
mkGetSharedWalletKeyResponseBody404 getSharedWalletKeyResponseBody404Code getSharedWalletKeyResponseBody404Message = GetSharedWalletKeyResponseBody404{getSharedWalletKeyResponseBody404Code = getSharedWalletKeyResponseBody404Code,
                                                                                                                                                       getSharedWalletKeyResponseBody404Message = getSharedWalletKeyResponseBody404Message}
-- | Defines the object schema located at @paths.\/shared-wallets\/{walletId}\/keys\/{role}\/{index}.GET.responses.406.content.application\/json.schema@ in the specification.
-- 
-- 
data GetSharedWalletKeyResponseBody406 = GetSharedWalletKeyResponseBody406 {
  -- | message: May occur when providing an invalid \'Accept\' header.
  getSharedWalletKeyResponseBody406Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSharedWalletKeyResponseBody406
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= getSharedWalletKeyResponseBody406Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "not_acceptable"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= getSharedWalletKeyResponseBody406Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "not_acceptable"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetSharedWalletKeyResponseBody406
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSharedWalletKeyResponseBody406" (\obj -> GHC.Base.pure GetSharedWalletKeyResponseBody406 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'GetSharedWalletKeyResponseBody406' with all required fields.
mkGetSharedWalletKeyResponseBody406 :: Data.Text.Internal.Text -- ^ 'getSharedWalletKeyResponseBody406Message'
  -> GetSharedWalletKeyResponseBody406
mkGetSharedWalletKeyResponseBody406 getSharedWalletKeyResponseBody406Message = GetSharedWalletKeyResponseBody406{getSharedWalletKeyResponseBody406Message = getSharedWalletKeyResponseBody406Message}
-- | > GET /shared-wallets/{walletId}/keys/{role}/{index}
-- 
-- The same as 'getSharedWalletKey' but accepts an explicit configuration.
getSharedWalletKeyWithConfiguration :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> GetSharedWalletKeyParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response GetSharedWalletKeyResponse) -- ^ Monadic computation which returns the result of the operation
getSharedWalletKeyWithConfiguration config
                                    parameters = GHC.Base.fmap (\response_5 -> GHC.Base.fmap (Data.Either.either GetSharedWalletKeyResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetSharedWalletKeyResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                Data.Text.Internal.Text)
                                                                                                                                                                                              | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> GetSharedWalletKeyResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                GetSharedWalletKeyResponseBody400)
                                                                                                                                                                                              | (\status_8 -> Network.HTTP.Types.Status.statusCode status_8 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> GetSharedWalletKeyResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                GetSharedWalletKeyResponseBody404)
                                                                                                                                                                                              | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 406) (Network.HTTP.Client.Types.responseStatus response) -> GetSharedWalletKeyResponse406 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                GetSharedWalletKeyResponseBody406)
                                                                                                                                                                                              | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_5) response_5) (Wallet.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") ("/shared-wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (getSharedWalletKeyParametersPathWalletId parameters))) GHC.Base.<> ("/keys/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (getSharedWalletKeyParametersPathRole parameters))) GHC.Base.<> ("/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (getSharedWalletKeyParametersPathIndex parameters))) GHC.Base.<> "")))))) [Wallet.Common.QueryParameter (Data.Text.pack "hash") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSharedWalletKeyParametersQueryHash parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /shared-wallets/{walletId}/keys/{role}/{index}
-- 
-- The same as 'getSharedWalletKey' but returns the raw 'Data.ByteString.ByteString'.
getSharedWalletKeyRaw :: forall m . Wallet.Common.MonadHTTP m => GetSharedWalletKeyParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
getSharedWalletKeyRaw parameters = GHC.Base.id (Wallet.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") ("/shared-wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (getSharedWalletKeyParametersPathWalletId parameters))) GHC.Base.<> ("/keys/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (getSharedWalletKeyParametersPathRole parameters))) GHC.Base.<> ("/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (getSharedWalletKeyParametersPathIndex parameters))) GHC.Base.<> "")))))) [Wallet.Common.QueryParameter (Data.Text.pack "hash") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSharedWalletKeyParametersQueryHash parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /shared-wallets/{walletId}/keys/{role}/{index}
-- 
-- The same as 'getSharedWalletKey' but accepts an explicit configuration and returns the raw 'Data.ByteString.ByteString'.
getSharedWalletKeyWithConfigurationRaw :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> GetSharedWalletKeyParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
getSharedWalletKeyWithConfigurationRaw config
                                       parameters = GHC.Base.id (Wallet.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") ("/shared-wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (getSharedWalletKeyParametersPathWalletId parameters))) GHC.Base.<> ("/keys/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (getSharedWalletKeyParametersPathRole parameters))) GHC.Base.<> ("/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (getSharedWalletKeyParametersPathIndex parameters))) GHC.Base.<> "")))))) [Wallet.Common.QueryParameter (Data.Text.pack "hash") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSharedWalletKeyParametersQueryHash parameters) (Data.Text.pack "form") GHC.Types.False])
