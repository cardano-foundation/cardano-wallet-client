-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation listByronAddresses
module Wallet.Operations.ListByronAddresses where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Wallet.Common
import Wallet.Types

-- | > GET /byron-wallets/{walletId}/addresses
-- 
-- \<p align=\"right\">status: \<strong>stable\<\/strong>\<\/p>
-- 
-- Return a list of known addresses, ordered from newest to oldest for sequential wallets.
-- Arbitrarily ordered for random wallets.
listByronAddresses :: forall m . Wallet.Common.MonadHTTP m => ListByronAddressesParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response ListByronAddressesResponse) -- ^ Monadic computation which returns the result of the operation
listByronAddresses parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either ListByronAddressesResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> ListByronAddressesResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                               ([ListByronAddressesResponseBody200]))
                                                                                                                                                                             | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> ListByronAddressesResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                               ListByronAddressesResponseBody400)
                                                                                                                                                                             | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> ListByronAddressesResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                               ListByronAddressesResponseBody404)
                                                                                                                                                                             | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 406) (Network.HTTP.Client.Types.responseStatus response) -> ListByronAddressesResponse406 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                               ListByronAddressesResponseBody406)
                                                                                                                                                                             | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Wallet.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") ("/byron-wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (listByronAddressesParametersPathWalletId parameters))) GHC.Base.<> "/addresses")) [Wallet.Common.QueryParameter (Data.Text.pack "state") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> listByronAddressesParametersQueryState parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/byron-wallets\/{walletId}\/addresses.GET.parameters@ in the specification.
-- 
-- 
data ListByronAddressesParameters = ListByronAddressesParameters {
  -- | pathWalletId: Represents the parameter named \'walletId\'
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 40
  -- * Minimum length of 40
  listByronAddressesParametersPathWalletId :: Data.Text.Internal.Text
  -- | queryState: Represents the parameter named \'state\'
  -- 
  -- An optional filter on the address state.
  , listByronAddressesParametersQueryState :: (GHC.Maybe.Maybe ListByronAddressesParametersQueryState)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListByronAddressesParameters
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["pathWalletId" Data.Aeson.Types.ToJSON..= listByronAddressesParametersPathWalletId obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryState" Data.Aeson.Types.ToJSON..=)) (listByronAddressesParametersQueryState obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["pathWalletId" Data.Aeson.Types.ToJSON..= listByronAddressesParametersPathWalletId obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryState" Data.Aeson.Types.ToJSON..=)) (listByronAddressesParametersQueryState obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListByronAddressesParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListByronAddressesParameters" (\obj -> (GHC.Base.pure ListByronAddressesParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathWalletId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryState"))
-- | Create a new 'ListByronAddressesParameters' with all required fields.
mkListByronAddressesParameters :: Data.Text.Internal.Text -- ^ 'listByronAddressesParametersPathWalletId'
  -> ListByronAddressesParameters
mkListByronAddressesParameters listByronAddressesParametersPathWalletId = ListByronAddressesParameters{listByronAddressesParametersPathWalletId = listByronAddressesParametersPathWalletId,
                                                                                                       listByronAddressesParametersQueryState = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/byron-wallets\/{walletId}\/addresses.GET.parameters.properties.queryState@ in the specification.
-- 
-- Represents the parameter named \'state\'
-- 
-- An optional filter on the address state.
data ListByronAddressesParametersQueryState =
   ListByronAddressesParametersQueryStateOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | ListByronAddressesParametersQueryStateTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | ListByronAddressesParametersQueryStateEnumUsed -- ^ Represents the JSON value @"used"@
  | ListByronAddressesParametersQueryStateEnumUnused -- ^ Represents the JSON value @"unused"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListByronAddressesParametersQueryState
    where toJSON (ListByronAddressesParametersQueryStateOther val) = val
          toJSON (ListByronAddressesParametersQueryStateTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (ListByronAddressesParametersQueryStateEnumUsed) = "used"
          toJSON (ListByronAddressesParametersQueryStateEnumUnused) = "unused"
instance Data.Aeson.Types.FromJSON.FromJSON ListByronAddressesParametersQueryState
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "used" -> ListByronAddressesParametersQueryStateEnumUsed
                                            | val GHC.Classes.== "unused" -> ListByronAddressesParametersQueryStateEnumUnused
                                            | GHC.Base.otherwise -> ListByronAddressesParametersQueryStateOther val)
-- | Represents a response of the operation 'listByronAddresses'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'ListByronAddressesResponseError' is used.
data ListByronAddressesResponse =
   ListByronAddressesResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | ListByronAddressesResponse200 ([ListByronAddressesResponseBody200]) -- ^ Ok
  | ListByronAddressesResponse400 ListByronAddressesResponseBody400 -- ^ Bad Request
  | ListByronAddressesResponse404 ListByronAddressesResponseBody404 -- ^ Not Found
  | ListByronAddressesResponse406 ListByronAddressesResponseBody406 -- ^ Not Acceptable
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/byron-wallets\/{walletId}\/addresses.GET.responses.200.content.application\/json.schema.items@ in the specification.
-- 
-- 
data ListByronAddressesResponseBody200 = ListByronAddressesResponseBody200 {
  -- | derivation_path: A path for deriving a child key from a parent key.
  -- 
  -- Constraints:
  -- 
  -- * Must have a minimum of 1 items
  listByronAddressesResponseBody200Derivation_path :: ([Data.Text.Internal.Text])
  -- | id: A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
  -- which represents an address on the Cardano blockchain.
  -- Sequences in Base58 encoding are expected to be legacy Byron addresses,
  -- whereas sequences in Bech32 encoding correspond to current Shelley addresses.
  -- 
  -- For more details, see
  -- [CIP-0019 — Cardano addresses](https:\/\/github.com\/cardano-foundation\/CIPs\/tree\/master\/CIP-0019)
  -- .
  , listByronAddressesResponseBody200Id :: Data.Text.Internal.Text
  -- | state
  , listByronAddressesResponseBody200State :: ListByronAddressesResponseBody200State
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListByronAddressesResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["derivation_path" Data.Aeson.Types.ToJSON..= listByronAddressesResponseBody200Derivation_path obj] : ["id" Data.Aeson.Types.ToJSON..= listByronAddressesResponseBody200Id obj] : ["state" Data.Aeson.Types.ToJSON..= listByronAddressesResponseBody200State obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["derivation_path" Data.Aeson.Types.ToJSON..= listByronAddressesResponseBody200Derivation_path obj] : ["id" Data.Aeson.Types.ToJSON..= listByronAddressesResponseBody200Id obj] : ["state" Data.Aeson.Types.ToJSON..= listByronAddressesResponseBody200State obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListByronAddressesResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListByronAddressesResponseBody200" (\obj -> ((GHC.Base.pure ListByronAddressesResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "derivation_path")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "state"))
-- | Create a new 'ListByronAddressesResponseBody200' with all required fields.
mkListByronAddressesResponseBody200 :: [Data.Text.Internal.Text] -- ^ 'listByronAddressesResponseBody200Derivation_path'
  -> Data.Text.Internal.Text -- ^ 'listByronAddressesResponseBody200Id'
  -> ListByronAddressesResponseBody200State -- ^ 'listByronAddressesResponseBody200State'
  -> ListByronAddressesResponseBody200
mkListByronAddressesResponseBody200 listByronAddressesResponseBody200Derivation_path listByronAddressesResponseBody200Id listByronAddressesResponseBody200State = ListByronAddressesResponseBody200{listByronAddressesResponseBody200Derivation_path = listByronAddressesResponseBody200Derivation_path,
                                                                                                                                                                                                    listByronAddressesResponseBody200Id = listByronAddressesResponseBody200Id,
                                                                                                                                                                                                    listByronAddressesResponseBody200State = listByronAddressesResponseBody200State}
-- | Defines the enum schema located at @paths.\/byron-wallets\/{walletId}\/addresses.GET.responses.200.content.application\/json.schema.items.properties.state@ in the specification.
-- 
-- 
data ListByronAddressesResponseBody200State =
   ListByronAddressesResponseBody200StateOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | ListByronAddressesResponseBody200StateTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | ListByronAddressesResponseBody200StateEnumUsed -- ^ Represents the JSON value @"used"@
  | ListByronAddressesResponseBody200StateEnumUnused -- ^ Represents the JSON value @"unused"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListByronAddressesResponseBody200State
    where toJSON (ListByronAddressesResponseBody200StateOther val) = val
          toJSON (ListByronAddressesResponseBody200StateTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (ListByronAddressesResponseBody200StateEnumUsed) = "used"
          toJSON (ListByronAddressesResponseBody200StateEnumUnused) = "unused"
instance Data.Aeson.Types.FromJSON.FromJSON ListByronAddressesResponseBody200State
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "used" -> ListByronAddressesResponseBody200StateEnumUsed
                                            | val GHC.Classes.== "unused" -> ListByronAddressesResponseBody200StateEnumUnused
                                            | GHC.Base.otherwise -> ListByronAddressesResponseBody200StateOther val)
-- | Defines the object schema located at @paths.\/byron-wallets\/{walletId}\/addresses.GET.responses.400.content.application\/json.schema@ in the specification.
-- 
-- 
data ListByronAddressesResponseBody400 = ListByronAddressesResponseBody400 {
  -- | message: May occur when a request is not well-formed; that is, it fails to parse
  -- successfully. This could be the case when some required parameters
  -- are missing or, when malformed values are provided.
  listByronAddressesResponseBody400Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListByronAddressesResponseBody400
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= listByronAddressesResponseBody400Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "bad_request"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= listByronAddressesResponseBody400Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "bad_request"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListByronAddressesResponseBody400
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListByronAddressesResponseBody400" (\obj -> GHC.Base.pure ListByronAddressesResponseBody400 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'ListByronAddressesResponseBody400' with all required fields.
mkListByronAddressesResponseBody400 :: Data.Text.Internal.Text -- ^ 'listByronAddressesResponseBody400Message'
  -> ListByronAddressesResponseBody400
mkListByronAddressesResponseBody400 listByronAddressesResponseBody400Message = ListByronAddressesResponseBody400{listByronAddressesResponseBody400Message = listByronAddressesResponseBody400Message}
-- | Defines the object schema located at @paths.\/byron-wallets\/{walletId}\/addresses.GET.responses.404.content.application\/json.schema@ in the specification.
-- 
-- 
data ListByronAddressesResponseBody404 = ListByronAddressesResponseBody404 {
  -- | message: May occur when a given walletId does not match with any known
  -- wallets (because it has been deleted, or has never existed).
  listByronAddressesResponseBody404Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListByronAddressesResponseBody404
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= listByronAddressesResponseBody404Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "no_such_wallet"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= listByronAddressesResponseBody404Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "no_such_wallet"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListByronAddressesResponseBody404
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListByronAddressesResponseBody404" (\obj -> GHC.Base.pure ListByronAddressesResponseBody404 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'ListByronAddressesResponseBody404' with all required fields.
mkListByronAddressesResponseBody404 :: Data.Text.Internal.Text -- ^ 'listByronAddressesResponseBody404Message'
  -> ListByronAddressesResponseBody404
mkListByronAddressesResponseBody404 listByronAddressesResponseBody404Message = ListByronAddressesResponseBody404{listByronAddressesResponseBody404Message = listByronAddressesResponseBody404Message}
-- | Defines the object schema located at @paths.\/byron-wallets\/{walletId}\/addresses.GET.responses.406.content.application\/json.schema@ in the specification.
-- 
-- 
data ListByronAddressesResponseBody406 = ListByronAddressesResponseBody406 {
  -- | message: May occur when providing an invalid \'Accept\' header.
  listByronAddressesResponseBody406Message :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ListByronAddressesResponseBody406
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= listByronAddressesResponseBody406Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "not_acceptable"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["message" Data.Aeson.Types.ToJSON..= listByronAddressesResponseBody406Message obj] : ["code" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "not_acceptable"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ListByronAddressesResponseBody406
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ListByronAddressesResponseBody406" (\obj -> GHC.Base.pure ListByronAddressesResponseBody406 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'ListByronAddressesResponseBody406' with all required fields.
mkListByronAddressesResponseBody406 :: Data.Text.Internal.Text -- ^ 'listByronAddressesResponseBody406Message'
  -> ListByronAddressesResponseBody406
mkListByronAddressesResponseBody406 listByronAddressesResponseBody406Message = ListByronAddressesResponseBody406{listByronAddressesResponseBody406Message = listByronAddressesResponseBody406Message}
-- | > GET /byron-wallets/{walletId}/addresses
-- 
-- The same as 'listByronAddresses' but accepts an explicit configuration.
listByronAddressesWithConfiguration :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> ListByronAddressesParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response ListByronAddressesResponse) -- ^ Monadic computation which returns the result of the operation
listByronAddressesWithConfiguration config
                                    parameters = GHC.Base.fmap (\response_5 -> GHC.Base.fmap (Data.Either.either ListByronAddressesResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> ListByronAddressesResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                ([ListByronAddressesResponseBody200]))
                                                                                                                                                                                              | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> ListByronAddressesResponse400 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                ListByronAddressesResponseBody400)
                                                                                                                                                                                              | (\status_8 -> Network.HTTP.Types.Status.statusCode status_8 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> ListByronAddressesResponse404 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                ListByronAddressesResponseBody404)
                                                                                                                                                                                              | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 406) (Network.HTTP.Client.Types.responseStatus response) -> ListByronAddressesResponse406 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                ListByronAddressesResponseBody406)
                                                                                                                                                                                              | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_5) response_5) (Wallet.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") ("/byron-wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (listByronAddressesParametersPathWalletId parameters))) GHC.Base.<> "/addresses")) [Wallet.Common.QueryParameter (Data.Text.pack "state") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> listByronAddressesParametersQueryState parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /byron-wallets/{walletId}/addresses
-- 
-- The same as 'listByronAddresses' but returns the raw 'Data.ByteString.ByteString'.
listByronAddressesRaw :: forall m . Wallet.Common.MonadHTTP m => ListByronAddressesParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> Wallet.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
listByronAddressesRaw parameters = GHC.Base.id (Wallet.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") ("/byron-wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (listByronAddressesParametersPathWalletId parameters))) GHC.Base.<> "/addresses")) [Wallet.Common.QueryParameter (Data.Text.pack "state") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> listByronAddressesParametersQueryState parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /byron-wallets/{walletId}/addresses
-- 
-- The same as 'listByronAddresses' but accepts an explicit configuration and returns the raw 'Data.ByteString.ByteString'.
listByronAddressesWithConfigurationRaw :: forall m . Wallet.Common.MonadHTTP m => Wallet.Common.Configuration -- ^ The configuration to use in the request
  -> ListByronAddressesParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.Type.ByteString) -- ^ Monadic computation which returns the result of the operation
listByronAddressesWithConfigurationRaw config
                                       parameters = GHC.Base.id (Wallet.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") ("/byron-wallets/" GHC.Base.<> (Wallet.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Wallet.Common.textToByte GHC.Base.$ Wallet.Common.stringifyModel (listByronAddressesParametersPathWalletId parameters))) GHC.Base.<> "/addresses")) [Wallet.Common.QueryParameter (Data.Text.pack "state") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> listByronAddressesParametersQueryState parameters) (Data.Text.pack "form") GHC.Types.False])
